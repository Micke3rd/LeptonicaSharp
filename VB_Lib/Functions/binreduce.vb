Imports System.Runtime.InteropServices
Imports LeptonicaSharp.Enumerations
Partial Public Class _All


' SRC\binreduce.c (71, 1)
' pixReduceBinary2(pixs, intab) as Pix
' pixReduceBinary2(PIX *, l_uint8 *) as PIX *
'''  <summary>
''' <para/>
''' Notes:<para/>
''' (1) After folding, the data is in bytes 0 and 2 of the word,<para/>
''' and the bits in each byte are in the following order<para/>
''' (with 0 being the leftmost originating pair and 7 being<para/>
''' the rightmost originating pair):<para/>
''' 0 4 1 5 2 6 3 7<para/>
''' These need to be permuted to<para/>
''' 0 1 2 3 4 5 6 7<para/>
''' which is done with an 8-bit table generated by makeSubsampleTab2x().<para/>
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="intab">[in][optional] - if null, a table is made here and destroyed before exit</param>
'''   <returns>pixd 2x subsampled, or NULL on error</returns>
Public Shared Function pixReduceBinary2(
				 ByVal pixs as Pix, 
				 ByVal intab as Byte()) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")




	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReduceBinary2( pixs.Pointer, intab)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\binreduce.c (148, 1)
' pixReduceRankBinaryCascade(pixs, level1, level2, level3, level4) as Pix
' pixReduceRankBinaryCascade(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' <para/>
''' Notes:<para/>
''' (1) This performs up to four cascaded 2x rank reductions.<para/>
''' (2) Use level = 0 to truncate the cascade.<para/>
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="level1">[in] - threshold, in the set {0, 1, 2, 3, 4}</param>
'''  <param name="level2">[in] - threshold, in the set {0, 1, 2, 3, 4}</param>
'''  <param name="level3">[in] - threshold, in the set {0, 1, 2, 3, 4}</param>
'''  <param name="level4">[in] - threshold, in the set {0, 1, 2, 3, 4}</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixReduceRankBinaryCascade(
				 ByVal pixs as Pix, 
				 ByVal level1 as Integer, 
				 ByVal level2 as Integer, 
				 ByVal level3 as Integer, 
				 ByVal level4 as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReduceRankBinaryCascade( pixs.Pointer, level1, level2, level3, level4)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\binreduce.c (223, 1)
' pixReduceRankBinary2(pixs, level, intab) as Pix
' pixReduceRankBinary2(PIX *, l_int32, l_uint8 *) as PIX *
'''  <summary>
''' <para/>
''' Notes:<para/>
''' (1) pixd is downscaled by 2x from pixs.<para/>
''' (2) The rank threshold specifies the minimum number of ON<para/>
''' pixels in each 2x2 region of pixs that are required to<para/>
''' set the corresponding pixel ON in pixd.<para/>
''' (3) Rank filtering is done to the UL corner of each 2x2 pixel block,<para/>
''' using only logical operations.  Then these pixels are chosen<para/>
''' in the 2x subsampling process, subsampled, as described<para/>
''' above in pixReduceBinary2().<para/>
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="level">[in] - rank threshold: 1, 2, 3, 4</param>
'''  <param name="intab">[in][optional] - if null, a table is made here and destroyed before exit</param>
'''   <returns>pixd 1 bpp, 2x rank threshold reduced, or NULL on error</returns>
Public Shared Function pixReduceRankBinary2(
				 ByVal pixs as Pix, 
				 ByVal level as Integer, 
				 ByVal intab as Byte()) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReduceRankBinary2( pixs.Pointer, level, intab)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\binreduce.c (384, 1)
' makeSubsampleTab2x() as Byte()
' makeSubsampleTab2x() as l_uint8 *
'''  <summary>
''' <para/>
''' This table permutes the bits in a byte, from<para/>
''' 0 4 1 5 2 6 3 7<para/>
''' to<para/>
''' 0 1 2 3 4 5 6 7<para/>
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns>tab table of 256 permutations, or NULL on error</returns>
Public Shared Function makeSubsampleTab2x() as Byte()





	Dim _Result as Byte() = LeptonicaSharp.Natives.makeSubsampleTab2x( )

	Return _Result
End Function

End Class
