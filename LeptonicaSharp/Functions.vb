Imports System.Runtime.InteropServices
Imports LeptonicaSharp.Enumerations
Partial Public Class _AllFunctions


#Region "SRC\adaptmap.c"
' SRC\adaptmap.c (185, 1)
' pixCleanBackgroundToWhite()
' pixCleanBackgroundToWhite(PIX *, PIX *, PIX *, l_float32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a simplified interface for cleaning an image.
''' For comparison, see pixAdaptThresholdToBinaryGen().
''' (2) The suggested default values for the input parameters are
''' gamma 1.0  (reduce this to increase the contrast; e.g.,
''' for light text)
''' blackval   70  (a bit more than 60)
''' whiteval  190  (a bit less than 200)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale or 32 bpp rgb</param>
'''  <param name="pixim">[in][optional] - 1 bpp 'image' mask; can be null</param>
'''  <param name="pixg">[in][optional] - 8 bpp grayscale version; can be null</param>
'''  <param name="gamma">[in] - gamma correction; must be GT 0.0; typically ~1.0</param>
'''  <param name="blackval">[in] - dark value to set to black (0)</param>
'''  <param name="whiteval">[in] - light value to set to white (255)</param>
'''   <returns>pixd 8 bpp or 32 bpp rgb, or NULL on error</returns>
Public Shared Function pixCleanBackgroundToWhite(
				ByVal pixs as Pix, 
				ByVal pixim as Pix, 
				ByVal pixg as Pix, 
				ByVal gamma as Single, 
				ByVal blackval as Integer, 
				ByVal whiteval as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (gamma) then Throw New ArgumentNullException  ("gamma cannot be Nothing")

	Dim piximPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixim) Then piximPTR = pixim.Pointer
	Dim pixgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixg) Then pixgPTR = pixg.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCleanBackgroundToWhite( pixs.Pointer, piximPTR, pixgPTR, gamma, blackval, whiteval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\adaptmap.c (231, 1)
' pixBackgroundNormSimple()
' pixBackgroundNormSimple(PIX *, PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This is a simplified interface to pixBackgroundNorm(),
''' where seven parameters are defaulted.
''' (2) The input image is either grayscale or rgb.
''' (3) See pixBackgroundNorm() for usage and function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale or 32 bpp rgb</param>
'''  <param name="pixim">[in][optional] - 1 bpp 'image' mask; can be null</param>
'''  <param name="pixg">[in][optional] - 8 bpp grayscale version; can be null</param>
'''   <returns>pixd 8 bpp or 32 bpp rgb, or NULL on error</returns>
Public Shared Function pixBackgroundNormSimple(
				ByVal pixs as Pix, 
				ByVal pixim as Pix, 
				ByVal pixg as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim piximPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixim) Then piximPTR = pixim.Pointer
	Dim pixgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixg) Then pixgPTR = pixg.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBackgroundNormSimple( pixs.Pointer, piximPTR, pixgPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\adaptmap.c (302, 1)
' pixBackgroundNorm()
' pixBackgroundNorm(PIX *, PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a top-level interface for normalizing the image intensity
''' by mapping the image so that the background is near the input
''' value 'bgval'.
''' (2) The input image is either grayscale or rgb.
''' (3) For each component in the input image, the background value
''' in each tile is estimated using the values in the tile that
''' are not part of the foreground, where the foreground is
''' determined by the input 'thresh' argument.
''' (4) An optional binary mask can be specified, with the foreground
''' pixels typically over image regions.  The resulting background
''' map values will be determined by surrounding pixels that are
''' not under the mask foreground.  The origin (0,0) of this mask
''' is assumed to be aligned with the origin of the input image.
''' This binary mask must not fully cover pixs, because then there
''' will be no pixels in the input image available to compute
''' the background.
''' (5) An optional grayscale version of the input pixs can be supplied.
''' The only reason to do this is if the input is RGB and this
''' grayscale version can be used elsewhere.  If the input is RGB
''' and this is not supplied, it is made internally using only
''' the green component, and destroyed after use.
''' (6) The dimensions of the pixel tile (sx, sy) give the amount by
''' by which the map is reduced in size from the input image.
''' (7) The threshold is used to binarize the input image, in order to
''' locate the foreground components.  If this is set too low,
''' some actual foreground may be used to determine the maps;
''' if set too high, there may not be enough background
''' to determine the map values accurately.  Typically, it's
''' better to err by setting the threshold too high.
''' (8) A 'mincount' threshold is a minimum count of pixels in a
''' tile for which a background reading is made, in order for that
''' pixel in the map to be valid.  This number should perhaps be
''' at least 1/3 the size of the tile.
''' (9) A 'bgval' target background value for the normalized image.  This
''' should be at least 128.  If set too close to 255, some
''' clipping will occur in the result.
''' (10) Two factors, 'smoothx' and 'smoothy', are input for smoothing
''' the map.  Each low-pass filter kernel dimension is
''' is 2  (smoothing factor) + 1, so a
''' value of 0 means no smoothing. A value of 1 or 2 is recommended.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale or 32 bpp rgb</param>
'''  <param name="pixim">[in][optional] - 1 bpp 'image' mask; can be null</param>
'''  <param name="pixg">[in][optional] - 8 bpp grayscale version; can be null</param>
'''  <param name="sx">[in] - tile size in pixels</param>
'''  <param name="sy">[in] - tile size in pixels</param>
'''  <param name="thresh">[in] - threshold for determining foreground</param>
'''  <param name="mincount">[in] - min threshold on counts in a tile</param>
'''  <param name="bgval">[in] - target bg val; typ. GT 128</param>
'''  <param name="smoothx">[in] - half-width of block convolution kernel width</param>
'''  <param name="smoothy">[in] - half-width of block convolution kernel height</param>
'''   <returns>pixd 8 bpp or 32 bpp rgb, or NULL on error</returns>
Public Shared Function pixBackgroundNorm(
				ByVal pixs as Pix, 
				ByVal pixim as Pix, 
				ByVal pixg as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer, 
				ByVal thresh as Integer, 
				ByVal mincount as Integer, 
				ByVal bgval as Integer, 
				ByVal smoothx as Integer, 
				ByVal smoothy as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim piximPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixim) Then piximPTR = pixim.Pointer
	Dim pixgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixg) Then pixgPTR = pixg.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBackgroundNorm( pixs.Pointer, piximPTR, pixgPTR, sx, sy, thresh, mincount, bgval, smoothx, smoothy)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\adaptmap.c (443, 1)
' pixBackgroundNormMorph()
' pixBackgroundNormMorph(PIX *, PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a top-level interface for normalizing the image intensity
''' by mapping the image so that the background is near the input
''' value 'bgval'.
''' (2) The input image is either grayscale or rgb.
''' (3) For each component in the input image, the background value
''' is estimated using a grayscale closing; hence the 'Morph'
''' in the function name.
''' (4) An optional binary mask can be specified, with the foreground
''' pixels typically over image regions.  The resulting background
''' map values will be determined by surrounding pixels that are
''' not under the mask foreground.  The origin (0,0) of this mask
''' is assumed to be aligned with the origin of the input image.
''' This binary mask must not fully cover pixs, because then there
''' will be no pixels in the input image available to compute
''' the background.
''' (5) The map is computed at reduced size (given by 'reduction')
''' from the input pixs and optional pixim.  At this scale,
''' pixs is closed to remove the background, using a square Sel
''' of odd dimension.  The product of reduction  size should be
''' large enough to remove most of the text foreground.
''' (6) No convolutional smoothing needs to be done on the map before
''' inverting it.
''' (7) A 'bgval' target background value for the normalized image.  This
''' should be at least 128.  If set too close to 255, some
''' clipping will occur in the result.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale or 32 bpp rgb</param>
'''  <param name="pixim">[in][optional] - 1 bpp 'image' mask; can be null</param>
'''  <param name="reduction">[in] - at which morph closings are done; between 2 and 16</param>
'''  <param name="size">[in] - of square Sel for the closing; use an odd number</param>
'''  <param name="bgval">[in] - target bg val; typ. GT 128</param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function pixBackgroundNormMorph(
				ByVal pixs as Pix, 
				ByVal pixim as Pix, 
				ByVal reduction as Integer, 
				ByVal size as Integer, 
				ByVal bgval as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("at which morph closings are done; between 2 and 16")

	Dim piximPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixim) Then piximPTR = pixim.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBackgroundNormMorph( pixs.Pointer, piximPTR, reduction, size, bgval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\adaptmap.c (554, 1)
' pixBackgroundNormGrayArray()
' pixBackgroundNormGrayArray(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) See notes in pixBackgroundNorm().
''' (2) This returns a 16 bpp pix that can be used by
''' pixApplyInvBackgroundGrayMap() to generate a normalized version
''' of the input pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale</param>
'''  <param name="pixim">[in][optional] - 1 bpp 'image' mask; can be null</param>
'''  <param name="sx">[in] - tile size in pixels</param>
'''  <param name="sy">[in] - tile size in pixels</param>
'''  <param name="thresh">[in] - threshold for determining foreground</param>
'''  <param name="mincount">[in] - min threshold on counts in a tile</param>
'''  <param name="bgval">[in] - target bg val; typ. GT 128</param>
'''  <param name="smoothx">[in] - half-width of block convolution kernel width</param>
'''  <param name="smoothy">[in] - half-width of block convolution kernel height</param>
'''  <param name="ppixd">[out] - 16 bpp array of inverted background value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixBackgroundNormGrayArray(
				ByVal pixs as Pix, 
				ByVal pixim as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer, 
				ByVal thresh as Integer, 
				ByVal mincount as Integer, 
				ByVal bgval as Integer, 
				ByVal smoothx as Integer, 
				ByVal smoothy as Integer, 
				ByRef ppixd as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale")

	Dim piximPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixim) Then piximPTR = pixim.Pointer
	Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixBackgroundNormGrayArray( pixs.Pointer, piximPTR, sx, sy, thresh, mincount, bgval, smoothx, smoothy, ppixdPTR)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return _Result
End Function

' SRC\adaptmap.c (631, 1)
' pixBackgroundNormRGBArrays()
' pixBackgroundNormRGBArrays(PIX *, PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, PIX **, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) See notes in pixBackgroundNorm().
''' (2) This returns a set of three 16 bpp pix that can be used by
''' pixApplyInvBackgroundGrayMap() to generate a normalized version
''' of each component of the input pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="pixim">[in][optional] - 1 bpp 'image' mask; can be null</param>
'''  <param name="pixg">[in][optional] - 8 bpp grayscale version; can be null</param>
'''  <param name="sx">[in] - tile size in pixels</param>
'''  <param name="sy">[in] - tile size in pixels</param>
'''  <param name="thresh">[in] - threshold for determining foreground</param>
'''  <param name="mincount">[in] - min threshold on counts in a tile</param>
'''  <param name="bgval">[in] - target bg val; typ. GT 128</param>
'''  <param name="smoothx">[in] - half-width of block convolution kernel width</param>
'''  <param name="smoothy">[in] - half-width of block convolution kernel height</param>
'''  <param name="ppixr">[out] - 16 bpp array of inverted R background value</param>
'''  <param name="ppixg">[out] - 16 bpp array of inverted G background value</param>
'''  <param name="ppixb">[out] - 16 bpp array of inverted B background value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixBackgroundNormRGBArrays(
				ByVal pixs as Pix, 
				ByVal pixim as Pix, 
				ByVal pixg as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer, 
				ByVal thresh as Integer, 
				ByVal mincount as Integer, 
				ByVal bgval as Integer, 
				ByVal smoothx as Integer, 
				ByVal smoothy as Integer, 
				ByRef ppixr as Pix, 
				ByRef ppixg as Pix, 
				ByRef ppixb as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim piximPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixim) Then piximPTR = pixim.Pointer
	Dim pixgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixg) Then pixgPTR = pixg.Pointer
	Dim ppixrPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixr) Then ppixrPTR = ppixr.Pointer
	Dim ppixgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixg) Then ppixgPTR = ppixg.Pointer
	Dim ppixbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixb) Then ppixbPTR = ppixb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixBackgroundNormRGBArrays( pixs.Pointer, piximPTR, pixgPTR, sx, sy, thresh, mincount, bgval, smoothx, smoothy, ppixrPTR, ppixgPTR, ppixbPTR)
	if ppixrPTR <> IntPtr.Zero then ppixr = new Pix(ppixrPTR)
	if ppixgPTR <> IntPtr.Zero then ppixg = new Pix(ppixgPTR)
	if ppixbPTR <> IntPtr.Zero then ppixb = new Pix(ppixbPTR)

	Return _Result
End Function

' SRC\adaptmap.c (714, 1)
' pixBackgroundNormGrayArrayMorph()
' pixBackgroundNormGrayArrayMorph(PIX *, PIX *, l_int32, l_int32, l_int32, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) See notes in pixBackgroundNormMorph().
''' (2) This returns a 16 bpp pix that can be used by
''' pixApplyInvBackgroundGrayMap() to generate a normalized version
''' of the input pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale</param>
'''  <param name="pixim">[in][optional] - 1 bpp 'image' mask; can be null</param>
'''  <param name="reduction">[in] - at which morph closings are done; between 2 and 16</param>
'''  <param name="size">[in] - of square Sel for the closing; use an odd number</param>
'''  <param name="bgval">[in] - target bg val; typ. GT 128</param>
'''  <param name="ppixd">[out] - 16 bpp array of inverted background value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixBackgroundNormGrayArrayMorph(
				ByVal pixs as Pix, 
				ByVal pixim as Pix, 
				ByVal reduction as Integer, 
				ByVal size as Integer, 
				ByVal bgval as Integer, 
				ByRef ppixd as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("at which morph closings are done; between 2 and 16")

	Dim piximPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixim) Then piximPTR = pixim.Pointer
	Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixBackgroundNormGrayArrayMorph( pixs.Pointer, piximPTR, reduction, size, bgval, ppixdPTR)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return _Result
End Function

' SRC\adaptmap.c (779, 1)
' pixBackgroundNormRGBArraysMorph()
' pixBackgroundNormRGBArraysMorph(PIX *, PIX *, l_int32, l_int32, l_int32, PIX **, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) See notes in pixBackgroundNormMorph().
''' (2) This returns a set of three 16 bpp pix that can be used by
''' pixApplyInvBackgroundGrayMap() to generate a normalized version
''' of each component of the input pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="pixim">[in][optional] - 1 bpp 'image' mask; can be null</param>
'''  <param name="reduction">[in] - at which morph closings are done; between 2 and 16</param>
'''  <param name="size">[in] - of square Sel for the closing; use an odd number</param>
'''  <param name="bgval">[in] - target bg val; typ. GT 128</param>
'''  <param name="ppixr">[out] - 16 bpp array of inverted R background value</param>
'''  <param name="ppixg">[out] - 16 bpp array of inverted G background value</param>
'''  <param name="ppixb">[out] - 16 bpp array of inverted B background value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixBackgroundNormRGBArraysMorph(
				ByVal pixs as Pix, 
				ByVal pixim as Pix, 
				ByVal reduction as Integer, 
				ByVal size as Integer, 
				ByVal bgval as Integer, 
				ByRef ppixr as Pix, 
				ByRef ppixg as Pix, 
				ByRef ppixb as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("at which morph closings are done; between 2 and 16")

	Dim piximPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixim) Then piximPTR = pixim.Pointer
	Dim ppixrPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixr) Then ppixrPTR = ppixr.Pointer
	Dim ppixgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixg) Then ppixgPTR = ppixg.Pointer
	Dim ppixbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixb) Then ppixbPTR = ppixb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixBackgroundNormRGBArraysMorph( pixs.Pointer, piximPTR, reduction, size, bgval, ppixrPTR, ppixgPTR, ppixbPTR)
	if ppixrPTR <> IntPtr.Zero then ppixr = new Pix(ppixrPTR)
	if ppixgPTR <> IntPtr.Zero then ppixg = new Pix(ppixgPTR)
	if ppixbPTR <> IntPtr.Zero then ppixb = new Pix(ppixbPTR)

	Return _Result
End Function

' SRC\adaptmap.c (856, 1)
' pixGetBackgroundGrayMap()
' pixGetBackgroundGrayMap(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) The background is measured in regions that don't have
''' images.  It is then propagated into the image regions,
''' and finally smoothed in each image region.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale; not cmapped</param>
'''  <param name="pixim">[in][optional] - 1 bpp 'image' mask; can be null; it should not have all foreground pixels</param>
'''  <param name="sx">[in] - tile size in pixels</param>
'''  <param name="sy">[in] - tile size in pixels</param>
'''  <param name="thresh">[in] - threshold for determining foreground</param>
'''  <param name="mincount">[in] - min threshold on counts in a tile</param>
'''  <param name="ppixd">[out] - 8 bpp grayscale map</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetBackgroundGrayMap(
				ByVal pixs as Pix, 
				ByVal pixim as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer, 
				ByVal thresh as Integer, 
				ByVal mincount as Integer, 
				ByRef ppixd as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim piximPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixim) Then piximPTR = pixim.Pointer
	Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetBackgroundGrayMap( pixs.Pointer, piximPTR, sx, sy, thresh, mincount, ppixdPTR)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return _Result
End Function

' SRC\adaptmap.c (1034, 1)
' pixGetBackgroundRGBMap()
' pixGetBackgroundRGBMap(PIX *, PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, PIX **, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) If pixg, which is a grayscale version of pixs, is provided,
''' use this internally to generate the foreground mask.
''' Otherwise, a grayscale version of pixs will be generated
''' from the green component only, used, and destroyed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="pixim">[in][optional] - 1 bpp 'image' mask; can be null; it should not have all foreground pixels</param>
'''  <param name="pixg">[in][optional] - 8 bpp grayscale version; can be null</param>
'''  <param name="sx">[in] - tile size in pixels</param>
'''  <param name="sy">[in] - tile size in pixels</param>
'''  <param name="thresh">[in] - threshold for determining foreground</param>
'''  <param name="mincount">[in] - min threshold on counts in a tile</param>
'''  <param name="ppixmr">[out] - rgb maps</param>
'''  <param name="ppixmg">[out] - rgb maps</param>
'''  <param name="ppixmb">[out] - rgb maps</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetBackgroundRGBMap(
				ByVal pixs as Pix, 
				ByVal pixim as Pix, 
				ByVal pixg as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer, 
				ByVal thresh as Integer, 
				ByVal mincount as Integer, 
				ByRef ppixmr as Pix, 
				ByRef ppixmg as Pix, 
				ByRef ppixmb as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim piximPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixim) Then piximPTR = pixim.Pointer
	Dim pixgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixg) Then pixgPTR = pixg.Pointer
	Dim ppixmrPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixmr) Then ppixmrPTR = ppixmr.Pointer
	Dim ppixmgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixmg) Then ppixmgPTR = ppixmg.Pointer
	Dim ppixmbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixmb) Then ppixmbPTR = ppixmb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetBackgroundRGBMap( pixs.Pointer, piximPTR, pixgPTR, sx, sy, thresh, mincount, ppixmrPTR, ppixmgPTR, ppixmbPTR)
	if ppixmrPTR <> IntPtr.Zero then ppixmr = new Pix(ppixmrPTR)
	if ppixmgPTR <> IntPtr.Zero then ppixmg = new Pix(ppixmgPTR)
	if ppixmbPTR <> IntPtr.Zero then ppixmb = new Pix(ppixmbPTR)

	Return _Result
End Function

' SRC\adaptmap.c (1219, 1)
' pixGetBackgroundGrayMapMorph()
' pixGetBackgroundGrayMapMorph(PIX *, PIX *, l_int32, l_int32, PIX **) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale; not cmapped</param>
'''  <param name="pixim">[in][optional] - 1 bpp 'image' mask; can be null; it should not have all foreground pixels</param>
'''  <param name="reduction">[in] - factor at which closing is performed</param>
'''  <param name="size">[in] - of square Sel for the closing; use an odd number</param>
'''  <param name="ppixm">[out] - grayscale map</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetBackgroundGrayMapMorph(
				ByVal pixs as Pix, 
				ByVal pixim as Pix, 
				ByVal reduction as Integer, 
				ByVal size as Integer, 
				ByRef ppixm as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("factor at which closing is performed")

	Dim piximPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixim) Then piximPTR = pixim.Pointer
	Dim ppixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixm) Then ppixmPTR = ppixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetBackgroundGrayMapMorph( pixs.Pointer, piximPTR, reduction, size, ppixmPTR)
	if ppixmPTR <> IntPtr.Zero then ppixm = new Pix(ppixmPTR)

	Return _Result
End Function

' SRC\adaptmap.c (1310, 1)
' pixGetBackgroundRGBMapMorph()
' pixGetBackgroundRGBMapMorph(PIX *, PIX *, l_int32, l_int32, PIX **, PIX **, PIX **) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="pixim">[in][optional] - 1 bpp 'image' mask; can be null; it should not have all foreground pixels</param>
'''  <param name="reduction">[in] - factor at which closing is performed</param>
'''  <param name="size">[in] - of square Sel for the closing; use an odd number</param>
'''  <param name="ppixmr">[out] - red component map</param>
'''  <param name="ppixmg">[out] - green component map</param>
'''  <param name="ppixmb">[out] - blue component map</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetBackgroundRGBMapMorph(
				ByVal pixs as Pix, 
				ByVal pixim as Pix, 
				ByVal reduction as Integer, 
				ByVal size as Integer, 
				ByRef ppixmr as Pix, 
				ByRef ppixmg as Pix, 
				ByRef ppixmb as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("factor at which closing is performed")

	Dim piximPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixim) Then piximPTR = pixim.Pointer
	Dim ppixmrPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixmr) Then ppixmrPTR = ppixmr.Pointer
	Dim ppixmgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixmg) Then ppixmgPTR = ppixmg.Pointer
	Dim ppixmbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixmb) Then ppixmbPTR = ppixmb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetBackgroundRGBMapMorph( pixs.Pointer, piximPTR, reduction, size, ppixmrPTR, ppixmgPTR, ppixmbPTR)
	if ppixmrPTR <> IntPtr.Zero then ppixmr = new Pix(ppixmrPTR)
	if ppixmgPTR <> IntPtr.Zero then ppixmg = new Pix(ppixmgPTR)
	if ppixmbPTR <> IntPtr.Zero then ppixmb = new Pix(ppixmbPTR)

	Return _Result
End Function

' SRC\adaptmap.c (1464, 1)
' pixFillMapHoles()
' pixFillMapHoles(PIX *, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place operation on pix (the map).  pix is
''' typically a low-resolution version of some other image
''' from which it was derived, where each pixel in pix
''' corresponds to a rectangular tile (say, m x n) of pixels
''' in the larger image.  All we need to know about the larger
''' image is whether or not the rightmost column and bottommost
''' row of pixels in pix correspond to tiles that are
''' only partially covered by pixels in the larger image.
''' (2) Typically, some number of pixels in the input map are
''' not known, and their values must be determined by near
''' pixels that are known.  These unknown pixels are the 'holes'.
''' They can take on only two values, 0 and 255, and the
''' instruction about which to fill is given by the filltype flag.
''' (3) The "holes" can come from two sources.  The first is when there
''' are not enough foreground or background pixels in a tile;
''' the second is when a tile is at least partially covered
''' by an image mask.  If we're filling holes in a fg mask,
''' the holes are initialized to black (0) and use L_FILL_BLACK.
''' For filling holes in a bg mask, initialize the holes to
''' white (255) and use L_FILL_WHITE.
''' (4) If w is the map width, nx = w or nx = w - 1; ditto for h and ny.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 bpp; a map, with one pixel for each tile in a larger image</param>
'''  <param name="nx">[in] - number of horizontal pixel tiles that are entirely covered with pixels in the original source image</param>
'''  <param name="ny">[in] - ditto for the number of vertical pixel tiles</param>
'''  <param name="filltype">[in] - L_FILL_WHITE or L_FILL_BLACK</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFillMapHoles(
				ByVal pix as Pix, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByVal filltype as Enumerations.L_FILL) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFillMapHoles( pix.Pointer, nx, ny, filltype)

	Return _Result
End Function

' SRC\adaptmap.c (1576, 1)
' pixExtendByReplication()
' pixExtendByReplication(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The pixel values are extended to the left and down, as required.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="addw">[in] - number of extra pixels horizontally to add</param>
'''  <param name="addh">[in] - number of extra pixels vertically to add</param>
'''   <returns>pixd extended with replicated pixel values, or NULL on error</returns>
Public Shared Function pixExtendByReplication(
				ByVal pixs as Pix, 
				ByVal addw as Integer, 
				ByVal addh as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixExtendByReplication( pixs.Pointer, addw, addh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\adaptmap.c (1639, 1)
' pixSmoothConnectedRegions()
' pixSmoothConnectedRegions(PIX *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) The pixels in pixs corresponding to those in each
''' 8-connected region in the mask are set to the average value.
''' (2) This is required for adaptive mapping to avoid the
''' generation of stripes in the background map, due to
''' variations in the pixel values near the edges of mask regions.
''' (3) This function is optimized for background smoothing, where
''' there are a relatively small number of components.  It will
''' be inefficient if used where there are many small components.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale; no colormap</param>
'''  <param name="pixm">[in][optional] - 1 bpp; if null, this is a no-op</param>
'''  <param name="factor">[in] - subsampling factor for getting average; GT= 1</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSmoothConnectedRegions(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal factor as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSmoothConnectedRegions( pixs.Pointer, pixmPTR, factor)

	Return _Result
End Function

' SRC\adaptmap.c (1840, 1)
' pixGetInvBackgroundMap()
' pixGetInvBackgroundMap(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) bgval should typically be GT 120 and LT 240
''' (2) pixd is a normalization image; the original image is
''' multiplied by pixd and the result is divided by 256.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale; no colormap</param>
'''  <param name="bgval">[in] - target bg val; typ. GT 128</param>
'''  <param name="smoothx">[in] - half-width of block convolution kernel width</param>
'''  <param name="smoothy">[in] - half-width of block convolution kernel height</param>
'''   <returns>pixd 16 bpp, or NULL on error</returns>
Public Shared Function pixGetInvBackgroundMap(
				ByVal pixs as Pix, 
				ByVal bgval as Integer, 
				ByVal smoothx as Integer, 
				ByVal smoothy as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetInvBackgroundMap( pixs.Pointer, bgval, smoothx, smoothy)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\adaptmap.c (1903, 1)
' pixApplyInvBackgroundGrayMap()
' pixApplyInvBackgroundGrayMap(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale; no colormap</param>
'''  <param name="pixm">[in] - 16 bpp, inverse background map</param>
'''  <param name="sx">[in] - tile width in pixels</param>
'''  <param name="sy">[in] - tile height in pixels</param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function pixApplyInvBackgroundGrayMap(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixApplyInvBackgroundGrayMap( pixs.Pointer, pixm.Pointer, sx, sy)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\adaptmap.c (1969, 1)
' pixApplyInvBackgroundRGBMap()
' pixApplyInvBackgroundRGBMap(PIX *, PIX *, PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rbg</param>
'''  <param name="pixmr">[in] - 16 bpp, red inverse background map</param>
'''  <param name="pixmg">[in] - 16 bpp, green inverse background map</param>
'''  <param name="pixmb">[in] - 16 bpp, blue inverse background map</param>
'''  <param name="sx">[in] - tile width in pixels</param>
'''  <param name="sy">[in] - tile height in pixels</param>
'''   <returns>pixd 32 bpp rbg, or NULL on error</returns>
Public Shared Function pixApplyInvBackgroundRGBMap(
				ByVal pixs as Pix, 
				ByVal pixmr as Pix, 
				ByVal pixmg as Pix, 
				ByVal pixmb as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixmr) then Throw New ArgumentNullException  ("pixmr cannot be Nothing")
	If IsNothing (pixmg) then Throw New ArgumentNullException  ("pixmg cannot be Nothing")
	If IsNothing (pixmb) then Throw New ArgumentNullException  ("pixmb cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixApplyInvBackgroundRGBMap( pixs.Pointer, pixmr.Pointer, pixmg.Pointer, pixmb.Pointer, sx, sy)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\adaptmap.c (2067, 1)
' pixApplyVariableGrayMap()
' pixApplyVariableGrayMap(PIX *, PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Suppose you have an image that you want to transform based
''' on some photometric measurement at each point, such as the
''' threshold value for binarization.  Representing the photometric
''' measurement as an image pixg, you can threshold in input image
''' using pixVarThresholdToBinary().  Alternatively, you can map
''' the input image pointwise so that the threshold over the
''' entire image becomes a constant, such as 128.  For example,
''' if a pixel in pixg is 150 and the target is 128, the
''' corresponding pixel in pixs is mapped linearly to a value
''' (128/150) of the input value.  If the resulting mapped image
''' pixd were then thresholded at 128, you would obtain the
''' same result as a direct binarization using pixg with
''' pixVarThresholdToBinary().
''' (2) The sizes of pixs and pixg must be equal.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="pixg">[in] - 8 bpp, variable map</param>
'''  <param name="target">[in] - typ. 128 for threshold</param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function pixApplyVariableGrayMap(
				ByVal pixs as Pix, 
				ByVal pixg as Pix, 
				ByVal target as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixg) then Throw New ArgumentNullException  ("pixg cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixApplyVariableGrayMap( pixs.Pointer, pixg.Pointer, target)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\adaptmap.c (2185, 1)
' pixGlobalNormRGB()
' pixGlobalNormRGB(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The value of pixd determines if the results are written to a
''' new pix (use NULL), in-place to pixs (use pixs), or to some
''' other existing pix.
''' (2) This does a global normalization of an image where the
''' r,g,b color components are not balanced.  Thus, white in pixs is
''' represented by a set of r,g,b values that are not all 255.
''' (3) The input values (rval, gval, bval) should be chosen to
''' represent the gray color (mapval, mapval, mapval) in src.
''' Thus, this function will map (rval, gval, bval) to that gray color.
''' (4) Typically, mapval = 255, so that (rval, gval, bval)
''' corresponds to the white point of src.  In that case, these
''' parameters should be chosen so that few pixels have higher values.
''' (5) In all cases, we do a linear TRC separately on each of the
''' components, saturating at 255.
''' (6) If the input pix is 8 bpp without a colormap, you can get
''' this functionality with mapval = 255 by calling
''' pixGammaTRC(pixd, pixs, 1.0, 0, bgval);
''' where bgval is the value you want to be mapped to 255.
''' Or more generally, if you want bgval to be mapped to mapval
''' pixGammaTRC(pixd, pixs, 1.0, 0, 255  bgval / mapval);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - null, existing or equal to pixs</param>
'''  <param name="pixs">[in] - 32 bpp rgb, or colormapped</param>
'''  <param name="rval">[in] - pixel values in pixs that are linearly mapped to mapval</param>
'''  <param name="gval">[in] - pixel values in pixs that are linearly mapped to mapval</param>
'''  <param name="bval">[in] - pixel values in pixs that are linearly mapped to mapval</param>
'''  <param name="mapval">[in] - use 255 for mapping to white</param>
'''   <returns>pixd 32 bpp rgb or colormapped, or NULL on error</returns>
Public Shared Function pixGlobalNormRGB(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByVal mapval as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGlobalNormRGB( pixdPTR, pixs.Pointer, rval, gval, bval, mapval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\adaptmap.c (2294, 1)
' pixGlobalNormNoSatRGB()
' pixGlobalNormNoSatRGB(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a version of pixGlobalNormRGB(), where the output
''' intensity is scaled back so that a controlled fraction of
''' pixel components is allowed to saturate.  See comments in
''' pixGlobalNormRGB().
''' (2) The value of pixd determines if the results are written to a
''' new pix (use NULL), in-place to pixs (use pixs), or to some
''' other existing pix.
''' (3) This does a global normalization of an image where the
''' r,g,b color components are not balanced.  Thus, white in pixs is
''' represented by a set of r,g,b values that are not all 255.
''' (4) The input values (rval, gval, bval) can be chosen to be the
''' color that, after normalization, becomes white background.
''' For images that are mostly background, the closer these values
''' are to the median component values, the closer the resulting
''' background will be to gray, becoming white at the brightest places.
''' (5) The mapval used in pixGlobalNormRGB() is computed here to
''' avoid saturation of any component in the image (save for a
''' fraction of the pixels given by the input rank value).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - null, existing or equal to pixs</param>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="rval">[in] - pixel values in pixs that are linearly mapped to mapval; but see below</param>
'''  <param name="gval">[in] - pixel values in pixs that are linearly mapped to mapval; but see below</param>
'''  <param name="bval">[in] - pixel values in pixs that are linearly mapped to mapval; but see below</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''  <param name="rank">[in] - between 0.0 and 1.0; typ. use a value near 1.0</param>
'''   <returns>pixd 32 bpp rgb, or NULL on error</returns>
Public Shared Function pixGlobalNormNoSatRGB(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByVal factor as Integer, 
				ByVal rank as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rank) then Throw New ArgumentNullException  ("rank cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGlobalNormNoSatRGB( pixdPTR, pixs.Pointer, rval, gval, bval, factor, rank)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\adaptmap.c (2394, 1)
' pixThresholdSpreadNorm()
' pixThresholdSpreadNorm(PIX *, l_int32, l_int32, l_int32, l_int32, l_float32, l_int32, l_int32, l_int32, PIX **, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) The basis of this approach is the use of seed spreading
''' on a (possibly) sparse set of estimates for the local threshold.
''' The resulting dense estimates are smoothed by convolution
''' and used to either threshold the input image or normalize it
''' with a local transformation that linearly maps the pixels so
''' that the local threshold estimate becomes constant over the
''' resulting image.  This approach is one of several that
''' have been suggested (and implemented) by Ray Smith.
''' (2) You can use either the Sobel or TwoSided edge filters.
''' The results appear to be similar, using typical values
''' of edgethresh in the rang 10-20.
''' (3) To skip the trc enhancement, use gamma = 1.0, minval = 0
''' and maxval = 255.
''' (4) For the normalized image pixd, each pixel is linearly mapped
''' in such a way that the local threshold is equal to targetthresh.
''' (5) The full width and height of the convolution kernel
''' are (2  smoothx + 1) and (2  smoothy + 1).
''' (6) This function can be used with the pixtiling utility if the
''' images are too large.  See pixOtsuAdaptiveThreshold() for
''' an example of this.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale; not colormapped</param>
'''  <param name="filtertype">[in] - L_SOBEL_EDGE or L_TWO_SIDED_EDGE;</param>
'''  <param name="edgethresh">[in] - threshold on magnitude of edge filter; typ 10-20</param>
'''  <param name="smoothx">[in] - half-width of convolution kernel applied to spread threshold use 0 for no smoothing</param>
'''  <param name="smoothy">[in] - half-width of convolution kernel applied to spread threshold use 0 for no smoothing</param>
'''  <param name="gamma">[in] - gamma correction; typ. about 0.7</param>
'''  <param name="minval">[in] - input value that gives 0 for output; typ. -25</param>
'''  <param name="maxval">[in] - input value that gives 255 for output; typ. 255</param>
'''  <param name="targetthresh">[in] - target threshold for normalization</param>
'''  <param name="ppixth">[out][optional] - computed local threshold value</param>
'''  <param name="ppixb">[out][optional] - thresholded normalized image</param>
'''  <param name="ppixd">[out][optional] - normalized image</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixThresholdSpreadNorm(
				ByVal pixs as Pix, 
				ByVal filtertype as Enumerations.L_EDGE, 
				ByVal edgethresh as Integer, 
				ByVal smoothx as Integer, 
				ByVal smoothy as Integer, 
				ByVal gamma as Single, 
				ByVal minval as Integer, 
				ByVal maxval as Integer, 
				ByVal targetthresh as Integer, 
				ByRef ppixth as Pix, 
				ByRef ppixb as Pix, 
				ByRef ppixd as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (gamma) then Throw New ArgumentNullException  ("gamma cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale; not colormapped")

Dim ppixthPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixth) Then ppixthPTR = ppixth.Pointer
Dim ppixbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixb) Then ppixbPTR = ppixb.Pointer
Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixThresholdSpreadNorm( pixs.Pointer, filtertype, edgethresh, smoothx, smoothy, gamma, minval, maxval, targetthresh, ppixthPTR, ppixbPTR, ppixdPTR)
	if ppixthPTR <> IntPtr.Zero then ppixth = new Pix(ppixthPTR)
	if ppixbPTR <> IntPtr.Zero then ppixb = new Pix(ppixbPTR)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return _Result
End Function

' SRC\adaptmap.c (2500, 1)
' pixBackgroundNormFlex()
' pixBackgroundNormFlex(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This does adaptation flexibly to a quickly varying background.
''' For that reason, all input parameters should be small.
''' (2) sx and sy give the tile size; they should be in [5 - 7].
''' (3) The full width and height of the convolution kernel
''' are (2  smoothx + 1) and (2  smoothy + 1).  They
''' should be in [1 - 2].
''' (4) Basin filling is used to fill the large fg regions.  The
''' parameter %delta measures the height that the black
''' background is raised from the local minima.  By raising
''' the background, it is possible to threshold the large
''' fg regions to foreground.  If %delta is too large,
''' bg regions will be lifted, causing thickening of
''' the fg regions.  Use 0 to skip.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale; not colormapped</param>
'''  <param name="sx">[in] - desired tile dimensions; actual size may vary; use values between 3 and 10</param>
'''  <param name="sy">[in] - desired tile dimensions; actual size may vary; use values between 3 and 10</param>
'''  <param name="smoothx">[in] - half-width of convolution kernel applied to threshold array use values between 1 and 3</param>
'''  <param name="smoothy">[in] - half-width of convolution kernel applied to threshold array use values between 1 and 3</param>
'''  <param name="delta">[in] - difference parameter in basin filling; use 0 to skip</param>
'''   <returns>pixd 8 bpp, background-normalized), or NULL on error</returns>
Public Shared Function pixBackgroundNormFlex(
				ByVal pixs as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer, 
				ByVal smoothx as Integer, 
				ByVal smoothy as Integer, 
				ByVal delta as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale; not colormapped")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBackgroundNormFlex( pixs.Pointer, sx, sy, smoothx, smoothy, delta)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\adaptmap.c (2595, 1)
' pixContrastNorm()
' pixContrastNorm(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This function adaptively attempts to expand the contrast
''' to the full dynamic range in each tile.  If the contrast in
''' a tile is smaller than %mindiff, it uses the min and max
''' pixel values from neighboring tiles.  It also can use
''' convolution to smooth the min and max values from
''' neighboring tiles.  After all that processing, it is
''' possible that the actual pixel values in the tile are outside
''' the computed [min ... max] range for local contrast
''' normalization.  Such pixels are taken to be at either 0
''' (if below the min) or 255 (if above the max).
''' (2) pixd can be equal to pixs (in-place operation) or
''' null (makes a new pixd).
''' (3) sx and sy give the tile size; they are typically at least 20.
''' (4) mindiff is used to eliminate results for tiles where it is
''' likely that either fg or bg is missing.  A value around 50
''' or more is reasonable.
''' (5) The full width and height of the convolution kernel
''' are (2  smoothx + 1) and (2  smoothy + 1).  Some smoothing
''' is typically useful, and we limit the smoothing half-widths
''' to the range from 0 to 8.
''' (6) A linear TRC (gamma = 1.0) is applied to increase the contrast
''' in each tile.  The result can subsequently be globally corrected,
''' by applying pixGammaTRC() with arbitrary values of gamma
''' and the 0 and 255 points of the mapping.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - 8 bpp; null or equal to pixs</param>
'''  <param name="pixs">[in] - 8 bpp grayscale; not colormapped</param>
'''  <param name="sx">[in] - tile dimensions</param>
'''  <param name="sy">[in] - tile dimensions</param>
'''  <param name="mindiff">[in] - minimum difference to accept as valid</param>
'''  <param name="smoothx">[in] - half-width of convolution kernel applied to min and max arrays use 0 for no smoothing</param>
'''  <param name="smoothy">[in] - half-width of convolution kernel applied to min and max arrays use 0 for no smoothing</param>
'''   <returns>pixd always</returns>
Public Shared Function pixContrastNorm(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer, 
				ByVal mindiff as Integer, 
				ByVal smoothx as Integer, 
				ByVal smoothy as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale; not colormapped")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixContrastNorm( pixdPTR, pixs.Pointer, sx, sy, mindiff, smoothx, smoothy)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\adaptmap.c (2655, 1)
' pixMinMaxTiles()
' pixMinMaxTiles(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This computes filtered and smoothed values for the min and
''' max pixel values in each tile of the image.
''' (2) See pixContrastNorm() for usage.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale; not colormapped</param>
'''  <param name="sx">[in] - tile dimensions</param>
'''  <param name="sy">[in] - tile dimensions</param>
'''  <param name="mindiff">[in] - minimum difference to accept as valid</param>
'''  <param name="smoothx">[in] - half-width of convolution kernel applied to min and max arrays use 0 for no smoothing</param>
'''  <param name="smoothy">[in] - half-width of convolution kernel applied to min and max arrays use 0 for no smoothing</param>
'''  <param name="ppixmin">[out] - tiled minima</param>
'''  <param name="ppixmax">[out] - tiled maxima</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixMinMaxTiles(
				ByVal pixs as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer, 
				ByVal mindiff as Integer, 
				ByVal smoothx as Integer, 
				ByVal smoothy as Integer, 
				ByRef ppixmin as Pix, 
				ByRef ppixmax as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale; not colormapped")

	Dim ppixminPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixmin) Then ppixminPTR = ppixmin.Pointer
	Dim ppixmaxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixmax) Then ppixmaxPTR = ppixmax.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixMinMaxTiles( pixs.Pointer, sx, sy, mindiff, smoothx, smoothy, ppixminPTR, ppixmaxPTR)
	if ppixminPTR <> IntPtr.Zero then ppixmin = new Pix(ppixminPTR)
	if ppixmaxPTR <> IntPtr.Zero then ppixmax = new Pix(ppixmaxPTR)

	Return _Result
End Function

' SRC\adaptmap.c (2746, 1)
' pixSetLowContrast()
' pixSetLowContrast(PIX *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This compares corresponding pixels in pixs1 and pixs2.
''' When they differ by less than %mindiff, set the pixel
''' values to 0 in each.  Each pixel typically represents a tile
''' in a larger image, and a very small difference between
''' the min and max in the tile indicates that the min and max
''' values are not to be trusted.
''' (2) If contrast (pixel difference) detection is expected to fail,
''' caller should check return value.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs1">[in] - 8 bpp</param>
'''  <param name="pixs2">[in] - 8 bpp</param>
'''  <param name="mindiff">[in] - minimum difference to accept as valid</param>
'''   <returns>0 if OK; 1 if no pixel diffs are large enough, or on error</returns>
Public Shared Function pixSetLowContrast(
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix, 
				ByVal mindiff as Integer) as Integer

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")
	If {8}.contains (pixs1.d) = false then Throw New ArgumentException ("8 bpp")
	If {8}.contains (pixs2.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetLowContrast( pixs1.Pointer, pixs2.Pointer, mindiff)

	Return _Result
End Function

' SRC\adaptmap.c (2829, 1)
' pixLinearTRCTiled()
' pixLinearTRCTiled(PIX *, PIX *, l_int32, l_int32, PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) pixd can be equal to pixs (in-place operation) or
''' null (makes a new pixd).
''' (2) sx and sy give the tile size; they are typically at least 20.
''' (3) pixmin and pixmax are generated by pixMinMaxTiles()
''' (4) For each tile, this does a linear expansion of the dynamic
''' range so that the min value in the tile becomes 0 and the
''' max value in the tile becomes 255.
''' (5) The LUTs that do the mapping are generated as needed
''' and stored for reuse in an integer array within the ptr array iaa[].
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - 8 bpp</param>
'''  <param name="pixs">[in] - 8 bpp, not colormapped</param>
'''  <param name="sx">[in] - tile dimensions</param>
'''  <param name="sy">[in] - tile dimensions</param>
'''  <param name="pixmin">[in] - pix of min values in tiles</param>
'''  <param name="pixmax">[in] - pix of max values in tiles</param>
'''   <returns>pixd always</returns>
Public Shared Function pixLinearTRCTiled(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer, 
				ByVal pixmin as Pix, 
				ByVal pixmax as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixmin) then Throw New ArgumentNullException  ("pixmin cannot be Nothing")
	If IsNothing (pixmax) then Throw New ArgumentNullException  ("pixmax cannot be Nothing")
	If {8}.contains (pixd.d) = false then Throw New ArgumentException ("8 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixLinearTRCTiled( pixdPTR, pixs.Pointer, sx, sy, pixmin.Pointer, pixmax.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\affine.c"
' SRC\affine.c (280, 1)
' pixAffineSampledPta()
' pixAffineSampledPta(PIX *, PTA *, PTA *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Brings in either black or white pixels from the boundary.
''' (2) Retains colormap, which you can do for a sampled transform..
''' (3) The 3 points must not be collinear.
''' (4) The order of the 3 points is arbitrary; however, to compare
''' with the sequential transform they must be in these locations
''' and in this order origin, x-axis, y-axis.
''' (5) For 1 bpp images, this has much better quality results
''' than pixAffineSequential(), particularly for text.
''' It is about 3x slower, but does not require additional
''' border pixels.  The poor quality of pixAffineSequential()
''' is due to repeated quantized transforms.  It is strongly
''' recommended that pixAffineSampled() be used for 1 bpp images.
''' (6) For 8 or 32 bpp, much better quality is obtained by the
''' somewhat slower pixAffinePta().  See that function
''' for relative timings between sampled and interpolated.
''' (7) To repeat, use of the sequential transform,
''' pixAffineSequential(), for any images, is discouraged.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths</param>
'''  <param name="ptad">[in] - 3 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 3 pts of initial coordinate space</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAffineSampledPta(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAffineSampledPta( pixs.Pointer, ptad.Pointer, ptas.Pointer, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\affine.c (330, 1)
' pixAffineSampled()
' pixAffineSampled(PIX *, l_float32 *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Brings in either black or white pixels from the boundary.
''' (2) Retains colormap, which you can do for a sampled transform..
''' (3) For 8 or 32 bpp, much better quality is obtained by the
''' somewhat slower pixAffine().  See that function
''' for relative timings between sampled and interpolated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths</param>
'''  <param name="vc">[in] - vector of 6 coefficients for affine transformation</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAffineSampled(
				ByVal pixs as Pix, 
				ByVal vc as Single(), 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAffineSampled( pixs.Pointer, vc, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\affine.c (423, 1)
' pixAffinePta()
' pixAffinePta(PIX *, PTA *, PTA *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Brings in either black or white pixels from the boundary
''' (2) Removes any existing colormap, if necessary, before transforming
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="ptad">[in] - 3 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 3 pts of initial coordinate space</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAffinePta(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAffinePta( pixs.Pointer, ptad.Pointer, ptas.Pointer, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\affine.c (493, 1)
' pixAffine()
' pixAffine(PIX *, l_float32 *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Brings in either black or white pixels from the boundary
''' (2) Removes any existing colormap, if necessary, before transforming
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="vc">[in] - vector of 6 coefficients for affine transformation</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAffine(
				ByVal pixs as Pix, 
				ByVal vc as Single(), 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAffine( pixs.Pointer, vc, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\affine.c (549, 1)
' pixAffinePtaColor()
' pixAffinePtaColor(PIX *, PTA *, PTA *, l_uint32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="ptad">[in] - 3 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 3 pts of initial coordinate space</param>
'''  <param name="colorval">[in] - e.g., 0 to bring in BLACK, 0xffffff00 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAffinePtaColor(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal colorval as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAffinePtaColor( pixs.Pointer, ptad.Pointer, ptas.Pointer, colorval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\affine.c (590, 1)
' pixAffineColor()
' pixAffineColor(PIX *, l_float32 *, l_uint32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="vc">[in] - vector of 6 coefficients for affine transformation</param>
'''  <param name="colorval">[in] - e.g., 0 to bring in BLACK, 0xffffff00 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAffineColor(
				ByVal pixs as Pix, 
				ByVal vc as Single(), 
				ByVal colorval as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAffineColor( pixs.Pointer, vc, colorval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\affine.c (652, 1)
' pixAffinePtaGray()
' pixAffinePtaGray(PIX *, PTA *, PTA *, l_uint8) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="ptad">[in] - 3 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 3 pts of initial coordinate space</param>
'''  <param name="grayval">[in] - 0 to bring in BLACK, 255 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAffinePtaGray(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal grayval as Byte) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (grayval) then Throw New ArgumentNullException  ("grayval cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAffinePtaGray( pixs.Pointer, ptad.Pointer, ptas.Pointer, grayval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\affine.c (694, 1)
' pixAffineGray()
' pixAffineGray(PIX *, l_float32 *, l_uint8) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="vc">[in] - vector of 6 coefficients for affine transformation</param>
'''  <param name="grayval">[in] - 0 to bring in BLACK, 255 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAffineGray(
				ByVal pixs as Pix, 
				ByVal vc as Single(), 
				ByVal grayval as Byte) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")
	If IsNothing (grayval) then Throw New ArgumentNullException  ("grayval cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAffineGray( pixs.Pointer, vc, grayval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\affine.c (782, 1)
' pixAffinePtaWithAlpha()
' pixAffinePtaWithAlpha(PIX *, PTA *, PTA *, PIX *, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The alpha channel is transformed separately from pixs,
''' and aligns with it, being fully transparent outside the
''' boundary of the transformed pixs.  For pixels that are fully
''' transparent, a blending function like pixBlendWithGrayMask()
''' will give zero weight to corresponding pixels in pixs.
''' (2) If pixg is NULL, it is generated as an alpha layer that is
''' partially opaque, using %fract.  Otherwise, it is cropped
''' to pixs if required and %fract is ignored.  The alpha channel
''' in pixs is never used.
''' (3) Colormaps are removed.
''' (4) When pixs is transformed, it doesn't matter what color is brought
''' in because the alpha channel will be transparent (0) there.
''' (5) To avoid losing source pixels in the destination, it may be
''' necessary to add a border to the source pix before doing
''' the affine transformation.  This can be any non-negative number.
''' (6) The input %ptad and %ptas are in a coordinate space before
''' the border is added.  Internally, we compensate for this
''' before doing the affine transform on the image after the border
''' is added.
''' (7) The default setting for the border values in the alpha channel
''' is 0 (transparent) for the outermost ring of pixels and
''' (0.5  fract  255) for the second ring.  When blended over
''' a second image, this
''' (a) shrinks the visible image to make a clean overlap edge
''' with an image below, and
''' (b) softens the edges by weakening the aliasing there.
''' Use l_setAlphaMaskBorder() to change these values.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="ptad">[in] - 3 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 3 pts of initial coordinate space</param>
'''  <param name="pixg">[in][optional] - 8 bpp, can be null</param>
'''  <param name="fract">[in] - between 0.0 and 1.0, with 0.0 fully transparent and 1.0 fully opaque</param>
'''  <param name="border">[in] - of pixels added to capture transformed source pixels</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAffinePtaWithAlpha(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal pixg as Pix, 
				ByVal fract as Single, 
				ByVal border as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim pixgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixg) Then pixgPTR = pixg.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAffinePtaWithAlpha( pixs.Pointer, ptad.Pointer, ptas.Pointer, pixgPTR, fract, border)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\affine.c (931, 1)
' getAffineXformCoeffs()
' getAffineXformCoeffs(PTA *, PTA *, l_float32 **) as l_ok
'''  <summary>
''' We have a set of six equations, describing the affine
''' transformation that takes 3 points ptas into 3 other
''' points ptad.  These equations are
''' x1' = c[0]x1 + c[1]y1 + c[2]
''' y1' = c[3]x1 + c[4]y1 + c[5]
''' x2' = c[0]x2 + c[1]y2 + c[2]
''' y2' = c[3]x2 + c[4]y2 + c[5]
''' x3' = c[0]x3 + c[1]y3 + c[2]
''' y3' = c[3]x3 + c[4]y3 + c[5]
''' This can be represented as
''' AC = B
''' where B and C are column vectors
''' B = [ x1' y1' x2' y2' x3' y3' ]
''' C = [ c[0] c[1] c[2] c[3] c[4] c[5] c[6] ]
''' and A is the 6x6 matrix
''' x1   y1   1   0 0 0
''' 0 0   0   x1   y1   1
''' x2   y2   1   0 0 0
''' 0 0   0   x2   y2   1
''' x3   y3   1   0 0 0
''' 0 0   0   x3   y3   1
''' These six equations are solved here for the coefficients C.
''' These six coefficients can then be used to find the dest
''' point x',y') corresponding to any src point (x,y, according
''' to the equations
''' x' = c[0]x + c[1]y + c[2]
''' y' = c[3]x + c[4]y + c[5]
''' that are implemented in affineXformPt.
''' !!!!!!!!!!!!!!!!!!   Very important   !!!!!!!!!!!!!!!!!!!!!!
''' When the affine transform is composed from a set of simple
''' operations such as translation, scaling and rotation,
''' it is built in a form to convert from the un-transformed src
''' point to the transformed dest point.  However, when an
''' affine transform is used on images, it is used in an inverted
''' way it converts from the transformed dest point to the
''' un-transformed src point.  So, for example, if you transform
''' a boxa using transform A, to transform an image in the same
''' way you must use the inverse of A.
''' For example, if you transform a boxa with a 3x3 affine matrix
''' 'mat', the analogous image transformation must use 'matinv'
''' \code
''' boxad = boxaAffineTransform(boxas, mat);
''' affineInvertXform(mat, matinv);
''' pixd = pixAffine(pixs, matinv, L_BRING_IN_WHITE);
''' \endcode
''' !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - source 3 points; unprimed</param>
'''  <param name="ptad">[in] - transformed 3 points; primed</param>
'''  <param name="pvc">[out] - vector of coefficients of transform</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function getAffineXformCoeffs(
				ByVal ptas as Pta, 
				ByVal ptad as Pta, 
				ByRef pvc as List(Of Single())) as Integer

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")

Dim pvcPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.getAffineXformCoeffs( ptas.Pointer, ptad.Pointer, pvcPTR)

	Return _Result
End Function

' SRC\affine.c (1024, 1)
' affineInvertXform()
' affineInvertXform(l_float32 *, l_float32 **) as l_ok
'''  <summary>
''' Notes
''' (1) The 6 affine transform coefficients are the first
''' two rows of a 3x3 matrix where the last row has
''' only a 1 in the third column.  We invert this
''' using gaussjordan(), and select the first 2 rows
''' as the coefficients of the inverse affine transform.
''' (2) Alternatively, we can find the inverse transform
''' coefficients by inverting the 2x2 submatrix,
''' and treating the top 2 coefficients in the 3rd column as
''' a RHS vector for that 2x2 submatrix.  Then the
''' 6 inverted transform coefficients are composed of
''' the inverted 2x2 submatrix and the negative of the
''' transformed RHS vector.  Why is this so?  We have
''' Y = AX + R  (2 equations in 6 unknowns)
''' Then
''' X = A'Y - A'R
''' Gauss-jordan solves
''' AF = R
''' and puts the solution for F, which is A'R,
''' into the input R vector.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="vc">[in] - vector of 6 coefficients</param>
'''  <param name="pvci">[out] - inverted transform</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function affineInvertXform(
				ByVal vc as Single(), 
				ByRef pvci as List(Of Single())) as Integer

	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")

Dim pvciPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.affineInvertXform( vc, pvciPTR)

	Return _Result
End Function

' SRC\affine.c (1107, 1)
' affineXformSampledPt()
' affineXformSampledPt(l_float32 *, l_int32, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This finds the nearest pixel coordinates of the transformed point.
''' (2) It does not check ptrs for returned data!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="vc">[in] - vector of 6 coefficients</param>
'''  <param name="x">[in] - initial point</param>
'''  <param name="y">[in] - initial point</param>
'''  <param name="pxp">[out] - transformed point</param>
'''  <param name="pyp">[out] - transformed point</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function affineXformSampledPt(
				ByVal vc as Single(), 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByRef pxp as Integer, 
				ByRef pyp as Integer) as Integer

	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.affineXformSampledPt( vc, x, y, pxp, pyp)

	Return _Result
End Function

' SRC\affine.c (1139, 1)
' affineXformPt()
' affineXformPt(l_float32 *, l_int32, l_int32, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This computes the floating point location of the transformed point.
''' (2) It does not check ptrs for returned data!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="vc">[in] - vector of 6 coefficients</param>
'''  <param name="x">[in] - initial point</param>
'''  <param name="y">[in] - initial point</param>
'''  <param name="pxp">[out] - transformed point</param>
'''  <param name="pyp">[out] - transformed point</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function affineXformPt(
				ByVal vc as Single(), 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByRef pxp as Single(), 
				ByRef pyp as Single()) as Integer

	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.affineXformPt( vc, x, y, pxp, pyp)

	Return _Result
End Function

' SRC\affine.c (1180, 1)
' linearInterpolatePixelColor()
' linearInterpolatePixelColor(l_uint32 *, l_int32, l_int32, l_int32, l_float32, l_float32, l_uint32, l_uint32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This is a standard linear interpolation function.  It is
''' equivalent to area weighting on each component, and
''' avoids "jaggies" when rendering sharp edges.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="datas">[in] - ptr to beginning of image data</param>
'''  <param name="wpls">[in] - 32-bit word/line for this data array</param>
'''  <param name="w">[in] - of image</param>
'''  <param name="h">[in] - of image</param>
'''  <param name="x">[in] - floating pt location for evaluation</param>
'''  <param name="y">[in] - floating pt location for evaluation</param>
'''  <param name="colorval">[in] - color brought in from the outside when the input x,y location is outside the image; in 0xrrggbb00 format)</param>
'''  <param name="pval">[out] - interpolated color value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function linearInterpolatePixelColor(
				ByVal datas as Byte(), 
				ByVal wpls as Integer, 
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal x as Single, 
				ByVal y as Single, 
				ByVal colorval as UInteger, 
				ByRef pval as UInteger) as Integer

	If IsNothing (datas) then Throw New ArgumentNullException  ("datas cannot be Nothing")
	If IsNothing (x) then Throw New ArgumentNullException  ("x cannot be Nothing")
	If IsNothing (y) then Throw New ArgumentNullException  ("y cannot be Nothing")

	Dim datasPTR As IntPtr = Marshal.AllocHGlobal(datas.Count) : Marshal.Copy(datas, 0, datasPTR, datas.Length)

	Dim _Result as Integer = LeptonicaSharp.Natives.linearInterpolatePixelColor( datasPTR, wpls, w, h, x, y, colorval, pval)

	Return _Result
End Function

' SRC\affine.c (1267, 1)
' linearInterpolatePixelGray()
' linearInterpolatePixelGray(l_uint32 *, l_int32, l_int32, l_int32, l_float32, l_float32, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This is a standard linear interpolation function.  It is
''' equivalent to area weighting on each component, and
''' avoids "jaggies" when rendering sharp edges.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="datas">[in] - ptr to beginning of image data</param>
'''  <param name="wpls">[in] - 32-bit word/line for this data array</param>
'''  <param name="w">[in] - of image</param>
'''  <param name="h">[in] - of image</param>
'''  <param name="x">[in] - floating pt location for evaluation</param>
'''  <param name="y">[in] - floating pt location for evaluation</param>
'''  <param name="grayval">[in] - color brought in from the outside when the input x,y location is outside the image</param>
'''  <param name="pval">[out] - interpolated gray value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function linearInterpolatePixelGray(
				ByVal datas as Byte(), 
				ByVal wpls as Integer, 
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal x as Single, 
				ByVal y as Single, 
				ByVal grayval as Integer, 
				ByRef pval as Integer) as Integer

	If IsNothing (datas) then Throw New ArgumentNullException  ("datas cannot be Nothing")
	If IsNothing (x) then Throw New ArgumentNullException  ("x cannot be Nothing")
	If IsNothing (y) then Throw New ArgumentNullException  ("y cannot be Nothing")

	Dim datasPTR As IntPtr = Marshal.AllocHGlobal(datas.Count) : Marshal.Copy(datas, 0, datasPTR, datas.Length)

	Dim _Result as Integer = LeptonicaSharp.Natives.linearInterpolatePixelGray( datasPTR, wpls, w, h, x, y, grayval, pval)

	Return _Result
End Function

' SRC\affine.c (1346, 1)
' gaussjordan()
' gaussjordan(l_float32 **, l_float32 *, l_int32) as l_int32
'''  <summary>
''' Notes
''' (1) There are two side-effects
''' The matrix a is transformed to its inverse A
''' The rhs vector b is transformed to the solution x
''' of the linear equation ax = b
''' (2) The inverse A can then be used to solve the same equation with
''' different rhs vectors c by multiplication x = Ac
''' (3) Adapted from "Numerical Recipes in C, Second Edition", 1992,
''' pp. 36-41 (gauss-jordan elimination)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="a">[in] - n x n matrix</param>
'''  <param name="b">[in] - n x 1 right-hand side column vector</param>
'''  <param name="n">[in] - dimension</param>
'''   <returns>0 if ok, 1 on error</returns>
Public Shared Function gaussjordan(
				ByVal a as List(Of Single()), 
				ByVal b as Single(), 
				ByVal n as Integer) as Integer

	If IsNothing (a) then Throw New ArgumentNullException  ("a cannot be Nothing")
	If IsNothing (b) then Throw New ArgumentNullException  ("b cannot be Nothing")

Dim aPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.gaussjordan( aPTR, b, n)

	Return _Result
End Function

' SRC\affine.c (1470, 1)
' pixAffineSequential()
' pixAffineSequential(PIX *, PTA *, PTA *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The 3 pts must not be collinear.
''' (2) The 3 pts must be given in this order
''' ~ origin
''' ~ a location along the x-axis
''' ~ a location along the y-axis.
''' (3) You must guess how much border must be added so that no
''' pixels are lost in the transformations from src to
''' dest coordinate space.  (This can be calculated but it
''' is a lot of work!)  For coordinate spaces that are nearly
''' at right angles, on a 300 ppi scanned page, the addition
''' of 1000 pixels on each side is usually sufficient.
''' (4) This is here for pedagogical reasons.  It is about 3x faster
''' on 1 bpp images than pixAffineSampled(), but the results
''' on text are much inferior.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="ptad">[in] - 3 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 3 pts of initial coordinate space</param>
'''  <param name="bw">[in] - pixels of additional border width during computation</param>
'''  <param name="bh">[in] - pixels of additional border height during computation</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAffineSequential(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal bw as Integer, 
				ByVal bh as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAffineSequential( pixs.Pointer, ptad.Pointer, ptas.Pointer, bw, bh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\affinecompose.c"
' SRC\affinecompose.c (90, 1)
' createMatrix2dTranslate()
' createMatrix2dTranslate(l_float32, l_float32) as l_float32 *
'''  <summary>
''' Notes
''' (1) The translation is equivalent to
''' v' = Av
''' where v and v' are 1x3 column vectors in the form
''' v = [x, y, 1]^ ^ denotes transpose
''' and the affine translation matrix is
''' A = [ 1   0   tx
''' 0   1   ty
''' 0   0 1  ]
''' (2) We consider translation as with respect to a fixed origin.
''' In a clipping operation, the origin moves and the points
''' are fixed, and you use (-tx, -ty) where (tx, ty) is the
''' translation vector of the origin.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="transx">[in] - x component of translation wrt. the origin</param>
'''  <param name="transy">[in] - y component of translation wrt. the origin</param>
'''   <returns>3x3 transform matrix, or NULL on error</returns>
Public Shared Function createMatrix2dTranslate(
				ByVal transx as Single, 
				ByVal transy as Single) as Single()

	If IsNothing (transx) then Throw New ArgumentNullException  ("transx cannot be Nothing")
	If IsNothing (transy) then Throw New ArgumentNullException  ("transy cannot be Nothing")


	Dim _Result as Single() = LeptonicaSharp.Natives.createMatrix2dTranslate( transx, transy)

	Return _Result
End Function

' SRC\affinecompose.c (130, 1)
' createMatrix2dScale()
' createMatrix2dScale(l_float32, l_float32) as l_float32 *
'''  <summary>
''' Notes
''' (1) The scaling is equivalent to
''' v' = Av
''' where v and v' are 1x3 column vectors in the form
''' v = [x, y, 1]^ ^ denotes transpose
''' and the affine scaling matrix is
''' A = [ sx  0 0
''' 0   sy   0
''' 0   0 1  ]
''' (2) We consider scaling as with respect to a fixed origin.
''' In other words, the origin is the only point that doesn't
''' move in the scaling transform.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="scalex">[in] - horizontal scale factor</param>
'''  <param name="scaley">[in] - vertical scale factor</param>
'''   <returns>3x3 transform matrix, or NULL on error</returns>
Public Shared Function createMatrix2dScale(
				ByVal scalex as Single, 
				ByVal scaley as Single) as Single()



	Dim _Result as Single() = LeptonicaSharp.Natives.createMatrix2dScale( scalex, scaley)

	Return _Result
End Function

' SRC\affinecompose.c (182, 1)
' createMatrix2dRotate()
' createMatrix2dRotate(l_float32, l_float32, l_float32) as l_float32 *
'''  <summary>
''' Notes
''' (1) The rotation is equivalent to
''' v' = Av
''' where v and v' are 1x3 column vectors in the form
''' v = [x, y, 1]^ ^ denotes transpose
''' and the affine rotation matrix is
''' A = [ cosa   -sina xc1-cosa + ycsina
''' sina cosa yc1-cosa - xcsina
''' 0 0  1   ]
''' If the rotation is about the origin, xc, yc) = (0, 0 and
''' this simplifies to
''' A = [ cosa   -sina 0
''' sina cosa 0
''' 0 0  1 ]
''' These relations follow from the following equations, which
''' you can convince yourself are correct as follows.  Draw a
''' circle centered on xc,yc) and passing through (x,y), with
''' (x',y') on the arc at an angle 'a' clockwise from (x,y).
''' [ Hint cosa + b = cosa  cosb - sina  sinb
''' sina + b = sina  cosb + cosa  sinb ]
''' x' - xc =  x - xc)  cosa - (y - yc  sina
''' y' - yc =  x - xc)  sina + (y - yc  cosa
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="xc">[in] - location of center of rotation</param>
'''  <param name="yc">[in] - location of center of rotation</param>
'''  <param name="angle">[in] - rotation in radians; clockwise is positive</param>
'''   <returns>3x3 transform matrix, or NULL on error</returns>
Public Shared Function createMatrix2dRotate(
				ByVal xc as Single, 
				ByVal yc as Single, 
				ByVal angle as Single) as Single()

	If IsNothing (xc) then Throw New ArgumentNullException  ("xc cannot be Nothing")
	If IsNothing (yc) then Throw New ArgumentNullException  ("yc cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as Single() = LeptonicaSharp.Natives.createMatrix2dRotate( xc, yc, angle)

	Return _Result
End Function

' SRC\affinecompose.c (223, 1)
' ptaTranslate()
' ptaTranslate(PTA *, l_float32, l_float32) as PTA *
'''  <summary>
''' Notes
''' (1) See createMatrix2dTranslate() for details of transform.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - for initial points</param>
'''  <param name="transx">[in] - x component of translation wrt. the origin</param>
'''  <param name="transy">[in] - y component of translation wrt. the origin</param>
'''   <returns>ptad  translated points, or NULL on error</returns>
Public Shared Function ptaTranslate(
				ByVal ptas as Pta, 
				ByVal transx as Single, 
				ByVal transy as Single) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (transx) then Throw New ArgumentNullException  ("transx cannot be Nothing")
	If IsNothing (transy) then Throw New ArgumentNullException  ("transy cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaTranslate( ptas.Pointer, transx, transy)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\affinecompose.c (262, 1)
' ptaScale()
' ptaScale(PTA *, l_float32, l_float32) as PTA *
'''  <summary>
''' Notes
''' (1) See createMatrix2dScale() for details of transform.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - for initial points</param>
'''  <param name="scalex">[in] - horizontal scale factor</param>
'''  <param name="scaley">[in] - vertical scale factor</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ptaScale(
				ByVal ptas as Pta, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaScale( ptas.Pointer, scalex, scaley)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\affinecompose.c (313, 1)
' ptaRotate()
' ptaRotate(PTA *, l_float32, l_float32, l_float32) as PTA *
'''  <summary>
''' Notes;
''' (1) See createMatrix2dScale() for details of transform.
''' (2) This transform can be thought of as composed of the
''' sum of two parts
''' a) an (x,y)-dependent rotation about the origin
''' xr = x  cosa - y  sina
''' yr = x  sina + y  cosa
''' b) an (x,y)-independent translation that depends on the
''' rotation center and the angle
''' xt = xc - xc  cosa + yc  sina
''' yt = yc - xc  sina - yc  cosa
''' The translation part (xt,yt) is equal to the difference
''' between the center (xc,yc) and the location of the
''' center after it is rotated about the origin.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - for initial points</param>
'''  <param name="xc">[in] - location of center of rotation</param>
'''  <param name="yc">[in] - location of center of rotation</param>
'''  <param name="angle">[in] - rotation in radians; clockwise is positive</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ptaRotate(
				ByVal ptas as Pta, 
				ByVal xc as Single, 
				ByVal yc as Single, 
				ByVal angle as Single) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (xc) then Throw New ArgumentNullException  ("xc cannot be Nothing")
	If IsNothing (yc) then Throw New ArgumentNullException  ("yc cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaRotate( ptas.Pointer, xc, yc, angle)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\affinecompose.c (358, 1)
' boxaTranslate()
' boxaTranslate(BOXA *, l_float32, l_float32) as BOXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="transx">[in] - x component of translation wrt. the origin</param>
'''  <param name="transy">[in] - y component of translation wrt. the origin</param>
'''   <returns>boxad  translated boxas, or NULL on error Notes (1) See createMatrix2dTranslate() for details of transform.</returns>
Public Shared Function boxaTranslate(
				ByVal boxas as Boxa, 
				ByVal transx as Single, 
				ByVal transy as Single) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (transx) then Throw New ArgumentNullException  ("transx cannot be Nothing")
	If IsNothing (transy) then Throw New ArgumentNullException  ("transy cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaTranslate( boxas.Pointer, transx, transy)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\affinecompose.c (391, 1)
' boxaScale()
' boxaScale(BOXA *, l_float32, l_float32) as BOXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="scalex">[in] - horizontal scale factor</param>
'''  <param name="scaley">[in] - vertical scale factor</param>
'''   <returns>boxad  scaled boxas, or NULL on error Notes (1) See createMatrix2dScale() for details of transform.</returns>
Public Shared Function boxaScale(
				ByVal boxas as Boxa, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaScale( boxas.Pointer, scalex, scaley)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\affinecompose.c (424, 1)
' boxaRotate()
' boxaRotate(BOXA *, l_float32, l_float32, l_float32) as BOXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="xc">[in] - location of center of rotation</param>
'''  <param name="yc">[in] - location of center of rotation</param>
'''  <param name="angle">[in] - rotation in radians; clockwise is positive</param>
'''   <returns>boxad  scaled boxas, or NULL on error Notes (1) See createMatrix2dRotate() for details of transform.</returns>
Public Shared Function boxaRotate(
				ByVal boxas as Boxa, 
				ByVal xc as Single, 
				ByVal yc as Single, 
				ByVal angle as Single) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (xc) then Throw New ArgumentNullException  ("xc cannot be Nothing")
	If IsNothing (yc) then Throw New ArgumentNullException  ("yc cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaRotate( boxas.Pointer, xc, yc, angle)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\affinecompose.c (457, 1)
' ptaAffineTransform()
' ptaAffineTransform(PTA *, l_float32 *) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - for initial points</param>
'''  <param name="mat">[in] - 3x3 transform matrix; canonical form</param>
'''   <returns>ptad  transformed points, or NULL on error</returns>
Public Shared Function ptaAffineTransform(
				ByVal ptas as Pta, 
				ByVal mat as Single()) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (mat) then Throw New ArgumentNullException  ("mat cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaAffineTransform( ptas.Pointer, mat)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\affinecompose.c (493, 1)
' boxaAffineTransform()
' boxaAffineTransform(BOXA *, l_float32 *) as BOXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="mat">[in] - 3x3 transform matrix; canonical form</param>
'''   <returns>boxad  transformed boxas, or NULL on error</returns>
Public Shared Function boxaAffineTransform(
				ByVal boxas as Boxa, 
				ByVal mat as Single()) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (mat) then Throw New ArgumentNullException  ("mat cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaAffineTransform( boxas.Pointer, mat)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\affinecompose.c (528, 1)
' l_productMatVec()
' l_productMatVec(l_float32 *, l_float32 *, l_float32 *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="mat">[in] - square matrix, as a 1-dimensional %size^2 array</param>
'''  <param name="vecs">[in] - input column vector of length %size</param>
'''  <param name="vecd">[in] - result column vector</param>
'''  <param name="size">[in] - matrix is %size x %size; vectors are length %size</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_productMatVec(
				ByVal mat as Single(), 
				ByVal vecs as Single(), 
				ByVal vecd as Single(), 
				ByVal size as Integer) as Integer

	If IsNothing (mat) then Throw New ArgumentNullException  ("mat cannot be Nothing")
	If IsNothing (vecs) then Throw New ArgumentNullException  ("vecs cannot be Nothing")
	If IsNothing (vecd) then Throw New ArgumentNullException  ("vecd cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_productMatVec( mat, vecs, vecd, size)

	Return _Result
End Function

' SRC\affinecompose.c (564, 1)
' l_productMat2()
' l_productMat2(l_float32 *, l_float32 *, l_float32 *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="mat1">[in] - square matrix, as a 1-dimensional size^2 array</param>
'''  <param name="mat2">[in] - square matrix, as a 1-dimensional size^2 array</param>
'''  <param name="matd">[in] - square matrix; product stored here</param>
'''  <param name="size">[in] - of matrices</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_productMat2(
				ByVal mat1 as Single(), 
				ByVal mat2 as Single(), 
				ByVal matd as Single(), 
				ByVal size as Integer) as Integer

	If IsNothing (mat1) then Throw New ArgumentNullException  ("mat1 cannot be Nothing")
	If IsNothing (mat2) then Throw New ArgumentNullException  ("mat2 cannot be Nothing")
	If IsNothing (matd) then Throw New ArgumentNullException  ("matd cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_productMat2( mat1, mat2, matd, size)

	Return _Result
End Function

' SRC\affinecompose.c (603, 1)
' l_productMat3()
' l_productMat3(l_float32 *, l_float32 *, l_float32 *, l_float32 *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="mat1">[in] - square matrix, as a 1-dimensional size^2 array</param>
'''  <param name="mat2">[in] - square matrix, as a 1-dimensional size^2 array</param>
'''  <param name="mat3">[in] - square matrix, as a 1-dimensional size^2 array</param>
'''  <param name="matd">[in] - square matrix; product stored here</param>
'''  <param name="size">[in] - of matrices</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_productMat3(
				ByVal mat1 as Single(), 
				ByVal mat2 as Single(), 
				ByVal mat3 as Single(), 
				ByVal matd as Single(), 
				ByVal size as Integer) as Integer

	If IsNothing (mat1) then Throw New ArgumentNullException  ("mat1 cannot be Nothing")
	If IsNothing (mat2) then Throw New ArgumentNullException  ("mat2 cannot be Nothing")
	If IsNothing (mat3) then Throw New ArgumentNullException  ("mat3 cannot be Nothing")
	If IsNothing (matd) then Throw New ArgumentNullException  ("matd cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_productMat3( mat1, mat2, mat3, matd, size)

	Return _Result
End Function

' SRC\affinecompose.c (644, 1)
' l_productMat4()
' l_productMat4(l_float32 *, l_float32 *, l_float32 *, l_float32 *, l_float32 *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="mat1">[in] - square matrix, as a 1-dimensional size^2 array</param>
'''  <param name="mat2">[in] - square matrix, as a 1-dimensional size^2 array</param>
'''  <param name="mat3">[in] - square matrix, as a 1-dimensional size^2 array</param>
'''  <param name="mat4">[in] - square matrix, as a 1-dimensional size^2 array</param>
'''  <param name="matd">[in] - square matrix; product stored here</param>
'''  <param name="size">[in] - of matrices</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_productMat4(
				ByVal mat1 as Single(), 
				ByVal mat2 as Single(), 
				ByVal mat3 as Single(), 
				ByVal mat4 as Single(), 
				ByVal matd as Single(), 
				ByVal size as Integer) as Integer

	If IsNothing (mat1) then Throw New ArgumentNullException  ("mat1 cannot be Nothing")
	If IsNothing (mat2) then Throw New ArgumentNullException  ("mat2 cannot be Nothing")
	If IsNothing (mat3) then Throw New ArgumentNullException  ("mat3 cannot be Nothing")
	If IsNothing (mat4) then Throw New ArgumentNullException  ("mat4 cannot be Nothing")
	If IsNothing (matd) then Throw New ArgumentNullException  ("matd cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_productMat4( mat1, mat2, mat3, mat4, matd, size)

	Return _Result
End Function

#End Region
#Region "SRC\arrayaccess.c"
' SRC\arrayaccess.c (74, 1)
' l_getDataBit()
' l_getDataBit(void *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
'''   <returns>val of the nth 1-bit pixel.</returns>
Public Shared Function l_getDataBit(
				ByVal line as Object, 
				ByVal n as Integer) as Integer

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.l_getDataBit( linePTR, n)

	Return _Result
End Function

' SRC\arrayaccess.c (91, 1)
' l_setDataBit()
' l_setDataBit(void *, l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
Public Shared Sub l_setDataBit(
				ByVal line as Object, 
				ByVal n as Integer)

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	LeptonicaSharp.Natives.l_setDataBit( linePTR, n)

End Sub

' SRC\arrayaccess.c (108, 1)
' l_clearDataBit()
' l_clearDataBit(void *, l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
Public Shared Sub l_clearDataBit(
				ByVal line as Object, 
				ByVal n as Integer)

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	LeptonicaSharp.Natives.l_clearDataBit( linePTR, n)

End Sub

' SRC\arrayaccess.c (134, 1)
' l_setDataBitVal()
' l_setDataBitVal(void *, l_int32, l_int32) as void
'''  <summary>
''' Notes
''' (1) This is an accessor for a 1 bpp pix.
''' (2) It is actually a little slower than using
''' if (val == 0)
''' l_ClearDataBit(line, n);
''' else
''' l_SetDataBit(line, n);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
'''  <param name="val">[in] - val to be inserted 0 or 1</param>
Public Shared Sub l_setDataBitVal(
				ByVal line as Object, 
				ByVal n as Integer, 
				ByVal val as Integer)

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	LeptonicaSharp.Natives.l_setDataBitVal( linePTR, n, val)

End Sub

' SRC\arrayaccess.c (155, 1)
' l_getDataDibit()
' l_getDataDibit(void *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
'''   <returns>val of the nth 2-bit pixel.</returns>
Public Shared Function l_getDataDibit(
				ByVal line as Object, 
				ByVal n as Integer) as Integer

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.l_getDataDibit( linePTR, n)

	Return _Result
End Function

' SRC\arrayaccess.c (171, 1)
' l_setDataDibit()
' l_setDataDibit(void *, l_int32, l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
'''  <param name="val">[in] - val to be inserted 0 - 3</param>
Public Shared Sub l_setDataDibit(
				ByVal line as Object, 
				ByVal n as Integer, 
				ByVal val as Integer)

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	LeptonicaSharp.Natives.l_setDataDibit( linePTR, n, val)

End Sub

' SRC\arrayaccess.c (194, 1)
' l_clearDataDibit()
' l_clearDataDibit(void *, l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
Public Shared Sub l_clearDataDibit(
				ByVal line as Object, 
				ByVal n as Integer)

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	LeptonicaSharp.Natives.l_clearDataDibit( linePTR, n)

End Sub

' SRC\arrayaccess.c (209, 1)
' l_getDataQbit()
' l_getDataQbit(void *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
'''   <returns>val of the nth 4-bit pixel.</returns>
Public Shared Function l_getDataQbit(
				ByVal line as Object, 
				ByVal n as Integer) as Integer

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.l_getDataQbit( linePTR, n)

	Return _Result
End Function

' SRC\arrayaccess.c (225, 1)
' l_setDataQbit()
' l_setDataQbit(void *, l_int32, l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
'''  <param name="val">[in] - val to be inserted 0 - 0xf</param>
Public Shared Sub l_setDataQbit(
				ByVal line as Object, 
				ByVal n as Integer, 
				ByVal val as Integer)

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	LeptonicaSharp.Natives.l_setDataQbit( linePTR, n, val)

End Sub

' SRC\arrayaccess.c (248, 1)
' l_clearDataQbit()
' l_clearDataQbit(void *, l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
Public Shared Sub l_clearDataQbit(
				ByVal line as Object, 
				ByVal n as Integer)

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	LeptonicaSharp.Natives.l_clearDataQbit( linePTR, n)

End Sub

' SRC\arrayaccess.c (263, 1)
' l_getDataByte()
' l_getDataByte(void *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
'''   <returns>value of the n-th byte pixel</returns>
Public Shared Function l_getDataByte(
				ByVal line as Object, 
				ByVal n as Integer) as Integer

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.l_getDataByte( linePTR, n)

	Return _Result
End Function

' SRC\arrayaccess.c (283, 1)
' l_setDataByte()
' l_setDataByte(void *, l_int32, l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
'''  <param name="val">[in] - val to be inserted 0 - 0xff</param>
Public Shared Sub l_setDataByte(
				ByVal line as Object, 
				ByVal n as Integer, 
				ByVal val as Integer)

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	LeptonicaSharp.Natives.l_setDataByte( linePTR, n, val)

End Sub

' SRC\arrayaccess.c (303, 1)
' l_getDataTwoBytes()
' l_getDataTwoBytes(void *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
'''   <returns>value of the n-th 2-byte pixel</returns>
Public Shared Function l_getDataTwoBytes(
				ByVal line as Object, 
				ByVal n as Integer) as Integer

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.l_getDataTwoBytes( linePTR, n)

	Return _Result
End Function

' SRC\arrayaccess.c (323, 1)
' l_setDataTwoBytes()
' l_setDataTwoBytes(void *, l_int32, l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
'''  <param name="val">[in] - val to be inserted 0 - 0xffff</param>
Public Shared Sub l_setDataTwoBytes(
				ByVal line as Object, 
				ByVal n as Integer, 
				ByVal val as Integer)

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	LeptonicaSharp.Natives.l_setDataTwoBytes( linePTR, n, val)

End Sub

' SRC\arrayaccess.c (343, 1)
' l_getDataFourBytes()
' l_getDataFourBytes(void *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
'''   <returns>value of the n-th 4-byte pixel</returns>
Public Shared Function l_getDataFourBytes(
				ByVal line as Object, 
				ByVal n as Integer) as Integer

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.l_getDataFourBytes( linePTR, n)

	Return _Result
End Function

' SRC\arrayaccess.c (359, 1)
' l_setDataFourBytes()
' l_setDataFourBytes(void *, l_int32, l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of data line</param>
'''  <param name="n">[in] - pixel index</param>
'''  <param name="val">[in] - val to be inserted 0 - 0xffffffff</param>
Public Shared Sub l_setDataFourBytes(
				ByVal line as Object, 
				ByVal n as Integer, 
				ByVal val as Integer)

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

Dim linePTR As IntPtr = Marshal.AllocHGlobal(0)

	LeptonicaSharp.Natives.l_setDataFourBytes( linePTR, n, val)

End Sub

#End Region
#Region "SRC\bardecode.c"
' SRC\bardecode.c (96, 1)
' barcodeDispatchDecoder()
' barcodeDispatchDecoder(char *, l_int32, l_int32) as char *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="barstr">[in] - string of integers in set {1,2,3,4} of bar widths</param>
'''  <param name="format">[in] - L_BF_ANY, L_BF_CODEI2OF5, L_BF_CODE93, ...</param>
'''  <param name="debugflag">[in] - use 1 to generate debug output</param>
'''   <returns>data string of decoded barcode data, or NULL on error</returns>
Public Shared Function barcodeDispatchDecoder(
				ByVal barstr as String, 
				ByVal format as Enumerations.L_BF, 
				ByVal debugflag as Integer) as String

	If IsNothing (barstr) then Throw New ArgumentNullException  ("barstr cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.barcodeDispatchDecoder( barstr, format, debugflag)

	Return _Result
End Function

' SRC\bardecode.c (173, 1)
' barcodeFormatIsSupported()
' barcodeFormatIsSupported(l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="format">[in] - </param>
'''   <returns>1 if format is one of those supported; 0 otherwise</returns>
Public Shared Function barcodeFormatIsSupported(
				ByVal format as Integer) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.barcodeFormatIsSupported( format)

	Return _Result
End Function

#End Region
#Region "SRC\baseline.c"
' SRC\baseline.c (113, 1)
' pixFindBaselines()
' pixFindBaselines(PIX *, PTA **, PIXA *) as NUMA *
'''  <summary>
''' Notes
''' (1) Input binary image must have text lines already aligned
''' horizontally.  This can be done by either rotating the
''' image with pixDeskew(), or, if a projective transform
''' is required, by doing pixDeskewLocal() first.
''' (2) Input null for pta if you don't want this returned.
''' The pta will come in pairs of points (left and right end
''' of each baseline).
''' (3) Caution this will not work properly on text with multiple
''' columns, where the lines are not aligned between columns.
''' If there are multiple columns, they should be extracted
''' separately before finding the baselines.
''' (4) This function constructs different types of output
''' for baselines; namely, a set of raster line values and
''' a set of end points of each baseline.
''' (5) This function was designed to handle short and long text lines
''' without using dangerous thresholds on the peak heights.  It does
''' this by combining the differential signal with a morphological
''' analysis of the locations of the text lines.  One can also
''' combine this data to normalize the peak heights, by weighting
''' the differential signal in the region of each baseline
''' by the inverse of the width of the text line found there.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, 300 ppi</param>
'''  <param name="ppta">[out][optional] - pairs of pts corresponding to approx. ends of each text line</param>
'''  <param name="pixadb">[in] - for debug output; use NULL to skip</param>
'''   <returns>na of baseline y values, or NULL on error</returns>
Public Shared Function pixFindBaselines(
				ByVal pixs as Pix, 
				ByRef ppta as Pta, 
				ByVal pixadb as Pixa) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixadb) then Throw New ArgumentNullException  ("pixadb cannot be Nothing")

Dim pptaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppta) Then pptaPTR = ppta.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFindBaselines( pixs.Pointer, pptaPTR, pixadb.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing
	if pptaPTR <> IntPtr.Zero then ppta = new Pta(pptaPTR)

	Return  new Numa(_Result)
End Function

' SRC\baseline.c (320, 1)
' pixDeskewLocal()
' pixDeskewLocal(PIX *, l_int32, l_int32, l_int32, l_float32, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This function allows deskew of a page whose skew changes
''' approximately linearly with vertical position.  It uses
''' a projective transform that in effect does a differential
''' shear about the LHS of the page, and makes all text lines
''' horizontal.
''' (2) The origin of the keystoning can be either a cheap document
''' feeder that rotates the page as it is passed through, or a
''' camera image taken from either the left or right side
''' of the vertical.
''' (3) The image transformation is a projective warping,
''' not a rotation.  Apart from this function, the text lines
''' must be properly aligned vertically with respect to each
''' other.  This can be done by pre-processing the page; e.g.,
''' by rotating or horizontally shearing it.
''' Typically, this can be achieved by vertically aligning
''' the page edge.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="nslices">[in] - the number of horizontal overlapping slices; must be larger than 1 and not exceed 20; use 0 for default</param>
'''  <param name="redsweep">[in] - sweep reduction factor 1, 2, 4 or 8; use 0 for default value</param>
'''  <param name="redsearch">[in] - search reduction factor 1, 2, 4 or 8, and not larger than redsweep; use 0 for default value</param>
'''  <param name="sweeprange">[in] - half the full range, assumed about 0; in degrees; use 0.0 for default value</param>
'''  <param name="sweepdelta">[in] - angle increment of sweep; in degrees; use 0.0 for default value</param>
'''  <param name="minbsdelta">[in] - min binary search increment angle; in degrees; use 0.0 for default value</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixDeskewLocal(
				ByVal pixs as Pix, 
				ByVal nslices as Integer, 
				ByVal redsweep as Integer, 
				ByVal redsearch as Integer, 
				ByVal sweeprange as Single, 
				ByVal sweepdelta as Single, 
				ByVal minbsdelta as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sweeprange) then Throw New ArgumentNullException  ("sweeprange cannot be Nothing")
	If IsNothing (sweepdelta) then Throw New ArgumentNullException  ("sweepdelta cannot be Nothing")
	If IsNothing (minbsdelta) then Throw New ArgumentNullException  ("minbsdelta cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")
	If {0,1,2,4,8}.contains (redsweep) = false then Throw New ArgumentException ("sweep reduction factor 1, 2, 4 or 8; use 0 for default value")
	If {0,1,2,4,8}.contains (redsearch) = false then Throw New ArgumentException ("search reduction factor 1, 2, 4 or 8, and not larger than redsweep; use 0 for default value")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDeskewLocal( pixs.Pointer, nslices, redsweep, redsearch, sweeprange, sweepdelta, minbsdelta)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\baseline.c (388, 1)
' pixGetLocalSkewTransform()
' pixGetLocalSkewTransform(PIX *, l_int32, l_int32, l_int32, l_float32, l_float32, l_float32, PTA **, PTA **) as l_ok
'''  <summary>
''' Notes
''' (1) This generates two pairs of points in the src, each pair
''' corresponding to a pair of points that would lie along
''' the same raster line in a transformed (dewarped) image.
''' (2) The sets of 4 src and 4 dest points returned by this function
''' can then be used, in a projective or bilinear transform,
''' to remove keystoning in the src.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="nslices">[in] - the number of horizontal overlapping slices; must be larger than 1 and not exceed 20; use 0 for default</param>
'''  <param name="redsweep">[in] - sweep reduction factor 1, 2, 4 or 8; use 0 for default value</param>
'''  <param name="redsearch">[in] - search reduction factor 1, 2, 4 or 8, and not larger than redsweep; use 0 for default value</param>
'''  <param name="sweeprange">[in] - half the full range, assumed about 0; in degrees; use 0.0 for default value</param>
'''  <param name="sweepdelta">[in] - angle increment of sweep; in degrees; use 0.0 for default value</param>
'''  <param name="minbsdelta">[in] - min binary search increment angle; in degrees; use 0.0 for default value</param>
'''  <param name="pptas">[out] - 4 points in the source</param>
'''  <param name="pptad">[out] - the corresponding 4 pts in the dest</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetLocalSkewTransform(
				ByVal pixs as Pix, 
				ByVal nslices as Integer, 
				ByVal redsweep as Integer, 
				ByVal redsearch as Integer, 
				ByVal sweeprange as Single, 
				ByVal sweepdelta as Single, 
				ByVal minbsdelta as Single, 
				ByRef pptas as Pta, 
				ByRef pptad as Pta) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sweeprange) then Throw New ArgumentNullException  ("sweeprange cannot be Nothing")
	If IsNothing (sweepdelta) then Throw New ArgumentNullException  ("sweepdelta cannot be Nothing")
	If IsNothing (minbsdelta) then Throw New ArgumentNullException  ("minbsdelta cannot be Nothing")
	If {0,1,2,4,8}.contains (redsweep) = false then Throw New ArgumentException ("sweep reduction factor 1, 2, 4 or 8; use 0 for default value")
	If {0,1,2,4,8}.contains (redsearch) = false then Throw New ArgumentException ("search reduction factor 1, 2, 4 or 8, and not larger than redsweep; use 0 for default value")

	Dim pptasPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pptas) Then pptasPTR = pptas.Pointer
	Dim pptadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pptad) Then pptadPTR = pptad.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetLocalSkewTransform( pixs.Pointer, nslices, redsweep, redsearch, sweeprange, sweepdelta, minbsdelta, pptasPTR, pptadPTR)
	if pptasPTR <> IntPtr.Zero then pptas = new Pta(pptasPTR)
	if pptadPTR <> IntPtr.Zero then pptad = new Pta(pptadPTR)

	Return _Result
End Function

' SRC\baseline.c (506, 1)
' pixGetLocalSkewAngles()
' pixGetLocalSkewAngles(PIX *, l_int32, l_int32, l_int32, l_float32, l_float32, l_float32, l_float32 *, l_float32 *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The local skew is measured in a set of overlapping strips.
''' We then do a least square linear fit parameters to get
''' the slope and intercept parameters a and b in
''' skew-angle = a  y + b  (degrees)
''' for the local skew as a function of raster line y.
''' This is then used to make naskew, which can be interpreted
''' as the computed skew angle (in degrees) at the left edge
''' of each raster line.
''' (2) naskew can then be used to find the baselines of text, because
''' each text line has a baseline that should intersect
''' the left edge of the image with the angle given by this
''' array, evaluated at the raster line of intersection.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="nslices">[in] - the number of horizontal overlapping slices; must be larger than 1 and not exceed 20; 0 for default</param>
'''  <param name="redsweep">[in] - sweep reduction factor 1, 2, 4 or 8; use 0 for default value</param>
'''  <param name="redsearch">[in] - search reduction factor 1, 2, 4 or 8, and not larger than redsweep; use 0 for default value</param>
'''  <param name="sweeprange">[in] - half the full range, assumed about 0; in degrees; use 0.0 for default value</param>
'''  <param name="sweepdelta">[in] - angle increment of sweep; in degrees; use 0.0 for default value</param>
'''  <param name="minbsdelta">[in] - min binary search increment angle; in degrees; use 0.0 for default value</param>
'''  <param name="pa">[out][optional] - slope of skew as fctn of y</param>
'''  <param name="pb">[out][optional] - intercept at y=0 of skew as fctn of y</param>
'''  <param name="debug">[in] - 1 for generating plot of skew angle vs. y; 0 otherwise</param>
'''   <returns>naskew, or NULL on error</returns>
Public Shared Function pixGetLocalSkewAngles(
				ByVal pixs as Pix, 
				ByVal nslices as Integer, 
				ByVal redsweep as Integer, 
				ByVal redsearch as Integer, 
				ByVal sweeprange as Single, 
				ByVal sweepdelta as Single, 
				ByVal minbsdelta as Single, 
				ByRef pa as Single(), 
				ByRef pb as Single(), 
				ByVal debug as Enumerations.DebugOnOff) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sweeprange) then Throw New ArgumentNullException  ("sweeprange cannot be Nothing")
	If IsNothing (sweepdelta) then Throw New ArgumentNullException  ("sweepdelta cannot be Nothing")
	If IsNothing (minbsdelta) then Throw New ArgumentNullException  ("minbsdelta cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")
	If {0,1,2,4,8}.contains (redsweep) = false then Throw New ArgumentException ("sweep reduction factor 1, 2, 4 or 8; use 0 for default value")
	If {0,1,2,4,8}.contains (redsearch) = false then Throw New ArgumentException ("search reduction factor 1, 2, 4 or 8, and not larger than redsweep; use 0 for default value")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetLocalSkewAngles( pixs.Pointer, nslices, redsweep, redsearch, sweeprange, sweepdelta, minbsdelta, pa, pb, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

#End Region
#Region "SRC\bbuffer.c"
' SRC\bbuffer.c (124, 1)
' bbufferCreate()
' bbufferCreate(const l_uint8 *, l_int32) as L_BBUFFER *
'''  <summary>
''' Notes
''' (1) If a buffer address is given, you should read all the data in.
''' (2) Allocates a bbuffer with associated byte array of
''' the given size.  If a buffer address is given,
''' it then reads the number of bytes into the byte array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="indata">[in] - address in memory [optional]</param>
'''  <param name="nalloc">[in] - size of byte array to be alloc'd 0 for default</param>
'''   <returns>bbuffer, or NULL on error</returns>
Public Shared Function bbufferCreate(
				ByVal indata as Byte(), 
				ByVal nalloc as Integer) as L_ByteBuffer



	Dim _Result as IntPtr = LeptonicaSharp.Natives.bbufferCreate( indata, nalloc)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_ByteBuffer(_Result)
End Function

' SRC\bbuffer.c (167, 1)
' bbufferDestroy()
' bbufferDestroy(L_BBUFFER **) as void
'''  <summary>
''' Notes
''' (1) Destroys the byte array in the bbuffer and then the bbuffer;
''' then nulls the contents of the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pbb">[in,out] - buffer to be nulled</param>
Public Shared Sub bbufferDestroy(
				ByRef pbb as L_ByteBuffer)


	Dim pbbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbb) Then pbbPTR = pbb.Pointer

	LeptonicaSharp.Natives.bbufferDestroy( pbbPTR)
	if pbbPTR <> IntPtr.Zero then pbb = new L_ByteBuffer(pbbPTR)

End Sub

' SRC\bbuffer.c (203, 1)
' bbufferDestroyAndSaveData()
' bbufferDestroyAndSaveData(L_BBUFFER **, size_t *) as l_uint8 *
'''  <summary>
''' Notes
''' (1) Copies data to newly allocated array; then destroys the bbuffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pbb">[in,out] - buffer to be nulled</param>
'''  <param name="pnbytes">[out] - number of bytes saved in array</param>
'''   <returns>barray newly allocated array of data</returns>
Public Shared Function bbufferDestroyAndSaveData(
				ByRef pbb as L_ByteBuffer, 
				ByRef pnbytes as UInteger) as Byte()


	Dim pbbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbb) Then pbbPTR = pbb.Pointer

	Dim _Result as Byte() = LeptonicaSharp.Natives.bbufferDestroyAndSaveData( pbbPTR, pnbytes)
	if pbbPTR <> IntPtr.Zero then pbb = new L_ByteBuffer(pbbPTR)

	Return _Result
End Function

' SRC\bbuffer.c (262, 1)
' bbufferRead()
' bbufferRead(L_BBUFFER *, l_uint8 *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) For a read after write, first remove the written
''' bytes by shifting the unwritten bytes in the array,
''' then check if there is enough room to add the new bytes.
''' If not, realloc with bbufferExpandArray(), resulting
''' in a second writing of the unwritten bytes.  While less
''' efficient, this is simpler than making a special case
''' of reallocNew().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="bb">[in] - bbuffer</param>
'''  <param name="src">[in] - source memory buffer from which bytes are read</param>
'''  <param name="nbytes">[in] - bytes to be read</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function bbufferRead(
				ByVal bb as L_ByteBuffer, 
				ByVal src as Byte(), 
				ByVal nbytes as Integer) as Integer

	If IsNothing (bb) then Throw New ArgumentNullException  ("bb cannot be Nothing")
	If IsNothing (src) then Throw New ArgumentNullException  ("src cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.bbufferRead( bb.Pointer, src, nbytes)

	Return _Result
End Function

' SRC\bbuffer.c (308, 1)
' bbufferReadStream()
' bbufferReadStream(L_BBUFFER *, FILE *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="bb">[in] - bbuffer</param>
'''  <param name="fp">[in] - source stream from which bytes are read</param>
'''  <param name="nbytes">[in] - bytes to be read</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function bbufferReadStream(
				ByVal bb as L_ByteBuffer, 
				ByVal fp as FILE, 
				ByVal nbytes as Integer) as Integer

	If IsNothing (bb) then Throw New ArgumentNullException  ("bb cannot be Nothing")
	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.bbufferReadStream( bb.Pointer, fp.Pointer, nbytes)

	Return _Result
End Function

' SRC\bbuffer.c (359, 1)
' bbufferExtendArray()
' bbufferExtendArray(L_BBUFFER *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) reallocNew() copies all bb-GTnalloc bytes, even though
''' only bb-GTn are data.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="bb">[in] - bbuffer</param>
'''  <param name="nbytes">[in] - number of bytes to extend array size</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function bbufferExtendArray(
				ByVal bb as L_ByteBuffer, 
				ByVal nbytes as Integer) as Integer

	If IsNothing (bb) then Throw New ArgumentNullException  ("bb cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.bbufferExtendArray( bb.Pointer, nbytes)

	Return _Result
End Function

' SRC\bbuffer.c (390, 1)
' bbufferWrite()
' bbufferWrite(L_BBUFFER *, l_uint8 *, size_t, size_t *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="bb">[in] - bbuffer</param>
'''  <param name="dest">[in] - dest memory buffer to which bytes are written</param>
'''  <param name="nbytes">[in] - bytes requested to be written</param>
'''  <param name="pnout">[out] - bytes actually written</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function bbufferWrite(
				ByVal bb as L_ByteBuffer, 
				ByVal dest as Byte(), 
				ByVal nbytes as UInteger, 
				ByRef pnout as UInteger) as Integer

	If IsNothing (bb) then Throw New ArgumentNullException  ("bb cannot be Nothing")
	If IsNothing (dest) then Throw New ArgumentNullException  ("dest cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.bbufferWrite( bb.Pointer, dest, nbytes, pnout)

	Return _Result
End Function

' SRC\bbuffer.c (442, 1)
' bbufferWriteStream()
' bbufferWriteStream(L_BBUFFER *, FILE *, size_t, size_t *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="bb">[in] - bbuffer</param>
'''  <param name="fp">[in] - dest stream to which bytes are written</param>
'''  <param name="nbytes">[in] - bytes requested to be written</param>
'''  <param name="pnout">[out] - bytes actually written</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function bbufferWriteStream(
				ByVal bb as L_ByteBuffer, 
				ByVal fp as FILE, 
				ByVal nbytes as UInteger, 
				ByRef pnout as UInteger) as Integer

	If IsNothing (bb) then Throw New ArgumentNullException  ("bb cannot be Nothing")
	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.bbufferWriteStream( bb.Pointer, fp.Pointer, nbytes, pnout)

	Return _Result
End Function

#End Region
#Region "SRC\bilateral.c"
' SRC\bilateral.c (150, 1)
' pixBilateral()
' pixBilateral(PIX *, l_float32, l_float32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This performs a relatively fast, separable bilateral
''' filtering operation.  The time is proportional to ncomps
''' and varies inversely approximately as the cube of the
''' reduction factor.  See bilateral.h for algorithm details.
''' (2) We impose minimum values for range_stdev and ncomps to
''' avoid nasty artifacts when either are too small.  We also
''' impose a constraint on their product
''' ncomps  range_stdev GT= 100.
''' So for values of range_stdev GT= 25, ncomps can be as small as 4.
''' Here is a qualitative, intuitive explanation for this constraint.
''' Call the difference in k values between the J(k) == 'delta', where
''' 'delta' ~ 200 / ncomps
''' Then this constraint is roughly equivalent to the condition
''' 'delta' LT 2  range_stdev
''' Note that at an intensity difference of (2  range_stdev), the
''' range part of the kernel reduces the effect by the factor 0.14.
''' This constraint requires that we have a sufficient number of
''' PCBs (i.e, a small enough 'delta'), so that for any value of
''' image intensity I, there exists a k (and a PCB, J(k), such that
''' |I - k| LT range_stdev
''' Any fewer PCBs and we don't have enough to support this condition.
''' (3) The upper limit of 30 on ncomps is imposed because the
''' gain in accuracy is not worth the extra computation.
''' (4) The size of the gaussian kernel is twice the spatial_stdev
''' on each side of the origin.  The minimum value of
''' spatial_stdev, 0.5, is required to have a finite sized
''' spatial kernel.  In practice, a much larger value is used.
''' (5) Computation of the intermediate images goes inversely
''' as the cube of the reduction factor.  If you can use a
''' reduction of 2 or 4, it is well-advised.
''' (6) The range kernel is defined over the absolute value of pixel
''' grayscale differences, and hence must have size 256 x 1.
''' Values in the array represent the multiplying weight
''' depending on the absolute gray value difference between
''' the source pixel and the neighboring pixel, and should
''' be monotonically decreasing.
''' (7) Interesting observation.  Run this on prog/fish24.jpg, with
''' range_stdev = 60, ncomps = 6, and spatial_dev = {10, 30, 50}.
''' As spatial_dev gets larger, we get the counter-intuitive
''' result that the body of the red fish becomes less blurry.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp gray or 32 bpp rgb, no colormap</param>
'''  <param name="spatial_stdev">[in] - of gaussian kernel; in pixels, GT 0.5</param>
'''  <param name="range_stdev">[in] - of gaussian range kernel; GT 5.0; typ. 50.0</param>
'''  <param name="ncomps">[in] - number of intermediate sums J(k,x); in [4 ... 30]</param>
'''  <param name="reduction">[in] - 1, 2 or 4</param>
'''   <returns>pixd bilateral filtered image, or NULL on error</returns>
Public Shared Function pixBilateral(
				ByVal pixs as Pix, 
				ByVal spatial_stdev as Single, 
				ByVal range_stdev as Single, 
				ByVal ncomps as Integer, 
				ByVal reduction as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (spatial_stdev) then Throw New ArgumentNullException  ("spatial_stdev cannot be Nothing")
	If IsNothing (range_stdev) then Throw New ArgumentNullException  ("range_stdev cannot be Nothing")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("1, 2 or 4")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBilateral( pixs.Pointer, spatial_stdev, range_stdev, ncomps, reduction)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bilateral.c (220, 1)
' pixBilateralGray()
' pixBilateralGray(PIX *, l_float32, l_float32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See pixBilateral() for constraints on the input parameters.
''' (2) See pixBilateral() for algorithm details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp gray</param>
'''  <param name="spatial_stdev">[in] - of gaussian kernel; in pixels, GT 0.5</param>
'''  <param name="range_stdev">[in] - of gaussian range kernel; GT 5.0; typ. 50.0</param>
'''  <param name="ncomps">[in] - number of intermediate sums J(k,x); in [4 ... 30]</param>
'''  <param name="reduction">[in] - 1, 2 or 4</param>
'''   <returns>pixd 8 bpp bilateral filtered image, or NULL on error</returns>
Public Shared Function pixBilateralGray(
				ByVal pixs as Pix, 
				ByVal spatial_stdev as Single, 
				ByVal range_stdev as Single, 
				ByVal ncomps as Integer, 
				ByVal reduction as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (spatial_stdev) then Throw New ArgumentNullException  ("spatial_stdev cannot be Nothing")
	If IsNothing (range_stdev) then Throw New ArgumentNullException  ("range_stdev cannot be Nothing")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("1, 2 or 4")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBilateralGray( pixs.Pointer, spatial_stdev, range_stdev, ncomps, reduction)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bilateral.c (580, 1)
' pixBilateralExact()
' pixBilateralExact(PIX *, L_KERNEL *, L_KERNEL *) as PIX *
'''  <summary>
''' Notes
''' (1) The spatial_kel is a conventional smoothing kernel, typically a
''' 2-d Gaussian kernel or other block kernel.  It can be either
''' normalized or not, but must be everywhere positive.
''' (2) The range_kel is defined over the absolute value of pixel
''' grayscale differences, and hence must have size 256 x 1.
''' Values in the array represent the multiplying weight for each
''' gray value difference between the target pixel and center of the
''' kernel, and should be monotonically decreasing.
''' (3) If range_kel == NULL, a constant weight is applied regardless
''' of the range value difference.  This degenerates to a regular
''' pixConvolve() with a normalized kernel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp gray or 32 bpp rgb</param>
'''  <param name="spatial_kel">[in] - gaussian kernel</param>
'''  <param name="range_kel">[in][optional] - 256 x 1, monotonically decreasing</param>
'''   <returns>pixd 8 bpp bilateral filtered image</returns>
Public Shared Function pixBilateralExact(
				ByVal pixs as Pix, 
				ByVal spatial_kel as L_Kernel, 
				ByVal range_kel as L_Kernel) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (spatial_kel) then Throw New ArgumentNullException  ("spatial_kel cannot be Nothing")

	Dim range_kelPTR As IntPtr = IntPtr.Zero : If Not IsNothing(range_kel) Then range_kelPTR = range_kel.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBilateralExact( pixs.Pointer, spatial_kel.Pointer, range_kelPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bilateral.c (634, 1)
' pixBilateralGrayExact()
' pixBilateralGrayExact(PIX *, L_KERNEL *, L_KERNEL *) as PIX *
'''  <summary>
''' Notes
''' (1) See pixBilateralExact().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp gray</param>
'''  <param name="spatial_kel">[in] - gaussian kernel</param>
'''  <param name="range_kel">[in][optional] - 256 x 1, monotonically decreasing</param>
'''   <returns>pixd 8 bpp bilateral filtered image</returns>
Public Shared Function pixBilateralGrayExact(
				ByVal pixs as Pix, 
				ByVal spatial_kel as L_Kernel, 
				ByVal range_kel as L_Kernel) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (spatial_kel) then Throw New ArgumentNullException  ("spatial_kel cannot be Nothing")

	Dim range_kelPTR As IntPtr = IntPtr.Zero : If Not IsNothing(range_kel) Then range_kelPTR = range_kel.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBilateralGrayExact( pixs.Pointer, spatial_kel.Pointer, range_kelPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bilateral.c (735, 1)
' pixBlockBilateralExact()
' pixBlockBilateralExact(PIX *, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) See pixBilateralExact().  This provides an interface using
''' the standard deviations of the spatial and range filters.
''' (2) The convolution window halfwidth is 2  spatial_stdev,
''' and the square filter size is 4  spatial_stdev + 1.
''' The kernel captures 95% of total energy.  This is compensated
''' by normalization.
''' (3) The range_stdev is analogous to spatial_halfwidth in the
''' grayscale domain [0...255], and determines how much damping of the
''' smoothing operation is applied across edges.  The larger this
''' value is, the smaller the damping.  The smaller the value, the
''' more edge details are preserved.  These approximations are useful
''' for deciding the appropriate cutoff.
''' kernel[1  stdev] ~= 0.6   kernel[0]
''' kernel[2  stdev] ~= 0.14  kernel[0]
''' kernel[3  stdev] ~= 0.01  kernel[0]
''' If range_stdev is infinite there is no damping, and this
''' becomes a conventional gaussian smoothing.
''' This value does not affect the run time.
''' (4) If range_stdev is negative or zero, the range kernel is
''' ignored and this degenerates to a straight gaussian convolution.
''' (5) This is very slow for large spatial filters.  The time
''' on a 3GHz pentium is roughly
''' T = 1.2  10^-8  (A  sh^2)  sec
''' where A = # of pixels, sh = spatial halfwidth of filter.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp gray or 32 bpp rgb</param>
'''  <param name="spatial_stdev">[in] - GT 0.0</param>
'''  <param name="range_stdev">[in] - GT 0.0</param>
'''   <returns>pixd 8 bpp or 32 bpp bilateral filtered image</returns>
Public Shared Function pixBlockBilateralExact(
				ByVal pixs as Pix, 
				ByVal spatial_stdev as Single, 
				ByVal range_stdev as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (spatial_stdev) then Throw New ArgumentNullException  ("spatial_stdev cannot be Nothing")
	If IsNothing (range_stdev) then Throw New ArgumentNullException  ("range_stdev cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlockBilateralExact( pixs.Pointer, spatial_stdev, range_stdev)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bilateral.c (787, 1)
' makeRangeKernel()
' makeRangeKernel(l_float32) as L_KERNEL *
'''  <summary>
''' Notes
''' (1) Creates a one-sided Gaussian kernel with the given
''' standard deviation.  At grayscale difference of one stdev,
''' the kernel falls to 0.6, and to 0.01 at three stdev.
''' (2) A typical input number might be 20.  Then pixels whose
''' value differs by 60 from the center pixel have their
''' weight in the convolution reduced by a factor of about 0.01.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="range_stdev">[in] - GT 0</param>
'''   <returns>kel, or NULL on error</returns>
Public Shared Function makeRangeKernel(
				ByVal range_stdev as Single) as L_Kernel

	If IsNothing (range_stdev) then Throw New ArgumentNullException  ("range_stdev cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.makeRangeKernel( range_stdev)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Kernel(_Result)
End Function

#End Region
#Region "SRC\bilinear.c"
' SRC\bilinear.c (143, 1)
' pixBilinearSampledPta()
' pixBilinearSampledPta(PIX *, PTA *, PTA *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Brings in either black or white pixels from the boundary.
''' (2) Retains colormap, which you can do for a sampled transform..
''' (3) No 3 of the 4 points may be collinear.
''' (4) For 8 and 32 bpp pix, better quality is obtained by the
''' somewhat slower pixBilinearPta().  See that
''' function for relative timings between sampled and interpolated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths</param>
'''  <param name="ptad">[in] - 4 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 4 pts of initial coordinate space</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixBilinearSampledPta(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBilinearSampledPta( pixs.Pointer, ptad.Pointer, ptas.Pointer, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bilinear.c (193, 1)
' pixBilinearSampled()
' pixBilinearSampled(PIX *, l_float32 *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Brings in either black or white pixels from the boundary.
''' (2) Retains colormap, which you can do for a sampled transform..
''' (3) For 8 or 32 bpp, much better quality is obtained by the
''' somewhat slower pixBilinear().  See that function
''' for relative timings between sampled and interpolated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths</param>
'''  <param name="vc">[in] - vector of 8 coefficients for bilinear transformation</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixBilinearSampled(
				ByVal pixs as Pix, 
				ByVal vc as Single(), 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBilinearSampled( pixs.Pointer, vc, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bilinear.c (286, 1)
' pixBilinearPta()
' pixBilinearPta(PIX *, PTA *, PTA *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Brings in either black or white pixels from the boundary
''' (2) Removes any existing colormap, if necessary, before transforming
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="ptad">[in] - 4 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 4 pts of initial coordinate space</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixBilinearPta(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBilinearPta( pixs.Pointer, ptad.Pointer, ptas.Pointer, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bilinear.c (356, 1)
' pixBilinear()
' pixBilinear(PIX *, l_float32 *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Brings in either black or white pixels from the boundary
''' (2) Removes any existing colormap, if necessary, before transforming
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="vc">[in] - vector of 8 coefficients for bilinear transformation</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixBilinear(
				ByVal pixs as Pix, 
				ByVal vc as Single(), 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBilinear( pixs.Pointer, vc, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bilinear.c (412, 1)
' pixBilinearPtaColor()
' pixBilinearPtaColor(PIX *, PTA *, PTA *, l_uint32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="ptad">[in] - 4 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 4 pts of initial coordinate space</param>
'''  <param name="colorval">[in] - e.g., 0 to bring in BLACK, 0xffffff00 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixBilinearPtaColor(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal colorval as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBilinearPtaColor( pixs.Pointer, ptad.Pointer, ptas.Pointer, colorval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bilinear.c (453, 1)
' pixBilinearColor()
' pixBilinearColor(PIX *, l_float32 *, l_uint32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="vc">[in] - vector of 8 coefficients for bilinear transformation</param>
'''  <param name="colorval">[in] - e.g., 0 to bring in BLACK, 0xffffff00 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixBilinearColor(
				ByVal pixs as Pix, 
				ByVal vc as Single(), 
				ByVal colorval as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBilinearColor( pixs.Pointer, vc, colorval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bilinear.c (515, 1)
' pixBilinearPtaGray()
' pixBilinearPtaGray(PIX *, PTA *, PTA *, l_uint8) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="ptad">[in] - 4 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 4 pts of initial coordinate space</param>
'''  <param name="grayval">[in] - 0 to bring in BLACK, 255 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixBilinearPtaGray(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal grayval as Byte) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (grayval) then Throw New ArgumentNullException  ("grayval cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBilinearPtaGray( pixs.Pointer, ptad.Pointer, ptas.Pointer, grayval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bilinear.c (556, 1)
' pixBilinearGray()
' pixBilinearGray(PIX *, l_float32 *, l_uint8) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="vc">[in] - vector of 8 coefficients for bilinear transformation</param>
'''  <param name="grayval">[in] - 0 to bring in BLACK, 255 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixBilinearGray(
				ByVal pixs as Pix, 
				ByVal vc as Single(), 
				ByVal grayval as Byte) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")
	If IsNothing (grayval) then Throw New ArgumentNullException  ("grayval cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBilinearGray( pixs.Pointer, vc, grayval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bilinear.c (644, 1)
' pixBilinearPtaWithAlpha()
' pixBilinearPtaWithAlpha(PIX *, PTA *, PTA *, PIX *, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The alpha channel is transformed separately from pixs,
''' and aligns with it, being fully transparent outside the
''' boundary of the transformed pixs.  For pixels that are fully
''' transparent, a blending function like pixBlendWithGrayMask()
''' will give zero weight to corresponding pixels in pixs.
''' (2) If pixg is NULL, it is generated as an alpha layer that is
''' partially opaque, using %fract.  Otherwise, it is cropped
''' to pixs if required and %fract is ignored.  The alpha channel
''' in pixs is never used.
''' (3) Colormaps are removed.
''' (4) When pixs is transformed, it doesn't matter what color is brought
''' in because the alpha channel will be transparent (0) there.
''' (5) To avoid losing source pixels in the destination, it may be
''' necessary to add a border to the source pix before doing
''' the bilinear transformation.  This can be any non-negative number.
''' (6) The input %ptad and %ptas are in a coordinate space before
''' the border is added.  Internally, we compensate for this
''' before doing the bilinear transform on the image after
''' the border is added.
''' (7) The default setting for the border values in the alpha channel
''' is 0 (transparent) for the outermost ring of pixels and
''' (0.5  fract  255) for the second ring.  When blended over
''' a second image, this
''' (a) shrinks the visible image to make a clean overlap edge
''' with an image below, and
''' (b) softens the edges by weakening the aliasing there.
''' Use l_setAlphaMaskBorder() to change these values.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="ptad">[in] - 4 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 4 pts of initial coordinate space</param>
'''  <param name="pixg">[in][optional] - 8 bpp, can be null</param>
'''  <param name="fract">[in] - between 0.0 and 1.0, with 0.0 fully transparent and 1.0 fully opaque</param>
'''  <param name="border">[in] - of pixels added to capture transformed source pixels</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixBilinearPtaWithAlpha(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal pixg as Pix, 
				ByVal fract as Single, 
				ByVal border as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim pixgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixg) Then pixgPTR = pixg.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBilinearPtaWithAlpha( pixs.Pointer, ptad.Pointer, ptas.Pointer, pixgPTR, fract, border)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bilinear.c (776, 1)
' getBilinearXformCoeffs()
' getBilinearXformCoeffs(PTA *, PTA *, l_float32 **) as l_ok
'''  <summary>
''' We have a set of 8 equations, describing the bilinear
''' transformation that takes 4 points ptas into 4 other
''' points ptad.  These equations are
''' x1' = c[0]x1 + c[1]y1 + c[2]x1y1 + c[3]
''' y1' = c[4]x1 + c[5]y1 + c[6]x1y1 + c[7]
''' x2' = c[0]x2 + c[1]y2 + c[2]x2y2 + c[3]
''' y2' = c[4]x2 + c[5]y2 + c[6]x2y2 + c[7]
''' x3' = c[0]x3 + c[1]y3 + c[2]x3y3 + c[3]
''' y3' = c[4]x3 + c[5]y3 + c[6]x3y3 + c[7]
''' x4' = c[0]x4 + c[1]y4 + c[2]x4y4 + c[3]
''' y4' = c[4]x4 + c[5]y4 + c[6]x4y4 + c[7]
''' This can be represented as
''' AC = B
''' where B and C are column vectors
''' B = [ x1' y1' x2' y2' x3' y3' x4' y4' ]
''' C = [ c[0] c[1] c[2] c[3] c[4] c[5] c[6] c[7] ]
''' and A is the 8x8 matrix
''' x1   y1   x1y1   1   0 0   0  0
''' 0 0  0  0   x1   y1   x1y1   1
''' x2   y2   x2y2   1   0 0   0  0
''' 0 0  0  0   x2   y2   x2y2   1
''' x3   y3   x3y3   1   0 0   0  0
''' 0 0  0  0   x3   y3   x3y3   1
''' x4   y4   x4y4   1   0 0   0  0
''' 0 0  0  0   x4   y4   x4y4   1
''' These eight equations are solved here for the coefficients C.
''' These eight coefficients can then be used to find the mapping
''' x,y) --GT (x',y'
''' x' = c[0]x + c[1]y + c[2]xy + c[3]
''' y' = c[4]x + c[5]y + c[6]xy + c[7]
''' that are implemented in bilinearXformSampledPt and
''' bilinearXFormPt.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - source 4 points; unprimed</param>
'''  <param name="ptad">[in] - transformed 4 points; primed</param>
'''  <param name="pvc">[out] - vector of coefficients of transform</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function getBilinearXformCoeffs(
				ByVal ptas as Pta, 
				ByVal ptad as Pta, 
				ByRef pvc as List(Of Single())) as Integer

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")

Dim pvcPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.getBilinearXformCoeffs( ptas.Pointer, ptad.Pointer, pvcPTR)

	Return _Result
End Function

' SRC\bilinear.c (869, 1)
' bilinearXformSampledPt()
' bilinearXformSampledPt(l_float32 *, l_int32, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This finds the nearest pixel coordinates of the transformed point.
''' (2) It does not check ptrs for returned data!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="vc">[in] - vector of 8 coefficients</param>
'''  <param name="x">[in] - initial point</param>
'''  <param name="y">[in] - initial point</param>
'''  <param name="pxp">[out] - transformed point</param>
'''  <param name="pyp">[out] - transformed point</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function bilinearXformSampledPt(
				ByVal vc as Single(), 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByRef pxp as Integer, 
				ByRef pyp as Integer) as Integer

	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.bilinearXformSampledPt( vc, x, y, pxp, pyp)

	Return _Result
End Function

' SRC\bilinear.c (902, 1)
' bilinearXformPt()
' bilinearXformPt(l_float32 *, l_int32, l_int32, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This computes the floating point location of the transformed point.
''' (2) It does not check ptrs for returned data!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="vc">[in] - vector of 8 coefficients</param>
'''  <param name="x">[in] - initial point</param>
'''  <param name="y">[in] - initial point</param>
'''  <param name="pxp">[out] - transformed point</param>
'''  <param name="pyp">[out] - transformed point</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function bilinearXformPt(
				ByVal vc as Single(), 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByRef pxp as Single(), 
				ByRef pyp as Single()) as Integer

	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.bilinearXformPt( vc, x, y, pxp, pyp)

	Return _Result
End Function

#End Region
#Region "SRC\binarize.c"
' SRC\binarize.c (140, 1)
' pixOtsuAdaptiveThreshold()
' pixOtsuAdaptiveThreshold(PIX *, l_int32, l_int32, l_int32, l_int32, l_float32, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) The Otsu method finds a single global threshold for an image.
''' This function allows a locally adapted threshold to be
''' found for each tile into which the image is broken up.
''' (2) The array of threshold values, one for each tile, constitutes
''' a highly downscaled image.  This array is optionally
''' smoothed using a convolution.  The full width and height of the
''' convolution kernel are (2  %smoothx + 1) and (2  %smoothy + 1).
''' (3) The minimum tile dimension allowed is 16.  If such small
''' tiles are used, it is recommended to use smoothing, because
''' without smoothing, each small tile determines the splitting
''' threshold independently.  A tile that is entirely in the
''' image bg will then hallucinate fg, resulting in a very noisy
''' binarization.  The smoothing should be large enough that no
''' tile is only influenced by one type (fg or bg) of pixels,
''' because it will force a split of its pixels.
''' (4) To get a single global threshold for the entire image, use
''' input values of %sx and %sy that are larger than the image.
''' For this situation, the smoothing parameters are ignored.
''' (5) The threshold values partition the image pixels into two classes
''' one whose values are less than the threshold and another
''' whose values are greater than or equal to the threshold.
''' This is the same use of 'threshold' as in pixThresholdToBinary().
''' (6) The scorefract is the fraction of the maximum Otsu score, which
''' is used to determine the range over which the histogram minimum
''' is searched.  See numaSplitDistribution() for details on the
''' underlying method of choosing a threshold.
''' (7) This uses enables a modified version of the Otsu criterion for
''' splitting the distribution of pixels in each tile into a
''' fg and bg part.  The modification consists of searching for
''' a minimum in the histogram over a range of pixel values where
''' the Otsu score is within a defined fraction, %scorefract,
''' of the max score.  To get the original Otsu algorithm, set
''' %scorefract == 0.
''' (8) N.B. This method is NOT recommended for images with weak text
''' and significant background noise, such as bleedthrough, because
''' of the problem noted in (3) above for tiling.  Use Sauvola.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="sx">[in] - desired tile dimensions; actual size may vary</param>
'''  <param name="sy">[in] - desired tile dimensions; actual size may vary</param>
'''  <param name="smoothx">[in] - half-width of convolution kernel applied to threshold array use 0 for no smoothing</param>
'''  <param name="smoothy">[in] - half-width of convolution kernel applied to threshold array use 0 for no smoothing</param>
'''  <param name="scorefract">[in] - fraction of the max Otsu score; typ. 0.1; use 0.0 for standard Otsu</param>
'''  <param name="ppixth">[out][optional] - array of threshold values found for each tile</param>
'''  <param name="ppixd">[out][optional] - thresholded input pixs, based on the threshold array</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixOtsuAdaptiveThreshold(
				ByVal pixs as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer, 
				ByVal smoothx as Integer, 
				ByVal smoothy as Integer, 
				ByVal scorefract as Single, 
				ByRef ppixth as Pix, 
				ByRef ppixd as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (scorefract) then Throw New ArgumentNullException  ("scorefract cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")

Dim ppixthPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixth) Then ppixthPTR = ppixth.Pointer
Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixOtsuAdaptiveThreshold( pixs.Pointer, sx, sy, smoothx, smoothy, scorefract, ppixthPTR, ppixdPTR)
	if ppixthPTR <> IntPtr.Zero then ppixth = new Pix(ppixthPTR)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return _Result
End Function

' SRC\binarize.c (256, 1)
' pixOtsuThreshOnBackgroundNorm()
' pixOtsuThreshOnBackgroundNorm(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_float32, l_int32 *) as PIX *
'''  <summary>
''' Notes
''' (1) This does background normalization followed by Otsu
''' thresholding.  Otsu binarization attempts to split the
''' image into two roughly equal sets of pixels, and it does
''' a very poor job when there are large amounts of dark
''' background.  By doing a background normalization first,
''' to get the background near 255, we remove this problem.
''' Then we use a modified Otsu to estimate the best global
''' threshold on the normalized image.
''' (2) See pixBackgroundNorm() for meaning and typical values
''' of input parameters.  For a start, you can try
''' sx, sy = 10, 15
''' thresh = 100
''' mincount = 50
''' bgval = 255
''' smoothx, smoothy = 2
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale; not colormapped</param>
'''  <param name="pixim">[in][optional] - 1 bpp 'image' mask; can be null</param>
'''  <param name="sx">[in] - tile size in pixels</param>
'''  <param name="sy">[in] - tile size in pixels</param>
'''  <param name="thresh">[in] - threshold for determining foreground</param>
'''  <param name="mincount">[in] - min threshold on counts in a tile</param>
'''  <param name="bgval">[in] - target bg val; typ. GT 128</param>
'''  <param name="smoothx">[in] - half-width of block convolution kernel width</param>
'''  <param name="smoothy">[in] - half-width of block convolution kernel height</param>
'''  <param name="scorefract">[in] - fraction of the max Otsu score; typ. 0.1</param>
'''  <param name="pthresh">[out][optional] - threshold value that was used on the normalized image</param>
'''   <returns>pixd 1 bpp thresholded image, or NULL on error</returns>
Public Shared Function pixOtsuThreshOnBackgroundNorm(
				ByVal pixs as Pix, 
				ByVal pixim as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer, 
				ByVal thresh as Integer, 
				ByVal mincount as Integer, 
				ByVal bgval as Integer, 
				ByVal smoothx as Integer, 
				ByVal smoothy as Integer, 
				ByVal scorefract as Single, 
				ByRef pthresh as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (scorefract) then Throw New ArgumentNullException  ("scorefract cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale; not colormapped")

	Dim piximPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixim) Then piximPTR = pixim.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOtsuThreshOnBackgroundNorm( pixs.Pointer, piximPTR, sx, sy, thresh, mincount, bgval, smoothx, smoothy, scorefract, pthresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\binarize.c (354, 1)
' pixMaskedThreshOnBackgroundNorm()
' pixMaskedThreshOnBackgroundNorm(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_float32, l_int32 *) as PIX *
'''  <summary>
''' Notes
''' (1) This begins with a standard background normalization.
''' Additionally, there is a flexible background norm, that
''' will adapt to a rapidly varying background, and this
''' puts white pixels in the background near regions with
''' significant foreground.  The white pixels are turned into
''' a 1 bpp selection mask by binarization followed by dilation.
''' Otsu thresholding is performed on the input image to get an
''' estimate of the threshold in the non-mask regions.
''' The background normalized image is thresholded with two
''' different values, and the result is combined using
''' the selection mask.
''' (2) Note that the numbers 255 (for bgval target) and 190 (for
''' thresholding on pixn) are tied together, and explicitly
''' defined in this function.
''' (3) See pixBackgroundNorm() for meaning and typical values
''' of input parameters.  For a start, you can try
''' sx, sy = 10, 15
''' thresh = 100
''' mincount = 50
''' smoothx, smoothy = 2
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale; not colormapped</param>
'''  <param name="pixim">[in][optional] - 1 bpp 'image' mask; can be null</param>
'''  <param name="sx">[in] - tile size in pixels</param>
'''  <param name="sy">[in] - tile size in pixels</param>
'''  <param name="thresh">[in] - threshold for determining foreground</param>
'''  <param name="mincount">[in] - min threshold on counts in a tile</param>
'''  <param name="smoothx">[in] - half-width of block convolution kernel width</param>
'''  <param name="smoothy">[in] - half-width of block convolution kernel height</param>
'''  <param name="scorefract">[in] - fraction of the max Otsu score; typ. ~ 0.1</param>
'''  <param name="pthresh">[out][optional] - threshold value that was used on the normalized image</param>
'''   <returns>pixd 1 bpp thresholded image, or NULL on error</returns>
Public Shared Function pixMaskedThreshOnBackgroundNorm(
				ByVal pixs as Pix, 
				ByVal pixim as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer, 
				ByVal thresh as Integer, 
				ByVal mincount as Integer, 
				ByVal smoothx as Integer, 
				ByVal smoothy as Integer, 
				ByVal scorefract as Single, 
				ByRef pthresh as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (scorefract) then Throw New ArgumentNullException  ("scorefract cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale; not colormapped")

	Dim piximPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixim) Then piximPTR = pixim.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMaskedThreshOnBackgroundNorm( pixs.Pointer, piximPTR, sx, sy, thresh, mincount, smoothx, smoothy, scorefract, pthresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\binarize.c (468, 1)
' pixSauvolaBinarizeTiled()
' pixSauvolaBinarizeTiled(PIX *, l_int32, l_float32, l_int32, l_int32, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) The window width and height are 2  %whsize + 1.  The minimum
''' value for %whsize is 2; typically it is GT= 7..
''' (2) For nx == ny == 1, this defaults to pixSauvolaBinarize().
''' (3) Why a tiled version?
''' (a) Because the mean value accumulator is a uint32, overflow
''' can occur for an image with more than 16M pixels.
''' (b) The mean value accumulator array for 16M pixels is 64 MB.
''' The mean square accumulator array for 16M pixels is 128 MB.
''' Using tiles reduces the size of these arrays.
''' (c) Each tile can be processed independently, in parallel,
''' on a multicore processor.
''' (4) The Sauvola threshold is determined from the formula
''' t = m  (1 - k  (1 - s / 128))
''' See pixSauvolaBinarize() for details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale, not colormapped</param>
'''  <param name="whsize">[in] - window half-width for measuring local statistics</param>
'''  <param name="factor">[in] - factor for reducing threshold due to variance; GT= 0</param>
'''  <param name="nx">[in] - subdivision into tiles; GT= 1</param>
'''  <param name="ny">[in] - subdivision into tiles; GT= 1</param>
'''  <param name="ppixth">[out][optional] - Sauvola threshold values</param>
'''  <param name="ppixd">[out][optional] - thresholded image</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSauvolaBinarizeTiled(
				ByVal pixs as Pix, 
				ByVal whsize as Integer, 
				ByVal factor as Single, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByRef ppixth as Pix, 
				ByRef ppixd as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")

Dim ppixthPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixth) Then ppixthPTR = ppixth.Pointer
Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSauvolaBinarizeTiled( pixs.Pointer, whsize, factor, nx, ny, ppixthPTR, ppixdPTR)
	if ppixthPTR <> IntPtr.Zero then ppixth = new Pix(ppixthPTR)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return _Result
End Function

' SRC\binarize.c (595, 1)
' pixSauvolaBinarize()
' pixSauvolaBinarize(PIX *, l_int32, l_float32, l_int32, PIX **, PIX **, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) The window width and height are 2  %whsize + 1.  The minimum
''' value for %whsize is 2; typically it is GT= 7..
''' (2) The local statistics, measured over the window, are the
''' average and standard deviation.
''' (3) The measurements of the mean and standard deviation are
''' performed inside a border of (%whsize + 1) pixels.  If pixs does
''' not have these added border pixels, use %addborder = 1 to add
''' it here; otherwise use %addborder = 0.
''' (4) The Sauvola threshold is determined from the formula
''' t = m  (1 - k  (1 - s / 128))
''' where
''' t = local threshold
''' m = local mean
''' k = %factor (GT= 0)   [ typ. 0.35 ]
''' s = local standard deviation, which is maximized at
''' 127.5 when half the samples are 0 and half are 255.
''' (5) The basic idea of Niblack and Sauvola binarization is that
''' the local threshold should be less than the median value,
''' and the larger the variance, the closer to the median
''' it should be chosen.  Typical values for k are between
''' 0.2 and 0.5.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale; not colormapped</param>
'''  <param name="whsize">[in] - window half-width for measuring local statistics</param>
'''  <param name="factor">[in] - factor for reducing threshold due to variance; GT= 0</param>
'''  <param name="addborder">[in] - 1 to add border of width (%whsize + 1) on all sides</param>
'''  <param name="ppixm">[out][optional] - local mean values</param>
'''  <param name="ppixsd">[out][optional] - local standard deviation values</param>
'''  <param name="ppixth">[out][optional] - threshold values</param>
'''  <param name="ppixd">[out][optional] - thresholded image</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSauvolaBinarize(
				ByVal pixs as Pix, 
				ByVal whsize as Integer, 
				ByVal factor as Single, 
				ByVal addborder as Integer, 
				ByRef ppixm as Pix, 
				ByRef ppixsd as Pix, 
				ByRef ppixth as Pix, 
				ByRef ppixd as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale; not colormapped")

Dim ppixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixm) Then ppixmPTR = ppixm.Pointer
Dim ppixsdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixsd) Then ppixsdPTR = ppixsd.Pointer
Dim ppixthPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixth) Then ppixthPTR = ppixth.Pointer
Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSauvolaBinarize( pixs.Pointer, whsize, factor, addborder, ppixmPTR, ppixsdPTR, ppixthPTR, ppixdPTR)
	if ppixmPTR <> IntPtr.Zero then ppixm = new Pix(ppixmPTR)
	if ppixsdPTR <> IntPtr.Zero then ppixsd = new Pix(ppixsdPTR)
	if ppixthPTR <> IntPtr.Zero then ppixth = new Pix(ppixthPTR)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return _Result
End Function

' SRC\binarize.c (705, 1)
' pixSauvolaGetThreshold()
' pixSauvolaGetThreshold(PIX *, PIX *, l_float32, PIX **) as PIX *
'''  <summary>
''' Notes
''' (1) The Sauvola threshold is determined from the formula
''' t = m  (1 - k  (1 - s / 128))
''' where
''' t = local threshold
''' m = local mean
''' k = %factor (GT= 0)   [ typ. 0.35 ]
''' s = local standard deviation, which is maximized at
''' 127.5 when half the samples are 0 and half are 255.
''' (2) See pixSauvolaBinarize() for other details.
''' (3) Important definitions and relations for computing averages
''' v == pixel value
''' E(p) == expected value of p == average of p over some pixel set
''' S(v) == square of v == v  v
''' mv == E(v) == expected pixel value == mean value
''' ms == E(S(v)) == expected square of pixel values
''' == mean square value
''' var == variance == expected square of deviation from mean
''' == E(S(v - mv)) = E(S(v) - 2  S(v  mv) + S(mv))
''' = E(S(v)) - S(mv)
''' = ms - mv  mv
''' s == standard deviation = sqrt(var)
''' So for evaluating the standard deviation in the Sauvola
''' threshold, we take
''' s = sqrt(ms - mv  mv)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixm">[in] - 8 bpp grayscale; not colormapped</param>
'''  <param name="pixms">[in] - 32 bpp</param>
'''  <param name="factor">[in] - factor for reducing threshold due to variance; GT= 0</param>
'''  <param name="ppixsd">[out][optional] - local standard deviation</param>
'''   <returns>pixd 8 bpp, sauvola threshold values, or NULL on error</returns>
Public Shared Function pixSauvolaGetThreshold(
				ByVal pixm as Pix, 
				ByVal pixms as Pix, 
				ByVal factor as Single, 
				ByRef ppixsd as Pix) as Pix

	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")
	If IsNothing (pixms) then Throw New ArgumentNullException  ("pixms cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")
	If {8}.contains (pixm.d) = false then Throw New ArgumentException ("8 bpp grayscale; not colormapped")

Dim ppixsdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixsd) Then ppixsdPTR = ppixsd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSauvolaGetThreshold( pixm.Pointer, pixms.Pointer, factor, ppixsdPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixsdPTR <> IntPtr.Zero then ppixsd = new Pix(ppixsdPTR)

	Return  new Pix(_Result)
End Function

' SRC\binarize.c (788, 1)
' pixApplyLocalThreshold()
' pixApplyLocalThreshold(PIX *, PIX *, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale; not colormapped</param>
'''  <param name="pixth">[in] - 8 bpp array of local thresholds</param>
'''  <param name="redfactor">[in] - ...</param>
'''   <returns>pixd 1 bpp, thresholded image, or NULL on error</returns>
Public Shared Function pixApplyLocalThreshold(
				ByVal pixs as Pix, 
				ByVal pixth as Pix, 
				ByVal redfactor as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixth) then Throw New ArgumentNullException  ("pixth cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale; not colormapped")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixApplyLocalThreshold( pixs.Pointer, pixth.Pointer, redfactor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\binarize.c (887, 1)
' pixThresholdByConnComp()
' pixThresholdByConnComp(PIX *, PIX *, l_int32, l_int32, l_int32, l_float32, l_float32, l_int32 *, PIX **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This finds a global threshold based on connected components.
''' Although slow, it is reasonable to use it in a situation where
''' (a) the background in the image is relatively uniform, and
''' (b) the result will be fed to an OCR program that accepts 1 bpp
''' images and works best with easily segmented characters.
''' The reason for (b) is that this selects a threshold with a
''' minimum number of both broken characters and merged characters.
''' (2) If the pix has color, it is converted to gray using the
''' max component.
''' (3) Input 0 to use default values for any of these inputs
''' %start, %end, %incr, %thresh48, %threshdiff.
''' (4) This approach can be understood as follows.  When the
''' binarization threshold is varied, the numbers of c.c. identify
''' four regimes
''' (a) For low thresholds, text is broken into small pieces, and
''' the number of c.c. is large, with the 4 c.c. significantly
''' exceeding the 8 c.c.
''' (b) As the threshold rises toward the optimum value, the text
''' characters coalesce and there is very little difference
''' between the numbers of 4 and 8 c.c, which both go
''' through a minimum.
''' (c) Above this, the image background gets noisy because some
''' pixels are(thresholded to foreground, and the numbers
''' of c.c. quickly increase, with the 4 c.c. significantly
''' larger than the 8 c.c.
''' (d) At even higher thresholds, the image background noise
''' coalesces as it becomes mostly foreground, and the
''' number of c.c. drops quickly.
''' (5) If there is no global threshold that distinguishes foreground
''' text from background (e.g., weak text over a background that
''' has significant variation and/or bleedthrough), this returns 1,
''' which the caller should check.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - depth GT 1, colormap OK</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask giving region to ignore by setting pixels to white; use NULL if no mask</param>
'''  <param name="start">[in] - binarization threshold levels to test</param>
'''  <param name="incr">[in] - binarization threshold levels to test</param>
'''  <param name="thresh48">[in] - threshold on normalized difference between the numbers of 4 and 8 connected components</param>
'''  <param name="threshdiff">[in] - threshold on normalized difference between the number of 4 cc at successive iterations</param>
'''  <param name="pglobthresh">[out][optional] - best global threshold; 0 if no threshold is found</param>
'''  <param name="ppixd">[out][optional] - image thresholded to binary, or null if no threshold is found</param>
'''  <param name="debugflag">[in] - 1 for plotted results</param>
'''   <returns>0 if OK, 1 on error or if no threshold is found</returns>
Public Shared Function pixThresholdByConnComp(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal start as Integer, 
				ByRef _end_ as Integer, 
				ByVal incr as Integer, 
				ByVal thresh48 as Single, 
				ByVal threshdiff as Single, 
				ByRef pglobthresh as Integer, 
				ByRef ppixd as Pix, 
				ByVal debugflag as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (thresh48) then Throw New ArgumentNullException  ("thresh48 cannot be Nothing")
	If IsNothing (threshdiff) then Throw New ArgumentNullException  ("threshdiff cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer
Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixThresholdByConnComp( pixs.Pointer, pixmPTR, start, _end_, incr, thresh48, threshdiff, pglobthresh, ppixdPTR, debugflag)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return _Result
End Function

#End Region
#Region "SRC\binexpand.c"
' SRC\binexpand.c (67, 1)
' pixExpandBinaryReplicate()
' pixExpandBinaryReplicate(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="xfact">[in] - integer scale factor for horiz. replicative expansion</param>
'''  <param name="yfact">[in] - integer scale factor for vertical replicative expansion</param>
'''   <returns>pixd scaled up, or NULL on error</returns>
Public Shared Function pixExpandBinaryReplicate(
				ByVal pixs as Pix, 
				ByVal xfact as Integer, 
				ByVal yfact as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixExpandBinaryReplicate( pixs.Pointer, xfact, yfact)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\binexpand.c (132, 1)
' pixExpandBinaryPower2()
' pixExpandBinaryPower2(PIX *, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="factor">[in] - expansion factor 1, 2, 4, 8, 16</param>
'''   <returns>pixd expanded 1 bpp by replication, or NULL on error</returns>
Public Shared Function pixExpandBinaryPower2(
				ByVal pixs as Pix, 
				ByVal factor as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixExpandBinaryPower2( pixs.Pointer, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\binreduce.c"
' SRC\binreduce.c (71, 1)
' pixReduceBinary2()
' pixReduceBinary2(PIX *, l_uint8 *) as PIX *
'''  <summary>
''' Notes
''' (1) After folding, the data is in bytes 0 and 2 of the word,
''' and the bits in each byte are in the following order
''' (with 0 being the leftmost originating pair and 7 being
''' the rightmost originating pair)
''' 0 4 1 5 2 6 3 7
''' These need to be permuted to
''' 0 1 2 3 4 5 6 7
''' which is done with an 8-bit table generated by makeSubsampleTab2x().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="intab">[in][optional] - ; if null, a table is made here and destroyed before exit</param>
'''   <returns>pixd 2x subsampled, or NULL on error</returns>
Public Shared Function pixReduceBinary2(
				ByVal pixs as Pix, 
				ByVal intab as Byte()) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReduceBinary2( pixs.Pointer, intab)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\binreduce.c (148, 1)
' pixReduceRankBinaryCascade()
' pixReduceRankBinaryCascade(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This performs up to four cascaded 2x rank reductions.
''' (2) Use level = 0 to truncate the cascade.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="level1">[in] - threshold, in the set {0, 1, 2, 3, 4}</param>
'''  <param name="level2">[in] - threshold, in the set {0, 1, 2, 3, 4}</param>
'''  <param name="level3">[in] - threshold, in the set {0, 1, 2, 3, 4}</param>
'''  <param name="level4">[in] - threshold, in the set {0, 1, 2, 3, 4}</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixReduceRankBinaryCascade(
				ByVal pixs as Pix, 
				ByVal level1 as Integer, 
				ByVal level2 as Integer, 
				ByVal level3 as Integer, 
				ByVal level4 as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReduceRankBinaryCascade( pixs.Pointer, level1, level2, level3, level4)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\binreduce.c (223, 1)
' pixReduceRankBinary2()
' pixReduceRankBinary2(PIX *, l_int32, l_uint8 *) as PIX *
'''  <summary>
''' Notes
''' (1) pixd is downscaled by 2x from pixs.
''' (2) The rank threshold specifies the minimum number of ON
''' pixels in each 2x2 region of pixs that are required to
''' set the corresponding pixel ON in pixd.
''' (3) Rank filtering is done to the UL corner of each 2x2 pixel block,
''' using only logical operations.  Then these pixels are chosen
''' in the 2x subsampling process, subsampled, as described
''' above in pixReduceBinary2().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="level">[in] - rank threshold 1, 2, 3, 4</param>
'''  <param name="intab">[in][optional] - ; if null, a table is made here and destroyed before exit</param>
'''   <returns>pixd 1 bpp, 2x rank threshold reduced, or NULL on error</returns>
Public Shared Function pixReduceRankBinary2(
				ByVal pixs as Pix, 
				ByVal level as Integer, 
				ByVal intab as Byte()) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReduceRankBinary2( pixs.Pointer, level, intab)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\binreduce.c (384, 1)
' Permutation table for 2x rank binary reduction
' makeSubsampleTab2x() as l_uint8 *
'''  <summary>
''' This table permutes the bits in a byte, from
''' 0 4 1 5 2 6 3 7
''' to
''' 0 1 2 3 4 5 6 7
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns>tab table of 256 permutations, or NULL on error</returns>
Public Shared Function makeSubsampleTab2x() as Byte()



	Dim _Result as Byte() = LeptonicaSharp.Natives.makeSubsampleTab2x( )

	Return _Result
End Function

#End Region
#Region "SRC\blend.c"
' SRC\blend.c (174, 1)
' pixBlend()
' pixBlend(PIX *, PIX *, l_int32, l_int32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a simple top-level interface.  For more flexibility,
''' call directly into pixBlendMask(), etc.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs1">[in] - blendee</param>
'''  <param name="pixs2">[in] - blender; typ. smaller</param>
'''  <param name="x">[in] - ,y  origin [UL corner] of pixs2 relative to the origin of pixs1; can be LT 0</param>
'''  <param name="fract">[in] - blending fraction</param>
'''   <returns>pixd blended image, or NULL on error</returns>
Public Shared Function pixBlend(
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByVal fract as Single) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlend( pixs1.Pointer, pixs2.Pointer, x, y, fract)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\blend.c (262, 1)
' pixBlendMask()
' pixBlendMask(PIX *, PIX *, PIX *, l_int32, l_int32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Clipping of pixs2 to pixs1 is done in the inner pixel loop.
''' (2) If pixs1 has a colormap, it is removed.
''' (3) For inplace operation (pixs1 not cmapped), call it this way
''' pixBlendMask(pixs1, pixs1, pixs2, ...)
''' (4) For generating a new pixd
''' pixd = pixBlendMask(NULL, pixs1, pixs2, ...)
''' (5) Only call in-place if pixs1 does not have a colormap.
''' (6) Invalid %fract defaults to 0.5 with a warning.
''' Invalid %type defaults to L_BLEND_WITH_INVERSE with a warning.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; either NULL or equal to pixs1 for in-place</param>
'''  <param name="pixs1">[in] - blendee, depth GT 1</param>
'''  <param name="pixs2">[in] - blender, 1 bpp; typ. smaller in size than pixs1</param>
'''  <param name="x">[in] - ,y  origin [UL corner] of pixs2 relative to the origin of pixs1; can be LT 0</param>
'''  <param name="fract">[in] - blending fraction</param>
'''  <param name="type">[in] - L_BLEND_WITH_INVERSE, L_BLEND_TO_WHITE, L_BLEND_TO_BLACK</param>
'''   <returns>pixd if OK; NULL on error</returns>
Public Shared Function pixBlendMask(
				ByVal pixd as Pix, 
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByVal fract as Single, 
				ByVal type as Enumerations.L_BLEND) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlendMask( pixdPTR, pixs1.Pointer, pixs2.Pointer, x, y, fract, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\blend.c (489, 1)
' pixBlendGray()
' pixBlendGray(PIX *, PIX *, PIX *, l_int32, l_int32, l_float32, l_int32, l_int32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) For inplace operation (pixs1 not cmapped), call it this way
''' pixBlendGray(pixs1, pixs1, pixs2, ...)
''' (2) For generating a new pixd
''' pixd = pixBlendGray(NULL, pixs1, pixs2, ...)
''' (3) Clipping of pixs2 to pixs1 is done in the inner pixel loop.
''' (4) If pixs1 has a colormap, it is removed; otherwise, if pixs1
''' has depth LT 8, it is unpacked to generate a 8 bpp pix.
''' (5) If transparent = 0, the blending fraction (fract) is
''' applied equally to all pixels.
''' (6) If transparent = 1, all pixels of value transpix (typically
''' either 0 or 0xff) in pixs2 are transparent in the blend.
''' (7) After processing pixs1, it is either 8 bpp or 32 bpp
''' ~ if 8 bpp, the fraction of pixs2 is mixed with pixs1.
''' ~ if 32 bpp, each component of pixs1 is mixed with
''' the same fraction of pixs2.
''' (8) For L_BLEND_GRAY_WITH_INVERSE, the white values of the blendee
''' (cval == 255 in the code below) result in a delta of 0.
''' Thus, these pixels are intrinsically transparent!
''' The "pivot" value of the src, at which no blending occurs, is
''' 128.  Compare with the adaptive pivot in pixBlendGrayAdapt().
''' (9) Invalid %fract defaults to 0.5 with a warning.
''' Invalid %type defaults to L_BLEND_GRAY with a warning.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; either NULL or equal to pixs1 for in-place</param>
'''  <param name="pixs1">[in] - blendee, depth GT 1</param>
'''  <param name="pixs2">[in] - blender, any depth; typ. smaller in size than pixs1</param>
'''  <param name="x">[in] - ,y  origin [UL corner] of pixs2 relative to the origin of pixs1; can be LT 0</param>
'''  <param name="fract">[in] - blending fraction</param>
'''  <param name="type">[in] - L_BLEND_GRAY, L_BLEND_GRAY_WITH_INVERSE</param>
'''  <param name="transparent">[in] - 1 to use transparency; 0 otherwise</param>
'''  <param name="transpix">[in] - pixel grayval in pixs2 that is to be transparent</param>
'''   <returns>pixd if OK; pixs1 on error</returns>
Public Shared Function pixBlendGray(
				ByVal pixd as Pix, 
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByVal fract as Single, 
				ByVal type as Enumerations.L_BLEND, 
				ByVal transparent as Integer, 
				ByVal transpix as UInteger) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlendGray( pixdPTR, pixs1.Pointer, pixs2.Pointer, x, y, fract, type, transparent, transpix)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\blend.c (688, 1)
' pixBlendGrayInverse()
' pixBlendGrayInverse(PIX *, PIX *, PIX *, l_int32, l_int32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) For inplace operation (pixs1 not cmapped), call it this way
''' pixBlendGrayInverse(pixs1, pixs1, pixs2, ...)
''' (2) For generating a new pixd
''' pixd = pixBlendGrayInverse(NULL, pixs1, pixs2, ...)
''' (3) Clipping of pixs2 to pixs1 is done in the inner pixel loop.
''' (4) If pixs1 has a colormap, it is removed; otherwise if pixs1
''' has depth LT 8, it is unpacked to generate a 8 bpp pix.
''' (5) This is a no-nonsense blender.  It changes the src1 pixel except
''' when the src1 pixel is midlevel gray.  Use fract == 1 for the most
''' aggressive blending, where, if the gray pixel in pixs2 is 0,
''' we get a complete inversion of the color of the src pixel in pixs1.
''' (6) The basic logic is that each component transforms by
'''   d  --GT  c * d + (1 - c ) * (f * (1 - d) + d * (1 - f))
''' where c is the blender pixel from pixs2,
''' f is %fract,
''' c and d are normalized to [0...1]
''' This has the property that for f == 0 (no blend) or c == 1 (white)
''' d  --GT  d
''' For c == 0 (black) we get maximum inversion
''' d  --GT  f  (1 - d) + d  (1 - f)   [inversion by fraction f]
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; either NULL or equal to pixs1 for in-place</param>
'''  <param name="pixs1">[in] - blendee, depth GT 1</param>
'''  <param name="pixs2">[in] - blender, any depth; typ. smaller in size than pixs1</param>
'''  <param name="x">[in] - ,y  origin [UL corner] of pixs2 relative to the origin of pixs1; can be LT 0</param>
'''  <param name="fract">[in] - blending fraction</param>
'''   <returns>pixd if OK; pixs1 on error</returns>
Public Shared Function pixBlendGrayInverse(
				ByVal pixd as Pix, 
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByVal fract as Single) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlendGrayInverse( pixdPTR, pixs1.Pointer, pixs2.Pointer, x, y, fract)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\blend.c (820, 1)
' pixBlendColor()
' pixBlendColor(PIX *, PIX *, PIX *, l_int32, l_int32, l_float32, l_int32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) For inplace operation (pixs1 must be 32 bpp), call it this way
''' pixBlendColor(pixs1, pixs1, pixs2, ...)
''' (2) For generating a new pixd
''' pixd = pixBlendColor(NULL, pixs1, pixs2, ...)
''' (3) If pixs2 is not 32 bpp rgb, it is converted.
''' (4) Clipping of pixs2 to pixs1 is done in the inner pixel loop.
''' (5) If pixs1 has a colormap, it is removed to generate a 32 bpp pix.
''' (6) If pixs1 has depth LT 32, it is unpacked to generate a 32 bpp pix.
''' (7) If transparent = 0, the blending fraction (fract) is
''' applied equally to all pixels.
''' (8) If transparent = 1, all pixels of value transpix (typically
''' either 0 or 0xffffff00) in pixs2 are transparent in the blend.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; either NULL or equal to pixs1 for in-place</param>
'''  <param name="pixs1">[in] - blendee; depth GT 1</param>
'''  <param name="pixs2">[in] - blender, any depth;; typ. smaller in size than pixs1</param>
'''  <param name="x">[in] - ,y  origin [UL corner] of pixs2 relative to the origin of pixs1</param>
'''  <param name="fract">[in] - blending fraction</param>
'''  <param name="transparent">[in] - 1 to use transparency; 0 otherwise</param>
'''  <param name="transpix">[in] - pixel color in pixs2 that is to be transparent</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixBlendColor(
				ByVal pixd as Pix, 
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByVal fract as Single, 
				ByVal transparent as Integer, 
				ByVal transpix as UInteger) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlendColor( pixdPTR, pixs1.Pointer, pixs2.Pointer, x, y, fract, transparent, transpix)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\blend.c (932, 1)
' 
' pixBlendColorByChannel(PIX *, PIX *, PIX *, l_int32, l_int32, l_float32, l_float32, l_float32, l_int32, l_uint32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixBlendColorByChannel(
				ByRef pixd as Pix, 
				ByRef pixs1 as Pix, 
				ByRef pixs2 as Pix, 
				ByRef x as Integer, 
				ByRef y as Integer, 
				ByRef rfract as Single, 
				ByRef gfract as Single, 
				ByRef bfract as Single, 
				ByRef transparent as Integer, 
				ByRef transpix as UInteger) as Pix

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")
	If IsNothing (rfract) then Throw New ArgumentNullException  ("rfract cannot be Nothing")
	If IsNothing (gfract) then Throw New ArgumentNullException  ("gfract cannot be Nothing")
	If IsNothing (bfract) then Throw New ArgumentNullException  ("bfract cannot be Nothing")

Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer
Dim pixs1PTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs1) Then pixs1PTR = pixs1.Pointer
Dim pixs2PTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs2) Then pixs2PTR = pixs2.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlendColorByChannel( pixd.Pointer, pixs1.Pointer, pixs2.Pointer, x, y, rfract, gfract, bfract, transparent, transpix)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\blend.c (1061, 1)
' pixBlendGrayAdapt()
' pixBlendGrayAdapt(PIX *, PIX *, PIX *, l_int32, l_int32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) For inplace operation (pixs1 not cmapped), call it this way
''' pixBlendGrayAdapt(pixs1, pixs1, pixs2, ...)
''' For generating a new pixd
''' pixd = pixBlendGrayAdapt(NULL, pixs1, pixs2, ...)
''' (2) Clipping of pixs2 to pixs1 is done in the inner pixel loop.
''' (3) If pixs1 has a colormap, it is removed.
''' (4) If pixs1 has depth LT 8, it is unpacked to generate a 8 bpp pix.
''' (5) This does a blend with inverse.  Whereas in pixGlendGray(), the
''' zero blend point is where the blendee pixel is 128, here
''' the zero blend point is found adaptively, with respect to the
''' median of the blendee region.  If the median is LT 128,
''' the zero blend point is found from
''' median + shift.
''' Otherwise, if the median GT= 128, the zero blend point is
''' median - shift.
''' The purpose of shifting the zero blend point away from the
''' median is to prevent a situation in pixBlendGray() where
''' the median is 128 and the blender is not visible.
''' The default value of shift is 64.
''' (6) After processing pixs1, it is either 8 bpp or 32 bpp
''' ~ if 8 bpp, the fraction of pixs2 is mixed with pixs1.
''' ~ if 32 bpp, each component of pixs1 is mixed with
''' the same fraction of pixs2.
''' (7) The darker the blender, the more it mixes with the blendee.
''' A blender value of 0 has maximum mixing; a value of 255
''' has no mixing and hence is transparent.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; either NULL or equal to pixs1 for in-place</param>
'''  <param name="pixs1">[in] - blendee, depth GT 1</param>
'''  <param name="pixs2">[in] - blender, any depth; typ. smaller in size than pixs1</param>
'''  <param name="x">[in] - ,y  origin [UL corner] of pixs2 relative to the origin of pixs1; can be LT 0</param>
'''  <param name="fract">[in] - blending fraction</param>
'''  <param name="shift">[in] - GT= 0 but LT= 128 shift of zero blend value from median source; use -1 for default value;</param>
'''   <returns>pixd if OK; pixs1 on error</returns>
Public Shared Function pixBlendGrayAdapt(
				ByVal pixd as Pix, 
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByVal fract as Single, 
				ByVal shift as Integer) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlendGrayAdapt( pixdPTR, pixs1.Pointer, pixs2.Pointer, x, y, fract, shift)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\blend.c (1235, 1)
' pixFadeWithGray()
' pixFadeWithGray(PIX *, PIX *, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This function combines two pix aligned to the UL corner; they
''' need not be the same size.
''' (2) Each pixel in pixb is multiplied by 'factor' divided by 255, and
''' clipped to the range [0 ... 1].  This gives the fade fraction
''' to be applied to pixs.  Fade either to white (L_BLEND_TO_WHITE)
''' or to black (L_BLEND_TO_BLACK).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - colormapped or 8 bpp or 32 bpp</param>
'''  <param name="pixb">[in] - 8 bpp blender</param>
'''  <param name="factor">[in] - multiplicative factor to apply to blender value</param>
'''  <param name="type">[in] - L_BLEND_TO_WHITE, L_BLEND_TO_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixFadeWithGray(
				ByVal pixs as Pix, 
				ByVal pixb as Pix, 
				ByVal factor as Single, 
				ByVal type as Enumerations.L_BLEND) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixb) then Throw New ArgumentNullException  ("pixb cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFadeWithGray( pixs.Pointer, pixb.Pointer, factor, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\blend.c (1349, 1)
' 
' pixBlendHardLight(PIX *, PIX *, PIX *, l_int32, l_int32, l_float32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixBlendHardLight(
				ByRef pixd as Pix, 
				ByRef pixs1 as Pix, 
				ByRef pixs2 as Pix, 
				ByRef x as Integer, 
				ByRef y as Integer, 
				ByRef fract as Single) as Pix

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")

Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer
Dim pixs1PTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs1) Then pixs1PTR = pixs1.Pointer
Dim pixs2PTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs2) Then pixs2PTR = pixs2.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlendHardLight( pixd.Pointer, pixs1.Pointer, pixs2.Pointer, x, y, fract)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\blend.c (1555, 1)
' pixBlendCmap()
' pixBlendCmap(PIX *, PIX *, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This function combines two colormaps, and replaces the pixels
''' in pixs that have a specified color value with those in pixb.
''' (2) sindex must be in the existing colormap; otherwise an
''' error is returned.  In use, sindex will typically be the index
''' for white (255, 255, 255).
''' (3) Blender colors that already exist in the colormap are used;
''' others are added.  If any blender colors cannot be
''' stored in the colormap, an error is returned.
''' (4) In the implementation, a mapping is generated from each
''' original blender colormap index to the corresponding index
''' in the expanded colormap for pixs.  Then for each pixel in
''' pixs with value sindex, and which is covered by a blender pixel,
''' the new index corresponding to the blender pixel is substituted
''' for sindex.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2, 4 or 8 bpp, with colormap</param>
'''  <param name="pixb">[in] - colormapped blender</param>
'''  <param name="x">[in] - UL corner of blender relative to pixs</param>
'''  <param name="y">[in] - UL corner of blender relative to pixs</param>
'''  <param name="sindex">[in] - colormap index of pixels in pixs to be changed</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixBlendCmap(
				ByVal pixs as Pix, 
				ByVal pixb as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal sindex as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixb) then Throw New ArgumentNullException  ("pixb cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixBlendCmap( pixs.Pointer, pixb.Pointer, x, y, sindex)

	Return _Result
End Function

' SRC\blend.c (1692, 1)
' pixBlendWithGrayMask()
' pixBlendWithGrayMask(PIX *, PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The result is 8 bpp grayscale if both pixs1 and pixs2 are
''' 8 bpp gray.  Otherwise, the result is 32 bpp rgb.
''' (2) pixg is an 8 bpp transparency image, where 0 is transparent
''' and 255 is opaque.  It determines the transparency of pixs2
''' when applied over pixs1.  It can be null if pixs2 is rgba,
''' in which case we use the alpha component of pixs2.
''' (3) If pixg exists, it need not be the same size as pixs2.
''' However, we assume their UL corners are aligned with each other,
''' and placed at the location (x, y) in pixs1.
''' (4) The pixels in pixd are a combination of those in pixs1
''' and pixs2, where the amount from pixs2 is proportional to
''' the value of the pixel (p) in pixg, and the amount from pixs1
''' is proportional to (255 - p).  Thus pixg is a transparency
''' image (usually called an alpha blender) where each pixel
''' can be associated with a pixel in pixs2, and determines
''' the amount of the pixs2 pixel in the final result.
''' For example, if pixg is all 0, pixs2 is transparent and
''' the result in pixd is simply pixs1.
''' (5) A typical use is for the pixs2/pixg combination to be
''' a small watermark that is applied to pixs1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs1">[in] - 8 bpp gray, rgb, rgba or colormapped</param>
'''  <param name="pixs2">[in] - 8 bpp gray, rgb, rgba or colormapped</param>
'''  <param name="pixg">[in][optional] - 8 bpp gray, for transparency of pixs2; can be null</param>
'''  <param name="x">[in] - UL corner of pixs2 and pixg with respect to pixs1</param>
'''  <param name="y">[in] - UL corner of pixs2 and pixg with respect to pixs1</param>
'''   <returns>pixd blended image, or NULL on error</returns>
Public Shared Function pixBlendWithGrayMask(
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix, 
				ByVal pixg as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")

	Dim pixgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixg) Then pixgPTR = pixg.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlendWithGrayMask( pixs1.Pointer, pixs2.Pointer, pixgPTR, x, y)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\blend.c (1846, 1)
' pixBlendBackgroundToColor()
' pixBlendBackgroundToColor(PIX *, PIX *, BOX *, l_uint32, l_float32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This in effect replaces light background pixels in pixs
''' by the input color.  It does it by alpha blending so that
''' there are no visible artifacts from hard cutoffs.
''' (2) If pixd == pixs, this is done in-place.
''' (3) If box == NULL, this is performed on all of pixs.
''' (4) The alpha component for blending is derived from pixs,
''' by converting to grayscale and enhancing with a TRC.
''' (5) The last three arguments specify the TRC operation.
''' Suggested values are %gamma = 0.3, %minval = 50, %maxval = 200.
''' To skip the TRC, use %gamma == 1, %minval = 0, %maxval = 255.
''' See pixGammaTRC() for details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in]can be NULL - or pixs</param>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="box">[in] - region for blending; can be NULL)</param>
'''  <param name="color">[in] - 32 bit color in 0xrrggbb00 format</param>
'''  <param name="gamma">[in] - args for grayscale TRC mapping</param>
'''  <param name="minval">[in] - args for grayscale TRC mapping</param>
'''  <param name="maxval">[in] - args for grayscale TRC mapping</param>
'''   <returns>pixd always</returns>
Public Shared Function pixBlendBackgroundToColor(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal color as UInteger, 
				ByVal gamma as Single, 
				ByVal minval as Integer, 
				ByVal maxval as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If IsNothing (gamma) then Throw New ArgumentNullException  ("gamma cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlendBackgroundToColor( pixdPTR, pixs.Pointer, box.Pointer, color, gamma, minval, maxval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\blend.c (1926, 1)
' pixMultiplyByColor()
' pixMultiplyByColor(PIX *, PIX *, BOX *, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) This filters all pixels in the specified region by
''' multiplying each component by the input color.
''' This leaves black invariant and transforms white to the
''' input color.
''' (2) If pixd == pixs, this is done in-place.
''' (3) If box == NULL, this is performed on all of pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in]can be NULL - or pixs</param>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="box">[in] - region for filtering; can be NULL)</param>
'''  <param name="color">[in] - 32 bit color in 0xrrggbb00 format</param>
'''   <returns>pixd always</returns>
Public Shared Function pixMultiplyByColor(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal color as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMultiplyByColor( pixdPTR, pixs.Pointer, box.Pointer, color)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\blend.c (2004, 1)
' pixAlphaBlendUniform()
' pixAlphaBlendUniform(PIX *, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a convenience function that renders 32 bpp RGBA images
''' (with an alpha channel) over a uniform background of
''' value %color.  To render over a white background,
''' use %color = 0xffffff00.  The result is an RGB image.
''' (2) If pixs does not have an alpha channel, it returns a clone
''' of pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgba, with alpha</param>
'''  <param name="color">[in] - 32 bit color in 0xrrggbb00 format</param>
'''   <returns>pixd 32 bpp rgb pixs blended over uniform color %color, a clone of pixs if no alpha, and NULL on error</returns>
Public Shared Function pixAlphaBlendUniform(
				ByVal pixs as Pix, 
				ByVal color as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAlphaBlendUniform( pixs.Pointer, color)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\blend.c (2057, 1)
' pixAddAlphaToBlend()
' pixAddAlphaToBlend(PIX *, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a simple alpha layer generator, where typically white has
''' maximum transparency and black has minimum.
''' (2) If %invert == 1, generate the same alpha layer but invert
''' the input image photometrically.  This is useful for blending
''' over dark images, where you want dark regions in pixs, such
''' as text, to be lighter in the blended image.
''' (3) The fade %fract gives the minimum transparency (i.e.,
''' maximum opacity).  A small fraction is useful for adding
''' a watermark to an image.
''' (4) If pixs has a colormap, it is removed to rgb.
''' (5) If pixs already has an alpha layer, it is overwritten.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth</param>
'''  <param name="fract">[in] - fade fraction in the alpha component</param>
'''  <param name="invert">[in] - 1 to photometrically invert pixs</param>
'''   <returns>pixd 32 bpp with alpha, or NULL on error</returns>
Public Shared Function pixAddAlphaToBlend(
				ByVal pixs as Pix, 
				ByVal fract as Single, 
				ByVal invert as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAddAlphaToBlend( pixs.Pointer, fract, invert)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\blend.c (2116, 1)
' pixSetAlphaOverWhite()
' pixSetAlphaOverWhite(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) The generated alpha component is transparent over white
''' (background) pixels in pixs, and quickly grades to opaque
''' away from the transparent parts.  This is a cheap and
''' dirty alpha generator.  The 2 pixel gradation is useful
''' to blur the boundary between the transparent region
''' (that will render entirely from a backing image) and
''' the remainder which renders from pixs.
''' (2) All alpha component bits in pixs are overwritten.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - colormapped or 32 bpp rgb; no alpha</param>
'''   <returns>pixd new pix with meaningful alpha component, or NULL on error</returns>
Public Shared Function pixSetAlphaOverWhite(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSetAlphaOverWhite( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\blend.c (2178, 1)
' pixLinearEdgeFade()
' pixLinearEdgeFade(PIX *, l_int32, l_int32, l_float32, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) In-place operation.
''' (2) Maximum fading fraction %maxfade occurs at the edge of the image,
''' and the fraction goes to 0 at the fractional distance %distfract
''' from the edge.  %maxfade must be in [0, 1].
''' (3) %distrfact must be in [0, 1], and typically it would be LT= 0.5.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 or 32 bpp; no colormap</param>
'''  <param name="dir">[in] - L_FROM_LEFT, L_FROM_RIGHT, L_FROM_TOP, L_FROM_BOT</param>
'''  <param name="fadeto">[in] - L_BLEND_TO_WHITE, L_BLEND_TO_BLACK</param>
'''  <param name="distfract">[in] - fraction of width or height over which fading occurs</param>
'''  <param name="maxfade">[in] - fraction of fading at the edge, LT= 1.0</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixLinearEdgeFade(
				ByVal pixs as Pix, 
				ByVal dir as Enumerations.L_scan_direction, 
				ByVal fadeto as Enumerations.L_BLEND, 
				ByVal distfract as Single, 
				ByVal maxfade as Single) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (distfract) then Throw New ArgumentNullException  ("distfract cannot be Nothing")
	If IsNothing (maxfade) then Throw New ArgumentNullException  ("maxfade cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixLinearEdgeFade( pixs.Pointer, dir, fadeto, distfract, maxfade)

	Return _Result
End Function

#End Region
#Region "SRC\bmf.c"
' SRC\bmf.c (114, 1)
' bmfCreate()
' bmfCreate(const char *, l_int32) as L_BMF *
'''  <summary>
''' Notes
''' (1) If %dir == null, this generates the font bitmaps from a
''' compiled string.
''' (2) Otherwise, this tries to read a pre-computed pixa file with the
''' 95 ascii chars in it.  If the file is not found, it then
''' attempts to generate the pixa and associated baseline
''' data from a tiff image containing all the characters.  If
''' that fails, it uses the compiled string.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dir">[in][optional] - directory holding pixa of character set</param>
'''  <param name="fontsize">[in] - 4, 6, 8, ... , 20</param>
'''   <returns>bmf holding the bitmap font and associated information</returns>
Public Shared Function bmfCreate(
				ByVal dir as String, 
				ByVal fontsize as Integer) as L_Bmf



	Dim _Result as IntPtr = LeptonicaSharp.Natives.bmfCreate( dir, fontsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Bmf(_Result)
End Function

' SRC\bmf.c (166, 1)
' bmfDestroy()
' bmfDestroy(L_BMF **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pbmf">[in,out] - set to null</param>
Public Shared Sub bmfDestroy(
				ByRef pbmf as L_Bmf)


	Dim pbmfPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbmf) Then pbmfPTR = pbmf.Pointer

	LeptonicaSharp.Natives.bmfDestroy( pbmfPTR)
	if pbmfPTR <> IntPtr.Zero then pbmf = new L_Bmf(pbmfPTR)

End Sub

' SRC\bmf.c (202, 1)
' bmfGetPix()
' bmfGetPix(L_BMF *, char) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="bmf">[in] - </param>
'''  <param name="chr">[in] - should be one of the 95 supported printable bitmaps</param>
'''   <returns>pix clone of pix in bmf, or NULL on error</returns>
Public Shared Function bmfGetPix(
				ByVal bmf as L_Bmf, 
				ByVal chr as Char) as Pix

	If IsNothing (bmf) then Throw New ArgumentNullException  ("bmf cannot be Nothing")
	If IsNothing (chr) then Throw New ArgumentNullException  ("chr cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.bmfGetPix( bmf.Pointer, chr)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bmf.c (237, 1)
' bmfGetWidth()
' bmfGetWidth(L_BMF *, char, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="bmf">[in] - </param>
'''  <param name="chr">[in] - should be one of the 95 supported bitmaps</param>
'''  <param name="pw">[out] - character width; -1 if not printable</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function bmfGetWidth(
				ByVal bmf as L_Bmf, 
				ByVal chr as Char, 
				ByRef pw as Integer) as Integer

	If IsNothing (bmf) then Throw New ArgumentNullException  ("bmf cannot be Nothing")
	If IsNothing (chr) then Throw New ArgumentNullException  ("chr cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.bmfGetWidth( bmf.Pointer, chr, pw)

	Return _Result
End Function

' SRC\bmf.c (276, 1)
' bmfGetBaseline()
' bmfGetBaseline(L_BMF *, char, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="bmf">[in] - </param>
'''  <param name="chr">[in] - should be one of the 95 supported bitmaps</param>
'''  <param name="pbaseline">[out] - distance below UL corner of bitmap char</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function bmfGetBaseline(
				ByVal bmf as L_Bmf, 
				ByVal chr as Char, 
				ByRef pbaseline as Integer) as Integer

	If IsNothing (bmf) then Throw New ArgumentNullException  ("bmf cannot be Nothing")
	If IsNothing (chr) then Throw New ArgumentNullException  ("chr cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.bmfGetBaseline( bmf.Pointer, chr, pbaseline)

	Return _Result
End Function

' SRC\bmf.c (322, 1)
' pixaGetFont()
' pixaGetFont(const char *, l_int32, l_int32 *, l_int32 *, l_int32 *) as PIXA *
'''  <summary>
''' Notes
''' (1) This reads a pre-computed pixa file with the 95 ascii chars.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dir">[in] - directory holding pixa of character set</param>
'''  <param name="fontsize">[in] - 4, 6, 8, ... , 20</param>
'''  <param name="pbl0">[out] - baseline of row 1</param>
'''  <param name="pbl1">[out] - baseline of row 2</param>
'''  <param name="pbl2">[out] - baseline of row 3</param>
'''   <returns>pixa of font bitmaps for 95 characters, or NULL on error</returns>
Public Shared Function pixaGetFont(
				ByVal dir as String, 
				ByVal fontsize as Integer, 
				ByRef pbl0 as Integer, 
				ByRef pbl1 as Integer, 
				ByRef pbl2 as Integer) as Pixa

	If IsNothing (dir) then Throw New ArgumentNullException  ("dir cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaGetFont( dir, fontsize, pbl0, pbl1, pbl2)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\bmf.c (372, 1)
' pixaSaveFont()
' pixaSaveFont(const char *, const char *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This saves a font of a particular size.
''' (2) If %dir == null, this generates the font bitmaps from a
''' compiled string.
''' (3) prog/genfonts calls this function for each of the
''' nine font sizes, to generate all the font pixa files.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="indir">[in][optional] - directory holding image of character set</param>
'''  <param name="outdir">[in] - directory into which the output pixa file will be written</param>
'''  <param name="fontsize">[in] - in pts, at 300 ppi</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaSaveFont(
				ByVal indir as String, 
				ByVal outdir as String, 
				ByVal fontsize as Integer) as Integer

	If IsNothing (outdir) then Throw New ArgumentNullException  ("outdir cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaSaveFont( indir, outdir, fontsize)

	Return _Result
End Function

#End Region
#Region "SRC\bmpio.c"
' SRC\bmpio.c (89, 1)
' pixReadStreamBmp()
' pixReadStreamBmp(FILE *) as PIX *
'''  <summary>
''' Notes
''' (1) Here are references on the bmp file format
''' http//en.wikipedia.org/wiki/BMP_file_format
''' http//www.fortunecity.com/skyscraper/windows/364/bmpffrmt.html
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for read</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixReadStreamBmp(
				ByVal fp as FILE) as Pix

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadStreamBmp( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bmpio.c (119, 1)
' pixReadMemBmp()
' pixReadMemBmp(const l_uint8 *, size_t) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cdata">[in] - bmp data</param>
'''  <param name="size">[in] - number of bytes of bmp-formatted data</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixReadMemBmp(
				ByVal cdata as Byte(), 
				ByVal size as UInteger) as Pix

	If IsNothing (cdata) then Throw New ArgumentNullException  ("cdata cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadMemBmp( cdata, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\bmpio.c (351, 1)
' pixWriteStreamBmp()
' pixWriteStreamBmp(FILE *, PIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pix">[in] - all depths</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWriteStreamBmp(
				ByVal fp as FILE, 
				ByVal pix as Pix) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteStreamBmp( fp.Pointer, pix.Pointer)

	Return _Result
End Function

' SRC\bmpio.c (396, 1)
' pixWriteMemBmp()
' pixWriteMemBmp(l_uint8 **, size_t *, PIX *) as l_ok
'''  <summary>
''' Notes
''' (1) 2 bpp bmp files are not valid in the spec, and are
''' written as 8 bpp.
''' (2) pix with depth LT= 8 bpp are written with a colormap.
''' 16 bpp gray and 32 bpp rgb pix are written without a colormap.
''' (3) The transparency component in an rgb pix is ignored.
''' All 32 bpp pix have the bmp alpha component set to 255 (opaque).
''' (4) The bmp colormap entries, RGBA_QUAD, are the same as
''' the ones used for colormaps in leptonica.  This allows
''' a simple memcpy for bmp output.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pfdata">[out] - data of bmp formatted image</param>
'''  <param name="pfsize">[out] - size of returned data</param>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16, 32 bpp</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWriteMemBmp(
				ByRef pfdata as Byte(), 
				ByRef pfsize as UInteger, 
				ByVal pixs as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8,16,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16, 32 bpp")

	Dim pfdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteMemBmp( pfdataPTR, pfsize, pixs.Pointer)
	ReDim pfdata(IIf(pfsize > 0, pfsize, 1) - 1) : If pfdataPTR <> IntPtr.Zero Then Marshal.Copy(pfdataPTR, pfdata, 0, pfdata.count)

	Return _Result
End Function

#End Region
#Region "SRC\bootnumgen1.c"
' SRC\bootnumgen1.c (290, 1)
' l_bootnum_gen1()
' l_bootnum_gen1() as PIXA *
'''  <summary>
''' Call this way
''' PIXA  pixa = l_bootnum_gen1();   (C)
''' Pixa  pixa = l_bootnum_gen1();   (C++)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns>pixa  of labeled digits</returns>
Public Shared Function l_bootnum_gen1() as Pixa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_bootnum_gen1( )
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

#End Region
#Region "SRC\bootnumgen2.c"
' SRC\bootnumgen2.c (273, 1)
' l_bootnum_gen2()
' l_bootnum_gen2() as PIXA *
'''  <summary>
''' Call this way
''' PIXA  pixa = l_bootnum_gen2();   (C)
''' Pixa  pixa = l_bootnum_gen2();   (C++)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns>pixa  of labeled digits</returns>
Public Shared Function l_bootnum_gen2() as Pixa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_bootnum_gen2( )
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

#End Region
#Region "SRC\bootnumgen3.c"
' SRC\bootnumgen3.c (349, 1)
' l_bootnum_gen3()
' l_bootnum_gen3() as PIXA *
'''  <summary>
''' Call this way
''' PIXA  pixa = l_bootnum_gen3();   (C)
''' Pixa  pixa = l_bootnum_gen3();   (C++)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns>pixa  of labeled digits</returns>
Public Shared Function l_bootnum_gen3() as Pixa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_bootnum_gen3( )
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

#End Region
#Region "SRC\boxbasic.c"
' SRC\boxbasic.c (165, 1)
' boxCreate()
' boxCreate(l_int32, l_int32, l_int32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) This clips the box to the +quad.  If no part of the
''' box is in the +quad, this returns NULL.
''' (2) We allow you to make a box with w = 0 and/or h = 0.
''' This does not represent a valid region, but it is useful
''' as a placeholder in a boxa for which the index of the
''' box in the boxa is important.  This is an atypical
''' situation; usually you want to put only valid boxes with
''' nonzero width and height in a boxa.  If you have a boxa
''' with invalid boxes, the accessor boxaGetValidBox()
''' will return NULL on each invalid box.
''' (3) If you want to create only valid boxes, use boxCreateValid(),
''' which returns NULL if either w or h is 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="x">[in] - </param>
'''  <param name="y">[in] - </param>
'''  <param name="w">[in] - </param>
'''  <param name="h">[in] - </param>
'''   <returns>box, or NULL on error</returns>
Public Shared Function boxCreate(
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal w as Integer, 
				ByVal h as Integer) as Box



	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxCreate( x, y, w, h)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxbasic.c (210, 1)
' boxCreateValid()
' boxCreateValid(l_int32, l_int32, l_int32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) This returns NULL if either w = 0 or h = 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="x">[in] - </param>
'''  <param name="y">[in] - </param>
'''  <param name="w">[in] - </param>
'''  <param name="h">[in] - </param>
'''   <returns>box, or NULL on error</returns>
Public Shared Function boxCreateValid(
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal w as Integer, 
				ByVal h as Integer) as Box



	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxCreateValid( x, y, w, h)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxbasic.c (230, 1)
' boxCopy()
' boxCopy(BOX *) as BOX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''   <returns>copy of box, or NULL on error</returns>
Public Shared Function boxCopy(
				ByVal box as Box) as Box

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxCopy( box.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxbasic.c (252, 1)
' boxClone()
' boxClone(BOX *) as BOX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''   <returns>ptr to same box, or NULL on error</returns>
Public Shared Function boxClone(
				ByVal box as Box) as Box

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxClone( box.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxbasic.c (278, 1)
' boxDestroy()
' boxDestroy(BOX **) as void
'''  <summary>
''' Notes
''' (1) Decrements the ref count and, if 0, destroys the box.
''' (2) Always nulls the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pbox">[in,out] - will be set to null before returning</param>
Public Shared Sub boxDestroy(
				ByRef pbox as Box)


	Dim pboxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbox) Then pboxPTR = pbox.Pointer

	LeptonicaSharp.Natives.boxDestroy( pboxPTR)
	if pboxPTR <> IntPtr.Zero then pbox = new Box(pboxPTR)

End Sub

' SRC\boxbasic.c (310, 1)
' boxGetGeometry()
' boxGetGeometry(BOX *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''  <param name="px">[out][optional] - each can be null</param>
'''  <param name="py">[out][optional] - each can be null</param>
'''  <param name="pw">[out][optional] - each can be null</param>
'''  <param name="ph">[out][optional] - each can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxGetGeometry(
				ByVal box as Box, 
				ByRef px as Integer, 
				ByRef py as Integer, 
				ByRef pw as Integer, 
				ByRef ph as Integer) as Integer

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxGetGeometry( box.Pointer, px, py, pw, ph)

	Return _Result
End Function

' SRC\boxbasic.c (340, 1)
' boxSetGeometry()
' boxSetGeometry(BOX *, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''  <param name="x">[in][optional] - use -1 to leave unchanged</param>
'''  <param name="y">[in][optional] - use -1 to leave unchanged</param>
'''  <param name="w">[in][optional] - use -1 to leave unchanged</param>
'''  <param name="h">[in][optional] - use -1 to leave unchanged</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxSetGeometry(
				ByVal box as Box, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal w as Integer, 
				ByVal h as Integer) as Integer

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxSetGeometry( box.Pointer, x, y, w, h)

	Return _Result
End Function

' SRC\boxbasic.c (371, 1)
' boxGetSideLocations()
' boxGetSideLocations(BOX *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) All returned values are within the box.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''  <param name="pl">[out][optional] - each can be null</param>
'''  <param name="pr">[out][optional] - each can be null</param>
'''  <param name="pt">[out][optional] - each can be null</param>
'''  <param name="pb">[out][optional] - each can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxGetSideLocations(
				ByVal box as Box, 
				ByRef pl as Integer, 
				ByRef pr as Integer, 
				ByRef pt as Integer, 
				ByRef pb as Integer) as Integer

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxGetSideLocations( box.Pointer, pl, pr, pt, pb)

	Return _Result
End Function

' SRC\boxbasic.c (405, 1)
' boxSetSideLocations()
' boxSetSideLocations(BOX *, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''  <param name="l">[in][optional] - use -1 to leave unchanged</param>
'''  <param name="r">[in][optional] - use -1 to leave unchanged</param>
'''  <param name="t">[in][optional] - use -1 to leave unchanged</param>
'''  <param name="b">[in][optional] - use -1 to leave unchanged</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxSetSideLocations(
				ByVal box as Box, 
				ByVal l as Integer, 
				ByVal r as Integer, 
				ByVal t as Integer, 
				ByVal b as Integer) as Integer

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxSetSideLocations( box.Pointer, l, r, t, b)

	Return _Result
End Function

' SRC\boxbasic.c (432, 1)
' Return the current reference count of %box
' boxGetRefcount(BOX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - ptr to Box</param>
'''   <returns>refcount</returns>
Public Shared Function boxGetRefcount(
				ByVal box as Box) as Integer

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxGetRefcount( box.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (449, 1)
' Adjust the current references count of %box by %delta
' boxChangeRefcount(BOX *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - ptr to box</param>
'''  <param name="delta">[in] - adjustment, usually -1 or 1</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxChangeRefcount(
				ByVal box as Box, 
				ByVal delta as Integer) as Integer

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxChangeRefcount( box.Pointer, delta)

	Return _Result
End Function

' SRC\boxbasic.c (470, 1)
' boxIsValid()
' boxIsValid(BOX *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''  <param name="pvalid">[out] - 1 if valid; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxIsValid(
				ByVal box as Box, 
				ByRef pvalid as Integer) as Integer

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxIsValid( box.Pointer, pvalid)

	Return _Result
End Function

' SRC\boxbasic.c (497, 1)
' boxaCreate()
' boxaCreate(l_int32) as BOXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - initial number of ptrs</param>
'''   <returns>boxa, or NULL on error</returns>
Public Shared Function boxaCreate(
				ByVal n as Integer) as Boxa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxbasic.c (532, 1)
' boxaCopy()
' boxaCopy(BOXA *, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) See pix.h for description of the copyflag.
''' (2) The copy-clone makes a new boxa that holds clones of each box.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="copyflag">[in] - L_COPY, L_CLONE, L_COPY_CLONE</param>
'''   <returns>new boxa, or NULL on error</returns>
Public Shared Function boxaCopy(
				ByVal boxa as Boxa, 
				ByVal copyflag as Enumerations.L_access_storage) as Boxa

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaCopy( boxa.Pointer, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxbasic.c (578, 1)
' boxaDestroy()
' boxaDestroy(BOXA **) as void
'''  <summary>
''' Notes
''' (1) Decrements the ref count and, if 0, destroys the boxa.
''' (2) Always nulls the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pboxa">[in,out] - will be set to null before returning</param>
Public Shared Sub boxaDestroy(
				ByRef pboxa as Boxa)


	Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer

	LeptonicaSharp.Natives.boxaDestroy( pboxaPTR)
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)

End Sub

' SRC\boxbasic.c (616, 1)
' boxaAddBox()
' boxaAddBox(BOXA *, BOX *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="box">[in] - to be added</param>
'''  <param name="copyflag">[in] - L_INSERT, L_COPY, L_CLONE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaAddBox(
				ByVal boxa as Boxa, 
				ByVal box as Box, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaAddBox( boxa.Pointer, box.Pointer, copyflag)

	Return _Result
End Function

' SRC\boxbasic.c (663, 1)
' boxaExtendArray()
' boxaExtendArray(BOXA *) as l_ok
'''  <summary>
''' Notes
''' (1) Reallocs with doubled size of ptr array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function boxaExtendArray(
				ByVal boxa as Boxa) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaExtendArray( boxa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (687, 1)
' boxaExtendArrayToSize()
' boxaExtendArrayToSize(BOXA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) If necessary, reallocs new boxa ptr array to %size.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="size">[in] - new size of boxa array</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function boxaExtendArrayToSize(
				ByVal boxa as Boxa, 
				ByVal size as Integer) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaExtendArrayToSize( boxa.Pointer, size)

	Return _Result
End Function

' SRC\boxbasic.c (716, 1)
' boxaGetCount()
' boxaGetCount(BOXA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''   <returns>count of all boxes; 0 if no boxes or on error</returns>
Public Shared Function boxaGetCount(
				ByVal boxa as Boxa) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaGetCount( boxa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (733, 1)
' boxaGetValidCount()
' boxaGetValidCount(BOXA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''   <returns>count of valid boxes; 0 if no valid boxes or on error</returns>
Public Shared Function boxaGetValidCount(
				ByVal boxa as Boxa) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaGetValidCount( boxa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (761, 1)
' boxaGetBox()
' boxaGetBox(BOXA *, l_int32, l_int32) as BOX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="index">[in] - to the index-th box</param>
'''  <param name="accessflag">[in] - L_COPY or L_CLONE</param>
'''   <returns>box, or NULL on error</returns>
Public Shared Function boxaGetBox(
				ByVal boxa as Boxa, 
				ByVal index as Integer, 
				ByVal accessflag as Enumerations.L_access_storage) as Box

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaGetBox( boxa.Pointer, index, accessflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxbasic.c (800, 1)
' boxaGetValidBox()
' boxaGetValidBox(BOXA *, l_int32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) This returns NULL for an invalid box in a boxa.
''' For a box to be valid, both the width and height must be GT 0.
''' (2) We allow invalid boxes, with w = 0 or h = 0, as placeholders
''' in boxa for which the index of the box in the boxa is important.
''' This is an atypical situation; usually you want to put only
''' valid boxes in a boxa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="index">[in] - to the index-th box</param>
'''  <param name="accessflag">[in] - L_COPY or L_CLONE</param>
'''   <returns>box, or NULL if box is not valid or on error</returns>
Public Shared Function boxaGetValidBox(
				ByVal boxa as Boxa, 
				ByVal index as Integer, 
				ByVal accessflag as Enumerations.L_access_storage) as Box

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaGetValidBox( boxa.Pointer, index, accessflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxbasic.c (828, 1)
' boxaFindInvalidBoxes()
' boxaFindInvalidBoxes(BOXA *) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''   <returns>na   numa of invalid boxes; NULL if there are none or on error</returns>
Public Shared Function boxaFindInvalidBoxes(
				ByVal boxa as Boxa) as Numa

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaFindInvalidBoxes( boxa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\boxbasic.c (861, 1)
' boxaGetBoxGeometry()
' boxaGetBoxGeometry(BOXA *, l_int32, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="index">[in] - to the index-th box</param>
'''  <param name="px">[out][optional] - each can be null</param>
'''  <param name="py">[out][optional] - each can be null</param>
'''  <param name="pw">[out][optional] - each can be null</param>
'''  <param name="ph">[out][optional] - each can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaGetBoxGeometry(
				ByVal boxa as Boxa, 
				ByVal index as Integer, 
				ByRef px as Integer, 
				ByRef py as Integer, 
				ByRef pw as Integer, 
				ByRef ph as Integer) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaGetBoxGeometry( boxa.Pointer, index, px, py, pw, ph)

	Return _Result
End Function

' SRC\boxbasic.c (897, 1)
' boxaIsFull()
' boxaIsFull(BOXA *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="pfull">[out] - 1 if boxa is full</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaIsFull(
				ByVal boxa as Boxa, 
				ByRef pfull as Integer) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaIsFull( boxa.Pointer, pfull)

	Return _Result
End Function

' SRC\boxbasic.c (943, 1)
' boxaReplaceBox()
' boxaReplaceBox(BOXA *, l_int32, BOX *) as l_ok
'''  <summary>
''' Notes
''' (1) In-place replacement of one box.
''' (2) The previous box at that location, if any, is destroyed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="index">[in] - to the index-th box</param>
'''  <param name="box">[in] - insert to replace existing one</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaReplaceBox(
				ByVal boxa as Boxa, 
				ByVal index as Integer, 
				ByVal box as Box) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaReplaceBox( boxa.Pointer, index, box.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (981, 1)
' boxaInsertBox()
' boxaInsertBox(BOXA *, l_int32, BOX *) as l_ok
'''  <summary>
''' Notes
''' (1) This shifts box[i] --GT box[i + 1] for all i GT= index,
''' and then inserts box as box[index].
''' (2) To insert at the beginning of the array, set index = 0.
''' (3) To append to the array, it's easier to use boxaAddBox().
''' (4) This should not be used repeatedly to insert into large arrays,
''' because the function is O(n).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="index">[in] - location in boxa to insert new value</param>
'''  <param name="box">[in] - new box to be inserted</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaInsertBox(
				ByVal boxa as Boxa, 
				ByVal index as Integer, 
				ByVal box as Box) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaInsertBox( boxa.Pointer, index, box.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (1026, 1)
' boxaRemoveBox()
' boxaRemoveBox(BOXA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This removes box[index] and then shifts
''' box[i] --GT box[i - 1] for all i GT index.
''' (2) It should not be used repeatedly to remove boxes from
''' large arrays, because the function is O(n).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="index">[in] - of box to be removed</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaRemoveBox(
				ByVal boxa as Boxa, 
				ByVal index as Integer) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaRemoveBox( boxa.Pointer, index)

	Return _Result
End Function

' SRC\boxbasic.c (1068, 1)
' boxaRemoveBoxAndSave()
' boxaRemoveBoxAndSave(BOXA *, l_int32, BOX **) as l_ok
'''  <summary>
''' Notes
''' (1) This removes box[index] and then shifts
''' box[i] --GT box[i - 1] for all i GT index.
''' (2) It should not be used repeatedly to remove boxes from
''' large arrays, because the function is O(n).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="index">[in] - of box to be removed</param>
'''  <param name="pbox">[out][optional] - removed box</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaRemoveBoxAndSave(
				ByVal boxa as Boxa, 
				ByVal index as Integer, 
				ByRef pbox as Box) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")

Dim pboxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbox) Then pboxPTR = pbox.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaRemoveBoxAndSave( boxa.Pointer, index, pboxPTR)
	if pboxPTR <> IntPtr.Zero then pbox = new Box(pboxPTR)

	Return _Result
End Function

' SRC\boxbasic.c (1110, 1)
' boxaSaveValid()
' boxaSaveValid(BOXA *, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This makes a copy/clone of each valid box.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="copyflag">[in] - L_COPY or L_CLONE</param>
'''   <returns>boxad if OK, NULL on error</returns>
Public Shared Function boxaSaveValid(
				ByVal boxas as Boxa, 
				ByVal copyflag as Enumerations.L_access_storage) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaSaveValid( boxas.Pointer, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxbasic.c (1174, 1)
' boxaInitFull()
' boxaInitFull(BOXA *, BOX *) as l_ok
'''  <summary>
''' Notes
''' (1) This initializes a boxa by filling up the entire box ptr array
''' with copies of %box.  If %box == NULL, use a placeholder box
''' of zero size.  Any existing boxes are destroyed.
''' After this opepration, the number of boxes is equal to
''' the number of allocated ptrs.
''' (2) Note that we use boxaReplaceBox() instead of boxaInsertBox().
''' They both have the same effect when inserting into a NULL ptr
''' in the boxa ptr array
''' (3) Example usage.  This function is useful to prepare for a
''' random insertion (or replacement) of boxes into a boxa.
''' To randomly insert boxes into a boxa, up to some index "max"
''' Boxa boxa = boxaCreate(max);
''' boxaInitFull(boxa, NULL);
''' If you want placeholder boxes of non-zero size
''' Boxa boxa = boxaCreate(max);
''' Box box = boxCreate(...);
''' boxaInitFull(boxa, box);
''' boxDestroy(box);
''' If we have an existing boxa with a smaller ptr array, it can
''' be reused for up to max boxes
''' boxaExtendArrayToSize(boxa, max);
''' boxaInitFull(boxa, NULL);
''' The initialization allows the boxa to always be properly
''' filled, even if all the boxes are not later replaced.
''' If you want to know which boxes have been replaced,
''' and you initialized with invalid zero-sized boxes,
''' use boxaGetValidBox() to return NULL for the invalid boxes.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - typically empty</param>
'''  <param name="box">[in][optional] - to be replicated into the entire ptr array</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaInitFull(
				ByVal boxa as Boxa, 
				ByVal box as Box) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaInitFull( boxa.Pointer, boxPTR)

	Return _Result
End Function

' SRC\boxbasic.c (1211, 1)
' boxaClear()
' boxaClear(BOXA *) as l_ok
'''  <summary>
''' Notes
''' (1) This destroys all boxes in the boxa, setting the ptrs
''' to null.  The number of allocated boxes, n, is set to 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaClear(
				ByVal boxa as Boxa) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaClear( boxa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (1238, 1)
' boxaaCreate()
' boxaaCreate(l_int32) as BOXAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - size of boxa ptr array to be alloc'd; 0 for default</param>
'''   <returns>baa, or NULL on error</returns>
Public Shared Function boxaaCreate(
				ByVal n as Integer) as Boxaa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaaCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxaa(_Result)
End Function

' SRC\boxbasic.c (1273, 1)
' boxaaCopy()
' boxaaCopy(BOXAA *, l_int32) as BOXAA *
'''  <summary>
''' Notes
''' (1) L_COPY makes a copy of each boxa in baas.
''' L_CLONE makes a clone of each boxa in baas.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baas">[in] - input boxaa to be copied</param>
'''  <param name="copyflag">[in] - L_COPY, L_CLONE</param>
'''   <returns>baad new boxaa, composed of copies or clones of the boxa in baas, or NULL on error</returns>
Public Shared Function boxaaCopy(
				ByVal baas as Boxaa, 
				ByVal copyflag as Enumerations.L_access_storage) as Boxaa

	If IsNothing (baas) then Throw New ArgumentNullException  ("baas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaaCopy( baas.Pointer, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxaa(_Result)
End Function

' SRC\boxbasic.c (1304, 1)
' boxaaDestroy()
' boxaaDestroy(BOXAA **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pbaa">[in,out] - will be set to null before returning</param>
Public Shared Sub boxaaDestroy(
				ByRef pbaa as Boxaa)


	Dim pbaaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbaa) Then pbaaPTR = pbaa.Pointer

	LeptonicaSharp.Natives.boxaaDestroy( pbaaPTR)
	if pbaaPTR <> IntPtr.Zero then pbaa = new Boxaa(pbaaPTR)

End Sub

' SRC\boxbasic.c (1342, 1)
' boxaaAddBoxa()
' boxaaAddBoxa(BOXAA *, BOXA *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''  <param name="ba">[in] - to be added</param>
'''  <param name="copyflag">[in] - L_INSERT, L_COPY, L_CLONE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaAddBoxa(
				ByVal baa as Boxaa, 
				ByVal ba as Boxa, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")
	If IsNothing (ba) then Throw New ArgumentNullException  ("ba cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaAddBoxa( baa.Pointer, ba.Pointer, copyflag)

	Return _Result
End Function

' SRC\boxbasic.c (1379, 1)
' boxaaExtendArray()
' boxaaExtendArray(BOXAA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaExtendArray(
				ByVal baa as Boxaa) as Integer

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaExtendArray( baa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (1410, 1)
' boxaaExtendArrayToSize()
' boxaaExtendArrayToSize(BOXAA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) If necessary, reallocs the boxa ptr array to %size.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''  <param name="size">[in] - new size of boxa array</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function boxaaExtendArrayToSize(
				ByVal baa as Boxaa, 
				ByVal size as Integer) as Integer

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaExtendArrayToSize( baa.Pointer, size)

	Return _Result
End Function

' SRC\boxbasic.c (1439, 1)
' boxaaGetCount()
' boxaaGetCount(BOXAA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''   <returns>count number of boxa, or 0 if no boxa or on error</returns>
Public Shared Function boxaaGetCount(
				ByVal baa as Boxaa) as Integer

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaGetCount( baa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (1456, 1)
' boxaaGetBoxCount()
' boxaaGetBoxCount(BOXAA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''   <returns>count number of boxes, or 0 if no boxes or on error</returns>
Public Shared Function boxaaGetBoxCount(
				ByVal baa as Boxaa) as Integer

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaGetBoxCount( baa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (1486, 1)
' boxaaGetBoxa()
' boxaaGetBoxa(BOXAA *, l_int32, l_int32) as BOXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''  <param name="index">[in] - to the index-th boxa</param>
'''  <param name="accessflag">[in] - L_COPY or L_CLONE</param>
'''   <returns>boxa, or NULL on error</returns>
Public Shared Function boxaaGetBoxa(
				ByVal baa as Boxaa, 
				ByVal index as Integer, 
				ByVal accessflag as Enumerations.L_access_storage) as Boxa

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaaGetBoxa( baa.Pointer, index, accessflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxbasic.c (1516, 1)
' boxaaGetBox()
' boxaaGetBox(BOXAA *, l_int32, l_int32, l_int32) as BOX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''  <param name="iboxa">[in] - index into the boxa array in the boxaa</param>
'''  <param name="ibox">[in] - index into the box array in the boxa</param>
'''  <param name="accessflag">[in] - L_COPY or L_CLONE</param>
'''   <returns>box, or NULL on error</returns>
Public Shared Function boxaaGetBox(
				ByVal baa as Boxaa, 
				ByVal iboxa as Integer, 
				ByVal ibox as Integer, 
				ByVal accessflag as Enumerations.L_access_storage) as Box

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaaGetBox( baa.Pointer, iboxa, ibox, accessflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxbasic.c (1568, 1)
' boxaaInitFull()
' boxaaInitFull(BOXAA *, BOXA *) as l_ok
'''  <summary>
''' Notes
''' (1) This initializes a boxaa by filling up the entire boxa ptr array
''' with copies of %boxa.  Any existing boxa are destroyed.
''' After this operation, the number of boxa is equal to
''' the number of allocated ptrs.
''' (2) Note that we use boxaaReplaceBox() instead of boxaInsertBox().
''' They both have the same effect when inserting into a NULL ptr
''' in the boxa ptr array
''' (3) Example usage.  This function is useful to prepare for a
''' random insertion (or replacement) of boxa into a boxaa.
''' To randomly insert boxa into a boxaa, up to some index "max"
''' Boxaa baa = boxaaCreate(max);
''' // initialize the boxa
''' Boxa boxa = boxaCreate(...);
''' ...  [optionally fix with boxes]
''' boxaaInitFull(baa, boxa);
''' A typical use is to initialize the array with empty boxa,
''' and to replace only a subset that must be aligned with
''' something else, such as a pixa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - typically empty</param>
'''  <param name="boxa">[in] - to be replicated into the entire ptr array</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaInitFull(
				ByVal baa as Boxaa, 
				ByVal boxa as Boxa) as Integer

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaInitFull( baa.Pointer, boxa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (1608, 1)
' boxaaExtendWithInit()
' boxaaExtendWithInit(BOXAA *, l_int32, BOXA *) as l_ok
'''  <summary>
''' Notes
''' (1) This should be used on an existing boxaa that has been
''' fully loaded with boxa.  It then extends the boxaa,
''' loading all the additional ptrs with copies of boxa.
''' Typically, boxa will be empty.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''  <param name="maxindex">[in] - </param>
'''  <param name="boxa">[in] - to be replicated into the extended ptr array</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaExtendWithInit(
				ByVal baa as Boxaa, 
				ByVal maxindex as Integer, 
				ByVal boxa as Boxa) as Integer

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaExtendWithInit( baa.Pointer, maxindex, boxa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (1649, 1)
' boxaaReplaceBoxa()
' boxaaReplaceBoxa(BOXAA *, l_int32, BOXA *) as l_ok
'''  <summary>
''' Notes
''' (1) Any existing boxa is destroyed, and the input one
''' is inserted in its place.
''' (2) If the index is invalid, return 1 (error)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''  <param name="index">[in] - to the index-th boxa</param>
'''  <param name="boxa">[in] - insert and replace any existing one</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaReplaceBoxa(
				ByVal baa as Boxaa, 
				ByVal index as Integer, 
				ByVal boxa as Boxa) as Integer

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaReplaceBoxa( baa.Pointer, index, boxa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (1690, 1)
' boxaaInsertBoxa()
' boxaaInsertBoxa(BOXAA *, l_int32, BOXA *) as l_ok
'''  <summary>
''' Notes
''' (1) This shifts boxa[i] --GT boxa[i + 1] for all i GT= index,
''' and then inserts boxa as boxa[index].
''' (2) To insert at the beginning of the array, set index = 0.
''' (3) To append to the array, it's easier to use boxaaAddBoxa().
''' (4) This should not be used repeatedly to insert into large arrays,
''' because the function is O(n).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''  <param name="index">[in] - location in boxaa to insert new boxa</param>
'''  <param name="boxa">[in] - new boxa to be inserted</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaInsertBoxa(
				ByVal baa as Boxaa, 
				ByVal index as Integer, 
				ByVal boxa as Boxa) as Integer

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaInsertBoxa( baa.Pointer, index, boxa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (1736, 1)
' boxaaRemoveBoxa()
' boxaaRemoveBoxa(BOXAA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This removes boxa[index] and then shifts
''' boxa[i] --GT boxa[i - 1] for all i GT index.
''' (2) The removed boxaa is destroyed.
''' (2) This should not be used repeatedly on large arrays,
''' because the function is O(n).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''  <param name="index">[in] - of the boxa to be removed</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaRemoveBoxa(
				ByVal baa as Boxaa, 
				ByVal index as Integer) as Integer

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaRemoveBoxa( baa.Pointer, index)

	Return _Result
End Function

' SRC\boxbasic.c (1776, 1)
' boxaaAddBox()
' boxaaAddBox(BOXAA *, l_int32, BOX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Adds to an existing boxa only.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''  <param name="index">[in] - of boxa with boxaa</param>
'''  <param name="box">[in] - to be added</param>
'''  <param name="accessflag">[in] - L_INSERT, L_COPY or L_CLONE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaAddBox(
				ByVal baa as Boxaa, 
				ByVal index as Integer, 
				ByVal box as Box, 
				ByVal accessflag as Enumerations.L_access_storage) as Integer

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaAddBox( baa.Pointer, index, box.Pointer, accessflag)

	Return _Result
End Function

' SRC\boxbasic.c (1824, 1)
' boxaaReadFromFiles()
' boxaaReadFromFiles(const char *, const char *, l_int32, l_int32) as BOXAA *
'''  <summary>
''' Notes
''' (1) The files must be serialized boxa files (e.g., .ba).
''' If some files cannot be read, warnings are issued.
''' (2) Use %substr to filter filenames in the directory.  If
''' %substr == NULL, this takes all files.
''' (3) After filtering, use %first and %nfiles to select
''' a contiguous set of files, that have been lexically
''' sorted in increasing order.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirname">[in] - directory</param>
'''  <param name="substr">[in][optional] - substring filter on filenames; can be NULL</param>
'''  <param name="first">[in] - 0-based</param>
'''  <param name="nfiles">[in] - use 0 for everything from %first to the end</param>
'''   <returns>baa, or NULL on error or if no boxa files are found.</returns>
Public Shared Function boxaaReadFromFiles(
				ByVal dirname as String, 
				ByVal substr as String, 
				ByVal first as Integer, 
				ByVal nfiles as Integer) as Boxaa

	If IsNothing (dirname) then Throw New ArgumentNullException  ("dirname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaaReadFromFiles( dirname, substr, first, nfiles)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxaa(_Result)
End Function

' SRC\boxbasic.c (1868, 1)
' boxaaRead()
' boxaaRead(const char *) as BOXAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>boxaa, or NULL on error</returns>
Public Shared Function boxaaRead(
				ByVal filename as String) as Boxaa

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaaRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxaa(_Result)
End Function

' SRC\boxbasic.c (1895, 1)
' boxaaReadStream()
' boxaaReadStream(FILE *) as BOXAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>boxaa, or NULL on error</returns>
Public Shared Function boxaaReadStream(
				ByVal fp as FILE) as Boxaa

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaaReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxaa(_Result)
End Function

' SRC\boxbasic.c (1940, 1)
' boxaaReadMem()
' boxaaReadMem(const l_uint8 *, size_t) as BOXAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - serialization of boxaa; in ascii</param>
'''  <param name="size">[in] - of data in bytes; can use strlen to get it</param>
'''   <returns>baa, or NULL on error</returns>
Public Shared Function boxaaReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as Boxaa

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaaReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxaa(_Result)
End Function

' SRC\boxbasic.c (1968, 1)
' boxaaWrite()
' boxaaWrite(const char *, BOXAA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="baa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaWrite(
				ByVal filename as String, 
				ByVal baa as Boxaa) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaWrite( filename, baa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (1999, 1)
' boxaaWriteStream()
' boxaaWriteStream(FILE *, BOXAA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="baa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaWriteStream(
				ByVal fp as FILE, 
				ByVal baa as Boxaa) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaWriteStream( fp.Pointer, baa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (2046, 1)
' boxaaWriteMem()
' boxaaWriteMem(l_uint8 **, size_t *, BOXAA *) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a boxaa in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized boxaa; ascii</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="baa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal baa as Boxaa) as Integer

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaWriteMem( pdataPTR, psize, baa.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\boxbasic.c (2096, 1)
' boxaRead()
' boxaRead(const char *) as BOXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>boxa, or NULL on error</returns>
Public Shared Function boxaRead(
				ByVal filename as String) as Boxa

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxbasic.c (2123, 1)
' boxaReadStream()
' boxaReadStream(FILE *) as BOXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>boxa, or NULL on error</returns>
Public Shared Function boxaReadStream(
				ByVal fp as FILE) as Boxa

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxbasic.c (2166, 1)
' boxaReadMem()
' boxaReadMem(const l_uint8 *, size_t) as BOXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - serialization of boxa; in ascii</param>
'''  <param name="size">[in] - of data in bytes; can use strlen to get it</param>
'''   <returns>boxa, or NULL on error</returns>
Public Shared Function boxaReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as Boxa

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxbasic.c (2203, 1)
' boxaWriteDebug()
' boxaWriteDebug(const char *, BOXA *) as l_ok
'''  <summary>
''' Notes
''' (1) Debug version, intended for use in the library when writing
''' to files in a temp directory with names that are compiled in.
''' This is used instead of boxaWrite() for all such library calls.
''' (2) The global variable LeptDebugOK defaults to 0, and can be set
''' or cleared by the function setLeptDebugOK().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="boxa">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function boxaWriteDebug(
				ByVal filename as String, 
				ByVal boxa as Boxa) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaWriteDebug( filename, boxa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (2225, 1)
' boxaWrite()
' boxaWrite(const char *, BOXA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="boxa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaWrite(
				ByVal filename as String, 
				ByVal boxa as Boxa) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaWrite( filename, boxa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (2257, 1)
' boxaWriteStream()
' boxaWriteStream(FILE *, BOXA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="boxa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaWriteStream(
				ByVal fp as FILE, 
				ByVal boxa as Boxa) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaWriteStream( fp.Pointer, boxa.Pointer)

	Return _Result
End Function

' SRC\boxbasic.c (2298, 1)
' boxaWriteMem()
' boxaWriteMem(l_uint8 **, size_t *, BOXA *) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a boxa in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized boxa; ascii</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="boxa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal boxa as Boxa) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaWriteMem( pdataPTR, psize, boxa.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\boxbasic.c (2355, 1)
' boxPrintStreamInfo()
' boxPrintStreamInfo(FILE *, BOX *) as l_ok
'''  <summary>
''' Notes
''' (1) This outputs debug info.  Use serialization functions to
''' write to file if you want to read the data back.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="box">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxPrintStreamInfo(
				ByVal fp as FILE, 
				ByVal box as Box) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxPrintStreamInfo( fp.Pointer, box.Pointer)

	Return _Result
End Function

#End Region
#Region "SRC\boxfunc1.c"
' SRC\boxfunc1.c (99, 1)
' boxContains()
' boxContains(BOX *, BOX *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box1">[in] - </param>
'''  <param name="box2">[in] - </param>
'''  <param name="presult">[out] - 1 if box2 is entirely contained within box1, and 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxContains(
				ByVal box1 as Box, 
				ByVal box2 as Box, 
				ByRef presult as Integer) as Integer

	If IsNothing (box1) then Throw New ArgumentNullException  ("box1 cannot be Nothing")
	If IsNothing (box2) then Throw New ArgumentNullException  ("box2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxContains( box1.Pointer, box2.Pointer, presult)

	Return _Result
End Function

' SRC\boxfunc1.c (130, 1)
' boxIntersects()
' boxIntersects(BOX *, BOX *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box1">[in] - </param>
'''  <param name="box2">[in] - </param>
'''  <param name="presult">[out] - 1 if any part of box2 is contained in box1, and 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxIntersects(
				ByVal box1 as Box, 
				ByVal box2 as Box, 
				ByRef presult as Integer) as Integer

	If IsNothing (box1) then Throw New ArgumentNullException  ("box1 cannot be Nothing")
	If IsNothing (box2) then Throw New ArgumentNullException  ("box2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxIntersects( box1.Pointer, box2.Pointer, presult)

	Return _Result
End Function

' SRC\boxfunc1.c (172, 1)
' boxaContainedInBox()
' boxaContainedInBox(BOXA *, BOX *) as BOXA *
'''  <summary>
''' Notes
''' (1) All boxes in boxa that are entirely outside box are removed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="box">[in] - for containment</param>
'''   <returns>boxad boxa with all boxes in boxas that are entirely contained in box, or NULL on error</returns>
Public Shared Function boxaContainedInBox(
				ByVal boxas as Boxa, 
				ByVal box as Box) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaContainedInBox( boxas.Pointer, box.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc1.c (210, 1)
' boxaContainedInBoxCount()
' boxaContainedInBoxCount(BOXA *, BOX *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="box">[in] - for selecting contained boxes in %boxa</param>
'''  <param name="pcount">[out] - number of boxes intersecting the box</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaContainedInBoxCount(
				ByVal boxa as Boxa, 
				ByVal box as Box, 
				ByRef pcount as Integer) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaContainedInBoxCount( boxa.Pointer, box.Pointer, pcount)

	Return _Result
End Function

' SRC\boxfunc1.c (249, 1)
' boxaContainedInBoxa()
' boxaContainedInBoxa(BOXA *, BOXA *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa1">[in] - </param>
'''  <param name="boxa2">[in] - </param>
'''  <param name="pcontained">[out] - 1 if every box in boxa2 is contained in some box in boxa1; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaContainedInBoxa(
				ByVal boxa1 as Boxa, 
				ByVal boxa2 as Boxa, 
				ByRef pcontained as Integer) as Integer

	If IsNothing (boxa1) then Throw New ArgumentNullException  ("boxa1 cannot be Nothing")
	If IsNothing (boxa2) then Throw New ArgumentNullException  ("boxa2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaContainedInBoxa( boxa1.Pointer, boxa2.Pointer, pcontained)

	Return _Result
End Function

' SRC\boxfunc1.c (302, 1)
' boxaIntersectsBox()
' boxaIntersectsBox(BOXA *, BOX *) as BOXA *
'''  <summary>
''' Notes
''' (1) All boxes in boxa that intersect with box (i.e., are completely
''' or partially contained in box) are retained.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="box">[in] - for intersecting</param>
'''   <returns>boxad boxa with all boxes in boxas that intersect box, or NULL on error</returns>
Public Shared Function boxaIntersectsBox(
				ByVal boxas as Boxa, 
				ByVal box as Box) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaIntersectsBox( boxas.Pointer, box.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc1.c (340, 1)
' boxaIntersectsBoxCount()
' boxaIntersectsBoxCount(BOXA *, BOX *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="box">[in] - for selecting intersecting boxes in %boxa</param>
'''  <param name="pcount">[out] - number of boxes intersecting the box</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaIntersectsBoxCount(
				ByVal boxa as Boxa, 
				ByVal box as Box, 
				ByRef pcount as Integer) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaIntersectsBoxCount( boxa.Pointer, box.Pointer, pcount)

	Return _Result
End Function

' SRC\boxfunc1.c (385, 1)
' boxaClipToBox()
' boxaClipToBox(BOXA *, BOX *) as BOXA *
'''  <summary>
''' Notes
''' (1) All boxes in boxa not intersecting with box are removed, and
''' the remaining boxes are clipped to box.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="box">[in] - for clipping</param>
'''   <returns>boxad boxa with boxes in boxas clipped to box, or NULL on error</returns>
Public Shared Function boxaClipToBox(
				ByVal boxas as Boxa, 
				ByVal box as Box) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaClipToBox( boxas.Pointer, box.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc1.c (442, 1)
' boxaCombineOverlaps()
' boxaCombineOverlaps(BOXA *, PIXA *) as BOXA *
'''  <summary>
''' Notes
''' (1) If there are no overlapping boxes, it simply returns a copy
''' of %boxas.
''' (2) Input an empty %pixadb, using pixaCreate(0), for debug output.
''' The output gives 2 visualizations of the boxes per iteration;
''' boxes in red before, and added boxes in green after. Note that
''' all pixels in the red boxes are contained in the green ones.
''' (3) The alternative method of painting each rectangle and finding
''' the 4-connected components gives a different result in
''' general, because two non-overlapping (but touching)
''' rectangles, when rendered, are 4-connected and will be joined.
''' (4) A bad case computationally is to have n boxes, none of which
''' overlap.  Then you have one iteration with O(n^2) compares.
''' This is still faster than painting each rectangle and finding
''' the bounding boxes of the connected components, even for
''' thousands of rectangles.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="pixadb">[in,out] - debug output</param>
'''   <returns>boxad where each set of boxes in boxas that overlap are combined into a single bounding box in boxad, or NULL on error.</returns>
Public Shared Function boxaCombineOverlaps(
				ByVal boxas as Boxa, 
				ByRef pixadb as Pixa) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")

Dim pixadbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixadb) Then pixadbPTR = pixadb.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaCombineOverlaps( boxas.Pointer, pixadbPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pixadbPTR <> IntPtr.Zero then pixadb = new Pixa(pixadbPTR)

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc1.c (536, 1)
' boxaCombineOverlapsInPair()
' boxaCombineOverlapsInPair(BOXA *, BOXA *, BOXA **, BOXA **, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) One of three things happens to each box in %boxa1 and %boxa2
''' it gets absorbed into a larger box that it overlaps with
''' it absorbs a smaller (by area) box that it overlaps with
''' and gets larger, using the bounding region of the 2 boxes
''' it is unchanged (including absorbing smaller boxes that
''' are contained within it).
''' (2) If all the boxes from one of the input boxa are absorbed, this
''' returns an empty boxa.
''' (3) Input an empty %pixadb, using pixaCreate(0), for debug output
''' (4) This is useful if different operations are to be carried out
''' on possibly overlapping rectangular regions, and it is desired
''' to have only one operation on any rectangular region.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas1">[in] - input boxa1</param>
'''  <param name="boxas2">[in] - input boxa2</param>
'''  <param name="pboxad1">[out] - output boxa1</param>
'''  <param name="pboxad2">[out] - output boxa2</param>
'''  <param name="pixadb">[in,out] - debug output</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaCombineOverlapsInPair(
				ByVal boxas1 as Boxa, 
				ByVal boxas2 as Boxa, 
				ByRef pboxad1 as Boxa, 
				ByRef pboxad2 as Boxa, 
				ByRef pixadb as Pixa) as Integer

	If IsNothing (boxas1) then Throw New ArgumentNullException  ("boxas1 cannot be Nothing")
	If IsNothing (boxas2) then Throw New ArgumentNullException  ("boxas2 cannot be Nothing")

	Dim pboxad1PTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxad1) Then pboxad1PTR = pboxad1.Pointer
	Dim pboxad2PTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxad2) Then pboxad2PTR = pboxad2.Pointer
Dim pixadbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixadb) Then pixadbPTR = pixadb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaCombineOverlapsInPair( boxas1.Pointer, boxas2.Pointer, pboxad1PTR, pboxad2PTR, pixadbPTR)
	if pboxad1PTR <> IntPtr.Zero then pboxad1 = new Boxa(pboxad1PTR)
	if pboxad2PTR <> IntPtr.Zero then pboxad2 = new Boxa(pboxad2PTR)
	if pixadbPTR <> IntPtr.Zero then pixadb = new Pixa(pixadbPTR)

	Return _Result
End Function

' SRC\boxfunc1.c (674, 1)
' boxOverlapRegion()
' boxOverlapRegion(BOX *, BOX *) as BOX *
'''  <summary>
''' Notes
''' (1) This is the geometric intersection of the two rectangles.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box1">[in] - two boxes</param>
'''  <param name="box2">[in] - two boxes</param>
'''   <returns>box of overlap region between input boxes, or NULL if no overlap or on error</returns>
Public Shared Function boxOverlapRegion(
				ByVal box1 as Box, 
				ByVal box2 as Box) as Box

	If IsNothing (box1) then Throw New ArgumentNullException  ("box1 cannot be Nothing")
	If IsNothing (box2) then Throw New ArgumentNullException  ("box2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxOverlapRegion( box1.Pointer, box2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxfunc1.c (716, 1)
' boxBoundingRegion()
' boxBoundingRegion(BOX *, BOX *) as BOX *
'''  <summary>
''' Notes
''' (1) This is the geometric union of the two rectangles.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box1">[in] - two boxes</param>
'''  <param name="box2">[in] - two boxes</param>
'''   <returns>box of bounding region containing the input boxes, or NULL on error</returns>
Public Shared Function boxBoundingRegion(
				ByVal box1 as Box, 
				ByVal box2 as Box) as Box

	If IsNothing (box1) then Throw New ArgumentNullException  ("box1 cannot be Nothing")
	If IsNothing (box2) then Throw New ArgumentNullException  ("box2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxBoundingRegion( box1.Pointer, box2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxfunc1.c (756, 1)
' boxOverlapFraction()
' boxOverlapFraction(BOX *, BOX *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The result depends on the order of the input boxes,
''' because the overlap is taken as a fraction of box2.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box1">[in] - two boxes</param>
'''  <param name="box2">[in] - two boxes</param>
'''  <param name="pfract">[out] - the fraction of box2 overlapped by box1</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function boxOverlapFraction(
				ByVal box1 as Box, 
				ByVal box2 as Box, 
				ByRef pfract as Single()) as Integer

	If IsNothing (box1) then Throw New ArgumentNullException  ("box1 cannot be Nothing")
	If IsNothing (box2) then Throw New ArgumentNullException  ("box2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxOverlapFraction( box1.Pointer, box2.Pointer, pfract)

	Return _Result
End Function

' SRC\boxfunc1.c (792, 1)
' boxOverlapArea()
' boxOverlapArea(BOX *, BOX *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box1">[in] - two boxes</param>
'''  <param name="box2">[in] - two boxes</param>
'''  <param name="parea">[out] - the number of pixels in the overlap</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function boxOverlapArea(
				ByVal box1 as Box, 
				ByVal box2 as Box, 
				ByRef parea as Integer) as Integer

	If IsNothing (box1) then Throw New ArgumentNullException  ("box1 cannot be Nothing")
	If IsNothing (box2) then Throw New ArgumentNullException  ("box2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxOverlapArea( box1.Pointer, box2.Pointer, parea)

	Return _Result
End Function

' SRC\boxfunc1.c (853, 1)
' boxaHandleOverlaps()
' boxaHandleOverlaps(BOXA *, l_int32, l_int32, l_float32, l_float32, NUMA **) as BOXA *
'''  <summary>
''' Notes
''' (1) For all n(n-1)/2 box pairings, if two boxes overlap, either
''' (a) op == L_COMBINE get the bounding region for the two,
''' replace the larger with the bounding region, and remove
''' the smaller of the two, or
''' (b) op == L_REMOVE_SMALL just remove the smaller.
''' (2) If boxas is 2D sorted, range can be small, but if it is
''' not spatially sorted, range should be large to allow all
''' pairwise comparisons to be made.
''' (3) The %min_overlap parameter allows ignoring small overlaps.
''' If %min_overlap == 1.0, only boxes fully contained in larger
''' boxes can be considered for removal; if %min_overlap == 0.0,
''' this constraint is ignored.
''' (4) The %max_ratio parameter allows ignoring overlaps between
''' boxes that are not too different in size.  If %max_ratio == 0.0,
''' no boxes can be removed; if %max_ratio == 1.0, this constraint
''' is ignored.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="op">[in] - L_COMBINE, L_REMOVE_SMALL</param>
'''  <param name="range">[in] - GT 0, forward distance over which overlaps are checked</param>
'''  <param name="min_overlap">[in] - minimum fraction of smaller box required for overlap to count; 0.0 to ignore</param>
'''  <param name="max_ratio">[in] - maximum fraction of small/large areas for overlap to count; 1.0 to ignore</param>
'''  <param name="pnamap">[out][optional] - combining map</param>
'''   <returns>boxad, or NULL on error.</returns>
Public Shared Function boxaHandleOverlaps(
				ByVal boxas as Boxa, 
				ByVal op as Enumerations.L_hling_overlapping_bounding_boxes_in_boxa, 
				ByVal range as Integer, 
				ByVal min_overlap as Single, 
				ByVal max_ratio as Single, 
				ByRef pnamap as Numa) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (min_overlap) then Throw New ArgumentNullException  ("min_overlap cannot be Nothing")
	If IsNothing (max_ratio) then Throw New ArgumentNullException  ("max_ratio cannot be Nothing")

Dim pnamapPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnamap) Then pnamapPTR = pnamap.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaHandleOverlaps( boxas.Pointer, op, range, min_overlap, max_ratio, pnamapPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnamapPTR <> IntPtr.Zero then pnamap = new Numa(pnamapPTR)

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc1.c (973, 1)
' boxSeparationDistance()
' boxSeparationDistance(BOX *, BOX *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This measures horizontal and vertical separation of the
''' two boxes.  If the boxes are touching but have no pixels
''' in common, the separation is 0.  If the boxes overlap by
''' a distance d, the returned separation is -d.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box1">[in] - two boxes, in any order</param>
'''  <param name="box2">[in] - two boxes, in any order</param>
'''  <param name="ph_sep">[out][optional] - horizontal separation</param>
'''  <param name="pv_sep">[out][optional] - vertical separation</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxSeparationDistance(
				ByVal box1 as Box, 
				ByVal box2 as Box, 
				ByRef ph_sep as Integer, 
				ByRef pv_sep as Integer) as Integer

	If IsNothing (box1) then Throw New ArgumentNullException  ("box1 cannot be Nothing")
	If IsNothing (box2) then Throw New ArgumentNullException  ("box2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxSeparationDistance( box1.Pointer, box2.Pointer, ph_sep, pv_sep)

	Return _Result
End Function

' SRC\boxfunc1.c (1029, 1)
' boxCompareSize()
' boxCompareSize(BOX *, BOX *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) We're re-using the SORT enum for these comparisons.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box1">[in] - </param>
'''  <param name="box2">[in] - </param>
'''  <param name="type">[in] - L_SORT_BY_WIDTH, L_SORT_BY_HEIGHT, L_SORT_BY_MAX_DIMENSION, L_SORT_BY_PERIMETER, L_SORT_BY_AREA,</param>
'''  <param name="prel">[out] - 1 if box1 GT box2, 0 if the same, -1 if box1 LT box2</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxCompareSize(
				ByVal box1 as Box, 
				ByVal box2 as Box, 
				ByVal type as Enumerations.L_SORT_BY, 
				ByRef prel as Integer) as Integer

	If IsNothing (box1) then Throw New ArgumentNullException  ("box1 cannot be Nothing")
	If IsNothing (box2) then Throw New ArgumentNullException  ("box2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxCompareSize( box1.Pointer, box2.Pointer, type, prel)

	Return _Result
End Function

' SRC\boxfunc1.c (1080, 1)
' boxContainsPt()
' boxContainsPt(BOX *, l_float32, l_float32, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''  <param name="x">[in] - a point</param>
'''  <param name="y">[in] - a point</param>
'''  <param name="pcontains">[out] - 1 if box contains point; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function boxContainsPt(
				ByVal box as Box, 
				ByVal x as Single, 
				ByVal y as Single, 
				ByRef pcontains as Integer) as Integer

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If IsNothing (x) then Throw New ArgumentNullException  ("x cannot be Nothing")
	If IsNothing (y) then Throw New ArgumentNullException  ("y cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxContainsPt( box.Pointer, x, y, pcontains)

	Return _Result
End Function

' SRC\boxfunc1.c (1115, 1)
' boxaGetNearestToPt()
' boxaGetNearestToPt(BOXA *, l_int32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) Uses euclidean distance between centroid and point.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="x">[in] - point</param>
'''  <param name="y">[in] - point</param>
'''   <returns>box with centroid closest to the given point [x,y], or NULL if no boxes in boxa</returns>
Public Shared Function boxaGetNearestToPt(
				ByVal boxa as Boxa, 
				ByVal x as Integer, 
				ByVal y as Integer) as Box

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaGetNearestToPt( boxa.Pointer, x, y)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxfunc1.c (1167, 1)
' boxaGetNearestToLine()
' boxaGetNearestToLine(BOXA *, l_int32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) For a horizontal line at some value y, get the minimum of the
''' distance |yc - y| from the box centroid yc value to y;
''' likewise minimize |xc - x| for a vertical line at x.
''' (2) Input y LT 0, x GT= 0 to indicate a vertical line at x, and
''' x LT 0, y GT= 0 for a horizontal line at y.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="x">[in] - (y = -1 for vertical line; x = -1 for horiz line)</param>
'''  <param name="y">[in] - (y = -1 for vertical line; x = -1 for horiz line)</param>
'''   <returns>box with centroid closest to the given line, or NULL if no boxes in boxa</returns>
Public Shared Function boxaGetNearestToLine(
				ByVal boxa as Boxa, 
				ByVal x as Integer, 
				ByVal y as Integer) as Box

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaGetNearestToLine( boxa.Pointer, x, y)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxfunc1.c (1224, 1)
' boxaFindNearestBoxes()
' boxaFindNearestBoxes(BOXA *, l_int32, l_int32, NUMAA **, NUMAA **) as l_ok
'''  <summary>
''' Notes
''' (1) See boxaGetNearestByDirection() for usage of %dist_select
''' and %range.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - either unsorted, or 2D sorted in LR/TB scan order</param>
'''  <param name="dist_select">[in] - L_NON_NEGATIVE, L_ALL</param>
'''  <param name="range">[in] - search distance from box i; use 0 to search entire boxa (e.g., if it's not 2D sorted)</param>
'''  <param name="pnaaindex">[out] - for each box in %boxa, contains a numa of 4 box indices (per direction) of the nearest box</param>
'''  <param name="pnaadist">[out] - for each box in %boxa, this contains a numa</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaFindNearestBoxes(
				ByVal boxa as Boxa, 
				ByVal dist_select as Enumerations.L_value_, 
				ByVal range as Integer, 
				ByRef pnaaindex as Numaa, 
				ByRef pnaadist as Numaa) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")

	Dim pnaaindexPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaaindex) Then pnaaindexPTR = pnaaindex.Pointer
	Dim pnaadistPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaadist) Then pnaadistPTR = pnaadist.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaFindNearestBoxes( boxa.Pointer, dist_select, range, pnaaindexPTR, pnaadistPTR)
	if pnaaindexPTR <> IntPtr.Zero then pnaaindex = new Numaa(pnaaindexPTR)
	if pnaadistPTR <> IntPtr.Zero then pnaadist = new Numaa(pnaadistPTR)

	Return _Result
End Function

' SRC\boxfunc1.c (1305, 1)
' boxaGetNearestByDirection()
' boxaGetNearestByDirection(BOXA *, l_int32, l_int32, l_int32, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) For efficiency, use a LR/TD sorted %boxa, which can be
''' made by flattening a 2D sorted boxaa.  In that case,
''' %range can be some positive integer like 50.
''' (2) If boxes overlap, the distance will be LT 0.  Use %dist_select
''' to determine if these should count or not.  If L_ALL, then
''' one box will match as the nearest to another in 2 or more
''' directions.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - either unsorted, or 2D sorted in LR/TB scan order</param>
'''  <param name="i">[in] - box we test against</param>
'''  <param name="dir">[in] - direction to look L_FROM_LEFT, L_FROM_RIGHT, L_FROM_TOP, L_FROM_BOT</param>
'''  <param name="dist_select">[in] - L_NON_NEGATIVE, L_ALL</param>
'''  <param name="range">[in] - search distance from box i; use 0 to search entire boxa (e.g., if it's not 2D sorted)</param>
'''  <param name="pindex">[out] - index in boxa of nearest box with overlapping coordinates in the indicated direction; -1 if there is no box</param>
'''  <param name="pdist">[out] - distance of the nearest box in the indicated direction; 100000 if no box</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaGetNearestByDirection(
				ByVal boxa as Boxa, 
				ByVal i as Integer, 
				ByVal dir as Enumerations.L_scan_direction, 
				ByVal dist_select as Enumerations.L_value_, 
				ByVal range as Integer, 
				ByRef pindex as Integer, 
				ByRef pdist as Integer) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaGetNearestByDirection( boxa.Pointer, i, dir, dist_select, range, pindex, pdist)

	Return _Result
End Function

' SRC\boxfunc1.c (1444, 1)
' boxGetCenter()
' boxGetCenter(BOX *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''  <param name="pcx">[out] - location of center of box</param>
'''  <param name="pcy">[out] - location of center of box</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxGetCenter(
				ByVal box as Box, 
				ByRef pcx as Single(), 
				ByRef pcy as Single()) as Integer

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxGetCenter( box.Pointer, pcx, pcy)

	Return _Result
End Function

' SRC\boxfunc1.c (1485, 1)
' boxIntersectByLine()
' boxIntersectByLine(BOX *, l_int32, l_int32, l_float32, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If the intersection is at only one point (a corner), the
''' coordinates are returned in (x1, y1).
''' (2) Represent a vertical line by one with a large but finite slope.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''  <param name="x">[in] - point that line goes through</param>
'''  <param name="y">[in] - point that line goes through</param>
'''  <param name="slope">[in] - of line</param>
'''  <param name="px1">[out] - 1st point of intersection with box</param>
'''  <param name="py1">[out] - 1st point of intersection with box</param>
'''  <param name="px2">[out] - 2nd point of intersection with box</param>
'''  <param name="py2">[out] - 2nd point of intersection with box</param>
'''  <param name="pn">[out] - number of points of intersection</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxIntersectByLine(
				ByVal box as Box, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal slope as Single, 
				ByRef px1 as Integer, 
				ByRef py1 as Integer, 
				ByRef px2 as Integer, 
				ByRef py2 as Integer, 
				ByRef pn as Integer) as Integer

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If IsNothing (slope) then Throw New ArgumentNullException  ("slope cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxIntersectByLine( box.Pointer, x, y, slope, px1, py1, px2, py2, pn)

	Return _Result
End Function

' SRC\boxfunc1.c (1587, 1)
' boxClipToRectangle()
' boxClipToRectangle(BOX *, l_int32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) This can be used to clip a rectangle to an image.
''' The clipping rectangle is assumed to have a UL corner at (0, 0),
''' and a LR corner at (wi - 1, hi - 1).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''  <param name="wi">[in] - rectangle representing image</param>
'''  <param name="hi">[in] - rectangle representing image</param>
'''   <returns>part of box within given rectangle, or NULL on error or if box is entirely outside the rectangle</returns>
Public Shared Function boxClipToRectangle(
				ByVal box as Box, 
				ByVal wi as Integer, 
				ByVal hi as Integer) as Box

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxClipToRectangle( box.Pointer, wi, hi)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxfunc1.c (1644, 1)
' boxClipToRectangleParams()
' boxClipToRectangleParams(BOX *, l_int32, l_int32, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The return value should be checked.  If it is 1, the
''' returned parameter values are bogus.
''' (2) This simplifies the selection of pixel locations within
''' a given rectangle
''' for (i = ystart; i LT yend; i++ {
''' ...
''' for (j = xstart; j LT xend; j++ {
''' ....
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in][optional] - requested box; can be null</param>
'''  <param name="w">[in] - clipping box size; typ. the size of an image</param>
'''  <param name="h">[in] - clipping box size; typ. the size of an image</param>
'''  <param name="pxstart">[out] - start x coordinate</param>
'''  <param name="pystart">[out] - start y coordinate</param>
'''  <param name="pxend">[out] - one pixel beyond clipping box</param>
'''  <param name="pyend">[out] - one pixel beyond clipping box</param>
'''  <param name="pbw">[out][optional] - clipped width</param>
'''  <param name="pbh">[out][optional] - clipped height</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function boxClipToRectangleParams(
				ByVal box as Box, 
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByRef pxstart as Integer, 
				ByRef pystart as Integer, 
				ByRef pxend as Integer, 
				ByRef pyend as Integer, 
				ByRef pbw as Integer, 
				ByRef pbh as Integer) as Integer


	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxClipToRectangleParams( boxPTR, w, h, pxstart, pystart, pxend, pyend, pbw, pbh)

	Return _Result
End Function

' SRC\boxfunc1.c (1706, 1)
' boxRelocateOneSide()
' boxRelocateOneSide(BOX *, BOX *, l_int32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) Set boxd == NULL to get new box; boxd == boxs for in-place;
''' or otherwise to resize existing boxd.
''' (2) For usage, suggest one of these
''' boxd = boxRelocateOneSide(NULL, boxs, ...);   // new
''' boxRelocateOneSide(boxs, boxs, ...); // in-place
''' boxRelocateOneSide(boxd, boxs, ...); // other
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxd">[in][optional] - ; this can be null, equal to boxs, or different from boxs;</param>
'''  <param name="boxs">[in] - starting box; to have one side relocated</param>
'''  <param name="loc">[in] - new location of the side that is changing</param>
'''  <param name="sideflag">[in] - L_FROM_LEFT, etc., indicating the side that moves</param>
'''   <returns>boxd, or NULL on error or if the computed boxd has width or height LT= 0.</returns>
Public Shared Function boxRelocateOneSide(
				ByVal boxd as Box, 
				ByVal boxs as Box, 
				ByVal loc as Integer, 
				ByVal sideflag as Enumerations.L_scan_direction) as Box

	If IsNothing (boxs) then Throw New ArgumentNullException  ("boxs cannot be Nothing")

	Dim boxdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(boxd) Then boxdPTR = boxd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxRelocateOneSide( boxdPTR, boxs.Pointer, loc, sideflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxfunc1.c (1750, 1)
' boxaAdjustSides()
' boxaAdjustSides(BOXA *, l_int32, l_int32, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) New box dimensions are cropped at left and top to x GT= 0 and y GT= 0.
''' (2) If the width or height of a box goes to 0, we generate a box with
''' w == 1 and h == 1, as a placeholder.
''' (3) See boxAdjustSides().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="delleft">[in] - changes in location of each side for each box</param>
'''  <param name="delright">[in] - changes in location of each side for each box</param>
'''  <param name="deltop">[in] - changes in location of each side for each box</param>
'''  <param name="delbot">[in] - changes in location of each side for each box</param>
'''   <returns>boxad, or NULL on error</returns>
Public Shared Function boxaAdjustSides(
				ByVal boxas as Boxa, 
				ByVal delleft as Integer, 
				ByVal delright as Integer, 
				ByVal deltop as Integer, 
				ByVal delbot as Integer) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaAdjustSides( boxas.Pointer, delleft, delright, deltop, delbot)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc1.c (1807, 1)
' boxAdjustSides()
' boxAdjustSides(BOX *, BOX *, l_int32, l_int32, l_int32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) Set boxd == NULL to get new box; boxd == boxs for in-place;
''' or otherwise to resize existing boxd.
''' (2) For usage, suggest one of these
''' boxd = boxAdjustSides(NULL, boxs, ...);   // new
''' boxAdjustSides(boxs, boxs, ...); // in-place
''' boxAdjustSides(boxd, boxs, ...); // other
''' (3) New box dimensions are cropped at left and top to x GT= 0 and y GT= 0.
''' (4) For example, to expand in-place by 20 pixels on each side, use
''' boxAdjustSides(box, box, -20, 20, -20, 20);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxd">[in][optional] - ; this can be null, equal to boxs, or different from boxs</param>
'''  <param name="boxs">[in] - starting box; to have sides adjusted</param>
'''  <param name="delleft">[in] - changes in location of each side</param>
'''  <param name="delright">[in] - changes in location of each side</param>
'''  <param name="deltop">[in] - changes in location of each side</param>
'''  <param name="delbot">[in] - changes in location of each side</param>
'''   <returns>boxd, or NULL on error or if the computed boxd has width or height LT= 0.</returns>
Public Shared Function boxAdjustSides(
				ByVal boxd as Box, 
				ByVal boxs as Box, 
				ByVal delleft as Integer, 
				ByVal delright as Integer, 
				ByVal deltop as Integer, 
				ByVal delbot as Integer) as Box

	If IsNothing (boxs) then Throw New ArgumentNullException  ("boxs cannot be Nothing")

	Dim boxdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(boxd) Then boxdPTR = boxd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxAdjustSides( boxdPTR, boxs.Pointer, delleft, delright, deltop, delbot)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxfunc1.c (1859, 1)
' boxaSetSide()
' boxaSetSide(BOXA *, BOXA *, l_int32, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) Sets the given side of each box.  Use boxad == NULL for a new
''' boxa, and boxad == boxas for in-place.
''' (2) Use one of these
''' boxad = boxaSetSide(NULL, boxas, ...);   // new
''' boxaSetSide(boxas, boxas, ...);  // in-place
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxad">[in] - use NULL to get a new one; same as boxas for in-place</param>
'''  <param name="boxas">[in] - </param>
'''  <param name="side">[in] - L_SET_LEFT, L_SET_RIGHT, L_SET_TOP, L_SET_BOT</param>
'''  <param name="val">[in] - location to set for given side, for each box</param>
'''  <param name="thresh">[in] - min abs difference to cause resetting to %val</param>
'''   <returns>boxad, or NULL on error</returns>
Public Shared Function boxaSetSide(
				ByVal boxad as Boxa, 
				ByVal boxas as Boxa, 
				ByVal side as Enumerations.L_box_size_adjustment_location, 
				ByVal val as Integer, 
				ByVal thresh as Integer) as Boxa

	If IsNothing (boxad) then Throw New ArgumentNullException  ("boxad cannot be Nothing")
	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaSetSide( boxad.Pointer, boxas.Pointer, side, val, thresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc1.c (1932, 1)
' boxaAdjustWidthToTarget()
' boxaAdjustWidthToTarget(BOXA *, BOXA *, l_int32, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) Conditionally adjusts the width of each box, by moving
''' the indicated edges (left and/or right) if the width differs
''' by %thresh or more from %target.
''' (2) Use boxad == NULL for a new boxa, and boxad == boxas for in-place.
''' Use one of these
''' boxad = boxaAdjustWidthToTarget(NULL, boxas, ...);   // new
''' boxaAdjustWidthToTarget(boxas, boxas, ...);  // in-place
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxad">[in] - use NULL to get a new one; same as boxas for in-place</param>
'''  <param name="boxas">[in] - </param>
'''  <param name="sides">[in] - L_ADJUST_LEFT, L_ADJUST_RIGHT, L_ADJUST_LEFT_AND_RIGHT</param>
'''  <param name="target">[in] - target width if differs by more than thresh</param>
'''  <param name="thresh">[in] - min abs difference in width to cause adjustment</param>
'''   <returns>boxad, or NULL on error</returns>
Public Shared Function boxaAdjustWidthToTarget(
				ByVal boxad as Boxa, 
				ByVal boxas as Boxa, 
				ByVal sides as Enumerations.L_box_size_adjustment_location, 
				ByVal target as Integer, 
				ByVal thresh as Integer) as Boxa

	If IsNothing (boxad) then Throw New ArgumentNullException  ("boxad cannot be Nothing")
	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaAdjustWidthToTarget( boxad.Pointer, boxas.Pointer, sides, target, thresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc1.c (1999, 1)
' boxaAdjustHeightToTarget()
' boxaAdjustHeightToTarget(BOXA *, BOXA *, l_int32, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) Conditionally adjusts the height of each box, by moving
''' the indicated edges (top and/or bot) if the height differs
''' by %thresh or more from %target.
''' (2) Use boxad == NULL for a new boxa, and boxad == boxas for in-place.
''' Use one of these
''' boxad = boxaAdjustHeightToTarget(NULL, boxas, ...);   // new
''' boxaAdjustHeightToTarget(boxas, boxas, ...);  // in-place
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxad">[in] - use NULL to get a new one</param>
'''  <param name="boxas">[in] - </param>
'''  <param name="sides">[in] - L_ADJUST_TOP, L_ADJUST_BOT, L_ADJUST_TOP_AND_BOT</param>
'''  <param name="target">[in] - target height if differs by more than thresh</param>
'''  <param name="thresh">[in] - min abs difference in height to cause adjustment</param>
'''   <returns>boxad, or NULL on error</returns>
Public Shared Function boxaAdjustHeightToTarget(
				ByVal boxad as Boxa, 
				ByVal boxas as Boxa, 
				ByVal sides as Enumerations.L_box_size_adjustment_location, 
				ByVal target as Integer, 
				ByVal thresh as Integer) as Boxa

	If IsNothing (boxad) then Throw New ArgumentNullException  ("boxad cannot be Nothing")
	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaAdjustHeightToTarget( boxad.Pointer, boxas.Pointer, sides, target, thresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc1.c (2057, 1)
' boxEqual()
' boxEqual(BOX *, BOX *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box1">[in] - </param>
'''  <param name="box2">[in] - </param>
'''  <param name="psame">[out] - 1 if equal; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxEqual(
				ByVal box1 as Box, 
				ByVal box2 as Box, 
				ByRef psame as Integer) as Integer

	If IsNothing (box1) then Throw New ArgumentNullException  ("box1 cannot be Nothing")
	If IsNothing (box2) then Throw New ArgumentNullException  ("box2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxEqual( box1.Pointer, box2.Pointer, psame)

	Return _Result
End Function

' SRC\boxfunc1.c (2104, 1)
' boxaEqual()
' boxaEqual(BOXA *, BOXA *, l_int32, NUMA **, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The two boxa are the "same" if they contain the same
''' boxes and each box is within %maxdist of its counterpart
''' in their positions within the boxa.  This allows for
''' small rearrangements.  Use 0 for maxdist if the boxa
''' must be identical.
''' (2) This applies only to geometry and ordering; refcounts
''' are not considered.
''' (3) %maxdist allows some latitude in the ordering of the boxes.
''' For the boxa to be the "same", corresponding boxes must
''' be within %maxdist of each other.  Note that for large
''' %maxdist, we should use a hash function for efficiency.
''' (4) naindex[i] gives the position of the box in boxa2 that
''' corresponds to box i in boxa1.  It is only returned if the
''' boxa are equal.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa1">[in] - </param>
'''  <param name="boxa2">[in] - </param>
'''  <param name="maxdist">[in] - </param>
'''  <param name="pnaindex">[out][optional] - index array of correspondences</param>
'''  <param name="psame">[out] - (1 if equal; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaEqual(
				ByVal boxa1 as Boxa, 
				ByVal boxa2 as Boxa, 
				ByVal maxdist as Integer, 
				ByRef pnaindex as Numa, 
				ByRef psame as Integer) as Integer

	If IsNothing (boxa1) then Throw New ArgumentNullException  ("boxa1 cannot be Nothing")
	If IsNothing (boxa2) then Throw New ArgumentNullException  ("boxa2 cannot be Nothing")

Dim pnaindexPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaindex) Then pnaindexPTR = pnaindex.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaEqual( boxa1.Pointer, boxa2.Pointer, maxdist, pnaindexPTR, psame)
	if pnaindexPTR <> IntPtr.Zero then pnaindex = new Numa(pnaindexPTR)

	Return _Result
End Function

' SRC\boxfunc1.c (2183, 1)
' boxSimilar()
' boxSimilar(BOX *, BOX *, l_int32, l_int32, l_int32, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The values of leftdiff (etc) are the maximum allowed deviations
''' between the locations of the left (etc) sides.  If any side
''' pairs differ by more than this amount, the boxes are not similar.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box1">[in] - </param>
'''  <param name="box2">[in] - </param>
'''  <param name="leftdiff">[in] - </param>
'''  <param name="rightdiff">[in] - </param>
'''  <param name="topdiff">[in] - </param>
'''  <param name="botdiff">[in] - </param>
'''  <param name="psimilar">[out] - 1 if similar; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxSimilar(
				ByVal box1 as Box, 
				ByVal box2 as Box, 
				ByVal leftdiff as Integer, 
				ByVal rightdiff as Integer, 
				ByVal topdiff as Integer, 
				ByVal botdiff as Integer, 
				ByRef psimilar as Integer) as Integer

	If IsNothing (box1) then Throw New ArgumentNullException  ("box1 cannot be Nothing")
	If IsNothing (box2) then Throw New ArgumentNullException  ("box2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxSimilar( box1.Pointer, box2.Pointer, leftdiff, rightdiff, topdiff, botdiff, psimilar)

	Return _Result
End Function

' SRC\boxfunc1.c (2238, 1)
' boxaSimilar()
' boxaSimilar(BOXA *, BOXA *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32 *, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) See boxSimilar() for parameter usage.
''' (2) Corresponding boxes are taken in order in the two boxa.
''' (3) %nasim is an indicator array with a (0/1) for each box pair.
''' (4) With %nasim or debug == 1, boxes continue to be tested
''' after failure.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa1">[in] - </param>
'''  <param name="boxa2">[in] - </param>
'''  <param name="leftdiff">[in] - </param>
'''  <param name="rightdiff">[in] - </param>
'''  <param name="topdiff">[in] - </param>
'''  <param name="botdiff">[in] - </param>
'''  <param name="debug">[in] - output details of non-similar boxes</param>
'''  <param name="psimilar">[out] - 1 if similar; 0 otherwise</param>
'''  <param name="pnasim">[out][optional] - na containing 1 if similar; else 0</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaSimilar(
				ByVal boxa1 as Boxa, 
				ByVal boxa2 as Boxa, 
				ByVal leftdiff as Integer, 
				ByVal rightdiff as Integer, 
				ByVal topdiff as Integer, 
				ByVal botdiff as Integer, 
				ByVal debug as Enumerations.DebugOnOff, 
				ByRef psimilar as Integer, 
				ByRef pnasim as Numa) as Integer

	If IsNothing (boxa1) then Throw New ArgumentNullException  ("boxa1 cannot be Nothing")
	If IsNothing (boxa2) then Throw New ArgumentNullException  ("boxa2 cannot be Nothing")

Dim pnasimPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnasim) Then pnasimPTR = pnasim.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaSimilar( boxa1.Pointer, boxa2.Pointer, leftdiff, rightdiff, topdiff, botdiff, debug, psimilar, pnasimPTR)
	if pnasimPTR <> IntPtr.Zero then pnasim = new Numa(pnasimPTR)

	Return _Result
End Function

' SRC\boxfunc1.c (2312, 1)
' boxaJoin()
' boxaJoin(BOXA *, BOXA *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This appends a clone of each indicated box in boxas to boxad
''' (2) istart LT 0 is taken to mean 'read from the start' (istart = 0)
''' (3) iend LT 0 means 'read to the end'
''' (4) if boxas == NULL or has no boxes, this is a no-op.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxad">[in] - dest boxa; add to this one</param>
'''  <param name="boxas">[in] - source boxa; add from this one</param>
'''  <param name="istart">[in] - starting index in boxas</param>
'''  <param name="iend">[in] - ending index in boxas; use -1 to cat all</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaJoin(
				ByVal boxad as Boxa, 
				ByVal boxas as Boxa, 
				ByVal istart as Integer, 
				ByVal iend as Integer) as Integer

	If IsNothing (boxad) then Throw New ArgumentNullException  ("boxad cannot be Nothing")
	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaJoin( boxad.Pointer, boxas.Pointer, istart, iend)

	Return _Result
End Function

' SRC\boxfunc1.c (2361, 1)
' boxaaJoin()
' boxaaJoin(BOXAA *, BOXAA *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This appends a clone of each indicated boxa in baas to baad
''' (2) istart LT 0 is taken to mean 'read from the start' (istart = 0)
''' (3) iend LT 0 means 'read to the end'
''' (4) if baas == NULL, this is a no-op.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baad">[in] - dest boxaa; add to this one</param>
'''  <param name="baas">[in] - source boxaa; add from this one</param>
'''  <param name="istart">[in] - starting index in baas</param>
'''  <param name="iend">[in] - ending index in baas; use -1 to cat all</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaJoin(
				ByVal baad as Boxaa, 
				ByVal baas as Boxaa, 
				ByVal istart as Integer, 
				ByVal iend as Integer) as Integer

	If IsNothing (baad) then Throw New ArgumentNullException  ("baad cannot be Nothing")
	If IsNothing (baas) then Throw New ArgumentNullException  ("baas cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaJoin( baad.Pointer, baas.Pointer, istart, iend)

	Return _Result
End Function

' SRC\boxfunc1.c (2411, 1)
' boxaSplitEvenOdd()
' boxaSplitEvenOdd(BOXA *, l_int32, BOXA **, BOXA **) as l_ok
'''  <summary>
''' Notes
''' (1) If %fillflag == 1, boxae has copies of the even boxes
''' in their original location, and nvalid boxes are placed
''' in the odd array locations.  And v.v.
''' (2) If %fillflag == 0, boxae has only copies of the even boxes.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="fillflag">[in] - 1 to put invalid boxes in place; 0 to omit</param>
'''  <param name="pboxae">[out] - save even and odd boxes in their separate boxa, setting the other type to invalid boxes.</param>
'''  <param name="pboxao">[out] - save even and odd boxes in their separate boxa, setting the other type to invalid boxes.</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaSplitEvenOdd(
				ByVal boxa as Boxa, 
				ByVal fillflag as Integer, 
				ByRef pboxae as Boxa, 
				ByRef pboxao as Boxa) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")

	Dim pboxaePTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxae) Then pboxaePTR = pboxae.Pointer
	Dim pboxaoPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxao) Then pboxaoPTR = pboxao.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaSplitEvenOdd( boxa.Pointer, fillflag, pboxaePTR, pboxaoPTR)
	if pboxaePTR <> IntPtr.Zero then pboxae = new Boxa(pboxaePTR)
	if pboxaoPTR <> IntPtr.Zero then pboxao = new Boxa(pboxaoPTR)

	Return _Result
End Function

' SRC\boxfunc1.c (2475, 1)
' boxaMergeEvenOdd()
' boxaMergeEvenOdd(BOXA *, BOXA *, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This is essentially the inverse of boxaSplitEvenOdd().
''' Typically, boxae and boxao were generated by boxaSplitEvenOdd(),
''' and the value of %fillflag needs to be the same in both calls.
''' (2) If %fillflag == 1, both boxae and boxao are of the same size;
''' otherwise boxae may have one more box than boxao.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxae">[in] - boxes to go in even positions in merged boxa</param>
'''  <param name="boxao">[in] - boxes to go in odd positions in merged boxa</param>
'''  <param name="fillflag">[in] - 1 if there are invalid boxes in placeholders</param>
'''   <returns>boxad merged, or NULL on error</returns>
Public Shared Function boxaMergeEvenOdd(
				ByVal boxae as Boxa, 
				ByVal boxao as Boxa, 
				ByVal fillflag as Integer) as Boxa

	If IsNothing (boxae) then Throw New ArgumentNullException  ("boxae cannot be Nothing")
	If IsNothing (boxao) then Throw New ArgumentNullException  ("boxao cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaMergeEvenOdd( boxae.Pointer, boxao.Pointer, fillflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

#End Region
#Region "SRC\boxfunc2.c"
' SRC\boxfunc2.c (91, 1)
' boxaTransform()
' boxaTransform(BOXA *, l_int32, l_int32, l_float32, l_float32) as BOXA *
'''  <summary>
''' Notes
''' (1) This is a very simple function that first shifts, then scales.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="shiftx">[in] - </param>
'''  <param name="shifty">[in] - </param>
'''  <param name="scalex">[in] - </param>
'''  <param name="scaley">[in] - </param>
'''   <returns>boxad, or NULL on error</returns>
Public Shared Function boxaTransform(
				ByVal boxas as Boxa, 
				ByVal shiftx as Integer, 
				ByVal shifty as Integer, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaTransform( boxas.Pointer, shiftx, shifty, scalex, scaley)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc2.c (137, 1)
' boxTransform()
' boxTransform(BOX *, l_int32, l_int32, l_float32, l_float32) as BOX *
'''  <summary>
''' Notes
''' (1) This is a very simple function that first shifts, then scales.
''' (2) If the box is invalid, a new invalid box is returned.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''  <param name="shiftx">[in] - </param>
'''  <param name="shifty">[in] - </param>
'''  <param name="scalex">[in] - </param>
'''  <param name="scaley">[in] - </param>
'''   <returns>boxd, or NULL on error</returns>
Public Shared Function boxTransform(
				ByVal box as Box, 
				ByVal shiftx as Integer, 
				ByVal shifty as Integer, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Box

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxTransform( box.Pointer, shiftx, shifty, scalex, scaley)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxfunc2.c (192, 1)
' boxaTransformOrdered()
' boxaTransformOrdered(BOXA *, l_int32, l_int32, l_float32, l_float32, l_int32, l_int32, l_float32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This allows a sequence of linear transforms on each box.
''' the transforms are from the affine set, composed of
''' shift, scaling and rotation, and the order of the
''' transforms is specified.
''' (2) Although these operations appear to be on an infinite
''' 2D plane, in practice the region of interest is clipped
''' to a finite image.  The center of rotation is usually taken
''' with respect to the image (either the UL corner or the
''' center).  A translation can have two very different effects
''' (a) Moves the boxes across the fixed image region.
''' (b) Moves the image origin, causing a change in the image
''' region and an opposite effective translation of the boxes.
''' This function should only be used for (a), where the image
''' region is fixed on translation.  If the image region is
''' changed by the translation, use instead the functions
''' in affinecompose.c, where the image region and rotation
''' center can be computed from the actual clipping due to
''' translation of the image origin.
''' (3) See boxTransformOrdered() for usage and implementation details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="shiftx">[in] - </param>
'''  <param name="shifty">[in] - </param>
'''  <param name="scalex">[in] - </param>
'''  <param name="scaley">[in] - </param>
'''  <param name="xcen">[in] - center of rotation</param>
'''  <param name="ycen">[in] - center of rotation</param>
'''  <param name="angle">[in] - in radians; clockwise is positive</param>
'''  <param name="order">[in] - one of 6 combinations L_TR_SC_RO, ...</param>
'''   <returns>boxd, or NULL on error</returns>
Public Shared Function boxaTransformOrdered(
				ByVal boxas as Boxa, 
				ByVal shiftx as Integer, 
				ByVal shifty as Integer, 
				ByVal scalex as Single, 
				ByVal scaley as Single, 
				ByVal xcen as Integer, 
				ByVal ycen as Integer, 
				ByVal angle as Single, 
				ByVal order as Enumerations.L_affine_transm_order) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaTransformOrdered( boxas.Pointer, shiftx, shifty, scalex, scaley, xcen, ycen, angle, order)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc2.c (280, 1)
' boxTransformOrdered()
' boxTransformOrdered(BOX *, l_int32, l_int32, l_float32, l_float32, l_int32, l_int32, l_float32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) This allows a sequence of linear transforms, composed of
''' shift, scaling and rotation, where the order of the
''' transforms is specified.
''' (2) The rotation is taken about a point specified by (xcen, ycen).
''' Let the components of the vector from the center of rotation
''' to the box center be (xdif, ydif)
''' xdif = (bx + 0.5  bw) - xcen
''' ydif = (by + 0.5  bh) - ycen
''' Then the box center after rotation has new components
''' bxcen = xcen + xdif  cosa + ydif  sina
''' bycen = ycen + ydif  cosa - xdif  sina
''' where cosa and sina are the cos and sin of the angle,
''' and the enclosing box for the rotated box has size
''' rw = |bw  cosa| + |bh  sina|
''' rh = |bh  cosa| + |bw  sina|
''' where bw and bh are the unrotated width and height.
''' Then the box UL corner (rx, ry) is
''' rx = bxcen - 0.5  rw
''' ry = bycen - 0.5  rh
''' (3) The center of rotation specified by args %xcen and %ycen
''' is the point BEFORE any translation or scaling.  If the
''' rotation is not the first operation, this function finds
''' the actual center at the time of rotation.  It does this
''' by making the following assumptions
''' (1) Any scaling is with respect to the UL corner, so
''' that the center location scales accordingly.
''' (2) A translation does not affect the center of
''' the image; it just moves the boxes.
''' We always use assumption (1).  However, assumption (2)
''' will be incorrect if the apparent translation is due
''' to a clipping operation that, in effect, moves the
''' origin of the image.  In that case, you should NOT use
''' these simple functions.  Instead, use the functions
''' in affinecompose.c, where the rotation center can be
''' computed from the actual clipping due to translation
''' of the image origin.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxs">[in] - </param>
'''  <param name="shiftx">[in] - </param>
'''  <param name="shifty">[in] - </param>
'''  <param name="scalex">[in] - </param>
'''  <param name="scaley">[in] - </param>
'''  <param name="xcen">[in] - center of rotation</param>
'''  <param name="ycen">[in] - center of rotation</param>
'''  <param name="angle">[in] - in radians; clockwise is positive</param>
'''  <param name="order">[in] - one of 6 combinations L_TR_SC_RO, ...</param>
'''   <returns>boxd, or NULL on error</returns>
Public Shared Function boxTransformOrdered(
				ByVal boxs as Box, 
				ByVal shiftx as Integer, 
				ByVal shifty as Integer, 
				ByVal scalex as Single, 
				ByVal scaley as Single, 
				ByVal xcen as Integer, 
				ByVal ycen as Integer, 
				ByVal angle as Single, 
				ByVal order as Enumerations.L_affine_transm_order) as Box

	If IsNothing (boxs) then Throw New ArgumentNullException  ("boxs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxTransformOrdered( boxs.Pointer, shiftx, shifty, scalex, scaley, xcen, ycen, angle, order)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxfunc2.c (454, 1)
' boxaRotateOrth()
' boxaRotateOrth(BOXA *, l_int32, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) See boxRotateOrth() for details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="w">[in] - of image in which the boxa is embedded</param>
'''  <param name="h">[in] - of image in which the boxa is embedded</param>
'''  <param name="rotation">[in] - 0 = noop, 1 = 90 deg, 2 = 180 deg, 3 = 270 deg; all rotations are clockwise</param>
'''   <returns>boxad, or NULL on error</returns>
Public Shared Function boxaRotateOrth(
				ByVal boxas as Boxa, 
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal rotation as Integer) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaRotateOrth( boxas.Pointer, w, h, rotation)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc2.c (506, 1)
' boxRotateOrth()
' boxRotateOrth(BOX *, l_int32, l_int32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) Rotate the image with the embedded box by the specified amount.
''' (2) After rotation, the rotated box is always measured with
''' respect to the UL corner of the image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''  <param name="w">[in] - of image in which the box is embedded</param>
'''  <param name="h">[in] - of image in which the box is embedded</param>
'''  <param name="rotation">[in] - 0 = noop, 1 = 90 deg, 2 = 180 deg, 3 = 270 deg; all rotations are clockwise</param>
'''   <returns>boxd, or NULL on error</returns>
Public Shared Function boxRotateOrth(
				ByVal box as Box, 
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal rotation as Integer) as Box

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxRotateOrth( box.Pointer, w, h, rotation)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxfunc2.c (560, 1)
' boxaSort()
' boxaSort(BOXA *, l_int32, l_int32, NUMA **) as BOXA *
'''  <summary>
''' Notes
''' (1) An empty boxa returns a copy, with a warning.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="sorttype">[in] - L_SORT_BY_X, L_SORT_BY_Y, L_SORT_BY_RIGHT, L_SORT_BY_BOT, L_SORT_BY_WIDTH, L_SORT_BY_HEIGHT, L_SORT_BY_MIN_DIMENSION, L_SORT_BY_MAX_DIMENSION, L_SORT_BY_PERIMETER, L_SORT_BY_AREA, L_SORT_BY_ASPECT_RATIO</param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING, L_SORT_DECREASING</param>
'''  <param name="pnaindex">[out][optional] - index of sorted order into original array</param>
'''   <returns>boxad sorted version of boxas, or NULL on error</returns>
Public Shared Function boxaSort(
				ByVal boxas as Boxa, 
				ByVal sorttype as Enumerations.L_SORT_BY, 
				ByVal sortorder as Enumerations.L_SORT_CREASING, 
				ByRef pnaindex as Numa) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")

Dim pnaindexPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaindex) Then pnaindexPTR = pnaindex.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaSort( boxas.Pointer, sorttype, sortorder, pnaindexPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnaindexPTR <> IntPtr.Zero then pnaindex = new Numa(pnaindexPTR)

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc2.c (684, 1)
' boxaBinSort()
' boxaBinSort(BOXA *, l_int32, l_int32, NUMA **) as BOXA *
'''  <summary>
''' Notes
''' (1) For a large number of boxes (say, greater than 1000), this
''' O(n) binsort is much faster than the O(nlogn) shellsort.
''' For 5000 components, this is over 20x faster than boxaSort().
''' (2) Consequently, boxaSort() calls this function if it will
''' likely go much faster.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="sorttype">[in] - L_SORT_BY_X, L_SORT_BY_Y, L_SORT_BY_WIDTH, L_SORT_BY_HEIGHT, L_SORT_BY_PERIMETER</param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING, L_SORT_DECREASING</param>
'''  <param name="pnaindex">[out][optional] - index of sorted order into original array</param>
'''   <returns>boxad sorted version of boxas, or NULL on error</returns>
Public Shared Function boxaBinSort(
				ByVal boxas as Boxa, 
				ByVal sorttype as Enumerations.L_SORT_BY, 
				ByVal sortorder as Enumerations.L_SORT_CREASING, 
				ByRef pnaindex as Numa) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")

Dim pnaindexPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaindex) Then pnaindexPTR = pnaindex.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaBinSort( boxas.Pointer, sorttype, sortorder, pnaindexPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnaindexPTR <> IntPtr.Zero then pnaindex = new Numa(pnaindexPTR)

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc2.c (761, 1)
' boxaSortByIndex()
' boxaSortByIndex(BOXA *, NUMA *) as BOXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="naindex">[in] - na that maps from the new boxa to the input boxa</param>
'''   <returns>boxad sorted, or NULL on error</returns>
Public Shared Function boxaSortByIndex(
				ByVal boxas as Boxa, 
				ByVal naindex as Numa) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (naindex) then Throw New ArgumentNullException  ("naindex cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaSortByIndex( boxas.Pointer, naindex.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc2.c (837, 1)
' boxaSort2d()
' boxaSort2d(BOXA *, NUMAA **, l_int32, l_int32, l_int32) as BOXAA *
'''  <summary>
''' Notes
''' (1) The final result is a sort where the 'fast scan' direction is
''' left to right, and the 'slow scan' direction is from top
''' to bottom.  Each boxa in the baa represents a sorted set
''' of boxes from left to right.
''' (2) Three passes are used to aggregate the boxas, which can correspond
''' to characters or words in a line of text.  In pass 1, only
''' taller components, which correspond to xheight or larger,
''' are permitted to start a new boxa.  In pass 2, the remaining
''' vertically-challenged components are allowed to join an
''' existing boxa or start a new one.  In pass 3, boxa whose extent
''' is overlapping are joined.  After that, the boxes in each
''' boxa are sorted horizontally, and finally the boxa are
''' sorted vertically.
''' (3) If delta1 LT 0, the first pass allows aggregation when
''' boxes in the same boxa do not overlap vertically.
''' The distance by which they can miss and still be aggregated
''' is the absolute value |delta1|.   Similar for delta2 on
''' the second pass.
''' (4) On the first pass, any component of height less than minh1
''' cannot start a new boxa; it's put aside for later insertion.
''' (5) On the second pass, any small component that doesn't align
''' with an existing boxa can start a new one.
''' (6) This can be used to identify lines of text from
''' character or word bounding boxes.
''' (7) Typical values for the input parameters on 300 ppi text are
''' delta1 ~ 0
''' delta2 ~ 0
''' minh1 ~ 5
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="pnaad">[out][optional] - numaa with sorted indices whose values are the indices of the input array</param>
'''  <param name="delta1">[in] - min overlap that permits aggregation of a box onto a boxa of horizontally-aligned boxes; pass 1</param>
'''  <param name="delta2">[in] - min overlap that permits aggregation of a box onto a boxa of horizontally-aligned boxes; pass 2</param>
'''  <param name="minh1">[in] - components less than this height either join an existing boxa or are set aside for pass 2</param>
'''   <returns>baa 2d sorted version of boxa, or NULL on error</returns>
Public Shared Function boxaSort2d(
				ByVal boxas as Boxa, 
				ByRef pnaad as Numaa, 
				ByVal delta1 as Integer, 
				ByVal delta2 as Integer, 
				ByVal minh1 as Integer) as Boxaa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")

Dim pnaadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaad) Then pnaadPTR = pnaad.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaSort2d( boxas.Pointer, pnaadPTR, delta1, delta2, minh1)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnaadPTR <> IntPtr.Zero then pnaad = new Numaa(pnaadPTR)

	Return  new Boxaa(_Result)
End Function

' SRC\boxfunc2.c (1024, 1)
' boxaSort2dByIndex()
' boxaSort2dByIndex(BOXA *, NUMAA *) as BOXAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="naa">[in] - numaa that maps from the new baa to the input boxa</param>
'''   <returns>baa sorted boxaa, or NULL on error</returns>
Public Shared Function boxaSort2dByIndex(
				ByVal boxas as Boxa, 
				ByVal naa as Numaa) as Boxaa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaSort2dByIndex( boxas.Pointer, naa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxaa(_Result)
End Function

' SRC\boxfunc2.c (1093, 1)
' boxaExtractAsNuma()
' boxaExtractAsNuma(BOXA *, NUMA **, NUMA **, NUMA **, NUMA **, NUMA **, NUMA **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) If you are counting or sorting values, such as determining
''' rank order, you must remove invalid boxes.
''' (2) If you are parametrizing the values, or doing an evaluation
''' where the position in the boxa sequence is important, you
''' must replace the invalid boxes with valid ones before
''' doing the extraction. This is easily done with boxaFillSequence().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="pnal">[out][optional] - array of left locations</param>
'''  <param name="pnat">[out][optional] - array of top locations</param>
'''  <param name="pnar">[out][optional] - array of right locations</param>
'''  <param name="pnab">[out][optional] - array of bottom locations</param>
'''  <param name="pnaw">[out][optional] - array of widths</param>
'''  <param name="pnah">[out][optional] - array of heights</param>
'''  <param name="keepinvalid">[in] - 1 to keep invalid boxes; 0 to remove them</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaExtractAsNuma(
				ByVal boxa as Boxa, 
				ByRef pnal as Numa, 
				ByRef pnat as Numa, 
				ByRef pnar as Numa, 
				ByRef pnab as Numa, 
				ByRef pnaw as Numa, 
				ByRef pnah as Numa, 
				ByVal keepinvalid as Integer) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")

Dim pnalPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnal) Then pnalPTR = pnal.Pointer
Dim pnatPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnat) Then pnatPTR = pnat.Pointer
Dim pnarPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnar) Then pnarPTR = pnar.Pointer
Dim pnabPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnab) Then pnabPTR = pnab.Pointer
Dim pnawPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaw) Then pnawPTR = pnaw.Pointer
Dim pnahPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnah) Then pnahPTR = pnah.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaExtractAsNuma( boxa.Pointer, pnalPTR, pnatPTR, pnarPTR, pnabPTR, pnawPTR, pnahPTR, keepinvalid)
	if pnalPTR <> IntPtr.Zero then pnal = new Numa(pnalPTR)
	if pnatPTR <> IntPtr.Zero then pnat = new Numa(pnatPTR)
	if pnarPTR <> IntPtr.Zero then pnar = new Numa(pnarPTR)
	if pnabPTR <> IntPtr.Zero then pnab = new Numa(pnabPTR)
	if pnawPTR <> IntPtr.Zero then pnaw = new Numa(pnawPTR)
	if pnahPTR <> IntPtr.Zero then pnah = new Numa(pnahPTR)

	Return _Result
End Function

' SRC\boxfunc2.c (1170, 1)
' boxaExtractAsPta()
' boxaExtractAsPta(BOXA *, PTA **, PTA **, PTA **, PTA **, PTA **, PTA **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) For most applications, such as counting, sorting, fitting
''' to some parametrized form, plotting or filtering in general,
''' you should remove the invalid boxes.  Each pta saves the
''' box index in the x array, so replacing invalid boxes by
''' filling with boxaFillSequence(), which is required for
''' boxaExtractAsNuma(), is not necessary.
''' (2) If invalid boxes are retained, each one will result in
''' entries (typically 0) in all selected output pta.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="pptal">[out][optional] - array of left locations vs. index</param>
'''  <param name="pptat">[out][optional] - array of top locations vs. index</param>
'''  <param name="pptar">[out][optional] - array of right locations vs. index</param>
'''  <param name="pptab">[out][optional] - array of bottom locations vs. index</param>
'''  <param name="pptaw">[out][optional] - array of widths vs. index</param>
'''  <param name="pptah">[out][optional] - array of heights vs. index</param>
'''  <param name="keepinvalid">[in] - 1 to keep invalid boxes; 0 to remove them</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaExtractAsPta(
				ByVal boxa as Boxa, 
				ByRef pptal as Pta, 
				ByRef pptat as Pta, 
				ByRef pptar as Pta, 
				ByRef pptab as Pta, 
				ByRef pptaw as Pta, 
				ByRef pptah as Pta, 
				ByVal keepinvalid as Integer) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")

Dim pptalPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pptal) Then pptalPTR = pptal.Pointer
Dim pptatPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pptat) Then pptatPTR = pptat.Pointer
Dim pptarPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pptar) Then pptarPTR = pptar.Pointer
Dim pptabPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pptab) Then pptabPTR = pptab.Pointer
Dim pptawPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pptaw) Then pptawPTR = pptaw.Pointer
Dim pptahPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pptah) Then pptahPTR = pptah.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaExtractAsPta( boxa.Pointer, pptalPTR, pptatPTR, pptarPTR, pptabPTR, pptawPTR, pptahPTR, keepinvalid)
	if pptalPTR <> IntPtr.Zero then pptal = new Pta(pptalPTR)
	if pptatPTR <> IntPtr.Zero then pptat = new Pta(pptatPTR)
	if pptarPTR <> IntPtr.Zero then pptar = new Pta(pptarPTR)
	if pptabPTR <> IntPtr.Zero then pptab = new Pta(pptabPTR)
	if pptawPTR <> IntPtr.Zero then pptaw = new Pta(pptawPTR)
	if pptahPTR <> IntPtr.Zero then pptah = new Pta(pptahPTR)

	Return _Result
End Function

' SRC\boxfunc2.c (1251, 1)
' boxaGetRankVals()
' boxaGetRankVals(BOXA *, l_float32, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This function does not assume that all boxes in the boxa are valid
''' (2) The four box parameters are sorted independently.
''' For rank order, the width and height are sorted in increasing
''' order.  But what does it mean to sort x and y in "rank order"?
''' If the boxes are of comparable size and somewhat
''' aligned (e.g., from multiple images), it makes some sense
''' to give a "rank order" for x and y by sorting them in
''' decreasing order.  But in general, the interpretation of a rank
''' order on x and y is highly application dependent.  In summary
''' ~ x and y are sorted in decreasing order
''' ~ w and h are sorted in increasing order
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="fract">[in] - use 0.0 for smallest, 1.0 for largest width and height</param>
'''  <param name="px">[out][optional] - rank value of x</param>
'''  <param name="py">[out][optional] - rank value of y</param>
'''  <param name="pw">[out][optional] - rank value of width</param>
'''  <param name="ph">[out][optional] - rank value of height</param>
'''   <returns>0 if OK, 1 on error or if the boxa is empty or has no valid boxes</returns>
Public Shared Function boxaGetRankVals(
				ByVal boxa as Boxa, 
				ByVal fract as Single, 
				ByRef px as Integer, 
				ByRef py as Integer, 
				ByRef pw as Integer, 
				ByRef ph as Integer) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaGetRankVals( boxa.Pointer, fract, px, py, pw, ph)

	Return _Result
End Function

' SRC\boxfunc2.c (1317, 1)
' boxaGetMedianVals()
' boxaGetMedianVals(BOXA *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) See boxaGetRankVals()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="px">[out][optional] - median value of x</param>
'''  <param name="py">[out][optional] - median value of y</param>
'''  <param name="pw">[out][optional] - median value of width</param>
'''  <param name="ph">[out][optional] - median value of height</param>
'''   <returns>0 if OK, 1 on error or if the boxa is empty or has no valid boxes</returns>
Public Shared Function boxaGetMedianVals(
				ByVal boxa as Boxa, 
				ByRef px as Integer, 
				ByRef py as Integer, 
				ByRef pw as Integer, 
				ByRef ph as Integer) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaGetMedianVals( boxa.Pointer, px, py, pw, ph)

	Return _Result
End Function

' SRC\boxfunc2.c (1343, 1)
' boxaGetAverageSize()
' boxaGetAverageSize(BOXA *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="pw">[out][optional] - average width</param>
'''  <param name="ph">[out][optional] - average height</param>
'''   <returns>0 if OK, 1 on error or if the boxa is empty</returns>
Public Shared Function boxaGetAverageSize(
				ByVal boxa as Boxa, 
				ByRef pw as Single(), 
				ByRef ph as Single()) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaGetAverageSize( boxa.Pointer, pw, ph)

	Return _Result
End Function

' SRC\boxfunc2.c (1398, 1)
' boxaaGetExtent()
' boxaaGetExtent(BOXAA *, l_int32 *, l_int32 *, BOX **, BOXA **) as l_ok
'''  <summary>
''' Notes
''' (1) The returned w and h are the minimum size image
''' that would contain all boxes untranslated.
''' (2) Each box in the returned boxa is the minimum box required to
''' hold all the boxes in the respective boxa of baa.
''' (3) If there are no valid boxes in a boxa, the box corresponding
''' to its extent has all fields set to 0 (an invalid box).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''  <param name="pw">[out][optional] - width</param>
'''  <param name="ph">[out][optional] - height</param>
'''  <param name="pbox">[out][optional] - minimum box containing all boxa in boxaa</param>
'''  <param name="pboxa">[out][optional] - boxa containing all boxes in each boxa in the boxaa</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaGetExtent(
				ByVal baa as Boxaa, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pbox as Box, 
				ByRef pboxa as Boxa) as Integer

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")

Dim pboxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbox) Then pboxPTR = pbox.Pointer
Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaGetExtent( baa.Pointer, pw, ph, pboxPTR, pboxaPTR)
	if pboxPTR <> IntPtr.Zero then pbox = new Box(pboxPTR)
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)

	Return _Result
End Function

' SRC\boxfunc2.c (1478, 1)
' boxaaFlattenToBoxa()
' boxaaFlattenToBoxa(BOXAA *, NUMA **, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This 'flattens' the baa to a boxa, taking the boxes in
''' order in the first boxa, then the second, etc.
''' (2) If a boxa is empty, we generate an invalid, placeholder box
''' of zero size.  This is useful when converting from a baa
''' where each boxa has either 0 or 1 boxes, and it is necessary
''' to maintain a 11 correspondence between the initial
''' boxa array and the resulting box array.
''' (3) If naindex is defined, we generate a Numa that gives, for
''' each box in the baa, the index of the boxa to which it belongs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''  <param name="pnaindex">[out][optional] - the boxa index in the baa</param>
'''  <param name="copyflag">[in] - L_COPY or L_CLONE</param>
'''   <returns>boxa, or NULL on error</returns>
Public Shared Function boxaaFlattenToBoxa(
				ByVal baa as Boxaa, 
				ByRef pnaindex as Numa, 
				ByVal copyflag as Enumerations.L_access_storage) as Boxa

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")

Dim pnaindexPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaindex) Then pnaindexPTR = pnaindex.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaaFlattenToBoxa( baa.Pointer, pnaindexPTR, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnaindexPTR <> IntPtr.Zero then pnaindex = new Numa(pnaindexPTR)

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc2.c (1544, 1)
' boxaaFlattenAligned()
' boxaaFlattenAligned(BOXAA *, l_int32, BOX *, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This 'flattens' the baa to a boxa, taking the first %num
''' boxes from each boxa.
''' (2) In each boxa, if there are less than %num boxes, we preserve
''' the alignment between the input baa and the output boxa
''' by inserting one or more fillerbox(es) or, if %fillerbox == NULL,
''' one or more invalid placeholder boxes.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''  <param name="num">[in] - number extracted from each</param>
'''  <param name="fillerbox">[in][optional] - that fills if necessary</param>
'''  <param name="copyflag">[in] - L_COPY or L_CLONE</param>
'''   <returns>boxa, or NULL on error</returns>
Public Shared Function boxaaFlattenAligned(
				ByVal baa as Boxaa, 
				ByVal num as Integer, 
				ByVal fillerbox as Box, 
				ByVal copyflag as Enumerations.L_access_storage) as Boxa

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")

	Dim fillerboxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fillerbox) Then fillerboxPTR = fillerbox.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaaFlattenAligned( baa.Pointer, num, fillerboxPTR, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc2.c (1602, 1)
' boxaEncapsulateAligned()
' boxaEncapsulateAligned(BOXA *, l_int32, l_int32) as BOXAA *
'''  <summary>
''' Notes
''' (1) This puts %num boxes from the input %boxa into each of a
''' set of boxa within an output baa.
''' (2) This assumes that the boxes in %boxa are in sets of %num each.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="num">[in] - number put into each boxa in the baa</param>
'''  <param name="copyflag">[in] - L_COPY or L_CLONE</param>
'''   <returns>baa, or NULL on error</returns>
Public Shared Function boxaEncapsulateAligned(
				ByVal boxa as Boxa, 
				ByVal num as Integer, 
				ByVal copyflag as Enumerations.L_access_storage) as Boxaa

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaEncapsulateAligned( boxa.Pointer, num, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxaa(_Result)
End Function

' SRC\boxfunc2.c (1656, 1)
' boxaaTranspose()
' boxaaTranspose(BOXAA *) as BOXAA *
'''  <summary>
''' Notes
''' (1) If you think of a boxaa as a 2D array of boxes that is accessed
''' row major, then each row is represented by one of the boxa.
''' This function creates a new boxaa related to the input boxaa
''' as a column major traversal of the input boxaa.
''' (2) For example, if %baas has 2 boxa, each with 10 boxes, then
''' %baad will have 10 boxa, each with 2 boxes.
''' (3) Require for this transpose operation that each boxa in
''' %baas has the same number of boxes.  This operation is useful
''' when the i-th boxes in each boxa are meaningfully related.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baas">[in] - </param>
'''   <returns>baad, or NULL on error</returns>
Public Shared Function boxaaTranspose(
				ByVal baas as Boxaa) as Boxaa

	If IsNothing (baas) then Throw New ArgumentNullException  ("baas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaaTranspose( baas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxaa(_Result)
End Function

' SRC\boxfunc2.c (1715, 1)
' boxaaAlignBox()
' boxaaAlignBox(BOXAA *, BOX *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This is not greedy.  It finds the boxa whose vertical
''' extent has the closest overlap with the input box.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''  <param name="box">[in] - to be aligned with the bext boxa in the baa, if possible</param>
'''  <param name="delta">[in] - amount by which consecutive components can miss in overlap and still be included in the array</param>
'''  <param name="pindex">[out] - index of boxa with best overlap, or if none match, this is the index of the next boxa to be generated</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaAlignBox(
				ByVal baa as Boxaa, 
				ByVal box as Box, 
				ByVal delta as Integer, 
				ByRef pindex as Integer) as Integer

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaAlignBox( baa.Pointer, box.Pointer, delta, pindex)

	Return _Result
End Function

#End Region
#Region "SRC\boxfunc3.c"
' SRC\boxfunc3.c (94, 1)
' pixMaskConnComp()
' pixMaskConnComp(PIX *, l_int32, BOXA **) as PIX *
'''  <summary>
''' Notes
''' (1) This generates a mask image with ON pixels over the
''' b.b. of the c.c. in pixs.  If there are no ON pixels in pixs,
''' pixd will also have no ON pixels.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="pboxa">[out][optional] - bounding boxes of c.c.</param>
'''   <returns>pixd 1 bpp mask over the c.c., or NULL on error</returns>
Public Shared Function pixMaskConnComp(
				ByVal pixs as Pix, 
				ByVal connectivity as Integer, 
				ByRef pboxa as Boxa) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMaskConnComp( pixs.Pointer, connectivity, pboxaPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)

	Return  new Pix(_Result)
End Function

' SRC\boxfunc3.c (148, 1)
' pixMaskBoxa()
' pixMaskBoxa(PIX *, PIX *, BOXA *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This can be used with
''' pixd = NULL  (makes a new pixd)
''' pixd = pixs  (in-place)
''' (2) If pixd == NULL, this first makes a copy of pixs, and then
''' bit-twiddles over the boxes.  Otherwise, it operates directly
''' on pixs.
''' (3) This simple function is typically used with 1 bpp images.
''' It uses the 1-image rasterop function, rasteropUniLow(),
''' to set, clear or flip the pixels in pixd.
''' (4) If you want to generate a 1 bpp mask of ON pixels from the boxes
''' in a Boxa, in a pix of size (w,h)
''' pix = pixCreate(w, h, 1);
''' pixMaskBoxa(pix, pix, boxa, L_SET_PIXELS);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - may be NULL</param>
'''  <param name="pixs">[in] - any depth; not cmapped</param>
'''  <param name="boxa">[in] - of boxes, to paint</param>
'''  <param name="op">[in] - L_SET_PIXELS, L_CLEAR_PIXELS, L_FLIP_PIXELS</param>
'''   <returns>pixd with masking op over the boxes, or NULL on error</returns>
Public Shared Function pixMaskBoxa(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal boxa as Boxa, 
				ByVal op as Enumerations.L_PIXELS) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMaskBoxa( pixdPTR, pixs.Pointer, boxa.Pointer, op)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\boxfunc3.c (217, 1)
' pixPaintBoxa()
' pixPaintBoxa(PIX *, BOXA *, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) If pixs is 1 bpp or is colormapped, it is converted to 8 bpp
''' and the boxa is painted using a colormap; otherwise,
''' it is converted to 32 bpp rgb.
''' (2) There are several ways to display a box on an image
''' Paint it as a solid color
''' Draw the outline
''' Blend the outline or region with the existing image
''' We provide painting and drawing here; blending is in blend.c.
''' When painting or drawing, the result can be either a
''' cmapped image or an rgb image.  The dest will be cmapped
''' if the src is either 1 bpp or has a cmap that is not full.
''' To force RGB output, use pixConvertTo8(pixs, FALSE)
''' before calling any of these paint and draw functions.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth, can be cmapped</param>
'''  <param name="boxa">[in] - of boxes, to paint</param>
'''  <param name="val">[in] - rgba color to paint</param>
'''   <returns>pixd with painted boxes, or NULL on error</returns>
Public Shared Function pixPaintBoxa(
				ByVal pixs as Pix, 
				ByVal boxa as Boxa, 
				ByVal val as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixPaintBoxa( pixs.Pointer, boxa.Pointer, val)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\boxfunc3.c (283, 1)
' pixSetBlackOrWhiteBoxa()
' pixSetBlackOrWhiteBoxa(PIX *, BOXA *, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth, can be cmapped</param>
'''  <param name="boxa">[in][optional] - of boxes, to clear or set</param>
'''  <param name="op">[in] - L_SET_BLACK, L_SET_WHITE</param>
'''   <returns>pixd with boxes filled with white or black, or NULL on error</returns>
Public Shared Function pixSetBlackOrWhiteBoxa(
				ByVal pixs as Pix, 
				ByVal boxa as Boxa, 
				ByVal op as Enumerations.L_SET) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(boxa) Then boxaPTR = boxa.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSetBlackOrWhiteBoxa( pixs.Pointer, boxaPTR, op)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\boxfunc3.c (364, 1)
' pixPaintBoxaRandom()
' pixPaintBoxaRandom(PIX *, BOXA *) as PIX *
'''  <summary>
''' Notes
''' (1) If pixs is 1 bpp, we paint the boxa using a colormap;
''' otherwise, we convert to 32 bpp.
''' (2) We use up to 254 different colors for painting the regions.
''' (3) If boxes overlap, the later ones paint over earlier ones.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth, can be cmapped</param>
'''  <param name="boxa">[in] - of boxes, to paint</param>
'''   <returns>pixd with painted boxes, or NULL on error</returns>
Public Shared Function pixPaintBoxaRandom(
				ByVal pixs as Pix, 
				ByVal boxa as Boxa) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixPaintBoxaRandom( pixs.Pointer, boxa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\boxfunc3.c (435, 1)
' pixBlendBoxaRandom()
' pixBlendBoxaRandom(PIX *, BOXA *, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) pixs is converted to 32 bpp.
''' (2) This differs from pixPaintBoxaRandom(), in that the
''' colors here are blended with the color of pixs.
''' (3) We use up to 254 different colors for painting the regions.
''' (4) If boxes overlap, the final color depends only on the last
''' rect that is used.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth; can be cmapped</param>
'''  <param name="boxa">[in] - of boxes, to blend/paint</param>
'''  <param name="fract">[in] - of box color to use</param>
'''   <returns>pixd 32 bpp, with blend/painted boxes, or NULL on error</returns>
Public Shared Function pixBlendBoxaRandom(
				ByVal pixs as Pix, 
				ByVal boxa as Boxa, 
				ByVal fract as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlendBoxaRandom( pixs.Pointer, boxa.Pointer, fract)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\boxfunc3.c (496, 1)
' pixDrawBoxa()
' pixDrawBoxa(PIX *, BOXA *, l_int32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) If pixs is 1 bpp or is colormapped, it is converted to 8 bpp
''' and the boxa is drawn using a colormap; otherwise,
''' it is converted to 32 bpp rgb.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth; can be cmapped</param>
'''  <param name="boxa">[in] - of boxes, to draw</param>
'''  <param name="width">[in] - of lines</param>
'''  <param name="val">[in] - rgba color to draw</param>
'''   <returns>pixd with outlines of boxes added, or NULL on error</returns>
Public Shared Function pixDrawBoxa(
				ByVal pixs as Pix, 
				ByVal boxa as Boxa, 
				ByVal width as Integer, 
				ByVal val as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDrawBoxa( pixs.Pointer, boxa.Pointer, width, val)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\boxfunc3.c (560, 1)
' pixDrawBoxaRandom()
' pixDrawBoxaRandom(PIX *, BOXA *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If pixs is 1 bpp, we draw the boxa using a colormap;
''' otherwise, we convert to 32 bpp.
''' (2) We use up to 254 different colors for drawing the boxes.
''' (3) If boxes overlap, the later ones draw over earlier ones.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth, can be cmapped</param>
'''  <param name="boxa">[in] - of boxes, to draw</param>
'''  <param name="width">[in] - thickness of line</param>
'''   <returns>pixd with box outlines drawn, or NULL on error</returns>
Public Shared Function pixDrawBoxaRandom(
				ByVal pixs as Pix, 
				ByVal boxa as Boxa, 
				ByVal width as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDrawBoxaRandom( pixs.Pointer, boxa.Pointer, width)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\boxfunc3.c (634, 1)
' boxaaDisplay()
' boxaaDisplay(PIX *, BOXAA *, l_int32, l_int32, l_uint32, l_uint32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If %pixs exists, this renders the boxes over an 8 bpp version
''' of it.  Otherwise, it renders the boxes over an empty image
''' with a white background.
''' (2) If %pixs exists, the dimensions of %pixd are the same,
''' and input values of %w and %h are ignored.
''' If %pixs is NULL, the dimensions of %pixd are determined by
''' - %w and %h if both are GT 0, or
''' - the minimum size required using all boxes in %baa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in][optional] - 1 bpp</param>
'''  <param name="baa">[in] - boxaa, typically from a 2d sort</param>
'''  <param name="linewba">[in] - line width to display outline of each boxa</param>
'''  <param name="linewb">[in] - line width to display outline of each box</param>
'''  <param name="colorba">[in] - color to display boxa</param>
'''  <param name="colorb">[in] - color to display box</param>
'''  <param name="w">[in] - width of outupt pix; use 0 if determined by %pixs or %baa</param>
'''  <param name="h">[in] - height of outupt pix; use 0 if determined by %pixs or %baa</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaDisplay(
				ByVal pixs as Pix, 
				ByVal baa as Boxaa, 
				ByVal linewba as Integer, 
				ByVal linewb as Integer, 
				ByVal colorba as UInteger, 
				ByVal colorb as UInteger, 
				ByVal w as Integer, 
				ByVal h as Integer) as Pix

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaaDisplay( pixsPTR, baa.Pointer, linewba, linewb, colorba, colorb, w, h)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\boxfunc3.c (716, 1)
' pixaDisplayBoxaa()
' pixaDisplayBoxaa(PIXA *, BOXAA *, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) All pix in %pixas that are not rgb are converted to rgb.
''' (2) Each boxa in %baa contains boxes that will be drawn on
''' the corresponding pix in %pixas.
''' (3) The color of the boxes drawn on each pix are selected with
''' %colorflag
''' For red, green or blue use L_DRAW_RED, etc.
''' For sequential r, g, b use L_DRAW_RGB
''' For random colors use L_DRAW_RANDOM
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - any depth, can be cmapped</param>
'''  <param name="baa">[in] - boxes to draw on input pixa</param>
'''  <param name="colorflag">[in] - (L_DRAW_RED, L_DRAW_GREEN, etc)</param>
'''  <param name="width">[in] - thickness of lines</param>
'''   <returns>pixa with box outlines drawn on each pix, or NULL on error</returns>
Public Shared Function pixaDisplayBoxaa(
				ByVal pixas as Pixa, 
				ByVal baa as Boxaa, 
				ByVal colorflag as Enumerations.L_DRAW, 
				ByVal width as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaDisplayBoxaa( pixas.Pointer, baa.Pointer, colorflag, width)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\boxfunc3.c (835, 1)
' pixSplitIntoBoxa()
' pixSplitIntoBoxa(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This generates a boxa of rectangles that covers
''' the fg of a mask.  For each 8-connected component in pixs,
''' it does a greedy partitioning, choosing the largest
''' rectangle found from each of the four directions at each iter.
''' See pixSplitComponentIntoBoxa() for details.
''' (2) The input parameters give some flexibility for boundary
''' noise.  The resulting set of rectangles may cover some
''' bg pixels.
''' (3) This should be used when there are a small number of
''' mask components, each of which has sides that are close
''' to horizontal and vertical.  The input parameters %delta
''' and %maxbg determine whether or not holes in the mask are covered.
''' (4) The parameter %maxcomps gives the maximum number of allowed
''' rectangles extracted from any single connected component.
''' Use 0 if no limit is to be applied.
''' (5) The flag %remainder specifies whether we take a final bounding
''' box for anything left after the maximum number of allowed
''' rectangle is extracted.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="minsum">[in] - minimum pixels to trigger propagation</param>
'''  <param name="skipdist">[in] - distance before computing sum for propagation</param>
'''  <param name="delta">[in] - difference required to stop propagation</param>
'''  <param name="maxbg">[in] - maximum number of allowed bg pixels in ref scan</param>
'''  <param name="maxcomps">[in] - use 0 for unlimited number of subdivided components</param>
'''  <param name="remainder">[in] - set to 1 to get b.b. of remaining stuff</param>
'''   <returns>boxa of rectangles covering the fg of pixs, or NULL on error</returns>
Public Shared Function pixSplitIntoBoxa(
				ByVal pixs as Pix, 
				ByVal minsum as Integer, 
				ByVal skipdist as Integer, 
				ByVal delta as Integer, 
				ByVal maxbg as Integer, 
				ByVal maxcomps as Integer, 
				ByVal remainder as Integer) as Boxa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSplitIntoBoxa( pixs.Pointer, minsum, skipdist, delta, maxbg, maxcomps, remainder)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc3.c (944, 1)
' pixSplitComponentIntoBoxa()
' pixSplitComponentIntoBoxa(PIX *, BOX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This generates a boxa of rectangles that covers
''' the fg of a mask.  It does so by a greedy partitioning of
''' the mask, choosing the largest rectangle found from
''' each of the four directions at each step.
''' (2) The input parameters give some flexibility for boundary
''' noise.  The resulting set of rectangles must cover all
''' the fg pixels and, in addition, may cover some bg pixels.
''' Using small input parameters on a noiseless mask (i.e., one
''' that has only large vertical and horizontal edges) will
''' result in a proper covering of only the fg pixels of the mask.
''' (3) The input is assumed to be a single connected component, that
''' may have holes.  From each side, sweep inward, counting
''' the pixels.  If the count becomes greater than %minsum,
''' and we have moved forward a further amount %skipdist,
''' record that count ('countref'), but don't accept if the scan
''' contains more than %maxbg bg pixels.  Continue the scan
''' until we reach a count that differs from countref by at
''' least %delta, at which point the propagation stops.  The box
''' swept out gets a score, which is the sum of fg pixels
''' minus a penalty.  The penalty is the number of bg pixels
''' in the box.  This is done from all four sides, and the
''' side with the largest score is saved as a rectangle.
''' The process repeats until there is either no rectangle
''' left, or there is one that can't be captured from any
''' direction.  For the latter case, we simply accept the
''' last rectangle.
''' (4) The input box is only used to specify the location of
''' the UL corner of pix, with respect to an origin that
''' typically represents the UL corner of an underlying image,
''' of which pix is one component.  If %box is null,
''' the UL corner is taken to be (0, 0).
''' (5) The parameter %maxcomps gives the maximum number of allowed
''' rectangles extracted from any single connected component.
''' Use 0 if no limit is to be applied.
''' (6) The flag %remainder specifies whether we take a final bounding
''' box for anything left after the maximum number of allowed
''' rectangle is extracted.
''' (7) So if %maxcomps GT 0, it specifies that we want no more than
''' the first %maxcomps rectangles that satisfy the input
''' criteria.  After this, we can get a final rectangle that
''' bounds everything left over by setting %remainder == 1.
''' If %remainder == 0, we only get rectangles that satisfy
''' the input criteria.
''' (8) It should be noted that the removal of rectangles can
''' break the original c.c. into several c.c.
''' (9) Summing up
''' If %maxcomp == 0, the splitting proceeds as far as possible.
''' If %maxcomp GT 0, the splitting stops when %maxcomps are
''' found, or earlier if no more components can be selected.
''' If %remainder == 1 and components remain that cannot be
''' selected, they are returned as a single final rectangle;
''' otherwise, they are ignored.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1 bpp</param>
'''  <param name="box">[in][optional] - location of pix w/rt an origin</param>
'''  <param name="minsum">[in] - minimum pixels to trigger propagation</param>
'''  <param name="skipdist">[in] - distance before computing sum for propagation</param>
'''  <param name="delta">[in] - difference required to stop propagation</param>
'''  <param name="maxbg">[in] - maximum number of allowed bg pixels in ref scan</param>
'''  <param name="maxcomps">[in] - use 0 for unlimited number of subdivided components</param>
'''  <param name="remainder">[in] - set to 1 to get b.b. of remaining stuff</param>
'''   <returns>boxa of rectangles covering the fg of pix, or NULL on error</returns>
Public Shared Function pixSplitComponentIntoBoxa(
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByVal minsum as Integer, 
				ByVal skipdist as Integer, 
				ByVal delta as Integer, 
				ByVal maxbg as Integer, 
				ByVal maxcomps as Integer, 
				ByVal remainder as Integer) as Boxa

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {1}.contains (pix.d) = false then Throw New ArgumentException ("1 bpp")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSplitComponentIntoBoxa( pix.Pointer, boxPTR, minsum, skipdist, delta, maxbg, maxcomps, remainder)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc3.c (1308, 1)
' makeMosaicStrips()
' makeMosaicStrips(l_int32, l_int32, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) For example, this can be used to generate a pixa of
''' vertical strips of width 10 from an image, using
''' pixGetDimensions(pix, w, h, NULL);
''' boxa = makeMosaicStrips(w, h, L_SCAN_HORIZONTAL, 10);
''' pixa = pixClipRectangles(pix, boxa);
''' All strips except the last will be the same width.  The
''' last strip will have width w % 10.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="w">[in] - </param>
'''  <param name="h">[in] - </param>
'''  <param name="direction">[in] - L_SCAN_HORIZONTAL or L_SCAN_VERTICAL</param>
'''  <param name="size">[in] - of strips in the scan direction</param>
'''   <returns>boxa, or NULL on error</returns>
Public Shared Function makeMosaicStrips(
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal direction as Enumerations.L_scan_direction, 
				ByVal size as Integer) as Boxa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.makeMosaicStrips( w, h, direction, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc3.c (1388, 1)
' boxaCompareRegions()
' boxaCompareRegions(BOXA *, BOXA *, l_int32, l_int32 *, l_float32 *, l_float32 *, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This takes 2 boxa, removes all boxes smaller than a given area,
''' and compares the remaining boxes between the boxa.
''' (2) The area threshold is introduced to help remove noise from
''' small components.  Any box with a smaller value of w  h
''' will be removed from consideration.
''' (3) The xor difference is the most stringent test, requiring alignment
''' of the corresponding boxes.  It is also more computationally
''' intensive and is optionally returned.  Alignment is to the
''' UL corner of each region containing all boxes, as given by
''' boxaGetExtent().
''' (4) Both fractional differences are with respect to the total
''' area in the two boxa.  They range from 0.0 to 1.0.
''' A perfect match has value 0.0.  If both boxa are empty,
''' we return 0.0; if one is empty we return 1.0.
''' (5) An example input might be the rectangular regions of a
''' segmentation mask for text or images from two pages.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa1">[in] - </param>
'''  <param name="boxa2">[in] - </param>
'''  <param name="areathresh">[in] - minimum area of boxes to be considered</param>
'''  <param name="pnsame">[out] - true if same number of boxes</param>
'''  <param name="pdiffarea">[out] - fractional difference in total area</param>
'''  <param name="pdiffxor">[out][optional] - fractional difference in xor of regions</param>
'''  <param name="ppixdb">[out][optional] - debug pix showing two boxa</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaCompareRegions(
				ByVal boxa1 as Boxa, 
				ByVal boxa2 as Boxa, 
				ByVal areathresh as Integer, 
				ByRef pnsame as Integer, 
				ByRef pdiffarea as Single(), 
				ByRef pdiffxor as Single(), 
				ByRef ppixdb as Pix) as Integer

	If IsNothing (boxa1) then Throw New ArgumentNullException  ("boxa1 cannot be Nothing")
	If IsNothing (boxa2) then Throw New ArgumentNullException  ("boxa2 cannot be Nothing")

Dim ppixdbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdb) Then ppixdbPTR = ppixdb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaCompareRegions( boxa1.Pointer, boxa2.Pointer, areathresh, pnsame, pdiffarea, pdiffxor, ppixdbPTR)
	if ppixdbPTR <> IntPtr.Zero then ppixdb = new Pix(ppixdbPTR)

	Return _Result
End Function

' SRC\boxfunc3.c (1532, 1)
' pixSelectLargeULComp()
' pixSelectLargeULComp(PIX *, l_float32, l_int32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) This selects a box near the top (first) and left (second)
''' of the image, from the set of all boxes that have
''' area GT= %areaslop  (area of biggest box),
''' where %areaslop is some fraction; say ~ 0.9.
''' (2) For all boxes satisfying the above condition, select
''' the left-most box that is within %yslop (say, 20) pixels
''' of the box nearest the top.
''' (3) This can be used to reliably select a specific one of
''' the largest regions in an image, for applications where
''' there are expected to be small variations in region size
''' and location.
''' (4) See boxSelectLargeULBox() for implementation details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="areaslop">[in] - fraction near but less than 1.0</param>
'''  <param name="yslop">[in] - number of pixels in y direction</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>box, or NULL on error</returns>
Public Shared Function pixSelectLargeULComp(
				ByVal pixs as Pix, 
				ByVal areaslop as Single, 
				ByVal yslop as Integer, 
				ByVal connectivity as Integer) as Box

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (areaslop) then Throw New ArgumentNullException  ("areaslop cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSelectLargeULComp( pixs.Pointer, areaslop, yslop, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxfunc3.c (1573, 1)
' boxaSelectLargeULBox()
' boxaSelectLargeULBox(BOXA *, l_float32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) See usage notes in pixSelectLargeULComp().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - 1 bpp</param>
'''  <param name="areaslop">[in] - fraction near but less than 1.0</param>
'''  <param name="yslop">[in] - number of pixels in y direction</param>
'''   <returns>box, or NULL on error</returns>
Public Shared Function boxaSelectLargeULBox(
				ByVal boxas as Boxa, 
				ByVal areaslop as Single, 
				ByVal yslop as Integer) as Box

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (areaslop) then Throw New ArgumentNullException  ("areaslop cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaSelectLargeULBox( boxas.Pointer, areaslop, yslop)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

#End Region
#Region "SRC\boxfunc4.c"
' SRC\boxfunc4.c (111, 1)
' boxaSelectRange()
' boxaSelectRange(BOXA *, l_int32, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) The copyflag specifies what we do with each box from boxas.
''' Specifically, L_CLONE inserts a clone into boxad of each
''' selected box from boxas.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="first">[in] - use 0 to select from the beginning</param>
'''  <param name="last">[in] - use 0 to select to the end</param>
'''  <param name="copyflag">[in] - L_COPY, L_CLONE</param>
'''   <returns>boxad, or NULL on error</returns>
Public Shared Function boxaSelectRange(
				ByVal boxas as Boxa, 
				ByVal first as Integer, 
				ByVal last as Integer, 
				ByVal copyflag as Enumerations.L_access_storage) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaSelectRange( boxas.Pointer, first, last, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (164, 1)
' boxaaSelectRange()
' boxaaSelectRange(BOXAA *, l_int32, l_int32, l_int32) as BOXAA *
'''  <summary>
''' Notes
''' (1) The copyflag specifies what we do with each boxa from baas.
''' Specifically, L_CLONE inserts a clone into baad of each
''' selected boxa from baas.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baas">[in] - </param>
'''  <param name="first">[in] - use 0 to select from the beginning</param>
'''  <param name="last">[in] - use 0 to select to the end</param>
'''  <param name="copyflag">[in] - L_COPY, L_CLONE</param>
'''   <returns>baad, or NULL on error</returns>
Public Shared Function boxaaSelectRange(
				ByVal baas as Boxaa, 
				ByVal first as Integer, 
				ByVal last as Integer, 
				ByVal copyflag as Enumerations.L_access_storage) as Boxaa

	If IsNothing (baas) then Throw New ArgumentNullException  ("baas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaaSelectRange( baas.Pointer, first, last, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxaa(_Result)
End Function

' SRC\boxfunc4.c (227, 1)
' boxaSelectBySize()
' boxaSelectBySize(BOXA *, l_int32, l_int32, l_int32, l_int32, l_int32 *) as BOXA *
'''  <summary>
''' Notes
''' (1) The args specify constraints on the size of the
''' components that are kept.
''' (2) Uses box copies in the new boxa.
''' (3) If the selection type is L_SELECT_WIDTH, the input
''' height is ignored, and v.v.
''' (4) To keep small components, use relation = L_SELECT_IF_LT or
''' L_SELECT_IF_LTE.
''' To keep large components, use relation = L_SELECT_IF_GT or
''' L_SELECT_IF_GTE.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="width">[in] - threshold dimensions</param>
'''  <param name="height">[in] - threshold dimensions</param>
'''  <param name="type">[in] - L_SELECT_WIDTH, L_SELECT_HEIGHT, L_SELECT_IF_EITHER, L_SELECT_IF_BOTH</param>
'''  <param name="relation">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 if clone returned</param>
'''   <returns>boxad filtered set, or NULL on error</returns>
Public Shared Function boxaSelectBySize(
				ByVal boxas as Boxa, 
				ByVal width as Integer, 
				ByVal height as Integer, 
				ByVal type as Enumerations.L_SELECT, 
				ByVal relation as Enumerations.L_SELECT_IF, 
				ByRef pchanged as Integer) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaSelectBySize( boxas.Pointer, width, height, type, relation, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (290, 1)
' boxaMakeSizeIndicator()
' boxaMakeSizeIndicator(BOXA *, l_int32, l_int32, l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The args specify constraints on the size of the
''' components that are kept.
''' (2) If the selection type is L_SELECT_WIDTH, the input
''' height is ignored, and v.v.
''' (3) To keep small components, use relation = L_SELECT_IF_LT or
''' L_SELECT_IF_LTE.
''' To keep large components, use relation = L_SELECT_IF_GT or
''' L_SELECT_IF_GTE.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="width">[in] - threshold dimensions</param>
'''  <param name="height">[in] - threshold dimensions</param>
'''  <param name="type">[in] - L_SELECT_WIDTH, L_SELECT_HEIGHT, L_SELECT_IF_EITHER, L_SELECT_IF_BOTH</param>
'''  <param name="relation">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''   <returns>na indicator array, or NULL on error</returns>
Public Shared Function boxaMakeSizeIndicator(
				ByVal boxa as Boxa, 
				ByVal width as Integer, 
				ByVal height as Integer, 
				ByVal type as Enumerations.L_SELECT, 
				ByVal relation as Enumerations.L_SELECT_IF) as Numa

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaMakeSizeIndicator( boxa.Pointer, width, height, type, relation)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\boxfunc4.c (377, 1)
' boxaSelectByArea()
' boxaSelectByArea(BOXA *, l_int32, l_int32, l_int32 *) as BOXA *
'''  <summary>
''' Notes
''' (1) Uses box copies in the new boxa.
''' (2) To keep small components, use relation = L_SELECT_IF_LT or
''' L_SELECT_IF_LTE.
''' To keep large components, use relation = L_SELECT_IF_GT or
''' L_SELECT_IF_GTE.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="area">[in] - threshold value of width  height</param>
'''  <param name="relation">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 if clone returned</param>
'''   <returns>boxad filtered set, or NULL on error</returns>
Public Shared Function boxaSelectByArea(
				ByVal boxas as Boxa, 
				ByVal area as Integer, 
				ByVal relation as Enumerations.L_SELECT_IF, 
				ByRef pchanged as Integer) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaSelectByArea( boxas.Pointer, area, relation, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (427, 1)
' boxaMakeAreaIndicator()
' boxaMakeAreaIndicator(BOXA *, l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) To keep small components, use relation = L_SELECT_IF_LT or
''' L_SELECT_IF_LTE.
''' To keep large components, use relation = L_SELECT_IF_GT or
''' L_SELECT_IF_GTE.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="area">[in] - threshold value of width  height</param>
'''  <param name="relation">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''   <returns>na indicator array, or NULL on error</returns>
Public Shared Function boxaMakeAreaIndicator(
				ByVal boxa as Boxa, 
				ByVal area as Integer, 
				ByVal relation as Enumerations.L_SELECT_IF) as Numa

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaMakeAreaIndicator( boxa.Pointer, area, relation)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\boxfunc4.c (481, 1)
' boxaSelectByWHRatio()
' boxaSelectByWHRatio(BOXA *, l_float32, l_int32, l_int32 *) as BOXA *
'''  <summary>
''' Notes
''' (1) Uses box copies in the new boxa.
''' (2) To keep narrow components, use relation = L_SELECT_IF_LT or
''' L_SELECT_IF_LTE.
''' To keep wide components, use relation = L_SELECT_IF_GT or
''' L_SELECT_IF_GTE.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="ratio">[in] - width/height threshold value</param>
'''  <param name="relation">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 if clone returned</param>
'''   <returns>boxad filtered set, or NULL on error</returns>
Public Shared Function boxaSelectByWHRatio(
				ByVal boxas as Boxa, 
				ByVal ratio as Single, 
				ByVal relation as Enumerations.L_SELECT_IF, 
				ByRef pchanged as Integer) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (ratio) then Throw New ArgumentNullException  ("ratio cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaSelectByWHRatio( boxas.Pointer, ratio, relation, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (531, 1)
' boxaMakeWHRatioIndicator()
' boxaMakeWHRatioIndicator(BOXA *, l_float32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) To keep narrow components, use relation = L_SELECT_IF_LT or
''' L_SELECT_IF_LTE.
''' To keep wide components, use relation = L_SELECT_IF_GT or
''' L_SELECT_IF_GTE.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="ratio">[in] - width/height threshold value</param>
'''  <param name="relation">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''   <returns>na indicator array, or NULL on error</returns>
Public Shared Function boxaMakeWHRatioIndicator(
				ByVal boxa as Boxa, 
				ByVal ratio as Single, 
				ByVal relation as Enumerations.L_SELECT_IF) as Numa

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If IsNothing (ratio) then Throw New ArgumentNullException  ("ratio cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaMakeWHRatioIndicator( boxa.Pointer, ratio, relation)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\boxfunc4.c (583, 1)
' boxaSelectWithIndicator()
' boxaSelectWithIndicator(BOXA *, NUMA *, l_int32 *) as BOXA *
'''  <summary>
''' Notes
''' (1) Returns a copy of the boxa if no components are removed.
''' (2) Uses box copies in the new boxa.
''' (3) The indicator numa has values 0 (ignore) and 1 (accept).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="na">[in] - indicator numa</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 if clone returned</param>
'''   <returns>boxad, or NULL on error</returns>
Public Shared Function boxaSelectWithIndicator(
				ByVal boxas as Boxa, 
				ByVal na as Numa, 
				ByRef pchanged as Integer) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaSelectWithIndicator( boxas.Pointer, na.Pointer, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (641, 1)
' boxaPermutePseudorandom()
' boxaPermutePseudorandom(BOXA *) as BOXA *
'''  <summary>
''' Notes
''' (1) This does a pseudorandom in-place permutation of the boxes.
''' (2) The result is guaranteed not to have any boxes in their
''' original position, but it is not very random.  If you
''' need randomness, use boxaPermuteRandom().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - input boxa</param>
'''   <returns>boxad with boxes permuted, or NULL on error</returns>
Public Shared Function boxaPermutePseudorandom(
				ByVal boxas as Boxa) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaPermutePseudorandom( boxas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (682, 1)
' boxaPermuteRandom()
' boxaPermuteRandom(BOXA *, BOXA *) as BOXA *
'''  <summary>
''' Notes
''' (1) If boxad is null, make a copy of boxas and permute the copy.
''' Otherwise, boxad must be equal to boxas, and the operation
''' is done in-place.
''' (2) If boxas is empty, return an empty boxad.
''' (3) This does a random in-place permutation of the boxes,
''' by swapping each box in turn with a random box.  The
''' result is almost guaranteed not to have any boxes in their
''' original position.
''' (4) MSVC rand() has MAX_RAND = 2^15 - 1, so it will not do
''' a proper permutation is the number of boxes exceeds this.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxad">[in][optional] - can be null or equal to boxas</param>
'''  <param name="boxas">[in] - input boxa</param>
'''   <returns>boxad with boxes permuted, or NULL on error</returns>
Public Shared Function boxaPermuteRandom(
				ByVal boxad as Boxa, 
				ByVal boxas as Boxa) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")

	Dim boxadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(boxad) Then boxadPTR = boxad.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaPermuteRandom( boxadPTR, boxas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (719, 1)
' boxaSwapBoxes()
' boxaSwapBoxes(BOXA *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="i">[in] - two indices of boxes, that are to be swapped</param>
'''  <param name="j">[in] - two indices of boxes, that are to be swapped</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaSwapBoxes(
				ByVal boxa as Boxa, 
				ByVal i as Integer, 
				ByVal j as Integer) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaSwapBoxes( boxa.Pointer, i, j)

	Return _Result
End Function

' SRC\boxfunc4.c (763, 1)
' boxaConvertToPta()
' boxaConvertToPta(BOXA *, l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) If ncorners == 2, we select the UL and LR corners.
''' Otherwise we save all 4 corners in this order UL, UR, LL, LR.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="ncorners">[in] - 2 or 4 for the representation of each box</param>
'''   <returns>pta with %ncorners points for each box in the boxa, or NULL on error</returns>
Public Shared Function boxaConvertToPta(
				ByVal boxa as Boxa, 
				ByVal ncorners as Integer) as Pta

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaConvertToPta( boxa.Pointer, ncorners)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\boxfunc4.c (808, 1)
' ptaConvertToBoxa()
' ptaConvertToBoxa(PTA *, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) For 2 corners, the order of the 2 points is UL, LR.
''' For 4 corners, the order of points is UL, UR, LL, LR.
''' (2) Each derived box is the minimum size containing all corners.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="ncorners">[in] - 2 or 4 for the representation of each box</param>
'''   <returns>boxa with one box for each 2 or 4 points in the pta, or NULL on error</returns>
Public Shared Function ptaConvertToBoxa(
				ByVal pta as Pta, 
				ByVal ncorners as Integer) as Boxa

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaConvertToBoxa( pta.Pointer, ncorners)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (863, 1)
' boxConvertToPta()
' boxConvertToPta(BOX *, l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) If ncorners == 2, we select the UL and LR corners.
''' Otherwise we save all 4 corners in this order UL, UR, LL, LR.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''  <param name="ncorners">[in] - 2 or 4 for the representation of the box</param>
'''   <returns>pta with %ncorners points, or NULL on error</returns>
Public Shared Function boxConvertToPta(
				ByVal box as Box, 
				ByVal ncorners as Integer) as Pta

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxConvertToPta( box.Pointer, ncorners)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\boxfunc4.c (905, 1)
' ptaConvertToBox()
' ptaConvertToBox(PTA *) as BOX *
'''  <summary>
''' Notes
''' (1) For 2 corners, the order of the 2 points is UL, LR.
''' For 4 corners, the order of points is UL, UR, LL, LR.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''   <returns>box minimum containing all points in the pta, or NULL on error</returns>
Public Shared Function ptaConvertToBox(
				ByVal pta as Pta) as Box

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaConvertToBox( pta.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\boxfunc4.c (967, 1)
' boxaSmoothSequenceLS()
' boxaSmoothSequenceLS(BOXA *, l_float32, l_int32, l_int32, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This returns a modified version of %boxas by constructing
''' for each input box a box that has been linear least square fit
''' (LSF) to the entire set.  The linear fitting is done to each of
''' the box sides independently, after outliers are rejected,
''' and it is computed separately for sequences of even and
''' odd boxes.  Once the linear LSF box is found, the output box
''' (in %boxad) is constructed from the input box and the LSF
''' box, depending on %subflag.  See boxaModifyWithBoxa() for
''' details on the use of %subflag and %maxdiff.
''' (2) This is useful if, in both the even and odd sets, the box
''' edges vary roughly linearly with its index in the set.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - source boxa</param>
'''  <param name="factor">[in] - reject outliers with widths and heights deviating from the median by more than %factor times the median variation from the median; typically ~3</param>
'''  <param name="subflag">[in] - L_USE_MINSIZE, L_USE_MAXSIZE, L_SUB_ON_LOC_DIFF, L_SUB_ON_SIZE_DIFF, L_USE_CAPPED_MIN, L_USE_CAPPED_MAX</param>
'''  <param name="maxdiff">[in] - parameter used with L_SUB_ON_LOC_DIFF, L_SUB_ON_SIZE_DIFF, L_USE_CAPPED_MIN, L_USE_CAPPED_MAX</param>
'''  <param name="extrapixels">[in] - pixels added on all sides (or subtracted if %extrapixels LT 0) when using L_SUB_ON_LOC_DIFF and L_SUB_ON_SIZE_DIFF</param>
'''  <param name="debug">[in] - 1 for debug output</param>
'''   <returns>boxad fitted boxa, or NULL on error</returns>
Public Shared Function boxaSmoothSequenceLS(
				ByVal boxas as Boxa, 
				ByVal factor as Single, 
				ByVal subflag as Enumerations.L__modifying_box_boundaries_using_a_second_box, 
				ByVal maxdiff as Enumerations.L__modifying_box_boundaries_using_a_second_box, 
				ByVal extrapixels as Enumerations.L__modifying_box_boundaries_using_a_second_box, 
				ByVal debug as Enumerations.DebugOnOff) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaSmoothSequenceLS( boxas.Pointer, factor, subflag, maxdiff, extrapixels, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (1073, 1)
' boxaSmoothSequenceMedian()
' boxaSmoothSequenceMedian(BOXA *, l_int32, l_int32, l_int32, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) The target width of the sliding window is 2  %halfwin + 1.
''' If necessary, this will be reduced by boxaWindowedMedian().
''' (2) This returns a modified version of %boxas by constructing
''' for each input box a box that has been smoothed with windowed
''' median filtering.  The filtering is done to each of the
''' box sides independently, and it is computed separately for
''' sequences of even and odd boxes.  The output %boxad is
''' constructed from the input boxa and the filtered boxa,
''' depending on %subflag.  See boxaModifyWithBoxa() for
''' details on the use of %subflag, %maxdiff and %extrapixels.
''' (3) This is useful for removing noise separately in the even
''' and odd sets, where the box edge locations can have
''' discontinuities but otherwise vary roughly linearly within
''' intervals of size %halfwin or larger.
''' (4) If you don't need to handle even and odd sets separately,
''' just do this
''' boxam = boxaWindowedMedian(boxas, halfwin, debug);
''' boxad = boxaModifyWithBoxa(boxas, boxam, subflag, maxdiff,
''' extrapixels);
''' boxaDestroy(boxam);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - source boxa</param>
'''  <param name="halfwin">[in] - half-width of sliding window; used to find median</param>
'''  <param name="subflag">[in] - L_USE_MINSIZE, L_USE_MAXSIZE, L_SUB_ON_LOC_DIFF, L_SUB_ON_SIZE_DIFF, L_USE_CAPPED_MIN, L_USE_CAPPED_MAX</param>
'''  <param name="maxdiff">[in] - parameter used with L_SUB_ON_LOC_DIFF, L_SUB_ON_SIZE_DIFF, L_USE_CAPPED_MIN, L_USE_CAPPED_MAX</param>
'''  <param name="extrapixels">[in] - pixels added on all sides (or subtracted if %extrapixels LT 0) when using L_SUB_ON_LOC_DIFF and L_SUB_ON_SIZE_DIFF</param>
'''  <param name="debug">[in] - 1 for debug output</param>
'''   <returns>boxad fitted boxa, or NULL on error</returns>
Public Shared Function boxaSmoothSequenceMedian(
				ByVal boxas as Boxa, 
				ByVal halfwin as Integer, 
				ByVal subflag as Enumerations.L__modifying_box_boundaries_using_a_second_box, 
				ByVal maxdiff as Enumerations.L__modifying_box_boundaries_using_a_second_box, 
				ByVal extrapixels as Enumerations.L__modifying_box_boundaries_using_a_second_box, 
				ByVal debug as Enumerations.DebugOnOff) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaSmoothSequenceMedian( boxas.Pointer, halfwin, subflag, maxdiff, extrapixels, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (1179, 1)
' boxaLinearFit()
' boxaLinearFit(BOXA *, l_float32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This finds a set of boxes (boxad) where each edge of each box is
''' a linear least square fit (LSF) to the edges of the
''' input set of boxes (boxas).  Before fitting, outliers in
''' the boxes in boxas are removed (see below).
''' (2) This is useful when each of the box edges in boxas are expected
''' to vary linearly with box index in the set.  These could
''' be, for example, noisy measurements of similar regions
''' on successive scanned pages.
''' (3) Method there are 2 steps
''' (a) Find and remove outliers, separately based on the deviation
''' from the median of the width and height of the box.
''' Use %factor to specify tolerance to outliers; use a very
''' large value of %factor to avoid rejecting any box sides
''' in the linear LSF.
''' (b) On the remaining boxes, do a linear LSF independently
''' for each of the four sides.
''' (4) Invalid input boxes are not used in computation of the LSF.
''' (5) The returned boxad can then be used in boxaModifyWithBoxa()
''' to selectively change the boxes in boxas.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - source boxa</param>
'''  <param name="factor">[in] - reject outliers with widths and heights deviating from the median by more than %factor times the median deviation from the median; typically ~3</param>
'''  <param name="debug">[in] - 1 for debug output</param>
'''   <returns>boxad fitted boxa, or NULL on error</returns>
Public Shared Function boxaLinearFit(
				ByVal boxas as Boxa, 
				ByVal factor as Single, 
				ByVal debug as Enumerations.DebugOnOff) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaLinearFit( boxas.Pointer, factor, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (1331, 1)
' boxaWindowedMedian()
' boxaWindowedMedian(BOXA *, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This finds a set of boxes (boxad) where each edge of each box is
''' a windowed median smoothed value to the edges of the
''' input set of boxes (boxas).
''' (2) Invalid input boxes are filled from nearby ones.
''' (3) The returned boxad can then be used in boxaModifyWithBoxa()
''' to selectively change the boxes in the source boxa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - source boxa</param>
'''  <param name="halfwin">[in] - half width of window over which the median is found</param>
'''  <param name="debug">[in] - 1 for debug output</param>
'''   <returns>boxad smoothed boxa, or NULL on error</returns>
Public Shared Function boxaWindowedMedian(
				ByVal boxas as Boxa, 
				ByVal halfwin as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaWindowedMedian( boxas.Pointer, halfwin, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (1469, 1)
' boxaModifyWithBoxa()
' boxaModifyWithBoxa(BOXA *, BOXA *, l_int32, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This takes two input boxa (boxas, boxam) and constructs boxad,
''' where each box in boxad is generated from the corresponding
''' boxes in boxas and boxam.  The rule for constructing each
''' output box depends on %subflag and %maxdiff.  Let boxs be
''' a box from %boxas and boxm be a box from %boxam.
''' If %subflag == L_USE_MINSIZE the output box is the intersection
''' of the two input boxes.
''' If %subflag == L_USE_MAXSIZE the output box is the union of the
''' two input boxes; i.e., the minimum bounding rectangle for the
''' two input boxes.
''' If %subflag == L_SUB_ON_LOC_DIFF each side of the output box
''' is found separately from the corresponding side of boxs and boxm.
''' Use the boxm side, expanded by %extrapixels, if greater than
''' %maxdiff pixels from the boxs side.
''' If %subflag == L_SUB_ON_SIZE_DIFF the sides of the output box
''' are determined in pairs from the width and height of boxs
''' and boxm.  If the boxm width differs by more than %maxdiff
''' pixels from boxs, use the boxm left and right sides,
''' expanded by %extrapixels.  Ditto for the height difference.
''' For the last two flags, each side of the output box is found
''' separately from the corresponding side of boxs and boxm,
''' according to these rules, where "smaller"("bigger") mean in a
''' direction that decreases(increases) the size of the output box
''' If %subflag == L_USE_CAPPED_MIN use the Min of boxm
''' with the Max of (boxs, boxm +- %maxdiff), where the sign
''' is adjusted to make the box smaller (e.g., use "+" on left side).
''' If %subflag == L_USE_CAPPED_MAX use the Max of boxm
''' with the Min of (boxs, boxm +- %maxdiff), where the sign
''' is adjusted to make the box bigger (e.g., use "-" on left side).
''' Use of the last 2 flags is further explained in (3) and (4).
''' (2) boxas and boxam must be the same size.  If boxam == NULL,
''' this returns a copy of boxas with a warning.
''' (3) If %subflag == L_SUB_ON_LOC_DIFF, use boxm for each side
''' where the corresponding sides differ by more than %maxdiff.
''' Two extreme cases
''' (a) set %maxdiff == 0 to use only values from boxam in boxad.
''' (b) set %maxdiff == 10000 to ignore all values from boxam;
''' then boxad will be the same as boxas.
''' (4) If %subflag == L_USE_CAPPED_MAX use boxm if boxs is smaller;
''' use boxs if boxs is bigger than boxm by an amount up to %maxdiff;
''' and use boxm +- %maxdiff (the 'capped' value) if boxs is
''' bigger than boxm by an amount larger than %maxdiff.
''' Similarly, with interchange of Min/Max and sign of %maxdiff,
''' for %subflag == L_USE_CAPPED_MIN.
''' (5) If either of corresponding boxes in boxas and boxam is invalid,
''' an invalid box is copied to the result.
''' (6) Typical input for boxam may be the output of boxaLinearFit().
''' where outliers have been removed and each side is LS fit to a line.
''' (7) Unlike boxaAdjustWidthToTarget() and boxaAdjustHeightToTarget(),
''' this uses two boxes and does not specify target dimensions.
''' Additional constraints on the size of each box can be enforced
''' by following this operation with boxaConstrainSize(), taking
''' boxad as input.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="boxam">[in] - boxa with boxes used to modify those in boxas</param>
'''  <param name="subflag">[in] - L_USE_MINSIZE, L_USE_MAXSIZE, L_SUB_ON_LOC_DIFF, L_SUB_ON_SIZE_DIFF, L_USE_CAPPED_MIN, L_USE_CAPPED_MAX</param>
'''  <param name="maxdiff">[in] - parameter used with L_SUB_ON_LOC_DIFF, L_SUB_ON_SIZE_DIFF, L_USE_CAPPED_MIN, L_USE_CAPPED_MAX</param>
'''  <param name="extrapixels">[in] - pixels added on all sides (or subtracted if %extrapixels LT 0) when using L_SUB_ON_LOC_DIFF and L_SUB_ON_SIZE_DIFF</param>
'''   <returns>boxad result after adjusting boxes in boxas, or NULL on error.</returns>
Public Shared Function boxaModifyWithBoxa(
				ByVal boxas as Boxa, 
				ByVal boxam as Boxa, 
				ByVal subflag as Enumerations.L__modifying_box_boundaries_using_a_second_box, 
				ByVal maxdiff as Enumerations.L__modifying_box_boundaries_using_a_second_box, 
				ByVal extrapixels as Enumerations.L__modifying_box_boundaries_using_a_second_box) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (boxam) then Throw New ArgumentNullException  ("boxam cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaModifyWithBoxa( boxas.Pointer, boxam.Pointer, subflag, maxdiff, extrapixels)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (1585, 1)
' boxaConstrainSize()
' boxaConstrainSize(BOXA *, l_int32, l_int32, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) Forces either width or height (or both) of every box in
''' the boxa to a specified size, by moving the indicated sides.
''' (2) Not all input boxes need to be valid.  Median values will be
''' used with invalid boxes.
''' (3) Typical input might be the output of boxaLinearFit(),
''' where each side has been fit.
''' (4) Unlike boxaAdjustWidthToTarget() and boxaAdjustHeightToTarget(),
''' this is not dependent on a difference threshold to change the size.
''' (5) On error, a message is issued and a copy of the input boxa
''' is returned.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="width">[in] - force width of all boxes to this size; input 0 to use the median width</param>
'''  <param name="widthflag">[in] - L_ADJUST_SKIP, L_ADJUST_LEFT, L_ADJUST_RIGHT, or L_ADJUST_LEFT_AND_RIGHT</param>
'''  <param name="height">[in] - force height of all boxes to this size; input 0 to use the median height</param>
'''  <param name="heightflag">[in] - L_ADJUST_SKIP, L_ADJUST_TOP, L_ADJUST_BOT, or L_ADJUST_TOP_AND_BOT</param>
'''   <returns>boxad adjusted so all boxes are the same size</returns>
Public Shared Function boxaConstrainSize(
				ByVal boxas as Boxa, 
				ByVal width as Integer, 
				ByVal widthflag as Enumerations.L_box_size_adjustment_location, 
				ByVal height as Integer, 
				ByVal heightflag as Enumerations.L_box_size_adjustment_location) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaConstrainSize( boxas.Pointer, width, widthflag, height, heightflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (1694, 1)
' boxaReconcileEvenOddHeight()
' boxaReconcileEvenOddHeight(BOXA *, l_int32, l_int32, l_int32, l_float32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) The basic idea is to reconcile differences in box height
''' in the even and odd boxes, by moving the top and/or bottom
''' edges in the even and odd boxes.  Choose the edge or edges
''' to be moved, whether to adjust the boxes with the min
''' or the max of the medians, and the threshold on the median
''' difference between even and odd box heights for the operations
''' to take place.  The same threshold is also used to
''' determine if each individual box edge is to be adjusted.
''' (2) Boxes are conditionally reset with either the same top (y)
''' value or the same bottom value, or both.  The value is
''' determined by the greater or lesser of the medians of the
''' even and odd boxes, with the choice depending on the value
''' of %op, which selects for either min or max median height.
''' If the median difference between even and odd boxes is
''' greater than %dely, then any individual box edge that differs
''' from the selected median by more than %dely is set to
''' the selected median times a factor typically near 1.0.
''' (3) Note that if selecting for minimum height, you will choose
''' the largest y-value for the top and the smallest y-value for
''' the bottom of the box.
''' (4) Typical input might be the output of boxaSmoothSequence(),
''' where even and odd boxa have been independently regulated.
''' (5) Require at least 3 valid even boxes and 3 valid odd boxes.
''' Median values will be used for invalid boxes.
''' (6) If the median height is not representative of the boxes
''' in %boxas, this can make things much worse.  In that case,
''' ignore the value of %op, and force pairwise equality of the
''' heights, with pairwise maximal vertical extension.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - containing at least 3 valid boxes in even and odd</param>
'''  <param name="sides">[in] - L_ADJUST_TOP, L_ADJUST_BOT, L_ADJUST_TOP_AND_BOT</param>
'''  <param name="delh">[in] - threshold on median height difference</param>
'''  <param name="op">[in] - L_ADJUST_CHOOSE_MIN, L_ADJUST_CHOOSE_MAX</param>
'''  <param name="factor">[in] - GT 0.0, typically near 1.0</param>
'''  <param name="start">[in] - 0 if pairing (0,1), etc; 1 if pairing (1,2), etc</param>
'''   <returns>boxad adjusted, or a copy of boxas on error</returns>
Public Shared Function boxaReconcileEvenOddHeight(
				ByVal boxas as Boxa, 
				ByVal sides as Enumerations.L_box_size_adjustment_location, 
				ByVal delh as Integer, 
				ByVal op as Enumerations.L_box_size_adjustment_location, 
				ByVal factor as Single, 
				ByVal start as Integer) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaReconcileEvenOddHeight( boxas.Pointer, sides, delh, op, factor, start)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (1875, 1)
' boxaReconcilePairWidth()
' boxaReconcilePairWidth(BOXA *, l_int32, l_int32, l_float32, NUMA *) as BOXA *
'''  <summary>
''' Notes
''' (1) This reconciles differences in the width of adjacent boxes,
''' by moving one side of one of the boxes in each pair.
''' If the widths in the pair differ by more than some
''' threshold, move either the left side for even boxes or
''' the right side for odd boxes, depending on if we're choosing
''' the min or max.  If choosing min, the width of the max is
''' set to factor  (width of min).  If choosing max, the width
''' of the min is set to factor  (width of max).
''' (2) If %na exists, it is an indicator array corresponding to the
''' boxes in %boxas.  If %na != NULL, only boxes with an
''' indicator value of 1 are allowed to adjust; otherwise,
''' all boxes can adjust.
''' (3) Typical input might be the output of boxaSmoothSequence(),
''' where even and odd boxa have been independently regulated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="delw">[in] - threshold on adjacent width difference</param>
'''  <param name="op">[in] - L_ADJUST_CHOOSE_MIN, L_ADJUST_CHOOSE_MAX</param>
'''  <param name="factor">[in] - GT 0.0, typically near 1.0</param>
'''  <param name="na">[in][optional] - indicator array allowing change</param>
'''   <returns>boxad adjusted, or a copy of boxas on error</returns>
Public Shared Function boxaReconcilePairWidth(
				ByVal boxas as Boxa, 
				ByVal delw as Integer, 
				ByVal op as Enumerations.L_box_size_adjustment_location, 
				ByVal factor as Single, 
				ByVal na as Numa) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")

	Dim naPTR As IntPtr = IntPtr.Zero : If Not IsNothing(na) Then naPTR = na.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaReconcilePairWidth( boxas.Pointer, delw, op, factor, naPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (1980, 1)
' boxaPlotSides()
' boxaPlotSides(BOXA *, const char *, NUMA **, NUMA **, NUMA **, NUMA **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This debugging function shows the progression of the four
''' sides in the boxa.  There must be at least 2 boxes.
''' (2) If there are invalid boxes (e.g., if only even or odd
''' indices have valid boxes), this will fill them with the
''' nearest valid box before plotting.
''' (3) The plotfiles are put in /tmp/lept/plots/, and are named
''' either with %plotname or, if NULL, a default name.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - source boxa</param>
'''  <param name="plotname">[in][optional] - , can be NULL</param>
'''  <param name="pnal">[out][optional] - na of left sides</param>
'''  <param name="pnat">[out][optional] - na of top sides</param>
'''  <param name="pnar">[out][optional] - na of right sides</param>
'''  <param name="pnab">[out][optional] - na of bottom sides</param>
'''  <param name="ppixd">[out][optional] - pix of the output plot</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaPlotSides(
				ByVal boxa as Boxa, 
				ByVal plotname as String, 
				ByRef pnal as Numa, 
				ByRef pnat as Numa, 
				ByRef pnar as Numa, 
				ByRef pnab as Numa, 
				ByRef ppixd as Pix) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")

Dim pnalPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnal) Then pnalPTR = pnal.Pointer
Dim pnatPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnat) Then pnatPTR = pnat.Pointer
Dim pnarPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnar) Then pnarPTR = pnar.Pointer
Dim pnabPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnab) Then pnabPTR = pnab.Pointer
Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaPlotSides( boxa.Pointer, plotname, pnalPTR, pnatPTR, pnarPTR, pnabPTR, ppixdPTR)
	if pnalPTR <> IntPtr.Zero then pnal = new Numa(pnalPTR)
	if pnatPTR <> IntPtr.Zero then pnat = new Numa(pnatPTR)
	if pnarPTR <> IntPtr.Zero then pnar = new Numa(pnarPTR)
	if pnabPTR <> IntPtr.Zero then pnab = new Numa(pnabPTR)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return _Result
End Function

' SRC\boxfunc4.c (2092, 1)
' boxaPlotSizes()
' boxaPlotSizes(BOXA *, const char *, NUMA **, NUMA **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This debugging function shows the progression of box width
''' and height in the boxa.  There must be at least 2 boxes.
''' (2) If there are invalid boxes (e.g., if only even or odd
''' indices have valid boxes), this will fill them with the
''' nearest valid box before plotting.
''' (3) The plotfiles are put in /tmp/lept/plots/, and are named
''' either with %plotname or, if NULL, a default name.  Make sure
''' that %plotname is a string with no whitespace characters.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - source boxa</param>
'''  <param name="plotname">[in][optional] - , can be NULL</param>
'''  <param name="pnaw">[out][optional] - na of widths</param>
'''  <param name="pnah">[out][optional] - na of heights</param>
'''  <param name="ppixd">[out][optional] - pix of the output plot</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaPlotSizes(
				ByVal boxa as Boxa, 
				ByVal plotname as String, 
				ByRef pnaw as Numa, 
				ByRef pnah as Numa, 
				ByRef ppixd as Pix) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")

Dim pnawPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaw) Then pnawPTR = pnaw.Pointer
Dim pnahPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnah) Then pnahPTR = pnah.Pointer
Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaPlotSizes( boxa.Pointer, plotname, pnawPTR, pnahPTR, ppixdPTR)
	if pnawPTR <> IntPtr.Zero then pnaw = new Numa(pnawPTR)
	if pnahPTR <> IntPtr.Zero then pnah = new Numa(pnahPTR)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return _Result
End Function

' SRC\boxfunc4.c (2180, 1)
' boxaFillSequence()
' boxaFillSequence(BOXA *, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This simple function replaces invalid boxes with a copy of
''' the nearest valid box, selected from either the entire
''' sequence (L_USE_ALL_BOXES) or from the boxes with the
''' same parity (L_USE_SAME_PARITY_BOXES).  It returns a new boxa.
''' (2) This is useful if you expect boxes in the sequence to
''' vary slowly with index.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - with at least 3 boxes</param>
'''  <param name="useflag">[in] - L_USE_ALL_BOXES, L_USE_SAME_PARITY_BOXES</param>
'''  <param name="debug">[in] - 1 for debug output</param>
'''   <returns>boxad filled boxa, or NULL on error</returns>
Public Shared Function boxaFillSequence(
				ByVal boxas as Boxa, 
				ByVal useflag as Enumerations.L_USE_BOXES, 
				ByVal debug as Enumerations.DebugOnOff) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaFillSequence( boxas.Pointer, useflag, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\boxfunc4.c (2322, 1)
' boxaSizeVariation()
' boxaSizeVariation(BOXA *, l_int32, l_float32 *, l_float32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This gives several measures of the smoothness of either the
''' width or height of a sequence of boxes.
''' (2) Statistics can be found separately for even and odd boxes.
''' Additionally, the average pair-wise difference between
''' adjacent even and odd boxes can be returned.
''' (3) The use case is bounding boxes for scanned page images,
''' where ideally the sizes should have little variance.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - at least 4 boxes</param>
'''  <param name="type">[in] - L_SELECT_WIDTH, L_SELECT_HEIGHT</param>
'''  <param name="pdel_evenodd">[out][optional] - average absolute value of (even - odd) size pairs</param>
'''  <param name="prms_even">[out][optional] - rms deviation of even boxes</param>
'''  <param name="prms_odd">[out][optional] - rms deviation of odd boxes</param>
'''  <param name="prms_all">[out][optional] - rms deviation of all boxes</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaSizeVariation(
				ByVal boxa as Boxa, 
				ByVal type as Enumerations.L_SELECT, 
				ByRef pdel_evenodd as Single(), 
				ByRef prms_even as Single(), 
				ByRef prms_odd as Single(), 
				ByRef prms_all as Single()) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaSizeVariation( boxa.Pointer, type, pdel_evenodd, prms_even, prms_odd, prms_all)

	Return _Result
End Function

' SRC\boxfunc4.c (2419, 1)
' boxaGetExtent()
' boxaGetExtent(BOXA *, l_int32 *, l_int32 *, BOX **) as l_ok
'''  <summary>
''' Notes
''' (1) The returned w and h are the minimum size image
''' that would contain all boxes untranslated.
''' (2) If there are no valid boxes, returned w and h are 0 and
''' all parameters in the returned box are 0.  This
''' is not an error, because an empty boxa is valid and
''' boxaGetExtent() is required for serialization.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="pw">[out][optional] - width</param>
'''  <param name="ph">[out][optional] - height</param>
'''  <param name="pbox">[out][optional] - minimum box containing all boxes in boxa</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaGetExtent(
				ByVal boxa as Boxa, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pbox as Box) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")

Dim pboxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbox) Then pboxPTR = pbox.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaGetExtent( boxa.Pointer, pw, ph, pboxPTR)
	if pboxPTR <> IntPtr.Zero then pbox = new Box(pboxPTR)

	Return _Result
End Function

' SRC\boxfunc4.c (2485, 1)
' boxaGetCoverage()
' boxaGetCoverage(BOXA *, l_int32, l_int32, l_int32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The boxes in boxa are clipped to the input rectangle.
''' (2)  When %exactflag == 1, we generate a 1 bpp pix of size
''' wc x hc, paint all the boxes black, and count the fg pixels.
''' This can take 1 msec on a large page with many boxes.
''' When %exactflag == 0, we clip each box to the wc x hc region
''' and sum the resulting areas.  This is faster.
''' The results are the same when none of the boxes overlap
''' within the wc x hc region.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="wc">[in] - dimensions of overall clipping rectangle with UL corner at (0, 0 that is covered by the boxes.</param>
'''  <param name="hc">[in] - dimensions of overall clipping rectangle with UL corner at (0, 0 that is covered by the boxes.</param>
'''  <param name="exactflag">[in] - 1 for guaranteeing an exact result; 0 for getting an exact result only if the boxes do not overlap</param>
'''  <param name="pfract">[out] - sum of box area as fraction of w  h</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaGetCoverage(
				ByVal boxa as Boxa, 
				ByVal wc as Integer, 
				ByVal hc as Integer, 
				ByVal exactflag as Integer, 
				ByRef pfract as Single()) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaGetCoverage( boxa.Pointer, wc, hc, exactflag, pfract)

	Return _Result
End Function

' SRC\boxfunc4.c (2544, 1)
' boxaaSizeRange()
' boxaaSizeRange(BOXAA *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="baa">[in] - </param>
'''  <param name="pminw">[out][optional] - range of dimensions of all boxes</param>
'''  <param name="pminh">[out][optional] - range of dimensions of all boxes</param>
'''  <param name="pmaxw">[out][optional] - range of dimensions of all boxes</param>
'''  <param name="pmaxh">[out][optional] - range of dimensions of all boxes</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaaSizeRange(
				ByVal baa as Boxaa, 
				ByRef pminw as Integer, 
				ByRef pminh as Integer, 
				ByRef pmaxw as Integer, 
				ByRef pmaxh as Integer) as Integer

	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaaSizeRange( baa.Pointer, pminw, pminh, pmaxw, pmaxh)

	Return _Result
End Function

' SRC\boxfunc4.c (2598, 1)
' boxaSizeRange()
' boxaSizeRange(BOXA *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="pminw">[out][optional] - range of dimensions of box in the array</param>
'''  <param name="pminh">[out][optional] - range of dimensions of box in the array</param>
'''  <param name="pmaxw">[out][optional] - range of dimensions of box in the array</param>
'''  <param name="pmaxh">[out][optional] - range of dimensions of box in the array</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaSizeRange(
				ByVal boxa as Boxa, 
				ByRef pminw as Integer, 
				ByRef pminh as Integer, 
				ByRef pmaxw as Integer, 
				ByRef pmaxh as Integer) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaSizeRange( boxa.Pointer, pminw, pminh, pmaxw, pmaxh)

	Return _Result
End Function

' SRC\boxfunc4.c (2649, 1)
' boxaLocationRange()
' boxaLocationRange(BOXA *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="pminx">[out][optional] - range of UL corner positions</param>
'''  <param name="pminy">[out][optional] - range of UL corner positions</param>
'''  <param name="pmaxx">[out][optional] - range of UL corner positions</param>
'''  <param name="pmaxy">[out][optional] - range of UL corner positions</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaLocationRange(
				ByVal boxa as Boxa, 
				ByRef pminx as Integer, 
				ByRef pminy as Integer, 
				ByRef pmaxx as Integer, 
				ByRef pmaxy as Integer) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaLocationRange( boxa.Pointer, pminx, pminy, pmaxx, pmaxy)

	Return _Result
End Function

' SRC\boxfunc4.c (2700, 1)
' boxaGetSizes()
' boxaGetSizes(BOXA *, NUMA **, NUMA **) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="pnaw">[out][optional] - widths and heights of valid boxes</param>
'''  <param name="pnah">[out][optional] - widths and heights of valid boxes</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaGetSizes(
				ByVal boxa as Boxa, 
				ByRef pnaw as Numa, 
				ByRef pnah as Numa) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")

Dim pnawPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaw) Then pnawPTR = pnaw.Pointer
Dim pnahPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnah) Then pnahPTR = pnah.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.boxaGetSizes( boxa.Pointer, pnawPTR, pnahPTR)
	if pnawPTR <> IntPtr.Zero then pnaw = new Numa(pnawPTR)
	if pnahPTR <> IntPtr.Zero then pnah = new Numa(pnahPTR)

	Return _Result
End Function

' SRC\boxfunc4.c (2746, 1)
' boxaGetArea()
' boxaGetArea(BOXA *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Measures the total area of the boxes, without regard to overlaps.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="parea">[out] - total area of all boxes</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function boxaGetArea(
				ByVal boxa as Boxa, 
				ByRef parea as Integer) as Integer

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.boxaGetArea( boxa.Pointer, parea)

	Return _Result
End Function

' SRC\boxfunc4.c (2794, 1)
' boxaDisplayTiled()
' boxaDisplayTiled(BOXA *, PIXA *, l_int32, l_int32, l_float32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Displays each box separately in a tiled 32 bpp image.
''' (2) If pixa is defined, it must have the same count as the boxa,
''' and it will be a background over with each box is rendered.
''' If pixa is not defined, the boxes will be rendered over
''' blank images of identical size.
''' (3) See pixaDisplayTiledInRows() for other parameters.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - </param>
'''  <param name="pixa">[in][optional] - background for each box</param>
'''  <param name="maxwidth">[in] - of output image</param>
'''  <param name="linewidth">[in] - width of box outlines, before scaling</param>
'''  <param name="scalefactor">[in] - applied to every box; use 1.0 for no scaling</param>
'''  <param name="background">[in] - 0 for white, 1 for black; this is the color of the spacing between the images</param>
'''  <param name="spacing">[in] - between images, and on outside</param>
'''  <param name="border">[in] - width of black border added to each image; use 0 for no border</param>
'''   <returns>pixd of tiled images of boxes, or NULL on error</returns>
Public Shared Function boxaDisplayTiled(
				ByVal boxas as Boxa, 
				ByVal pixa as Pixa, 
				ByVal maxwidth as Integer, 
				ByVal linewidth as Integer, 
				ByVal scalefactor as Single, 
				ByVal background as Integer, 
				ByVal spacing as Integer, 
				ByVal border as Integer) as Pix

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")

	Dim pixaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixa) Then pixaPTR = pixa.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaDisplayTiled( boxas.Pointer, pixaPTR, maxwidth, linewidth, scalefactor, background, spacing, border)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\bytearray.c"
' SRC\bytearray.c (93, 1)
' l_byteaCreate()
' l_byteaCreate(size_t) as L_BYTEA *
'''  <summary>
''' Notes
''' (1) The allocated array is n + 1 bytes.  This allows room
''' for null termination.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nbytes">[in] - determines initial size of data array</param>
'''   <returns>l_bytea, or NULL on error</returns>
Public Shared Function l_byteaCreate(
				ByVal nbytes as UInteger) as L_Bytea



	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_byteaCreate( nbytes)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Bytea(_Result)
End Function

' SRC\bytearray.c (122, 1)
' l_byteaInitFromMem()
' l_byteaInitFromMem(const l_uint8 *, size_t) as L_BYTEA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - to be copied to the array</param>
'''  <param name="size">[in] - amount of data</param>
'''   <returns>l_bytea, or NULL on error</returns>
Public Shared Function l_byteaInitFromMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as L_Bytea

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_byteaInitFromMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Bytea(_Result)
End Function

' SRC\bytearray.c (149, 1)
' l_byteaInitFromFile()
' l_byteaInitFromFile(const char *) as L_BYTEA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - </param>
'''   <returns>l_bytea, or NULL on error</returns>
Public Shared Function l_byteaInitFromFile(
				ByVal fname as String) as L_Bytea

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_byteaInitFromFile( fname)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Bytea(_Result)
End Function

' SRC\bytearray.c (176, 1)
' l_byteaInitFromStream()
' l_byteaInitFromStream(FILE *) as L_BYTEA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>l_bytea, or NULL on error</returns>
Public Shared Function l_byteaInitFromStream(
				ByVal fp as FILE) as L_Bytea

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_byteaInitFromStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Bytea(_Result)
End Function

' SRC\bytearray.c (213, 1)
' l_byteaCopy()
' l_byteaCopy(L_BYTEA *, l_int32) as L_BYTEA *
'''  <summary>
''' Notes
''' (1) If cloning, up the refcount and return a ptr to %bas.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="bas">[in] - source lba</param>
'''  <param name="copyflag">[in] - L_COPY, L_CLONE</param>
'''   <returns>clone or copy of bas, or NULL on error</returns>
Public Shared Function l_byteaCopy(
				ByVal bas as L_Bytea, 
				ByVal copyflag as Enumerations.L_access_storage) as L_Bytea

	If IsNothing (bas) then Throw New ArgumentNullException  ("bas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_byteaCopy( bas.Pointer, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Bytea(_Result)
End Function

' SRC\bytearray.c (245, 1)
' l_byteaDestroy()
' l_byteaDestroy(L_BYTEA **) as void
'''  <summary>
''' Notes
''' (1) Decrements the ref count and, if 0, destroys the lba.
''' (2) Always nulls the input ptr.
''' (3) If the data has been previously removed, the lba will
''' have been nulled, so this will do nothing.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pba">[in,out] - will be set to null before returning</param>
Public Shared Sub l_byteaDestroy(
				ByRef pba as L_Bytea)


	Dim pbaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pba) Then pbaPTR = pba.Pointer

	LeptonicaSharp.Natives.l_byteaDestroy( pbaPTR)
	if pbaPTR <> IntPtr.Zero then pba = new L_Bytea(pbaPTR)

End Sub

' SRC\bytearray.c (281, 1)
' l_byteaGetSize()
' l_byteaGetSize(L_BYTEA *) as size_t
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ba">[in] - </param>
'''   <returns>size of stored byte array, or 0 on error</returns>
Public Shared Function l_byteaGetSize(
				ByVal ba as L_Bytea) as UInteger

	If IsNothing (ba) then Throw New ArgumentNullException  ("ba cannot be Nothing")


	Dim _Result as UInteger = LeptonicaSharp.Natives.l_byteaGetSize( ba.Pointer)

	Return _Result
End Function

' SRC\bytearray.c (304, 1)
' l_byteaGetData()
' l_byteaGetData(L_BYTEA *, size_t *) as l_uint8 *
'''  <summary>
''' Notes
''' (1) The returned ptr is owned by %ba.  Do not free it!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ba">[in] - </param>
'''  <param name="psize">[out] - size of data in lba</param>
'''   <returns>ptr to existing data array, or NULL on error</returns>
Public Shared Function l_byteaGetData(
				ByVal ba as L_Bytea, 
				ByRef psize as UInteger) as Byte()

	If IsNothing (ba) then Throw New ArgumentNullException  ("ba cannot be Nothing")


	Dim _Result as Byte() = LeptonicaSharp.Natives.l_byteaGetData( ba.Pointer, psize)

	Return _Result
End Function

' SRC\bytearray.c (333, 1)
' l_byteaCopyData()
' l_byteaCopyData(L_BYTEA *, size_t *) as l_uint8 *
'''  <summary>
''' Notes
''' (1) The returned data is owned by the caller.  The input %ba
''' still owns the original data array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ba">[in] - </param>
'''  <param name="psize">[out] - size of data in lba</param>
'''   <returns>copy of data in use in the data array, or NULL on error.</returns>
Public Shared Function l_byteaCopyData(
				ByVal ba as L_Bytea, 
				ByRef psize as UInteger) as Byte()

	If IsNothing (ba) then Throw New ArgumentNullException  ("ba cannot be Nothing")


	Dim _Result as Byte() = LeptonicaSharp.Natives.l_byteaCopyData( ba.Pointer, psize)

	Return _Result
End Function

' SRC\bytearray.c (363, 1)
' l_byteaAppendData()
' l_byteaAppendData(L_BYTEA *, const l_uint8 *, size_t) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ba">[in] - </param>
'''  <param name="newdata">[in] - byte array to be appended</param>
'''  <param name="newbytes">[in] - size of data array</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_byteaAppendData(
				ByVal ba as L_Bytea, 
				ByVal newdata as Byte(), 
				ByVal newbytes as UInteger) as Integer

	If IsNothing (ba) then Throw New ArgumentNullException  ("ba cannot be Nothing")
	If IsNothing (newdata) then Throw New ArgumentNullException  ("newdata cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_byteaAppendData( ba.Pointer, newdata, newbytes)

	Return _Result
End Function

' SRC\bytearray.c (396, 1)
' l_byteaAppendString()
' l_byteaAppendString(L_BYTEA *, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ba">[in] - </param>
'''  <param name="str">[in] - null-terminated string to be appended</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_byteaAppendString(
				ByVal ba as L_Bytea, 
				ByVal str as String) as Integer

	If IsNothing (ba) then Throw New ArgumentNullException  ("ba cannot be Nothing")
	If IsNothing (str) then Throw New ArgumentNullException  ("str cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_byteaAppendString( ba.Pointer, str)

	Return _Result
End Function

' SRC\bytearray.c (465, 1)
' l_byteaJoin()
' l_byteaJoin(L_BYTEA *, L_BYTEA **) as l_ok
'''  <summary>
''' Notes
''' (1) It is a no-op, not an error, for %ba2 to be null.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ba1">[in] - </param>
'''  <param name="pba2">[in,out] - data array is added to the one in ba1, and then ba2 is destroyed</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_byteaJoin(
				ByVal ba1 as L_Bytea, 
				ByRef pba2 as L_Bytea) as Integer

	If IsNothing (ba1) then Throw New ArgumentNullException  ("ba1 cannot be Nothing")

	Dim pba2PTR As IntPtr = IntPtr.Zero : If Not IsNothing(pba2) Then pba2PTR = pba2.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.l_byteaJoin( ba1.Pointer, pba2PTR)
	if pba2PTR <> IntPtr.Zero then pba2 = new L_Bytea(pba2PTR)

	Return _Result
End Function

' SRC\bytearray.c (497, 1)
' l_byteaSplit()
' l_byteaSplit(L_BYTEA *, size_t, L_BYTEA **) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ba1">[in] - lba to split; array bytes nulled beyond the split loc</param>
'''  <param name="splitloc">[in] - location in ba1 to split; ba2 begins there</param>
'''  <param name="pba2">[out] - with data starting at splitloc</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_byteaSplit(
				ByVal ba1 as L_Bytea, 
				ByVal splitloc as UInteger, 
				ByRef pba2 as L_Bytea) as Integer

	If IsNothing (ba1) then Throw New ArgumentNullException  ("ba1 cannot be Nothing")

	Dim pba2PTR As IntPtr = IntPtr.Zero : If Not IsNothing(pba2) Then pba2PTR = pba2.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.l_byteaSplit( ba1.Pointer, splitloc, pba2PTR)
	if pba2PTR <> IntPtr.Zero then pba2 = new L_Bytea(pba2PTR)

	Return _Result
End Function

' SRC\bytearray.c (540, 1)
' l_byteaFindEachSequence()
' l_byteaFindEachSequence(L_BYTEA *, const l_uint8 *, size_t, L_DNA **) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ba">[in] - </param>
'''  <param name="sequence">[in] - subarray of bytes to find in data</param>
'''  <param name="seqlen">[in] - length of sequence, in bytes</param>
'''  <param name="pda">[out] - byte positions of each occurrence of %sequence</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_byteaFindEachSequence(
				ByVal ba as L_Bytea, 
				ByVal sequence as Byte(), 
				ByVal seqlen as UInteger, 
				ByRef pda as L_Dna) as Integer

	If IsNothing (ba) then Throw New ArgumentNullException  ("ba cannot be Nothing")
	If IsNothing (sequence) then Throw New ArgumentNullException  ("sequence cannot be Nothing")

	Dim pdaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pda) Then pdaPTR = pda.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.l_byteaFindEachSequence( ba.Pointer, sequence, seqlen, pdaPTR)
	if pdaPTR <> IntPtr.Zero then pda = new L_Dna(pdaPTR)

	Return _Result
End Function

' SRC\bytearray.c (578, 1)
' l_byteaWrite()
' l_byteaWrite(const char *, L_BYTEA *, size_t, size_t) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - output file</param>
'''  <param name="ba">[in] - </param>
'''  <param name="startloc">[in] - first byte to output</param>
'''  <param name="endloc">[in] - last byte to output; use 0 to write to the end of the data array</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_byteaWrite(
				ByVal fname as String, 
				ByVal ba as L_Bytea, 
				ByVal startloc as UInteger, 
				ByVal endloc as UInteger) as Integer

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")
	If IsNothing (ba) then Throw New ArgumentNullException  ("ba cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_byteaWrite( fname, ba.Pointer, startloc, endloc)

	Return _Result
End Function

' SRC\bytearray.c (612, 1)
' l_byteaWriteStream()
' l_byteaWriteStream(FILE *, L_BYTEA *, size_t, size_t) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for binary write</param>
'''  <param name="ba">[in] - </param>
'''  <param name="startloc">[in] - first byte to output</param>
'''  <param name="endloc">[in] - last byte to output; use 0 to write to the end of the data array</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_byteaWriteStream(
				ByVal fp as FILE, 
				ByVal ba as L_Bytea, 
				ByVal startloc as UInteger, 
				ByVal endloc as UInteger) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (ba) then Throw New ArgumentNullException  ("ba cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_byteaWriteStream( fp.Pointer, ba.Pointer, startloc, endloc)

	Return _Result
End Function

#End Region
#Region "SRC\ccbord.c"
' SRC\ccbord.c (299, 1)
' ccbaCreate()
' ccbaCreate(PIX *, l_int32) as CCBORDA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - binary image; can be null</param>
'''  <param name="n">[in] - initial number of ptrs</param>
'''   <returns>ccba, or NULL on error</returns>
Public Shared Function ccbaCreate(
				ByVal pixs as Pix, 
				ByVal n as Integer) as CCBorda

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ccbaCreate( pixs.Pointer, n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new CCBorda(_Result)
End Function

' SRC\ccbord.c (332, 1)
' ccbaDestroy()
' ccbaDestroy(CCBORDA **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pccba">[in,out] - to be nulled</param>
Public Shared Sub ccbaDestroy(
				ByRef pccba as CCBorda)


	Dim pccbaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pccba) Then pccbaPTR = pccba.Pointer

	LeptonicaSharp.Natives.ccbaDestroy( pccbaPTR)
	if pccbaPTR <> IntPtr.Zero then pccba = new CCBorda(pccbaPTR)

End Sub

' SRC\ccbord.c (364, 1)
' ccbCreate()
' ccbCreate(PIX *) as CCBORD *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in][optional] - </param>
'''   <returns>ccb or NULL on error</returns>
Public Shared Function ccbCreate(
				ByVal pixs as Pix) as CCBord


	Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.ccbCreate( pixsPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new CCBord(_Result)
End Function

' SRC\ccbord.c (404, 1)
' ccbDestroy()
' ccbDestroy(CCBORD **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pccb">[in,out] - to be nulled</param>
Public Shared Sub ccbDestroy(
				ByRef pccb as CCBord)


	Dim pccbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pccb) Then pccbPTR = pccb.Pointer

	LeptonicaSharp.Natives.ccbDestroy( pccbPTR)
	if pccbPTR <> IntPtr.Zero then pccb = new CCBord(pccbPTR)

End Sub

' SRC\ccbord.c (454, 1)
' ccbaAddCcb()
' ccbaAddCcb(CCBORDA *, CCBORD *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ccba">[in] - </param>
'''  <param name="ccb">[in] - to be added by insertion</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ccbaAddCcb(
				ByVal ccba as CCBorda, 
				ByVal ccb as CCBord) as Integer

	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")
	If IsNothing (ccb) then Throw New ArgumentNullException  ("ccb cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ccbaAddCcb( ccba.Pointer, ccb.Pointer)

	Return _Result
End Function

' SRC\ccbord.c (510, 1)
' ccbaGetCount()
' ccbaGetCount(CCBORDA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ccba">[in] - </param>
'''   <returns>count, with 0 on error</returns>
Public Shared Function ccbaGetCount(
				ByVal ccba as CCBorda) as Integer

	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ccbaGetCount( ccba.Pointer)

	Return _Result
End Function

' SRC\ccbord.c (535, 1)
' ccbaGetCcb()
' ccbaGetCcb(CCBORDA *, l_int32) as CCBORD *
'''  <summary>
''' Notes
''' (1) This returns a clone of the ccb; it must be destroyed
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ccba">[in] - </param>
'''  <param name="index">[in] - </param>
'''   <returns>ccb, or NULL on error</returns>
Public Shared Function ccbaGetCcb(
				ByVal ccba as CCBorda, 
				ByVal index as Integer) as CCBord

	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ccbaGetCcb( ccba.Pointer, index)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new CCBord(_Result)
End Function

' SRC\ccbord.c (564, 1)
' pixGetAllCCBorders()
' pixGetAllCCBorders(PIX *) as CCBORDA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>ccborda, or NULL on error</returns>
Public Shared Function pixGetAllCCBorders(
				ByVal pixs as Pix) as CCBorda

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetAllCCBorders( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new CCBorda(_Result)
End Function

' SRC\ccbord.c (650, 1)
' pixGetCCBorders()
' pixGetCCBorders(PIX *, BOX *) as CCBORD *
'''  <summary>
''' Notes
''' (1) We are finding the exterior and interior borders
''' of an 8-connected component.   This should be used
''' on a pix that has exactly one 8-connected component.
''' (2) Typically, pixs is a c.c. in some larger pix.  The
''' input box gives its location in global coordinates.
''' This box is saved, as well as the boxes for the
''' borders of any holes within the c.c., but the latter
''' are given in relative coords within the c.c.
''' (3) The calculations for the exterior border are done
''' on a pix with a 1-pixel
''' added border, but the saved pixel coordinates
''' are the correct (relative) ones for the input pix
''' (without a 1-pixel border)
''' (4) For the definition of the three tables -- xpostab[], ypostab[]
''' and qpostab[] -- see above where they are defined.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, one 8-connected component</param>
'''  <param name="box">[in] - xul, yul, width, height in global coords</param>
'''   <returns>ccbord, or NULL on error</returns>
Public Shared Function pixGetCCBorders(
				ByVal pixs as Pix, 
				ByVal box as Box) as CCBord

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetCCBorders( pixs.Pointer, box.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new CCBord(_Result)
End Function

' SRC\ccbord.c (761, 1)
' pixGetOuterBordersPtaa()
' pixGetOuterBordersPtaa(PIX *) as PTAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>ptaa of outer borders, in global coords, or NULL on error</returns>
Public Shared Function pixGetOuterBordersPtaa(
				ByVal pixs as Pix) as Ptaa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetOuterBordersPtaa( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Ptaa(_Result)
End Function

' SRC\ccbord.c (821, 1)
' pixGetOuterBorderPta()
' pixGetOuterBorderPta(PIX *, BOX *) as PTA *
'''  <summary>
''' Notes
''' (1) We are finding the exterior border of a single 8-connected
''' component.
''' (2) If box is NULL, the outline returned is in the local coords
''' of the input pix.  Otherwise, box is assumed to give the
''' location of the pix in global coordinates, and the returned
''' pta will be in those global coordinates.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, one 8-connected component</param>
'''  <param name="box">[in][optional] - of pixs, in global coordinates</param>
'''   <returns>pta of outer border, in global coords, or NULL on error</returns>
Public Shared Function pixGetOuterBorderPta(
				ByVal pixs as Pix, 
				ByVal box as Box) as Pta

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetOuterBorderPta( pixs.Pointer, boxPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ccbord.c (894, 1)
' pixGetOuterBorder()
' pixGetOuterBorder(CCBORD *, PIX *, BOX *) as l_ok
'''  <summary>
''' Notes
''' (1) the border is saved in relative coordinates within
''' the c.c. (pixs).  Because the calculation is done
''' in pixb with added 1 pixel border, we must subtract
''' 1 from each pixel value before storing it.
''' (2) the stopping condition is that after the first pixel is
''' returned to, the next pixel is the second pixel.  Having
''' these 2 pixels recur in sequence proves the path is closed,
''' and we do not store the second pixel again.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ccb">[in] - unfilled</param>
'''  <param name="pixs">[in] - for the component at hand</param>
'''  <param name="box">[in] - for the component, in global coords</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetOuterBorder(
				ByVal ccb as CCBord, 
				ByVal pixs as Pix, 
				ByVal box as Box) as Integer

	If IsNothing (ccb) then Throw New ArgumentNullException  ("ccb cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetOuterBorder( ccb.Pointer, pixs.Pointer, box.Pointer)

	Return _Result
End Function

' SRC\ccbord.c (982, 1)
' pixGetHoleBorder()
' pixGetHoleBorder(CCBORD *, PIX *, BOX *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) we trace out hole border on pixs without addition
''' of single pixel added border to pixs
''' (2) therefore all coordinates are relative within the c.c. (pixs)
''' (3) same position tables and stopping condition as for
''' exterior borders
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ccb">[in] - the exterior border is already made</param>
'''  <param name="pixs">[in] - for the connected component at hand</param>
'''  <param name="box">[in] - for the specific hole border, in relative coordinates to the c.c.</param>
'''  <param name="xs">[in] - first pixel on hole border, relative to c.c.</param>
'''  <param name="ys">[in] - first pixel on hole border, relative to c.c.</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetHoleBorder(
				ByVal ccb as CCBord, 
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal xs as Integer, 
				ByVal ys as Integer) as Integer

	If IsNothing (ccb) then Throw New ArgumentNullException  ("ccb cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetHoleBorder( ccb.Pointer, pixs.Pointer, box.Pointer, xs, ys)

	Return _Result
End Function

' SRC\ccbord.c (1064, 1)
' findNextBorderPixel()
' findNextBorderPixel(l_int32, l_int32, l_uint32 *, l_int32, l_int32, l_int32, l_int32 *, l_int32 *, l_int32 *) as l_int32
'''  <summary>
''' Notes
''' (1) qpos increases clockwise from 0 to 7, with 0 at
''' location with Q to left of P   Q P
''' (2) this is a low-level function that does not check input
''' parameters.  All calling functions should check them.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="w">[in] - </param>
'''  <param name="h">[in] - </param>
'''  <param name="data">[in] - </param>
'''  <param name="wpl">[in] - </param>
'''  <param name="px">[in] - current P</param>
'''  <param name="py">[in] - current P</param>
'''  <param name="pqpos">[in,out] - input current Q; new Q</param>
'''  <param name="pnpx">[out] - new P</param>
'''  <param name="pnpy">[out] - new P</param>
'''   <returns>0 if next pixel found; 1 otherwise</returns>
Public Shared Function findNextBorderPixel(
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal data as Byte(), 
				ByVal wpl as Integer, 
				ByVal px as Integer, 
				ByVal py as Integer, 
				ByRef pqpos as Integer(), 
				ByRef pnpx as Integer, 
				ByRef pnpy as Integer) as Integer

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")

	Dim dataPTR As IntPtr = Marshal.AllocHGlobal(data.Count) : Marshal.Copy(data, 0, dataPTR, data.Length)

	Dim _Result as Integer = LeptonicaSharp.Natives.findNextBorderPixel( w, h, dataPTR, wpl, px, py, pqpos, pnpx, pnpy)

	Return _Result
End Function

' SRC\ccbord.c (1115, 1)
' locateOutsideSeedPixel()
' locateOutsideSeedPixel(l_int32, l_int32, l_int32, l_int32, l_int32 *, l_int32 *) as void
'''  <summary>
''' Notes
''' (1) the first and second pixels must be 8-adjacent,
''' so |dx| LT= 1 and |dy| LT= 1 and both dx and dy
''' cannot be 0.  There are 8 possible cases.
''' (2) the seed pixel is OUTSIDE the foreground of the c.c.
''' (3) these rules are for the situation where the INSIDE
''' of the c.c. is on the right as you follow the border
''' cw for an exterior border and ccw for a hole border.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpx">[in] - location of first pixel</param>
'''  <param name="fpy">[in] - location of first pixel</param>
'''  <param name="spx">[in] - location of second pixel</param>
'''  <param name="spy">[in] - location of second pixel</param>
'''  <param name="pxs">[out] - seed pixel to be returned</param>
'''  <param name="pys">[out] - seed pixel to be returned</param>
Public Shared Sub locateOutsideSeedPixel(
				ByVal fpx as Integer, 
				ByVal fpy as Integer, 
				ByVal spx as Integer, 
				ByVal spy as Integer, 
				ByRef pxs as Integer, 
				ByRef pys as Integer)



	LeptonicaSharp.Natives.locateOutsideSeedPixel( fpx, fpy, spx, spy, pxs, pys)

End Sub

' SRC\ccbord.c (1160, 1)
' ccbaGenerateGlobalLocs()
' ccbaGenerateGlobalLocs(CCBORDA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ccba">[in] - with local chain ptaa of borders computed</param>
'''   <returns>0 if OK, 1 on error Action this uses the pixel locs in the local ptaa, which are all relative to each c.c., to find the global pixel locations, and stores them in the global ptaa.</returns>
Public Shared Function ccbaGenerateGlobalLocs(
				ByVal ccba as CCBorda) as Integer

	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ccbaGenerateGlobalLocs( ccba.Pointer)

	Return _Result
End Function

' SRC\ccbord.c (1231, 1)
' ccbaGenerateStepChains()
' ccbaGenerateStepChains(CCBORDA *) as l_ok
'''  <summary>
''' Notes
''' (1) This uses the pixel locs in the local ptaa,
''' which are all relative to each c.c., to find
''' the step directions for successive pixels in
''' the chain, and stores them in the step numaa.
''' (2) To get the step direction, use
''' 1   2   3
''' 0   P   4
''' 7   6   5
''' where P is the previous pixel at (px, py).  The step direction
''' is the number (from 0 through 7) for each relative location
''' of the current pixel at (cx, cy).  It is easily found by
''' indexing into a 2-d 3x3 array (dirtab).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ccba">[in] - with local chain ptaa of borders computed</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ccbaGenerateStepChains(
				ByVal ccba as CCBorda) as Integer

	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ccbaGenerateStepChains( ccba.Pointer)

	Return _Result
End Function

' SRC\ccbord.c (1305, 1)
' ccbaStepChainsToPixCoords()
' ccbaStepChainsToPixCoords(CCBORDA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This uses the step chain data in each ccb to determine
''' the pixel locations, either global or local,
''' and stores them in the appropriate ptaa,
''' either global or local.  For the latter, the
''' pixel locations are relative to the c.c.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ccba">[in] - with step chains numaa of borders</param>
'''  <param name="coordtype">[in] - CCB_GLOBAL_COORDS or CCB_LOCAL_COORDS</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ccbaStepChainsToPixCoords(
				ByVal ccba as CCBorda, 
				ByVal coordtype as Enumerations.CCB_AL_COORDS) as Integer

	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ccbaStepChainsToPixCoords( ccba.Pointer, coordtype)

	Return _Result
End Function

' SRC\ccbord.c (1405, 1)
' ccbaGenerateSPGlobalLocs()
' ccbaGenerateSPGlobalLocs(CCBORDA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This calculates the splocal rep if not yet made.
''' (2) It uses the local pixel values in splocal, the single
''' path pta, which are all relative to each c.c., to find
''' the corresponding global pixel locations, and stores
''' them in the spglobal pta.
''' (3) This lists only the turning points it both makes a
''' valid svg file and is typically about half the size
''' when all border points are listed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ccba">[in] - </param>
'''  <param name="ptsflag">[in] - CCB_SAVE_ALL_PTS or CCB_SAVE_TURNING_PTS</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ccbaGenerateSPGlobalLocs(
				ByVal ccba as CCBorda, 
				ByVal ptsflag as Enumerations.CCB_SAVE_PTS) as Integer

	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ccbaGenerateSPGlobalLocs( ccba.Pointer, ptsflag)

	Return _Result
End Function

' SRC\ccbord.c (1522, 1)
' ccbaGenerateSinglePath()
' ccbaGenerateSinglePath(CCBORDA *) as l_ok
'''  <summary>
''' Notes
''' (1) Generates a single border in local pixel coordinates.
''' For each c.c., if there is just an outer border, copy it.
''' If there are also hole borders, for each hole border,
''' determine the smallest horizontal or vertical
''' distance from the border to the outside of the c.c.,
''' and find a path through the c.c. for this cut.
''' We do this in a way that guarantees a pixel from the
''' hole border is the starting point of the path, and
''' we must verify that the path intersects the outer
''' border (if it intersects it, then it ends on it).
''' One can imagine pathological cases, but they may not
''' occur in images of text characters and un-textured
''' line graphics.
''' (2) Once it is verified that the path through the c.c.
''' intersects both the hole and outer borders, we
''' generate the full single path for all borders in the
''' c.c.  Starting at the start point on the outer
''' border, when we hit a line on a cut, we take
''' the cut, do the hold border, and return on the cut
''' to the outer border.  We compose a pta of the
''' outer border pts that are on cut paths, and for
''' every point on the outer border (as we go around),
''' we check against this pta.  When we find a matching
''' point in the pta, we do its cut path and hole border.
''' The single path is saved in the ccb.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ccba">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ccbaGenerateSinglePath(
				ByVal ccba as CCBorda) as Integer

	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ccbaGenerateSinglePath( ccba.Pointer)

	Return _Result
End Function

' SRC\ccbord.c (1680, 1)
' getCutPathForHole()
' getCutPathForHole(PIX *, PTA *, BOX *, l_int32 *, l_int32 *) as PTA *
'''  <summary>
''' Notes
''' (1) If we don't find a path, we return a pta with no pts
''' in it and len = 0.
''' (2) The goal is to get a reasonably short path between the
''' inner and outer borders, that goes entirely within the fg of
''' the pix.  This function is cheap-and-dirty, may fail for some
''' holes in complex topologies such as those you might find in a
''' moderately dark scanned halftone.  If it fails to find a
''' path to any particular hole, it gives a warning, and because
''' that hole path is not included, the hole will not be rendered.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - of c.c.</param>
'''  <param name="pta">[in] - of outer border</param>
'''  <param name="boxinner">[in] - b.b. of hole path</param>
'''  <param name="pdir">[out] - direction (0-3), returned; only needed for debug</param>
'''  <param name="plen">[out] - length of path, returned</param>
'''   <returns>pta of pts on cut path from the hole border to the outer border, including end points on both borders; or NULL on error</returns>
Public Shared Function getCutPathForHole(
				ByVal pix as Pix, 
				ByVal pta as Pta, 
				ByVal boxinner as Box, 
				ByRef pdir as Integer, 
				ByRef plen as Integer) as Pta

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")
	If IsNothing (boxinner) then Throw New ArgumentNullException  ("boxinner cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.getCutPathForHole( pix.Pointer, pta.Pointer, boxinner.Pointer, pdir, plen)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ccbord.c (1828, 1)
' ccbaDisplayBorder()
' ccbaDisplayBorder(CCBORDA *) as PIX *
'''  <summary>
''' Notes
''' (1) Uses global ptaa, which gives each border pixel in
''' global coordinates, and must be computed in advance
''' by calling ccbaGenerateGlobalLocs().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ccba">[in] - </param>
'''   <returns>pix of border pixels, or NULL on error</returns>
Public Shared Function ccbaDisplayBorder(
				ByVal ccba as CCBorda) as Pix

	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ccbaDisplayBorder( ccba.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\ccbord.c (1881, 1)
' ccbaDisplaySPBorder()
' ccbaDisplaySPBorder(CCBORDA *) as PIX *
'''  <summary>
''' Notes
''' (1) Uses spglobal pta, which gives each border pixel in
''' global coordinates, one path per c.c., and must
''' be computed in advance by calling ccbaGenerateSPGlobalLocs().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ccba">[in] - </param>
'''   <returns>pix of border pixels, or NULL on error</returns>
Public Shared Function ccbaDisplaySPBorder(
				ByVal ccba as CCBorda) as Pix

	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ccbaDisplaySPBorder( ccba.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\ccbord.c (1971, 1)
' ccbaDisplayImage1()
' ccbaDisplayImage1(CCBORDA *) as PIX *
'''  <summary>
''' Notes
''' (1) Uses local ptaa, which gives each border pixel in
''' local coordinates, so the actual pixel positions must
''' be computed using all offsets.
''' (2) For the holes, use coordinates relative to the c.c.
''' (3) This is slower than Method 2.
''' (4) This uses topological properties (Method 1) to do scan
''' conversion to raster
''' This algorithm deserves some commentary.
''' I first tried the following
''' ~ outer borders 4-fill from outside, stopping at the
''' border, using pixFillClosedBorders()
''' ~ inner borders 4-fill from outside, stopping again
''' at the border, XOR with the border, and invert
''' to get the hole.  This did not work, because if
''' you have a hole border that looks like
''' x x x x x x
''' x x
''' x   x x x   x
''' x x o x   x
''' x  x
''' x  x
''' x x x
''' if you 4-fill from the outside, the pixel 'o' will
''' not be filled!  XORing with the border leaves it OFF.
''' Inverting then gives a single bad ON pixel that is not
''' actually part of the hole.
''' So what you must do instead is 4-fill the holes from inside.
''' You can do this from a seedfill, using a pix with the hole
''' border as the filling mask.  But you need to start with a
''' pixel inside the hole.  How is this determined?  The best
''' way is from the contour.  We have a right-hand shoulder
''' rule for inside (i.e., the filled region).   Take the
''' first 2 pixels of the hole border, and compute dx and dy
''' (second coord minus first coord  dx = sx - fx, dy = sy - fy).
''' There are 8 possibilities, depending on the values of dx and
''' dy (which can each be -1, 0, and +1, but not both 0).
''' These 8 cases can be broken into 4; see the simple algorithm below.
''' Once you have an interior seed pixel, you fill from the seed,
''' clipping with the hole border pix by filling into its invert.
''' You then successively XOR these interior filled components, in any order.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ccba">[in] - </param>
'''   <returns>pix of image, or NULL on error</returns>
Public Shared Function ccbaDisplayImage1(
				ByVal ccba as CCBorda) as Pix

	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ccbaDisplayImage1( ccba.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\ccbord.c (2097, 1)
' ccbaDisplayImage2()
' ccbaDisplayImage2(CCBORDA *) as PIX *
'''  <summary>
''' Notes
''' (1) Uses local chain ptaa, which gives each border pixel in
''' local coordinates, so the actual pixel positions must
''' be computed using all offsets.
''' (2) Treats exterior and hole borders on equivalent
''' footing, and does all calculations on a pix
''' that spans the c.c. with a 1 pixel added boundary.
''' (3) This uses topological properties (Method 2) to do scan
''' conversion to raster
''' (4) The algorithm is described at the top of this file (Method 2).
''' It is preferred to Method 1 because it is between 1.2x and 2x
''' faster than Method 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ccba">[in] - </param>
'''   <returns>pix of image, or NULL on error</returns>
Public Shared Function ccbaDisplayImage2(
				ByVal ccba as CCBorda) as Pix

	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ccbaDisplayImage2( ccba.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\ccbord.c (2195, 1)
' ccbaWrite()
' ccbaWrite(const char *, CCBORDA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="ccba">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ccbaWrite(
				ByVal filename as String, 
				ByVal ccba as CCBorda) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ccbaWrite( filename, ccba.Pointer)

	Return _Result
End Function

' SRC\ccbord.c (2247, 1)
' ccbaWriteStream()
' ccbaWriteStream(FILE *, CCBORDA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="ccba">[in] - </param>
'''   <returns>0 if OK; 1 on error Format \code ccba %7d cc\n num. c.c.) (ascii)   (18B pix width 4B pix height 4B [for i = 1, ncc] ulx  4B uly  4B w    4B       -- not req'd for reconstruction h    4B       -- not req'd for reconstruction number of borders 4B [for j = 1, nb] startx  4B starty  4B [for k = 1, nb] 2 steps 1B end in z8 or 88  1B \endcode</returns>
Public Shared Function ccbaWriteStream(
				ByVal fp as FILE, 
				ByVal ccba as CCBorda) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ccbaWriteStream( fp.Pointer, ccba.Pointer)

	Return _Result
End Function

' SRC\ccbord.c (2348, 1)
' ccbaRead()
' ccbaRead(const char *) as CCBORDA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>ccba, or NULL on error</returns>
Public Shared Function ccbaRead(
				ByVal filename as String) as CCBorda

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ccbaRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new CCBorda(_Result)
End Function

' SRC\ccbord.c (2394, 1)
' ccbaReadStream()
' ccbaReadStream(FILE *) as CCBORDA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>ccba, or NULL on error \code Format  ccba %7d cc\n num. c.c.) (ascii)   (17B pix width 4B pix height 4B [for i = 1, ncc] ulx  4B uly  4B w    4B       -- not req'd for reconstruction h    4B       -- not req'd for reconstruction number of borders 4B [for j = 1, nb] startx  4B starty  4B [for k = 1, nb] 2 steps 1B end in z8 or 88  1B \endcode</returns>
Public Shared Function ccbaReadStream(
				ByVal fp as FILE) as CCBorda

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ccbaReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new CCBorda(_Result)
End Function

' SRC\ccbord.c (2515, 1)
' ccbaWriteSVG()
' ccbaWriteSVG(const char *, CCBORDA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="ccba">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ccbaWriteSVG(
				ByVal filename as String, 
				ByVal ccba as CCBorda) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ccbaWriteSVG( filename, ccba.Pointer)

	Return _Result
End Function

' SRC\ccbord.c (2546, 1)
' ccbaWriteSVGString()
' ccbaWriteSVGString(const char *, CCBORDA *) as char *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="ccba">[in] - </param>
'''   <returns>string in svg-formatted, that can be written to file, or NULL on error.</returns>
Public Shared Function ccbaWriteSVGString(
				ByVal filename as String, 
				ByVal ccba as CCBorda) as String

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (ccba) then Throw New ArgumentNullException  ("ccba cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as String = LeptonicaSharp.Natives.ccbaWriteSVGString( filename, ccba.Pointer)

	Return _Result
End Function

#End Region
#Region "SRC\ccthin.c"
' SRC\ccthin.c (68, 1)
' pixaThinConnected()
' pixaThinConnected(PIXA *, l_int32, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) See notes in pixThinConnected().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - of 1 bpp pix</param>
'''  <param name="type">[in] - L_THIN_FG, L_THIN_BG</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="maxiters">[in] - max number of iters allowed; use 0 to iterate until completion</param>
'''   <returns>pixds, or NULL on error</returns>
Public Shared Function pixaThinConnected(
				ByVal pixas as Pixa, 
				ByVal type as Enumerations.L_THIN_G, 
				ByVal connectivity as Integer, 
				ByVal maxiters as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaThinConnected( pixas.Pointer, type, connectivity, maxiters)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\ccthin.c (158, 1)
' pixThinConnected()
' pixThinConnected(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See "Connectivity-preserving morphological image transformations,"
''' Dan S. Bloomberg, in SPIE Visual Communications and Image
''' Processing, Conference 1606, pp. 320-334, November 1991,
''' Boston, MA.   A web version is available at
''' http//www.leptonica.com/papers/conn.pdf
''' (2) This is a simple interface for two of the best iterative
''' morphological thinning algorithms, for 4-c.c and 8-c.c.
''' Each iteration uses a mixture of parallel operations
''' (using several different 3x3 Sels) and serial operations.
''' Specifically, each thinning iteration consists of
''' four sequential thinnings from each of four directions.
''' Each of these thinnings is a parallel composite
''' operation, where the union of a set of HMTs are set
''' subtracted from the input.  For 4-cc thinning, we
''' use 3 HMTs in parallel, and for 8-cc thinning we use 4 HMTs.
''' (3) A "good" thinning algorithm is one that generates a skeleton
''' that is near the medial axis and has neither pruned
''' real branches nor left extra dendritic branches.
''' (4) Duality between operations on fg and bg require switching
''' the connectivity.  To thin the foreground, which is the usual
''' situation, use type == L_THIN_FG.  Thickening the foreground
''' is equivalent to thinning the background (type == L_THIN_BG),
''' where the alternate connectivity gets preserved.
''' For example, to thicken the fg with 2 rounds of iterations
''' using 4-c.c., thin the bg using Sels that preserve 8-connectivity
''' Pix pix = pixThinConnected(pixs, L_THIN_BG, 8, 2);
''' (5) This makes and destroys the sela set each time. It's not a large
''' overhead, but if you are calling this thousands of times on
''' very small images, you can avoid the overhead; e.g.
''' Sela sela = selaMakeThinSets(1, 0);  // for 4-c.c.
''' Pix pix = pixThinConnectedBySet(pixs, L_THIN_FG, sela, 0);
''' using set 1 for 4-c.c. and set 5 for 8-c.c operations.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="type">[in] - L_THIN_FG, L_THIN_BG</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="maxiters">[in] - max number of iters allowed; use 0 to iterate until completion</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixThinConnected(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.L_THIN_G, 
				ByVal connectivity as Integer, 
				ByVal maxiters as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixThinConnected( pixs.Pointer, type, connectivity, maxiters)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\ccthin.c (220, 1)
' pixThinConnectedBySet()
' pixThinConnectedBySet(PIX *, l_int32, SELA *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See notes in pixThinConnected().
''' (2) This takes a sela representing one of 11 sets of HMT Sels.
''' The HMTs from this set are run in parallel and the result
''' is OR'd before being subtracted from the source.  For each
''' iteration, this "parallel" thin is performed four times
''' sequentially, for sels rotated by 90 degrees in all four
''' directions.
''' (3) The "parallel" and "sequential" nomenclature is standard
''' in digital filtering.  Here, "parallel" operations work on the
''' same source (pixd), and accumulate the results in a temp
''' image before actually applying them to the source (in this
''' case, using an in-place subtraction).  "Sequential" operations
''' operate directly on the source (pixd) to produce the result
''' (in this case, with four sequential thinning operations, one
''' from each of four directions).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="type">[in] - L_THIN_FG, L_THIN_BG</param>
'''  <param name="sela">[in] - of Sels for parallel composite HMTs</param>
'''  <param name="maxiters">[in] - max number of iters allowed; use 0 to iterate until completion</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixThinConnectedBySet(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.L_THIN_G, 
				ByVal sela as Sela, 
				ByVal maxiters as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixThinConnectedBySet( pixs.Pointer, type, sela.Pointer, maxiters)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\ccthin.c (341, 1)
' selaMakeThinSets()
' selaMakeThinSets(l_int32, l_int32) as SELA *
'''  <summary>
''' Notes
''' (1) These are specific sets of HMTs to be used in parallel for
''' for thinning from each of four directions.
''' (2) The sets are indexed as follows
''' For thinning (e.g., run to completion)
''' index = 1  sel_4_1, sel_4_2, sel_4_3
''' index = 2  sel_4_1, sel_4_5, sel_4_6
''' index = 3  sel_4_1, sel_4_7, sel_4_7_rot
''' index = 4  sel_48_1, sel_48_1_rot, sel_48_2
''' index = 5  sel_8_2, sel_8_3, sel_8_5, sel_8_6
''' index = 6  sel_8_2, sel_8_3, sel_48_2
''' index = 7  sel_8_1, sel_8_5, sel_8_6
''' index = 8  sel_8_2, sel_8_3, sel_8_8, sel_8_9
''' index = 9  sel_8_5, sel_8_6, sel_8_7, sel_8_7_rot
''' For thickening (e.g., just a few iterations)
''' index = 10 sel_4_2, sel_4_3
''' index = 11 sel_8_4
''' (3) For a very smooth skeleton, use set 1 for 4 connected and
''' set 5 for 8 connected thins.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="index">[in] - into specific sets</param>
'''  <param name="debug">[in] - 1 to output display of sela</param>
'''   <returns>sela, or NULL on error</returns>
Public Shared Function selaMakeThinSets(
				ByVal index as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Sela



	Dim _Result as IntPtr = LeptonicaSharp.Natives.selaMakeThinSets( index, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sela(_Result)
End Function

#End Region
#Region "SRC\classapp.c"
' SRC\classapp.c (96, 1)
' jbCorrelation()
' jbCorrelation(const char *, l_float32, l_float32, l_int32, const char *, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) The images must be 1 bpp.  If they are not, you can convert
''' them using convertFilesTo1bpp().
''' (2) See prog/jbcorrelation for generating more output (e.g.,
''' for debugging)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirin">[in] - directory of input images</param>
'''  <param name="thresh">[in] - typically ~0.8</param>
'''  <param name="weight">[in] - typically ~0.6</param>
'''  <param name="components">[in] - JB_CONN_COMPS, JB_CHARACTERS, JB_WORDS</param>
'''  <param name="rootname">[in] - for output files</param>
'''  <param name="firstpage">[in] - 0-based</param>
'''  <param name="npages">[in] - use 0 for all pages in dirin</param>
'''  <param name="renderflag">[in] - 1 to render from templates; 0 to skip</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function jbCorrelation(
				ByVal dirin as String, 
				ByVal thresh as Single, 
				ByVal weight as Single, 
				ByVal components as Enumerations.JB_S, 
				ByVal rootname as String, 
				ByVal firstpage as Integer, 
				ByVal npages as Integer, 
				ByVal renderflag as Integer) as Integer

	If IsNothing (dirin) then Throw New ArgumentNullException  ("dirin cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")
	If IsNothing (weight) then Throw New ArgumentNullException  ("weight cannot be Nothing")
	If IsNothing (rootname) then Throw New ArgumentNullException  ("rootname cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.jbCorrelation( dirin, thresh, weight, components, rootname, firstpage, npages, renderflag)

	Return _Result
End Function

' SRC\classapp.c (178, 1)
' jbRankHaus()
' jbRankHaus(const char *, l_int32, l_float32, l_int32, const char *, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) See prog/jbrankhaus for generating more output (e.g.,
''' for debugging)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirin">[in] - directory of input images</param>
'''  <param name="size">[in] - of Sel used for dilation; typ. 2</param>
'''  <param name="rank">[in] - rank value of match; typ. 0.97</param>
'''  <param name="components">[in] - JB_CONN_COMPS, JB_CHARACTERS, JB_WORDS</param>
'''  <param name="rootname">[in] - for output files</param>
'''  <param name="firstpage">[in] - 0-based</param>
'''  <param name="npages">[in] - use 0 for all pages in dirin</param>
'''  <param name="renderflag">[in] - 1 to render from templates; 0 to skip</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function jbRankHaus(
				ByVal dirin as String, 
				ByVal size as Integer, 
				ByVal rank as Single, 
				ByVal components as Enumerations.JB_S, 
				ByVal rootname as String, 
				ByVal firstpage as Integer, 
				ByVal npages as Integer, 
				ByVal renderflag as Integer) as Integer

	If IsNothing (dirin) then Throw New ArgumentNullException  ("dirin cannot be Nothing")
	If IsNothing (rank) then Throw New ArgumentNullException  ("rank cannot be Nothing")
	If IsNothing (rootname) then Throw New ArgumentNullException  ("rootname cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.jbRankHaus( dirin, size, rank, components, rootname, firstpage, npages, renderflag)

	Return _Result
End Function

' SRC\classapp.c (266, 1)
' jbWordsInTextlines()
' jbWordsInTextlines(const char *, l_int32, l_int32, l_int32, l_float32, l_float32, NUMA **, l_int32, l_int32) as JBCLASSER *
'''  <summary>
''' Notes
''' (1) This is a high-level function.  See prog/jbwords for example
''' of usage.
''' (2) Typically, use input of 75 - 150 ppi for finding words.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirin">[in] - directory of input pages</param>
'''  <param name="reduction">[in] - 1 for full res; 2 for half-res</param>
'''  <param name="maxwidth">[in] - of word mask components, to be kept</param>
'''  <param name="maxheight">[in] - of word mask components, to be kept</param>
'''  <param name="thresh">[in] - on correlation; 0.80 is reasonable</param>
'''  <param name="weight">[in] - for handling thick text; 0.6 is reasonable</param>
'''  <param name="pnatl">[out] - numa with textline index for each component</param>
'''  <param name="firstpage">[in] - 0-based</param>
'''  <param name="npages">[in] - use 0 for all pages in dirin</param>
'''   <returns>classer for the set of pages</returns>
Public Shared Function jbWordsInTextlines(
				ByVal dirin as String, 
				ByVal reduction as Integer, 
				ByVal maxwidth as Integer, 
				ByVal maxheight as Integer, 
				ByVal thresh as Single, 
				ByVal weight as Single, 
				ByRef pnatl as Numa, 
				ByVal firstpage as Integer, 
				ByVal npages as Integer) as JbClasser

	If IsNothing (dirin) then Throw New ArgumentNullException  ("dirin cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")
	If IsNothing (weight) then Throw New ArgumentNullException  ("weight cannot be Nothing")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("1 for full res; 2 for half-res")

	Dim pnatlPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnatl) Then pnatlPTR = pnatl.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.jbWordsInTextlines( dirin, reduction, maxwidth, maxheight, thresh, weight, pnatlPTR, firstpage, npages)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnatlPTR <> IntPtr.Zero then pnatl = new Numa(pnatlPTR)

	Return  new JbClasser(_Result)
End Function

' SRC\classapp.c (378, 1)
' pixGetWordsInTextlines()
' pixGetWordsInTextlines(PIX *, l_int32, l_int32, l_int32, l_int32, BOXA **, PIXA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) The input should be at a resolution of between 75 and 150 ppi.
''' (2) The four size constraints on saved components are all
''' scaled by %reduction.
''' (3) The result are word images (and their b.b.), extracted in
''' textline order, at either full res or 2x reduction,
''' and with a numa giving the textline index for each word.
''' (4) The pixa and boxa interfaces should make this type of
''' application simple to put together.  The steps are
''' ~ generate first estimate of word masks
''' ~ get b.b. of these, and remove the small and big ones
''' ~ extract pixa of the word images, using the b.b.
''' ~ sort actual word images in textline order (2d)
''' ~ flatten them to a pixa (1d), saving the textline index
''' for each pix
''' (5) In an actual application, it may be desirable to pre-filter
''' the input image to remove large components, to extract
''' single columns of text, and to deskew them.  For example,
''' to remove both large components and small noisy components
''' that can interfere with the statistics used to estimate
''' parameters for segmenting by words, but still retain text lines,
''' the following image preprocessing can be done
''' Pix pixt = pixMorphSequence(pixs, "c40.1", 0);
''' Pix pixf = pixSelectBySize(pixt, 0, 60, 8,
''' L_SELECT_HEIGHT, L_SELECT_IF_LT, NULL);
''' pixAnd(pixf, pixf, pixs);  // the filtered image
''' The closing turns text lines into long blobs, but does not
''' significantly increase their height.  But if there are many
''' small connected components in a dense texture, this is likely
''' to generate tall components that will be eliminated in pixf.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, typ. 75 - 150 ppi</param>
'''  <param name="minwidth">[in] - of saved components; smaller are discarded</param>
'''  <param name="minheight">[in] - of saved components; smaller are discarded</param>
'''  <param name="maxwidth">[in] - of saved components; larger are discarded</param>
'''  <param name="maxheight">[in] - of saved components; larger are discarded</param>
'''  <param name="pboxad">[out] - word boxes sorted in textline line order</param>
'''  <param name="ppixad">[out] - word images sorted in textline line order</param>
'''  <param name="pnai">[out] - index of textline for each word</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetWordsInTextlines(
				ByVal pixs as Pix, 
				ByVal minwidth as Integer, 
				ByVal minheight as Integer, 
				ByVal maxwidth as Integer, 
				ByVal maxheight as Integer, 
				ByRef pboxad as Boxa, 
				ByRef ppixad as Pixa, 
				ByRef pnai as Numa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pboxadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxad) Then pboxadPTR = pboxad.Pointer
	Dim ppixadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixad) Then ppixadPTR = ppixad.Pointer
	Dim pnaiPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnai) Then pnaiPTR = pnai.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetWordsInTextlines( pixs.Pointer, minwidth, minheight, maxwidth, maxheight, pboxadPTR, ppixadPTR, pnaiPTR)
	if pboxadPTR <> IntPtr.Zero then pboxad = new Boxa(pboxadPTR)
	if ppixadPTR <> IntPtr.Zero then ppixad = new Pixa(ppixadPTR)
	if pnaiPTR <> IntPtr.Zero then pnai = new Numa(pnaiPTR)

	Return _Result
End Function

' SRC\classapp.c (453, 1)
' pixGetWordBoxesInTextlines()
' pixGetWordBoxesInTextlines(PIX *, l_int32, l_int32, l_int32, l_int32, BOXA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) The input should be at a resolution of between 75 and 150 ppi.
''' (2) This is a special version of pixGetWordsInTextlines(), that
''' just finds the word boxes in line order, with a numa
''' giving the textline index for each word.
''' See pixGetWordsInTextlines() for more details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, typ. 300 ppi</param>
'''  <param name="minwidth">[in] - of saved components; smaller are discarded</param>
'''  <param name="minheight">[in] - of saved components; smaller are discarded</param>
'''  <param name="maxwidth">[in] - of saved components; larger are discarded</param>
'''  <param name="maxheight">[in] - of saved components; larger are discarded</param>
'''  <param name="pboxad">[out] - word boxes sorted in textline line order</param>
'''  <param name="pnai">[out][optional] - index of textline for each word</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetWordBoxesInTextlines(
				ByVal pixs as Pix, 
				ByVal minwidth as Integer, 
				ByVal minheight as Integer, 
				ByVal maxwidth as Integer, 
				ByVal maxheight as Integer, 
				ByRef pboxad as Boxa, 
				ByRef pnai as Numa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pboxadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxad) Then pboxadPTR = pboxad.Pointer
Dim pnaiPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnai) Then pnaiPTR = pnai.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetWordBoxesInTextlines( pixs.Pointer, minwidth, minheight, maxwidth, maxheight, pboxadPTR, pnaiPTR)
	if pboxadPTR <> IntPtr.Zero then pboxad = new Boxa(pboxadPTR)
	if pnaiPTR <> IntPtr.Zero then pnai = new Numa(pnaiPTR)

	Return _Result
End Function

' SRC\classapp.c (515, 1)
' boxaExtractSortedPattern()
' boxaExtractSortedPattern(BOXA *, NUMA *) as NUMAA *
'''  <summary>
''' Notes
''' (1) The input is expected to come from pixGetWordBoxesInTextlines().
''' (2) Each numa in the output consists of an average y coordinate
''' of the first box in the textline, followed by pairs of
''' x coordinates representing the left and right edges of each
''' of the boxes in the textline.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - typ. of word bounding boxes, in textline order</param>
'''  <param name="na">[in] - index of textline for each box in boxa</param>
'''   <returns>naa NUMAA, where each numa represents one textline, or NULL on error</returns>
Public Shared Function boxaExtractSortedPattern(
				ByVal boxa as Boxa, 
				ByVal na as Numa) as Numaa

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaExtractSortedPattern( boxa.Pointer, na.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numaa(_Result)
End Function

' SRC\classapp.c (603, 1)
' numaaCompareImagesByBoxes()
' numaaCompareImagesByBoxes(NUMAA *, NUMAA *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32 *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Each input numaa describes a set of sorted bounding boxes
''' (sorted by textline and, within each textline, from
''' left to right) in the images from which they are derived.
''' See boxaExtractSortedPattern() for a description of the data
''' format in each of the input numaa.
''' (2) This function does an alignment between the input
''' descriptions of bounding boxes for two images. The
''' input parameter %nperline specifies the number of boxes
''' to consider in each line when testing for a match, and
''' %nreq is the required number of lines that must be well-aligned
''' to get a match.
''' (3) Testing by alignment has 3 steps
''' (a) Generating the location of word bounding boxes from the
''' images (prior to calling this function).
''' (b) Listing all possible pairs of aligned rows, based on
''' tolerances in horizontal and vertical positions of
''' the boxes.  Specifically, all pairs of rows are enumerated
''' whose first %nperline boxes can be brought into close
''' alignment, based on the delx parameter for boxes in the
''' line and within the overall the %maxshiftx and %maxshifty
''' constraints.
''' (c) Each pair, starting with the first, is used to search
''' for a set of %nreq - 1 other pairs that can all be aligned
''' with a difference in global translation of not more
''' than (%delx, %dely).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa1">[in] - for image 1, formatted by boxaExtractSortedPattern()</param>
'''  <param name="naa2">[in] - ditto; for image 2</param>
'''  <param name="nperline">[in] - number of box regions to be used in each textline</param>
'''  <param name="nreq">[in] - number of complete row matches required</param>
'''  <param name="maxshiftx">[in] - max allowed x shift between two patterns, in pixels</param>
'''  <param name="maxshifty">[in] - max allowed y shift between two patterns, in pixels</param>
'''  <param name="delx">[in] - max allowed difference in x data, after alignment</param>
'''  <param name="dely">[in] - max allowed difference in y data, after alignment</param>
'''  <param name="psame">[out] - 1 if %nreq row matches are found; 0 otherwise</param>
'''  <param name="debugflag">[in] - 1 for debug output</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaaCompareImagesByBoxes(
				ByVal naa1 as Numaa, 
				ByVal naa2 as Numaa, 
				ByVal nperline as Integer, 
				ByVal nreq as Integer, 
				ByVal maxshiftx as Integer, 
				ByVal maxshifty as Integer, 
				ByVal delx as Integer, 
				ByVal dely as Integer, 
				ByRef psame as Integer, 
				ByVal debugflag as Integer) as Integer

	If IsNothing (naa1) then Throw New ArgumentNullException  ("naa1 cannot be Nothing")
	If IsNothing (naa2) then Throw New ArgumentNullException  ("naa2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaaCompareImagesByBoxes( naa1.Pointer, naa2.Pointer, nperline, nreq, maxshiftx, maxshifty, delx, dely, psame, debugflag)

	Return _Result
End Function

#End Region
#Region "SRC\colorcontent.c"
' SRC\colorcontent.c (179, 1)
' pixColorContent()
' pixColorContent(PIX *, l_int32, l_int32, l_int32, l_int32, PIX **, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This returns the color content in each component, which is
''' a measure of the deviation from gray, and is defined
''' as the difference between the component and the average of
''' the other two components.  See the discussion at the
''' top of this file.
''' (2) The three numbers (rwhite, gwhite and bwhite) can be thought
''' of as the values in the image corresponding to white.
''' They are used to compensate for an unbalanced color white point.
''' They must either be all 0 or all non-zero.  To turn this
''' off, set them all to 0.
''' (3) If the maximum component after white point correction,
''' max(r,g,b), is less than mingray, all color components
''' for that pixel are set to zero.
''' Use mingray = 0 to turn off this filtering of dark pixels.
''' (4) Therefore, use 0 for all four input parameters if the color
''' magnitude is to be calculated without either white balance
''' correction or dark filtering.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb or 8 bpp colormapped</param>
'''  <param name="rwhite">[in] - color value associated with white point</param>
'''  <param name="gwhite">[in] - color value associated with white point</param>
'''  <param name="bwhite">[in] - color value associated with white point</param>
'''  <param name="mingray">[in] - min gray value for which color is measured</param>
'''  <param name="ppixr">[out][optional] - 8 bpp red 'content'</param>
'''  <param name="ppixg">[out][optional] - 8 bpp green 'content'</param>
'''  <param name="ppixb">[out][optional] - 8 bpp blue 'content'</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixColorContent(
				ByVal pixs as Pix, 
				ByVal rwhite as Integer, 
				ByVal gwhite as Integer, 
				ByVal bwhite as Integer, 
				ByVal mingray as Integer, 
				ByRef ppixr as Pix, 
				ByRef ppixg as Pix, 
				ByRef ppixb as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim ppixrPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixr) Then ppixrPTR = ppixr.Pointer
Dim ppixgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixg) Then ppixgPTR = ppixg.Pointer
Dim ppixbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixb) Then ppixbPTR = ppixb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixColorContent( pixs.Pointer, rwhite, gwhite, bwhite, mingray, ppixrPTR, ppixgPTR, ppixbPTR)
	if ppixrPTR <> IntPtr.Zero then ppixr = new Pix(ppixrPTR)
	if ppixgPTR <> IntPtr.Zero then ppixg = new Pix(ppixgPTR)
	if ppixbPTR <> IntPtr.Zero then ppixb = new Pix(ppixbPTR)

	Return _Result
End Function

' SRC\colorcontent.c (363, 1)
' pixColorMagnitude()
' pixColorMagnitude(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) For an RGB image, a gray pixel is one where all three components
''' are equal.  We define the amount of color in an RGB pixel as
''' a function depending on the absolute value of the differences
''' between the three color components.  Consider the two largest
''' of these differences.  The pixel component in common to these
''' two differences is the color farthest from the other two.
''' The color magnitude in an RGB pixel can be taken as one
''' of these three definitions
''' (a) The average of these two differences.  This is the
''' average distance from the two components that are
''' nearest to each other to the third component.
''' (b) The minimum value of these two differences.  This is
''' the intermediate value of the three distances between
''' component values.  Stated otherwise, it is the
''' maximum over all components of the minimum distance
''' from that component to the other two components.
''' (c) The maximum difference between component values.
''' (2) As an example, suppose that R and G are the closest in
''' magnitude.  Then the color is determined as either
''' (a) The average distance of B from these two
''' (|B - R| + |B - G|) / 2
''' (b) The minimum distance of B from these two
''' min(|B - R|, |B - G|).
''' (c) The maximum distance of B from these two
''' max(|B - R|, |B - G|)
''' (3) The three methods for choosing the color magnitude from
''' the components are selected with these flags
''' (a) L_MAX_DIFF_FROM_AVERAGE_2
''' (b) L_MAX_MIN_DIFF_FROM_2
''' (c) L_MAX_DIFF
''' (4) The three numbers (rwhite, gwhite and bwhite) can be thought
''' of as the values in the image corresponding to white.
''' They are used to compensate for an unbalanced color white point.
''' They must either be all 0 or all non-zero.  To turn this
''' off, set them all to 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb or 8 bpp colormapped</param>
'''  <param name="rwhite">[in] - color value associated with white point</param>
'''  <param name="gwhite">[in] - color value associated with white point</param>
'''  <param name="bwhite">[in] - color value associated with white point</param>
'''  <param name="type">[in] - chooses the method for calculating the color magnitude L_MAX_DIFF_FROM_AVERAGE_2, L_MAX_MIN_DIFF_FROM_2, L_MAX_DIFF</param>
'''   <returns>pixd 8 bpp, amount of color in each source pixel, or NULL on error</returns>
Public Shared Function pixColorMagnitude(
				ByVal pixs as Pix, 
				ByVal rwhite as Integer, 
				ByVal gwhite as Integer, 
				ByVal bwhite as Integer, 
				ByVal type as Enumerations.L_MAX) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixColorMagnitude( pixs.Pointer, rwhite, gwhite, bwhite, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorcontent.c (502, 1)
' pixMaskOverColorPixels()
' pixMaskOverColorPixels(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The generated mask identifies each pixel as either color or
''' non-color.  For a pixel to be color, it must satisfy two
''' constraints
''' (a) The max difference between the r,g and b components must
''' equal or exceed a threshold %threshdiff.
''' (b) It must be at least %mindist (in an 8-connected way)
''' from the nearest non-color pixel.
''' (2) The distance constraint (b) is only applied if %mindist GT 1.
''' For example, if %mindist == 2, the color pixels identified
''' by (a) are eroded by a 3x3 Sel.  In general, the Sel size
''' for erosion is 2  (%mindist - 1) + 1.
''' Why have this constraint?  In scanned images that are
''' essentially gray, color artifacts are typically introduced
''' in transition regions near sharp edges that go from dark
''' to light, so this allows these transition regions to be removed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb or 8 bpp colormapped</param>
'''  <param name="threshdiff">[in] - threshold for minimum of the max difference between components</param>
'''  <param name="mindist">[in] - minimum allowed distance from nearest non-color pixel</param>
'''   <returns>pixd 1 bpp, mask over color pixels, or NULL on error</returns>
Public Shared Function pixMaskOverColorPixels(
				ByVal pixs as Pix, 
				ByVal threshdiff as Integer, 
				ByVal mindist as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMaskOverColorPixels( pixs.Pointer, threshdiff, mindist)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorcontent.c (569, 1)
' pixMaskOverColorRange()
' pixMaskOverColorRange(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb or 8 bpp colormapped</param>
'''  <param name="rmin">[in] - min and max allowed values for red component</param>
'''  <param name="rmax">[in] - min and max allowed values for red component</param>
'''  <param name="gmin">[in] - </param>
'''  <param name="gmax">[in] - </param>
'''  <param name="bmin">[in] - </param>
'''  <param name="bmax">[in] - </param>
'''   <returns>pixd 1 bpp, mask over color pixels, or NULL on error</returns>
Public Shared Function pixMaskOverColorRange(
				ByVal pixs as Pix, 
				ByVal rmin as Integer, 
				ByVal rmax as Integer, 
				ByVal gmin as Integer, 
				ByVal gmax as Integer, 
				ByVal bmin as Integer, 
				ByVal bmax as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMaskOverColorRange( pixs.Pointer, rmin, rmax, gmin, gmax, bmin, bmax)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorcontent.c (678, 1)
' pixColorFraction()
' pixColorFraction(PIX *, l_int32, l_int32, l_int32, l_int32, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This function is asking the question to what extent does the
''' image appear to have color?   The amount of color a pixel
''' appears to have depends on both the deviation of the
''' individual components from their average and on the average
''' intensity itself.  For example, the color will be much more
''' obvious with a small deviation from white than the same
''' deviation from black.
''' (2) Any pixel that meets these three tests is considered a
''' colorful pixel
''' (a) the lightest component must equal or exceed %darkthresh
''' (b) the darkest component must not exceed %lightthresh
''' (c) the max difference between components must equal or
''' exceed %diffthresh.
''' (3) The dark pixels are removed from consideration because
''' they don't appear to have color.
''' (4) The very lightest pixels are removed because if an image
''' has a lot of "white", the color fraction will be artificially
''' low, even if all the other pixels are colorful.
''' (5) If pixfract is very small, there are few pixels that are neither
''' black nor white.  If colorfract is very small, the pixels
''' that are neither black nor white have very little color
''' content.  The product 'pixfract  colorfract' gives the
''' fraction of pixels with significant color content.
''' (6) One use of this function is as a preprocessing step for median
''' cut quantization (colorquant2.c), which does a very poor job
''' splitting the color space into rectangular volume elements when
''' all the pixels are near the diagonal of the color cube.  For
''' octree quantization of an image with only gray values, the
''' 2^(level) octcubes on the diagonal are the only ones
''' that can be occupied.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="darkthresh">[in] - threshold near black; if the lightest component is below this, the pixel is not considered in the statistics; typ. 20</param>
'''  <param name="lightthresh">[in] - threshold near white; if the darkest component is above this, the pixel is not considered in the statistics; typ. 244</param>
'''  <param name="diffthresh">[in] - thresh for the maximum difference between component value; below this the pixel is not considered to have sufficient color</param>
'''  <param name="factor">[in] - subsampling factor</param>
'''  <param name="ppixfract">[out] - fraction of pixels in intermediate brightness range that were considered for color content</param>
'''  <param name="pcolorfract">[out] - fraction of pixels that meet the criterion for sufficient color; 0.0 on error</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixColorFraction(
				ByVal pixs as Pix, 
				ByVal darkthresh as Integer, 
				ByVal lightthresh as Integer, 
				ByVal diffthresh as Integer, 
				ByVal factor as Integer, 
				ByRef ppixfract as Single(), 
				ByRef pcolorfract as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixColorFraction( pixs.Pointer, darkthresh, lightthresh, diffthresh, factor, ppixfract, pcolorfract)

	Return _Result
End Function

' SRC\colorcontent.c (805, 1)
' pixFindColorRegions()
' pixFindColorRegions(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_float32, l_float32 *, PIX **, PIX **, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) This function tries to determine if there is a significant
''' color or darker region on a scanned page image, where part
''' of the image is background that is either white or reddish.
''' This also allows extraction of regions of colored pixels that
''' have a smaller red component than blue or green components.
''' (2) If %pixm exists, pixels under its fg are combined with
''' dark pixels to make a mask of pixels not to be considered
''' as color candidates.
''' (3) There are four thresholds.
''' %lightthresh compute the average value of each rgb pixel,
''' and make 10 buckets by value.  If the lightest bucket gray
''' value is below %lightthresh, the image is not considered
''' to have a light bg, and this returns 0.0 for %colorfract.
''' %darkthresh ignore pixels darker than this (typ. fg text).
''' We make a 1 bpp mask of these pixels, and then dilate it to
''' remove all vestiges of fg from their vicinity.
''' %mindiff consider pixels with either (b - r) or (g - r)
''' being at least this value, as having color.
''' %colordiff consider pixels where the (max - min) difference
''' of the pixel components exceeds this value, as having color.
''' (4) All components of color pixels that are touching the image
''' border are removed.  Additionally, all pixels within some
''' normalized distance %edgefract from the image border can
''' be removed.  This insures that dark pixels near the edge
''' of the image are not included.
''' (5) This returns in %pcolorfract the fraction of pixels that have
''' color and are not in the set consisting of an OR between
''' %pixm and the dilated dark pixel mask.
''' (6) No masks are returned unless light color pixels are found.
''' If colorfract GT 0.0 and %pcolormask1 is defined, this returns
''' a 1 bpp mask with fg pixels over the color background.
''' This mask may have some holes in it.
''' (7) If colorfract GT 0.0 and %pcolormask2 is defined, this returns
''' a version of colormask1 where small holes have been filled.
''' (8) To generate a boxa of rectangular regions from the overlap
''' of components in the filtered mask
''' boxa1 = pixConnCompBB(colormask2, 8);
''' boxa2 = boxaCombineOverlaps(boxa1, NULL);
''' This is done here in debug mode.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask image</param>
'''  <param name="factor">[in] - subsample factor; integer GT= 1</param>
'''  <param name="lightthresh">[in] - threshold for component average in lightest of 10 buckets; typ. 210; -1 for default</param>
'''  <param name="darkthresh">[in] - threshold to eliminate dark pixels (e.g., text) from consideration; typ. 70; -1 for default.</param>
'''  <param name="mindiff">[in] - minimum difference (b - r) and (g - r), used to find blue or green pixels; typ. 10; -1 for default</param>
'''  <param name="colordiff">[in] - minimum difference in (max - min) component to qualify as a color pixel; typ. 90; -1 for default</param>
'''  <param name="edgefract">[in] - fraction of image half-width and half-height for which color pixels are ignored; typ. 0.05.</param>
'''  <param name="pcolorfract">[out] - fraction of 'color' pixels found</param>
'''  <param name="pcolormask1">[out][optional] - mask over background color, if any</param>
'''  <param name="pcolormask2">[out][optional] - filtered mask over background color</param>
'''  <param name="pixadb">[out][optional] - debug intermediate results</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFindColorRegions(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal factor as Integer, 
				ByVal lightthresh as Integer, 
				ByVal darkthresh as Integer, 
				ByVal mindiff as Integer, 
				ByVal colordiff as Integer, 
				ByVal edgefract as Single, 
				ByRef pcolorfract as Single(), 
				ByRef pcolormask1 as Pix, 
				ByRef pcolormask2 as Pix, 
				ByRef pixadb as Pixa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (edgefract) then Throw New ArgumentNullException  ("edgefract cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer
Dim pcolormask1PTR As IntPtr = IntPtr.Zero : If Not IsNothing(pcolormask1) Then pcolormask1PTR = pcolormask1.Pointer
Dim pcolormask2PTR As IntPtr = IntPtr.Zero : If Not IsNothing(pcolormask2) Then pcolormask2PTR = pcolormask2.Pointer
	Dim pixadbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixadb) Then pixadbPTR = pixadb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindColorRegions( pixs.Pointer, pixmPTR, factor, lightthresh, darkthresh, mindiff, colordiff, edgefract, pcolorfract, pcolormask1PTR, pcolormask2PTR, pixadbPTR)
	if pcolormask1PTR <> IntPtr.Zero then pcolormask1 = new Pix(pcolormask1PTR)
	if pcolormask2PTR <> IntPtr.Zero then pcolormask2 = new Pix(pcolormask2PTR)
	if pixadbPTR <> IntPtr.Zero then pixadb = new Pixa(pixadbPTR)

	Return _Result
End Function

' SRC\colorcontent.c (1022, 1)
' pixNumSignificantGrayColors()
' pixNumSignificantGrayColors(PIX *, l_int32, l_int32, l_float32, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This function is asking the question how many perceptually
''' significant gray color levels is in this pix?
''' A color level must meet 3 criteria to be significant
''' ~ it can't be too close to black
''' ~ it can't be too close to white
''' ~ it must have at least some minimum fractional population
''' (2) Use -1 for default values for darkthresh, lightthresh and minfract.
''' (3) Choose default of darkthresh = 20, because variations in very
''' dark pixels are not visually significant.
''' (4) Choose default of lightthresh = 236, because document images
''' that have been jpeg'd typically have near-white pixels in the
''' 8x8 jpeg blocks, and these should not be counted.  It is desirable
''' to obtain a clean image by quantizing this noise away.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp gray</param>
'''  <param name="darkthresh">[in] - dark threshold for minimum intensity to be considered; typ. 20</param>
'''  <param name="lightthresh">[in] - threshold near white, for maximum intensity to be considered; typ. 236</param>
'''  <param name="minfract">[in] - minimum fraction of all pixels to include a level as significant; typ. 0.0001; should be LT 0.001</param>
'''  <param name="factor">[in] - subsample factor; integer GT= 1</param>
'''  <param name="pncolors">[out] - number of significant colors; 0 on error</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixNumSignificantGrayColors(
				ByVal pixs as Pix, 
				ByVal darkthresh as Integer, 
				ByVal lightthresh as Integer, 
				ByVal minfract as Single, 
				ByVal factor as Integer, 
				ByRef pncolors as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (minfract) then Throw New ArgumentNullException  ("minfract cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixNumSignificantGrayColors( pixs.Pointer, darkthresh, lightthresh, minfract, factor, pncolors)

	Return _Result
End Function

' SRC\colorcontent.c (1145, 1)
' pixColorsForQuantization()
' pixColorsForQuantization(PIX *, l_int32, l_int32 *, l_int32 *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This function finds a measure of the number of colors that are
''' found in low-gradient regions of an image.  By its
''' magnitude relative to some threshold (not specified in
''' this function), it gives a good indication of whether
''' quantization will generate posterization.   This number
''' is larger for images with regions of slowly varying
''' intensity (if 8 bpp) or color (if rgb). Such images, if
''' quantized, may require dithering to avoid posterization,
''' and lossless compression is then expected to be poor.
''' (2) If pixs has a colormap, the number of colors returned is
''' the number in the colormap.
''' (3) It is recommended that document images be reduced to a width
''' of 800 pixels before applying this function.  Then it can
''' be expected that color detection will be fairly accurate
''' and the number of colors will reflect both the content and
''' the type of compression to be used.  For less than 15 colors,
''' there is unlikely to be a halftone image, and lossless
''' quantization should give both a good visual result and
''' better compression.
''' (4) When using the default threshold on the gradient (15),
''' images (both gray and rgb) where ncolors is greater than
''' about 15 will compress poorly with either lossless
''' compression or dithered quantization, and they may be
''' posterized with non-dithered quantization.
''' (5) For grayscale images, or images without significant color,
''' this returns the number of significant gray levels in
''' the low-gradient regions.  The actual number of gray levels
''' can be large due to jpeg compression noise in the background.
''' (6) Similarly, for color images, the actual number of different
''' (r,g,b) colors in the low-gradient regions (rather than the
''' number of occupied level 4 octcubes) can be quite large, e.g.,
''' due to jpeg compression noise, even for regions that appear
''' to be of a single color.  By quantizing to level 4 octcubes,
''' most of these superfluous colors are removed from the counting.
''' (7) The image is tested for color.  If there is very little color,
''' it is thresholded to gray and the number of gray levels in
''' the low gradient regions is found.  If the image has color,
''' the number of occupied level 4 octcubes is found.
''' (8) The number of colors in the low-gradient regions increases
''' monotonically with the threshold %thresh on the edge gradient.
''' (9) Background grayscale and color quantization is often useful
''' to achieve highly compressed images with little visible
''' distortion.  However, gray or color washes (regions of
''' low gradient) can defeat this approach to high compression.
''' How can one determine if an image is expected to compress
''' well using gray or color quantization?  We use the fact that
''' gray washes, when quantized with less than 50 intensities,
''' have posterization (visible boundaries between regions
''' of uniform 'color') and poor lossless compression
''' color washes, when quantized with level 4 octcubes,
''' typically result in both posterization and the occupancy
''' of many level 4 octcubes.
''' Images can have colors either intrinsically or as jpeg
''' compression artifacts.  This function reduces but does not
''' completely eliminate measurement of jpeg quantization noise
''' in the white background of grayscale or color images.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp gray or 32 bpp rgb; with or without colormap</param>
'''  <param name="thresh">[in] - binary threshold on edge gradient; 0 for default</param>
'''  <param name="pncolors">[out] - the number of colors found</param>
'''  <param name="piscolor">[out][optional] - 1 if significant color is found; 0 otherwise.  If pixs is 8 bpp, and does not have a colormap with color entries, this is 0</param>
'''  <param name="debug">[in] - 1 to output masked image that is tested for colors; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function pixColorsForQuantization(
				ByVal pixs as Pix, 
				ByVal thresh as Integer, 
				ByRef pncolors as Integer, 
				ByRef piscolor as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixColorsForQuantization( pixs.Pointer, thresh, pncolors, piscolor, debug)

	Return _Result
End Function

' SRC\colorcontent.c (1287, 1)
' pixNumColors()
' pixNumColors(PIX *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This returns the actual number of colors found in the image,
''' even if there is a colormap.  If %factor == 1 and the
''' number of colors differs from the number of entries
''' in the colormap, a warning is issued.
''' (2) Use %factor == 1 to find the actual number of colors.
''' Use %factor GT 1 to quickly find the approximate number of colors.
''' (3) For d = 2, 4 or 8 bpp grayscale, this returns the number
''' of colors found in the image in 'ncolors'.
''' (4) For d = 32 bpp (rgb), if the number of colors is
''' greater than 256, this returns 0 in 'ncolors'.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2, 4, 8, 32 bpp</param>
'''  <param name="factor">[in] - subsampling factor; integer</param>
'''  <param name="pncolors">[out] - the number of colors found, or 0 if there are more than 256</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function pixNumColors(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByRef pncolors as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixNumColors( pixs.Pointer, factor, pncolors)

	Return _Result
End Function

' SRC\colorcontent.c (1395, 1)
' pixGetMostPopulatedColors()
' pixGetMostPopulatedColors(PIX *, l_int32, l_int32, l_int32, l_uint32 **, PIXCMAP **) as l_ok
'''  <summary>
''' Notes
''' (1) This finds the %ncolors most populated cubes in rgb colorspace,
''' where the cube size depends on %sigbits as
''' cube side = (256 GTGT sigbits)
''' (2) The rgb color components are found at the center of the cube.
''' (3) The output array of colors can be displayed using
''' pixDisplayColorArray(array, ncolors, ...);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="sigbits">[in] - 2-6, significant bits retained in the quantizer for each component of the input image</param>
'''  <param name="factor">[in] - subsampling factor; use 1 for no subsampling</param>
'''  <param name="ncolors">[in] - the number of most populated colors to select</param>
'''  <param name="parray">[out][optional] - array of colors, each as 0xrrggbb00</param>
'''  <param name="pcmap">[out][optional] - colormap of the colors</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetMostPopulatedColors(
				ByVal pixs as Pix, 
				ByVal sigbits as Integer, 
				ByVal factor as Integer, 
				ByVal ncolors as Integer, 
				ByRef parray as Byte(), 
				ByRef pcmap as PixColormap) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim parrayPTR As IntPtr = IntPtr.Zero
Dim pcmapPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pcmap) Then pcmapPTR = pcmap.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetMostPopulatedColors( pixs.Pointer, sigbits, factor, ncolors, parrayPTR, pcmapPTR)
	ReDim parray(IIf(1 > 0, 1, 1) - 1) : If parrayPTR <> IntPtr.Zero Then Marshal.Copy(parrayPTR, parray, 0, parray.count)
	if pcmapPTR <> IntPtr.Zero then pcmap = new PixColormap(pcmapPTR)

	Return _Result
End Function

' SRC\colorcontent.c (1470, 1)
' pixSimpleColorQuantize()
' pixSimpleColorQuantize(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If you want to do color quantization for real, use octcube
''' or modified median cut.  This function shows that it is
''' easy to make a simple quantizer based solely on the population
''' in cells of a given size in rgb color space.
''' (2) The %ncolors most populated cells at the %sigbits level form
''' the colormap for quantizing, and this uses octcube indexing
''' under the covers to assign each pixel to the nearest color.
''' (3) %sigbits is restricted to 2, 3 and 4.  At the low end, the
''' color discrimination is very crude; at the upper end, a set of
''' similar colors can dominate the result.  Interesting results
''' are generally found for %sigbits = 3 and ncolors ~ 20.
''' (4) See also pixColorSegment() for a method of quantizing the
''' colors to generate regions of similar color.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="sigbits">[in] - 2-4, significant bits retained in the quantizer for each component of the input image</param>
'''  <param name="factor">[in] - subsampling factor; use 1 for no subsampling</param>
'''  <param name="ncolors">[in] - the number of most populated colors to select</param>
'''   <returns>pixd 8 bpp cmapped or NULL on error</returns>
Public Shared Function pixSimpleColorQuantize(
				ByVal pixs as Pix, 
				ByVal sigbits as Integer, 
				ByVal factor as Integer, 
				ByVal ncolors as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSimpleColorQuantize( pixs.Pointer, sigbits, factor, ncolors)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorcontent.c (1516, 1)
' pixGetRGBHistogram()
' pixGetRGBHistogram(PIX *, l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) This uses a simple, fast method of indexing into an rgb image.
''' (2) The output is a 1D histogram of count vs. rgb-index, which
''' uses red sigbits as the most significant and blue as the least.
''' (3) This function produces the same result as pixMedianCutHisto().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="sigbits">[in] - 2-6, significant bits retained in the quantizer for each component of the input image</param>
'''  <param name="factor">[in] - subsampling factor; use 1 for no subsampling</param>
'''   <returns>numa histogram of colors, indexed by RGB components, or NULL on error</returns>
Public Shared Function pixGetRGBHistogram(
				ByVal pixs as Pix, 
				ByVal sigbits as Integer, 
				ByVal factor as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetRGBHistogram( pixs.Pointer, sigbits, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\colorcontent.c (1584, 1)
' makeRGBIndexTables()
' makeRGBIndexTables(l_uint32 **, l_uint32 **, l_uint32 **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) These tables are used to map from rgb sample values to
''' an rgb index, using
''' rgbindex = rtab[rval] | gtab[gval] | btab[bval]
''' where, e.g., if sigbits = 3, the index is a 9 bit integer
''' r7 r6 r5 g7 g6 g5 b7 b6 b5
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="prtab">[out] - 256-entry index tables</param>
'''  <param name="pgtab">[out] - 256-entry index tables</param>
'''  <param name="pbtab">[out] - 256-entry index tables</param>
'''  <param name="sigbits">[in] - 2-6, significant bits retained in the quantizer for each component of the input image</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function makeRGBIndexTables(
				ByRef prtab as Byte(), 
				ByRef pgtab as Byte(), 
				ByRef pbtab as Byte(), 
				ByVal sigbits as Integer) as Integer


	Dim prtabPTR As IntPtr = IntPtr.Zero
	Dim pgtabPTR As IntPtr = IntPtr.Zero
	Dim pbtabPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.makeRGBIndexTables( prtabPTR, pgtabPTR, pbtabPTR, sigbits)
	ReDim prtab(IIf(1 > 0, 1, 1) - 1) : If prtabPTR <> IntPtr.Zero Then Marshal.Copy(prtabPTR, prtab, 0, prtab.count)
	ReDim pgtab(IIf(1 > 0, 1, 1) - 1) : If pgtabPTR <> IntPtr.Zero Then Marshal.Copy(pgtabPTR, pgtab, 0, pgtab.count)
	ReDim pbtab(IIf(1 > 0, 1, 1) - 1) : If pbtabPTR <> IntPtr.Zero Then Marshal.Copy(pbtabPTR, pbtab, 0, pbtab.count)

	Return _Result
End Function

' SRC\colorcontent.c (1674, 1)
' getRGBFromIndex()
' getRGBFromIndex(l_uint32, l_int32, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The %index is expressed in bits, based on the the
''' %sigbits of the r, g and b components, as
''' r7 r6 ... g7 g6 ... b7 b6 ...
''' (2) The computed rgb values are in the center of the quantized cube.
''' The extra bit that is OR'd accomplishes this.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="index">[in] - rgbindex</param>
'''  <param name="sigbits">[in] - 2-6, significant bits retained in the quantizer for each component of the input image</param>
'''  <param name="prval">[out] - rgb values</param>
'''  <param name="pgval">[out] - rgb values</param>
'''  <param name="pbval">[out] - rgb values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function getRGBFromIndex(
				ByVal index as UInteger, 
				ByVal sigbits as Integer, 
				ByRef prval as Integer, 
				ByRef pgval as Integer, 
				ByRef pbval as Integer) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.getRGBFromIndex( index, sigbits, prval, pgval, pbval)

	Return _Result
End Function

' SRC\colorcontent.c (1757, 1)
' pixHasHighlightRed()
' pixHasHighlightRed(PIX *, l_int32, l_float32, l_float32, l_int32 *, l_float32 *, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) Pixels are identified as red if they satisfy two conditions
''' (a) The components satisfy (R-B)/B GT %fthresh   (red or dark fg)
''' (b) The red component satisfied R GT 128  (red or light bg)
''' Masks are generated for (a) and (b), and the intersection
''' gives the pixels that are red but not either light bg or
''' dark fg.
''' (2) A typical value for fract = 0.0001, which gives sensitivity
''' to an image where a small fraction of the pixels are printed
''' in red.
''' (3) A typical value for fthresh = 2.5.  Higher values give less
''' sensitivity to red, and fewer false positives.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="factor">[in] - subsampling; an integer GT= 1; use 1 for all pixels</param>
'''  <param name="fract">[in] - threshold fraction of all image pixels</param>
'''  <param name="fthresh">[in] - threshold on a function of the components; typ. ~2.5</param>
'''  <param name="phasred">[out] - 1 if red pixels are above threshold</param>
'''  <param name="pratio">[out][optional] - normalized fraction of threshold red pixels that is actually observed</param>
'''  <param name="ppixdb">[out][optional] - seed pixel mask</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixHasHighlightRed(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByVal fract as Single, 
				ByVal fthresh as Single, 
				ByRef phasred as Integer, 
				ByRef pratio as Single(), 
				ByRef ppixdb as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If IsNothing (fthresh) then Throw New ArgumentNullException  ("fthresh cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

Dim ppixdbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdb) Then ppixdbPTR = ppixdb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixHasHighlightRed( pixs.Pointer, factor, fract, fthresh, phasred, pratio, ppixdbPTR)
	if ppixdbPTR <> IntPtr.Zero then ppixdb = new Pix(ppixdbPTR)

	Return _Result
End Function

#End Region
#Region "SRC\coloring.c"
' SRC\coloring.c (126, 1)
' pixColorGrayRegions()
' pixColorGrayRegions(PIX *, BOXA *, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This generates a new image, where some of the pixels in each
''' box in the boxa are colorized.  See pixColorGray() for usage
''' with %type and %thresh.  Note that %thresh is only used for
''' rgb; it is ignored for colormapped images.
''' (2) If the input image is colormapped, the new image will be 8 bpp
''' colormapped if possible; otherwise, it will be converted
''' to 32 bpp rgb.  Only pixels that are strictly gray will be
''' colorized.
''' (3) If the input image is not colormapped, it is converted to rgb.
''' A "gray" value for a pixel is determined by averaging the
''' components, and the output rgb value is determined from this.
''' (4) This can be used in conjunction with pixHasHighlightRed() to
''' add highlight color to a grayscale image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2, 4 or 8 bpp gray, rgb, or colormapped</param>
'''  <param name="boxa">[in] - of regions in which to apply color</param>
'''  <param name="type">[in] - L_PAINT_LIGHT, L_PAINT_DARK</param>
'''  <param name="thresh">[in] - average value below/above which pixel is unchanged</param>
'''  <param name="rval">[in] - new color to paint</param>
'''  <param name="gval">[in] - new color to paint</param>
'''  <param name="bval">[in] - new color to paint</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixColorGrayRegions(
				ByVal pixs as Pix, 
				ByVal boxa as Boxa, 
				ByVal type as Enumerations.L_PAINT, 
				ByVal thresh as Integer, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixColorGrayRegions( pixs.Pointer, boxa.Pointer, type, thresh, rval, gval, bval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\coloring.c (227, 1)
' pixColorGray()
' pixColorGray(PIX *, BOX *, l_int32, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place operation; pixs is modified.
''' If pixs is colormapped, the operation will add colors to the
''' colormap.  Otherwise, pixs will be converted to 32 bpp rgb if
''' it is initially 8 bpp gray.
''' (2) If type == L_PAINT_LIGHT, it colorizes non-black pixels,
''' preserving antialiasing.
''' If type == L_PAINT_DARK, it colorizes non-white pixels,
''' preserving antialiasing.
''' (3) If box is NULL, applies function to the entire image; otherwise,
''' clips the operation to the intersection of the box and pix.
''' (4) If colormapped, calls pixColorGrayCmap(), which applies the
''' coloring algorithm only to pixels that are strictly gray.
''' (5) For RGB, determines a "gray" value by averaging; then uses this
''' value, plus the input rgb target, to generate the output
''' pixel values.
''' (6) thresh is only used for rgb; it is ignored for colormapped pix.
''' If type == L_PAINT_LIGHT, use thresh = 0 if all pixels are to
''' be colored (black pixels will be unaltered).
''' In situations where there are a lot of black pixels,
''' setting thresh GT 0 will make the function considerably
''' more efficient without affecting the final result.
''' If type == L_PAINT_DARK, use thresh = 255 if all pixels
''' are to be colored (white pixels will be unaltered).
''' In situations where there are a lot of white pixels,
''' setting thresh LT 255 will make the function considerably
''' more efficient without affecting the final result.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp gray, rgb or colormapped image</param>
'''  <param name="box">[in][optional] - region in which to apply color; can be NULL</param>
'''  <param name="type">[in] - L_PAINT_LIGHT, L_PAINT_DARK</param>
'''  <param name="thresh">[in] - average value below/above which pixel is unchanged</param>
'''  <param name="rval">[in] - new color to paint</param>
'''  <param name="gval">[in] - new color to paint</param>
'''  <param name="bval">[in] - new color to paint</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixColorGray(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal type as Enumerations.L_PAINT, 
				ByVal thresh as Integer, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixColorGray( pixs.Pointer, boxPTR, type, thresh, rval, gval, bval)

	Return _Result
End Function

' SRC\coloring.c (353, 1)
' pixColorGrayMasked()
' pixColorGrayMasked(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This generates a new image, where some of the pixels under
''' FG in the mask are colorized.
''' (2) See pixColorGray() for usage with %type and %thresh.  Note
''' that %thresh is only used for rgb; it is ignored for
''' colormapped images.  In most cases, the mask will be over
''' the darker parts and %type == L_PAINT_DARK.
''' (3) If pixs is colormapped this calls pixColorMaskedCmap(),
''' which adds colors to the colormap for pixd; it only adds
''' colors corresponding to strictly gray colors in the colormap.
''' Otherwise, if pixs is 8 bpp gray, pixd will be 32 bpp rgb.
''' (4) If pixs is 32 bpp rgb, for each pixel a "gray" value is
''' found by averaging.  This average is then used with the
''' input rgb target to generate the output pixel values.
''' (5) This can be used in conjunction with pixHasHighlightRed() to
''' add highlight color to a grayscale image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp gray, rgb or colormapped image</param>
'''  <param name="pixm">[in] - 1 bpp mask, through which to apply color</param>
'''  <param name="type">[in] - L_PAINT_LIGHT, L_PAINT_DARK</param>
'''  <param name="thresh">[in] - average value below/above which pixel is unchanged</param>
'''  <param name="rval">[in] - new color to paint</param>
'''  <param name="gval">[in] - new color to paint</param>
'''  <param name="bval">[in] - new color to paint</param>
'''   <returns>pixd colorized, or NULL on error</returns>
Public Shared Function pixColorGrayMasked(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal type as Enumerations.L_PAINT, 
				ByVal thresh as Integer, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixColorGrayMasked( pixs.Pointer, pixm.Pointer, type, thresh, rval, gval, bval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\coloring.c (478, 1)
' pixSnapColor()
' pixSnapColor(PIX *, PIX *, l_uint32, l_uint32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) For inplace operation, call it this way
''' pixSnapColor(pixs, pixs, ... )
''' (2) For generating a new pixd
''' pixd = pixSnapColor(NULL, pixs, ...)
''' (3) If pixs has a colormap, it is handled by pixSnapColorCmap().
''' (4) All pixels within 'diff' of 'srcval', componentwise,
''' will be changed to 'dstval'.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; either NULL or equal to pixs for in-place</param>
'''  <param name="pixs">[in] - colormapped or 8 bpp gray or 32 bpp rgb</param>
'''  <param name="srcval">[in] - color center to be selected for change 0xrrggbb00</param>
'''  <param name="dstval">[in] - target color for pixels 0xrrggbb00</param>
'''  <param name="diff">[in] - max absolute difference, applied to all components</param>
'''   <returns>pixd with all pixels within diff of pixval set to pixval, or pixd on error</returns>
Public Shared Function pixSnapColor(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal srcval as UInteger, 
				ByVal dstval as UInteger, 
				ByVal diff as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSnapColor( pixdPTR, pixs.Pointer, srcval, dstval, diff)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\coloring.c (565, 1)
' pixSnapColorCmap()
' pixSnapColorCmap(PIX *, PIX *, l_uint32, l_uint32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) For inplace operation, call it this way
''' pixSnapCcmap(pixs, pixs, ... )
''' (2) For generating a new pixd
''' pixd = pixSnapCmap(NULL, pixs, ...)
''' (3) pixs must have a colormap.
''' (4) All colors within 'diff' of 'srcval', componentwise,
''' will be changed to 'dstval'.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; either NULL or equal to pixs for in-place</param>
'''  <param name="pixs">[in] - colormapped</param>
'''  <param name="srcval">[in] - color center to be selected for change 0xrrggbb00</param>
'''  <param name="dstval">[in] - target color for pixels 0xrrggbb00</param>
'''  <param name="diff">[in] - max absolute difference, applied to all components</param>
'''   <returns>pixd with all pixels within diff of srcval set to dstval, or pixd on error</returns>
Public Shared Function pixSnapColorCmap(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal srcval as UInteger, 
				ByVal dstval as UInteger, 
				ByVal diff as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSnapColorCmap( pixdPTR, pixs.Pointer, srcval, dstval, diff)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\coloring.c (681, 1)
' pixLinearMapToTargetColor()
' pixLinearMapToTargetColor(PIX *, PIX *, l_uint32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) For each component (r, b, g) separately, this does a piecewise
''' linear mapping of the colors in pixs to colors in pixd.
''' If rs and rd are the red src and dest components in %srcval and
''' %dstval, then the range [0 ... rs] in pixs is mapped to
''' [0 ... rd] in pixd.  Likewise, the range [rs ... 255] in pixs
''' is mapped to [rd ... 255] in pixd.  And similarly for green
''' and blue.
''' (2) The mapping will in general change the hue of the pixels.
''' However, if the src and dst targets are related by
''' a transformation given by pixelFractionalShift(), the hue
''' is invariant.
''' (3) For inplace operation, call it this way
''' pixLinearMapToTargetColor(pixs, pixs, ... )
''' (4) For generating a new pixd
''' pixd = pixLinearMapToTargetColor(NULL, pixs, ...)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; either NULL or equal to pixs for in-place</param>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="srcval">[in] - source color 0xrrggbb00</param>
'''  <param name="dstval">[in] - target color 0xrrggbb00</param>
'''   <returns>pixd with all pixels mapped based on the srcval/destval mapping, or pixd on error</returns>
Public Shared Function pixLinearMapToTargetColor(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal srcval as UInteger, 
				ByVal dstval as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixLinearMapToTargetColor( pixdPTR, pixs.Pointer, srcval, dstval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\coloring.c (778, 1)
' pixelLinearMapToTargetColor()
' pixelLinearMapToTargetColor(l_uint32, l_uint32, l_uint32, l_uint32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This does this does a piecewise linear mapping of each
''' component of %scolor to %dcolor, based on the relation
''' between the components of %srcmap and %dstmap.  It is the
''' same transformation, performed on a single color, as mapped
''' on every pixel in a pix by pixLinearMapToTargetColor().
''' (2) For each component, if the sval is larger than the smap,
''' the dval will be pushed up from dmap towards white.
''' Otherwise, dval will be pushed down from dmap towards black.
''' This is because you can visualize the transformation as
''' a linear stretching where smap moves to dmap, and everything
''' else follows linearly with 0 and 255 fixed.
''' (3) The mapping will in general change the hue of %scolor.
''' However, if the %srcmap and %dstmap targets are related by
''' a transformation given by pixelFractionalShift(), the hue
''' will be invariant.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="scolor">[in] - rgb source color 0xrrggbb00</param>
'''  <param name="srcmap">[in] - source mapping color 0xrrggbb00</param>
'''  <param name="dstmap">[in] - target mapping color 0xrrggbb00</param>
'''  <param name="pdcolor">[out] - rgb dest color 0xrrggbb00</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixelLinearMapToTargetColor(
				ByVal scolor as UInteger, 
				ByVal srcmap as UInteger, 
				ByVal dstmap as UInteger, 
				ByRef pdcolor as UInteger) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.pixelLinearMapToTargetColor( scolor, srcmap, dstmap, pdcolor)

	Return _Result
End Function

' SRC\coloring.c (863, 1)
' pixShiftByComponent()
' pixShiftByComponent(PIX *, PIX *, l_uint32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) For each component (r, b, g) separately, this does a linear
''' mapping of the colors in pixs to colors in pixd.
''' Let rs and rd be the red src and dest components in %srcval and
''' %dstval, and rval is the red component of the src pixel.
''' Then for all pixels in pixs, the mapping for the red
''' component from pixs to pixd is
''' if (rd LT= rs)   (shift toward black)
''' rval --GT (rd/rs)  rval
''' if (rd GT rs) (shift toward white)
''' (255 - rval) --GT ((255 - rs)/(255 - rd))  (255 - rval)
''' Thus if rd LT= rs, the red component of all pixels is
''' mapped by the same fraction toward white, and if rd GT rs,
''' they are mapped by the same fraction toward black.
''' This is essentially a different linear TRC (gamma = 1)
''' for each component.  The source and target color inputs are
''' just used to generate the three fractions.
''' (2) Note that this mapping differs from that in
''' pixLinearMapToTargetColor(), which maps rs --GT rd and does
''' a piecewise stretching in between.
''' (3) For inplace operation, call it this way
''' pixFractionalShiftByComponent(pixs, pixs, ... )
''' (4) For generating a new pixd
''' pixd = pixLinearMapToTargetColor(NULL, pixs, ...)
''' (5) A simple application is to color a grayscale image.
''' A light background can be colored using srcval = 0xffffff00
''' and picking a target background color for dstval.
''' A dark foreground can be colored by using srcval = 0x0
''' and choosing a target foreground color for dstval.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; either NULL or equal to pixs for in-place</param>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="srcval">[in] - source color 0xrrggbb00</param>
'''  <param name="dstval">[in] - target color 0xrrggbb00</param>
'''   <returns>pixd with all pixels mapped based on the srcval/destval mapping, or pixd on error</returns>
Public Shared Function pixShiftByComponent(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal srcval as UInteger, 
				ByVal dstval as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixShiftByComponent( pixdPTR, pixs.Pointer, srcval, dstval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\coloring.c (964, 1)
' pixelShiftByComponent()
' pixelShiftByComponent(l_int32, l_int32, l_int32, l_uint32, l_uint32, l_uint32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This is a linear transformation that gives the same result
''' on a single pixel as pixShiftByComponent() gives
''' on a pix.  Each component is handled separately.  If
''' the dest component is larger than the src, then the
''' component is pushed toward 255 by the same fraction as
''' the src --GT dest shift.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''  <param name="srcval">[in] - source color 0xrrggbb00</param>
'''  <param name="dstval">[in] - target color 0xrrggbb00</param>
'''  <param name="ppixel">[out] - rgb value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixelShiftByComponent(
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByVal srcval as UInteger, 
				ByVal dstval as UInteger, 
				ByRef ppixel as UInteger) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.pixelShiftByComponent( rval, gval, bval, srcval, dstval, ppixel)

	Return _Result
End Function

' SRC\coloring.c (1023, 1)
' pixelFractionalShift()
' pixelFractionalShift(l_int32, l_int32, l_int32, l_float32, l_uint32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This transformation leaves the hue invariant, while changing
''' the saturation and intensity.  It can be used for that
''' purpose in pixLinearMapToTargetColor().
''' (2) %fraction is in the range [-1 .... +1].  If %fraction LT 0,
''' saturation is increased and brightness is reduced.  The
''' opposite results if %fraction GT 0.  If %fraction == -1,
''' the resulting pixel is black; %fraction == 1 results in white.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''  <param name="fraction">[in] - negative toward black; positive toward white</param>
'''  <param name="ppixel">[out] - rgb value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixelFractionalShift(
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByVal fraction as Single, 
				ByRef ppixel as UInteger) as Integer

	If IsNothing (fraction) then Throw New ArgumentNullException  ("fraction cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixelFractionalShift( rval, gval, bval, fraction, ppixel)

	Return _Result
End Function

#End Region
#Region "SRC\colormap.c"
' SRC\colormap.c (110, 1)
' pixcmapCreate()
' pixcmapCreate(l_int32) as PIXCMAP *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="depth">[in] - bpp, of pix</param>
'''   <returns>cmap, or NULL on error</returns>
Public Shared Function pixcmapCreate(
				ByVal depth as Integer) as PixColormap



	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcmapCreate( depth)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixColormap(_Result)
End Function

' SRC\colormap.c (157, 1)
' pixcmapCreateRandom()
' pixcmapCreateRandom(l_int32, l_int32, l_int32) as PIXCMAP *
'''  <summary>
''' Notes
''' (1) This sets up a colormap with random colors,
''' where the first color is optionally black, the last color
''' is optionally white, and the remaining colors are
''' chosen randomly.
''' (2) The number of randomly chosen colors is
''' 2^(depth) - haswhite - hasblack
''' (3) Because rand() is seeded, it might disrupt otherwise
''' deterministic results if also used elsewhere in a program.
''' (4) rand() is not threadsafe, and will generate garbage if run
''' on multiple threads at once -- though garbage is generally
''' what you want from a random number generator!
''' (5) Modern rand()s have equal randomness in low and high order
''' bits, but older ones don't.  Here, we're just using rand()
''' to choose colors for output.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="depth">[in] - bpp, of pix; 2, 4 or 8</param>
'''  <param name="hasblack">[in] - 1 if the first color is black; 0 if no black</param>
'''  <param name="haswhite">[in] - 1 if the last color is white; 0 if no white</param>
'''   <returns>cmap, or NULL on error</returns>
Public Shared Function pixcmapCreateRandom(
				ByVal depth as Integer, 
				ByVal hasblack as Integer, 
				ByVal haswhite as Integer) as PixColormap



	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcmapCreateRandom( depth, hasblack, haswhite)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixColormap(_Result)
End Function

' SRC\colormap.c (203, 1)
' pixcmapCreateLinear()
' pixcmapCreateLinear(l_int32, l_int32) as PIXCMAP *
'''  <summary>
''' Notes
''' (1) Colormap has equally spaced gray color values
''' from black (0, 0, 0) to white (255, 255, 255).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="d">[in] - depth of pix for this colormap; 1, 2, 4 or 8</param>
'''  <param name="nlevels">[in] - valid in range [2, 2^d]</param>
'''   <returns>cmap, or NULL on error</returns>
Public Shared Function pixcmapCreateLinear(
				ByVal d as Integer, 
				ByVal nlevels as Integer) as PixColormap



	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcmapCreateLinear( d, nlevels)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixColormap(_Result)
End Function

' SRC\colormap.c (233, 1)
' pixcmapCopy()
' pixcmapCopy(PIXCMAP *) as PIXCMAP *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmaps">[in] - </param>
'''   <returns>cmapd, or NULL on error</returns>
Public Shared Function pixcmapCopy(
				ByVal cmaps as PixColormap) as PixColormap

	If IsNothing (cmaps) then Throw New ArgumentNullException  ("cmaps cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcmapCopy( cmaps.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixColormap(_Result)
End Function

' SRC\colormap.c (263, 1)
' pixcmapDestroy()
' pixcmapDestroy(PIXCMAP **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pcmap">[in,out] - set to null</param>
Public Shared Sub pixcmapDestroy(
				ByRef pcmap as PixColormap)


	Dim pcmapPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pcmap) Then pcmapPTR = pcmap.Pointer

	LeptonicaSharp.Natives.pixcmapDestroy( pcmapPTR)
	if pcmapPTR <> IntPtr.Zero then pcmap = new PixColormap(pcmapPTR)

End Sub

' SRC\colormap.c (299, 1)
' pixcmapAddColor()
' pixcmapAddColor(PIXCMAP *, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This always adds the color if there is room.
''' (2) The alpha component is 255 (opaque)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="rval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''  <param name="gval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''  <param name="bval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapAddColor(
				ByVal cmap as PixColormap, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapAddColor( cmap.Pointer, rval, gval, bval)

	Return _Result
End Function

' SRC\colormap.c (337, 1)
' pixcmapAddRGBA()
' pixcmapAddRGBA(PIXCMAP *, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This always adds the color if there is room.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="rval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''  <param name="gval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''  <param name="bval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''  <param name="aval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapAddRGBA(
				ByVal cmap as PixColormap, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByVal aval as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapAddRGBA( cmap.Pointer, rval, gval, bval, aval)

	Return _Result
End Function

' SRC\colormap.c (381, 1)
' pixcmapAddNewColor()
' pixcmapAddNewColor(PIXCMAP *, l_int32, l_int32, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This only adds color if not already there.
''' (2) The alpha component is 255 (opaque)
''' (3) This returns the index of the new (or existing) color.
''' (4) Returns 2 with a warning if unable to add this color;
''' the caller should check the return value.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="rval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''  <param name="gval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''  <param name="bval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''  <param name="pindex">[out] - index of color</param>
'''   <returns>0 if OK, 1 on error; 2 if unable to add color</returns>
Public Shared Function pixcmapAddNewColor(
				ByVal cmap as PixColormap, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByRef pindex as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapAddNewColor( cmap.Pointer, rval, gval, bval, pindex)

	Return _Result
End Function

' SRC\colormap.c (430, 1)
' pixcmapAddNearestColor()
' pixcmapAddNearestColor(PIXCMAP *, l_int32, l_int32, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This only adds color if not already there.
''' (2) The alpha component is 255 (opaque)
''' (3) If it's not in the colormap and there is no room to add
''' another color, this returns the index of the nearest color.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="rval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''  <param name="gval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''  <param name="bval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''  <param name="pindex">[out] - index of color</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapAddNearestColor(
				ByVal cmap as PixColormap, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByRef pindex as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapAddNearestColor( cmap.Pointer, rval, gval, bval, pindex)

	Return _Result
End Function

' SRC\colormap.c (477, 1)
' pixcmapUsableColor()
' pixcmapUsableColor(PIXCMAP *, l_int32, l_int32, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This checks if the color already exists or if there is
''' room to add it.  It makes no change in the colormap.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="rval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''  <param name="gval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''  <param name="bval">[in] - colormap entry to be added; each number is in range [0, ... 255]</param>
'''  <param name="pusable">[out] - 1 if usable; 0 if not</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapUsableColor(
				ByVal cmap as PixColormap, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByRef pusable as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapUsableColor( cmap.Pointer, rval, gval, bval, pusable)

	Return _Result
End Function

' SRC\colormap.c (524, 1)
' pixcmapAddBlackOrWhite()
' pixcmapAddBlackOrWhite(PIXCMAP *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This only adds color if not already there.
''' (2) The alpha component is 255 (opaque)
''' (3) This sets index to the requested color.
''' (4) If there is no room in the colormap, returns the index
''' of the closest color.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="color">[in] - 0 for black, 1 for white</param>
'''  <param name="pindex">[out][optional] - index of color; can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapAddBlackOrWhite(
				ByVal cmap as PixColormap, 
				ByVal color as Integer, 
				ByRef pindex as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapAddBlackOrWhite( cmap.Pointer, color, pindex)

	Return _Result
End Function

' SRC\colormap.c (563, 1)
' pixcmapSetBlackAndWhite()
' pixcmapSetBlackAndWhite(PIXCMAP *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="setblack">[in] - 0 for no operation; 1 to set darkest color to black</param>
'''  <param name="setwhite">[in] - 0 for no operation; 1 to set lightest color to white</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapSetBlackAndWhite(
				ByVal cmap as PixColormap, 
				ByVal setblack as Integer, 
				ByVal setwhite as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapSetBlackAndWhite( cmap.Pointer, setblack, setwhite)

	Return _Result
End Function

' SRC\colormap.c (593, 1)
' pixcmapGetCount()
' pixcmapGetCount(PIXCMAP *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''   <returns>count, or 0 on error</returns>
Public Shared Function pixcmapGetCount(
				ByVal cmap as PixColormap) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapGetCount( cmap.Pointer)

	Return _Result
End Function

' SRC\colormap.c (610, 1)
' pixcmapGetFreeCount()
' pixcmapGetFreeCount(PIXCMAP *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''   <returns>free entries, or 0 on error</returns>
Public Shared Function pixcmapGetFreeCount(
				ByVal cmap as PixColormap) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapGetFreeCount( cmap.Pointer)

	Return _Result
End Function

' SRC\colormap.c (627, 1)
' pixcmapGetDepth()
' pixcmapGetDepth(PIXCMAP *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''   <returns>depth, or 0 on error</returns>
Public Shared Function pixcmapGetDepth(
				ByVal cmap as PixColormap) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapGetDepth( cmap.Pointer)

	Return _Result
End Function

' SRC\colormap.c (650, 1)
' pixcmapGetMinDepth()
' pixcmapGetMinDepth(PIXCMAP *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) On error, mindepth is returned as 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="pmindepth">[out] - minimum depth to support the colormap</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapGetMinDepth(
				ByVal cmap as PixColormap, 
				ByRef pmindepth as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapGetMinDepth( cmap.Pointer, pmindepth)

	Return _Result
End Function

' SRC\colormap.c (686, 1)
' pixcmapClear()
' pixcmapClear(PIXCMAP *) as l_ok
'''  <summary>
''' Notes
''' (1) This removes the colors by setting the count to 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapClear(
				ByVal cmap as PixColormap) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapClear( cmap.Pointer)

	Return _Result
End Function

' SRC\colormap.c (709, 1)
' pixcmapGetColor()
' pixcmapGetColor(PIXCMAP *, l_int32, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="index">[in] - </param>
'''  <param name="prval">[out] - each color value</param>
'''  <param name="pgval">[out] - each color value</param>
'''  <param name="pbval">[out] - each color value</param>
'''   <returns>0 if OK, 1 if not accessible caller should check</returns>
Public Shared Function pixcmapGetColor(
				ByVal cmap as PixColormap, 
				ByVal index as Integer, 
				ByRef prval as Integer, 
				ByRef pgval as Integer, 
				ByRef pbval as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapGetColor( cmap.Pointer, index, prval, pgval, pbval)

	Return _Result
End Function

' SRC\colormap.c (749, 1)
' pixcmapGetColor32()
' pixcmapGetColor32(PIXCMAP *, l_int32, l_uint32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The returned alpha channel value is 255.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="index">[in] - </param>
'''  <param name="pval32">[out] - 32-bit rgb color value</param>
'''   <returns>0 if OK, 1 if not accessible caller should check</returns>
Public Shared Function pixcmapGetColor32(
				ByVal cmap as PixColormap, 
				ByVal index as Integer, 
				ByRef pval32 as UInteger) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapGetColor32( cmap.Pointer, index, pval32)

	Return _Result
End Function

' SRC\colormap.c (777, 1)
' pixcmapGetRGBA()
' pixcmapGetRGBA(PIXCMAP *, l_int32, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="index">[in] - </param>
'''  <param name="prval">[out] - each color value</param>
'''  <param name="pgval">[out] - each color value</param>
'''  <param name="pbval">[out] - each color value</param>
'''  <param name="paval">[out] - each color value</param>
'''   <returns>0 if OK, 1 if not accessible caller should check</returns>
Public Shared Function pixcmapGetRGBA(
				ByVal cmap as PixColormap, 
				ByVal index as Integer, 
				ByRef prval as Integer, 
				ByRef pgval as Integer, 
				ByRef pbval as Integer, 
				ByRef paval as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapGetRGBA( cmap.Pointer, index, prval, pgval, pbval, paval)

	Return _Result
End Function

' SRC\colormap.c (815, 1)
' pixcmapGetRGBA32()
' pixcmapGetRGBA32(PIXCMAP *, l_int32, l_uint32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="index">[in] - </param>
'''  <param name="pval32">[out] - 32-bit rgba color value</param>
'''   <returns>0 if OK, 1 if not accessible caller should check</returns>
Public Shared Function pixcmapGetRGBA32(
				ByVal cmap as PixColormap, 
				ByVal index as Integer, 
				ByRef pval32 as UInteger) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapGetRGBA32( cmap.Pointer, index, pval32)

	Return _Result
End Function

' SRC\colormap.c (851, 1)
' pixcmapResetColor()
' pixcmapResetColor(PIXCMAP *, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This resets sets the color of an entry that has already
''' been set and included in the count of colors.
''' (2) The alpha component is 255 (opaque)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="index">[in] - </param>
'''  <param name="rval">[in] - colormap entry to be reset; each number is in range [0, ... 255]</param>
'''  <param name="gval">[in] - colormap entry to be reset; each number is in range [0, ... 255]</param>
'''  <param name="bval">[in] - colormap entry to be reset; each number is in range [0, ... 255]</param>
'''   <returns>0 if OK, 1 if not accessible caller should check</returns>
Public Shared Function pixcmapResetColor(
				ByVal cmap as PixColormap, 
				ByVal index as Integer, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapResetColor( cmap.Pointer, index, rval, gval, bval)

	Return _Result
End Function

' SRC\colormap.c (892, 1)
' pixcmapSetAlpha()
' pixcmapSetAlpha(PIXCMAP *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This modifies the transparency of one entry in a colormap.
''' The alpha component by default is 255 (opaque).
''' This is used when extracting the colormap from a PNG file
''' without decoding the image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="index">[in] - </param>
'''  <param name="aval">[in] - in range [0, ... 255]</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapSetAlpha(
				ByVal cmap as PixColormap, 
				ByVal index as Integer, 
				ByVal aval as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapSetAlpha( cmap.Pointer, index, aval)

	Return _Result
End Function

' SRC\colormap.c (921, 1)
' pixcmapGetIndex()
' pixcmapGetIndex(PIXCMAP *, l_int32, l_int32, l_int32, l_int32 *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="rval">[in] - colormap colors to search for; each number is in range [0, ... 255]</param>
'''  <param name="gval">[in] - colormap colors to search for; each number is in range [0, ... 255]</param>
'''  <param name="bval">[in] - colormap colors to search for; each number is in range [0, ... 255]</param>
'''  <param name="pindex">[out] - found index</param>
'''   <returns>0 if found, 1 if not found caller must check</returns>
Public Shared Function pixcmapGetIndex(
				ByVal cmap as PixColormap, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByRef pindex as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapGetIndex( cmap.Pointer, rval, gval, bval, pindex)

	Return _Result
End Function

' SRC\colormap.c (960, 1)
' pixcmapHasColor()
' pixcmapHasColor(PIXCMAP *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="pcolor">[out] - TRUE if cmap has color; FALSE otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapHasColor(
				ByVal cmap as PixColormap, 
				ByRef pcolor as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapHasColor( cmap.Pointer, pcolor)

	Return _Result
End Function

' SRC\colormap.c (999, 1)
' pixcmapIsOpaque()
' pixcmapIsOpaque(PIXCMAP *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="popaque">[out] - TRUE if fully opaque all entries are 255</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapIsOpaque(
				ByVal cmap as PixColormap, 
				ByRef popaque as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapIsOpaque( cmap.Pointer, popaque)

	Return _Result
End Function

' SRC\colormap.c (1034, 1)
' pixcmapIsBlackAndWhite()
' pixcmapIsBlackAndWhite(PIXCMAP *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="pblackwhite">[out] - TRUE if the cmap has only two colors black (0,0,0) and white (255,255,255)</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapIsBlackAndWhite(
				ByVal cmap as PixColormap, 
				ByRef pblackwhite as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapIsBlackAndWhite( cmap.Pointer, pblackwhite)

	Return _Result
End Function

' SRC\colormap.c (1075, 1)
' pixcmapCountGrayColors()
' pixcmapCountGrayColors(PIXCMAP *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This counts the unique gray colors, including black and white.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="pngray">[out] - number of gray colors</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapCountGrayColors(
				ByVal cmap as PixColormap, 
				ByRef pngray as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapCountGrayColors( cmap.Pointer, pngray)

	Return _Result
End Function

' SRC\colormap.c (1116, 1)
' pixcmapGetRankIntensity()
' pixcmapGetRankIntensity(PIXCMAP *, l_float32, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="rankval">[in] - 0.0 for darkest, 1.0 for lightest color</param>
'''  <param name="pindex">[out] - the index into the colormap that corresponds to the rank intensity color</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapGetRankIntensity(
				ByVal cmap as PixColormap, 
				ByVal rankval as Single, 
				ByRef pindex as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")
	If IsNothing (rankval) then Throw New ArgumentNullException  ("rankval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapGetRankIntensity( cmap.Pointer, rankval, pindex)

	Return _Result
End Function

' SRC\colormap.c (1167, 1)
' pixcmapGetNearestIndex()
' pixcmapGetNearestIndex(PIXCMAP *, l_int32, l_int32, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Returns the index of the exact color if possible, otherwise the
''' index of the color closest to the target color.
''' (2) Nearest color is that which is the least sum-of-squares distance
''' from the target color.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="rval">[in] - colormap colors to search for; each number is in range [0, ... 255]</param>
'''  <param name="gval">[in] - colormap colors to search for; each number is in range [0, ... 255]</param>
'''  <param name="bval">[in] - colormap colors to search for; each number is in range [0, ... 255]</param>
'''  <param name="pindex">[out] - the index of the nearest color</param>
'''   <returns>0 if OK, 1 on error caller must check</returns>
Public Shared Function pixcmapGetNearestIndex(
				ByVal cmap as PixColormap, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByRef pindex as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapGetNearestIndex( cmap.Pointer, rval, gval, bval, pindex)

	Return _Result
End Function

' SRC\colormap.c (1225, 1)
' pixcmapGetNearestGrayIndex()
' pixcmapGetNearestGrayIndex(PIXCMAP *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This should be used on gray colormaps.  It uses only the
''' green value of the colormap.
''' (2) Returns the index of the exact color if possible, otherwise the
''' index of the color closest to the target color.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="val">[in] - gray value to search for; in range [0, ... 255]</param>
'''  <param name="pindex">[out] - the index of the nearest color</param>
'''   <returns>0 if OK, 1 on error caller must check</returns>
Public Shared Function pixcmapGetNearestGrayIndex(
				ByVal cmap as PixColormap, 
				ByVal val as Integer, 
				ByRef pindex as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapGetNearestGrayIndex( cmap.Pointer, val, pindex)

	Return _Result
End Function

' SRC\colormap.c (1278, 1)
' pixcmapGetDistanceToColor()
' pixcmapGetDistanceToColor(PIXCMAP *, l_int32, l_int32, l_int32, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Returns the L2 distance (squared) between the color at index i
''' and the target color.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="index">[in] - </param>
'''  <param name="rval">[in] - target color</param>
'''  <param name="gval">[in] - target color</param>
'''  <param name="bval">[in] - target color</param>
'''  <param name="pdist">[out] - the distance from the cmap entry to target</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapGetDistanceToColor(
				ByVal cmap as PixColormap, 
				ByVal index as Integer, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByRef pdist as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapGetDistanceToColor( cmap.Pointer, index, rval, gval, bval, pdist)

	Return _Result
End Function

' SRC\colormap.c (1334, 1)
' pixcmapGetRangeValues()
' pixcmapGetRangeValues(PIXCMAP *, l_int32, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Returns, for selected components (or the average), the
''' the extreme values (min and/or max) and their indices
''' that are found in the cmap.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="pminval">[out][optional] - minimum value of component</param>
'''  <param name="pmaxval">[out][optional] - maximum value of component</param>
'''  <param name="pminindex">[out][optional] - index of minimum value</param>
'''  <param name="pmaxindex">[out][optional] - index of maximum value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapGetRangeValues(
				ByVal cmap as PixColormap, 
				ByRef _select_ as Integer, 
				ByRef pminval as Integer, 
				ByRef pmaxval as Integer, 
				ByRef pminindex as Integer, 
				ByRef pmaxindex as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapGetRangeValues( cmap.Pointer, _select_, pminval, pmaxval, pminindex, pmaxindex)

	Return _Result
End Function

' SRC\colormap.c (1430, 1)
' pixcmapGrayToColor()
' pixcmapGrayToColor(l_uint32) as PIXCMAP *
'''  <summary>
''' Notes
''' (1) This creates a colormap that maps from gray to
''' a specific color.  In the mapping, each component
''' is faded to white, depending on the gray value.
''' (2) In use, this is simply attached to a grayscale pix
''' to give it the input color.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="color">[in] - </param>
'''   <returns>cmap, or NULL on error</returns>
Public Shared Function pixcmapGrayToColor(
				ByVal color as UInteger) as PixColormap



	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcmapGrayToColor( color)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixColormap(_Result)
End Function

' SRC\colormap.c (1462, 1)
' pixcmapColorToGray()
' pixcmapColorToGray(PIXCMAP *, l_float32, l_float32, l_float32) as PIXCMAP *
'''  <summary>
''' Notes
''' (1) This creates a gray colormap from an arbitrary colormap.
''' (2) In use, attach the output gray colormap to the pix
''' (or a copy of it) that provided the input colormap.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmaps">[in] - </param>
'''  <param name="rwt">[in] - non-negative; these should add to 1.0</param>
'''  <param name="gwt">[in] - non-negative; these should add to 1.0</param>
'''  <param name="bwt">[in] - non-negative; these should add to 1.0</param>
'''   <returns>cmap gray, or NULL on error</returns>
Public Shared Function pixcmapColorToGray(
				ByVal cmaps as PixColormap, 
				ByVal rwt as Single, 
				ByVal gwt as Single, 
				ByVal bwt as Single) as PixColormap

	If IsNothing (cmaps) then Throw New ArgumentNullException  ("cmaps cannot be Nothing")
	If IsNothing (rwt) then Throw New ArgumentNullException  ("rwt cannot be Nothing")
	If IsNothing (gwt) then Throw New ArgumentNullException  ("gwt cannot be Nothing")
	If IsNothing (bwt) then Throw New ArgumentNullException  ("bwt cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcmapColorToGray( cmaps.Pointer, rwt, gwt, bwt)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixColormap(_Result)
End Function

' SRC\colormap.c (1518, 1)
' pixcmapConvertTo4()
' pixcmapConvertTo4(PIXCMAP *) as PIXCMAP *
'''  <summary>
''' Notes
''' (1) This converts a 2 bpp colormap to 4 bpp.  The colors
''' are the same; the output colormap entry array has size 16.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmaps">[in] - colormap for 2 bpp pix</param>
'''   <returns>cmapd   (4 bpp)</returns>
Public Shared Function pixcmapConvertTo4(
				ByVal cmaps as PixColormap) as PixColormap

	If IsNothing (cmaps) then Throw New ArgumentNullException  ("cmaps cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcmapConvertTo4( cmaps.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixColormap(_Result)
End Function

' SRC\colormap.c (1553, 1)
' pixcmapConvertTo8()
' pixcmapConvertTo8(PIXCMAP *) as PIXCMAP *
'''  <summary>
''' Notes
''' (1) This converts a 2 bpp or 4 bpp colormap to 8 bpp.  The colors
''' are the same; the output colormap entry array has size 256.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmaps">[in] - colormap for 2 bpp or 4 bpp pix</param>
'''   <returns>cmapd   (8 bpp)</returns>
Public Shared Function pixcmapConvertTo8(
				ByVal cmaps as PixColormap) as PixColormap

	If IsNothing (cmaps) then Throw New ArgumentNullException  ("cmaps cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcmapConvertTo8( cmaps.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixColormap(_Result)
End Function

' SRC\colormap.c (1587, 1)
' pixcmapRead()
' pixcmapRead(const char *) as PIXCMAP *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>cmap, or NULL on error</returns>
Public Shared Function pixcmapRead(
				ByVal filename as String) as PixColormap

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcmapRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixColormap(_Result)
End Function

' SRC\colormap.c (1614, 1)
' pixcmapReadStream()
' pixcmapReadStream(FILE *) as PIXCMAP *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>cmap, or NULL on error</returns>
Public Shared Function pixcmapReadStream(
				ByVal fp as FILE) as PixColormap

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcmapReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixColormap(_Result)
End Function

' SRC\colormap.c (1655, 1)
' pixcmapReadMem()
' pixcmapReadMem(const l_uint8 *, size_t) as PIXCMAP *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - serialization of pixcmap; in ascii</param>
'''  <param name="size">[in] - of data in bytes; can use strlen to get it</param>
'''   <returns>cmap, or NULL on error</returns>
Public Shared Function pixcmapReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as PixColormap

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcmapReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixColormap(_Result)
End Function

' SRC\colormap.c (1683, 1)
' pixcmapWrite()
' pixcmapWrite(const char *, PIXCMAP *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="cmap">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapWrite(
				ByVal filename as String, 
				ByVal cmap as PixColormap) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapWrite( filename, cmap.Pointer)

	Return _Result
End Function

' SRC\colormap.c (1715, 1)
' pixcmapWriteStream()
' pixcmapWriteStream(FILE *, PIXCMAP *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream    \param[in]    cmap</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapWriteStream(
				ByVal fp as FILE, 
				ByRef cmap as PixColormap) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")

Dim cmapPTR As IntPtr = IntPtr.Zero : If Not IsNothing(cmap) Then cmapPTR = cmap.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapWriteStream( fp.Pointer, cmap.Pointer)

	Return _Result
End Function

' SRC\colormap.c (1761, 1)
' pixcmapWriteMem()
' pixcmapWriteMem(l_uint8 **, size_t *, PIXCMAP *) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a pixcmap in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized pixcmap; ascii</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="cmap">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcmapWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal cmap as PixColormap) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapWriteMem( pdataPTR, psize, cmap.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\colormap.c (1813, 1)
' pixcmapToArrays()
' pixcmapToArrays(PIXCMAP *, l_int32 **, l_int32 **, l_int32 **, l_int32 **) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - colormap</param>
'''  <param name="prmap">[out] - colormap arrays</param>
'''  <param name="pgmap">[out] - colormap arrays</param>
'''  <param name="pbmap">[out] - colormap arrays</param>
'''  <param name="pamap">[out][optional] - alpha array</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixcmapToArrays(
				ByVal cmap as PixColormap, 
				ByRef prmap as List (of Integer()), 
				ByRef pgmap as List (of Integer()), 
				ByRef pbmap as List (of Integer()), 
				ByRef pamap as List (of Integer())) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")

Dim prmapPTR As IntPtr = Marshal.AllocHGlobal(0)
Dim pgmapPTR As IntPtr = Marshal.AllocHGlobal(0)
Dim pbmapPTR As IntPtr = Marshal.AllocHGlobal(0)
Dim pamapPTR As IntPtr = IntPtr.Zero: if not isNothing (pamap) then pamapPTR = Marshal.AllocHGlobal(Marshal.SizeOf(pamap.toarray))

	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapToArrays( cmap.Pointer, prmapPTR, pgmapPTR, pbmapPTR, pamapPTR)

	Return _Result
End Function

' SRC\colormap.c (1867, 1)
' pixcmapToRGBTable()
' pixcmapToRGBTable(PIXCMAP *, l_uint32 **, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - colormap</param>
'''  <param name="ptab">[out] - table of rgba values for the colormap</param>
'''  <param name="pncolors">[out][optional] - size of table</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixcmapToRGBTable(
				ByVal cmap as PixColormap, 
				ByRef ptab as Byte(), 
				ByRef pncolors as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")

	Dim ptabPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapToRGBTable( cmap.Pointer, ptabPTR, pncolors)
	ReDim ptab(IIf(1 > 0, 1, 1) - 1) : If ptabPTR <> IntPtr.Zero Then Marshal.Copy(ptabPTR, ptab, 0, ptab.count)

	Return _Result
End Function

' SRC\colormap.c (1912, 1)
' pixcmapSerializeToMemory()
' pixcmapSerializeToMemory(PIXCMAP *, l_int32, l_int32 *, l_uint8 **) as l_ok
'''  <summary>
''' Notes
''' (1) When serializing to store in a pdf, use %cpc = 3.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - colormap</param>
'''  <param name="cpc">[in] - components/color 3 for rgb, 4 for rgba</param>
'''  <param name="pncolors">[out] - number of colors in table</param>
'''  <param name="pdata">[out] - binary string, cpc bytes per color</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixcmapSerializeToMemory(
				ByVal cmap as PixColormap, 
				ByVal cpc as Integer, 
				ByRef pncolors as Integer, 
				ByRef pdata as Byte()) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapSerializeToMemory( cmap.Pointer, cpc, pncolors, pdataPTR)
	ReDim pdata(IIf(1 > 0, 1, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\colormap.c (1960, 1)
' pixcmapDeserializeFromMemory()
' pixcmapDeserializeFromMemory(l_uint8 *, l_int32, l_int32) as PIXCMAP *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - binary string, 3 or 4 bytes per color</param>
'''  <param name="cpc">[in] - components/color 3 for rgb, 4 for rgba</param>
'''  <param name="ncolors">[in] - </param>
'''   <returns>cmap, or NULL on error</returns>
Public Shared Function pixcmapDeserializeFromMemory(
				ByVal data as Byte(), 
				ByVal cpc as Integer, 
				ByVal ncolors as Integer) as PixColormap

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcmapDeserializeFromMemory( data, cpc, ncolors)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixColormap(_Result)
End Function

' SRC\colormap.c (2021, 1)
' pixcmapConvertToHex()
' pixcmapConvertToHex(l_uint8 *, l_int32) as char *
'''  <summary>
''' Notes
''' (1) The number of bytes in %data is 3  ncolors.
''' (2) Output is in form
''' LT r0g0b0 r1g1b1 ... rngnbn GT
''' where r0, g0, b0 ... are each 2 bytes of hex ascii
''' (3) This is used in pdf files to express the colormap as an
''' array in ascii (human-readable) format.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - binary serialized data</param>
'''  <param name="ncolors">[in] - in colormap</param>
'''   <returns>hexdata bracketed, space-separated ascii hex string, or NULL on error.</returns>
Public Shared Function pixcmapConvertToHex(
				ByVal data as Byte(), 
				ByVal ncolors as Integer) as String

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.pixcmapConvertToHex( data, ncolors)

	Return _Result
End Function

' SRC\colormap.c (2079, 1)
' pixcmapGammaTRC()
' pixcmapGammaTRC(PIXCMAP *, l_float32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place transform
''' (2) See pixGammaTRC() and numaGammaTRC() in enhance.c
''' for description and use of transform
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - colormap</param>
'''  <param name="gamma">[in] - gamma correction; must be GT 0.0</param>
'''  <param name="minval">[in] - input value that gives 0 for output; can be LT 0</param>
'''  <param name="maxval">[in] - input value that gives 255 for output; can be GT 255</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixcmapGammaTRC(
				ByVal cmap as PixColormap, 
				ByVal gamma as Single, 
				ByVal minval as Integer, 
				ByVal maxval as Integer) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")
	If IsNothing (gamma) then Throw New ArgumentNullException  ("gamma cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapGammaTRC( cmap.Pointer, gamma, minval, maxval)

	Return _Result
End Function

' SRC\colormap.c (2134, 1)
' pixcmapContrastTRC()
' pixcmapContrastTRC(PIXCMAP *, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place transform
''' (2) See pixContrastTRC() and numaContrastTRC() in enhance.c
''' for description and use of transform
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - colormap</param>
'''  <param name="factor">[in] - generally between 0.0 [no enhancement] and 1.0, but can be larger than 1.0</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixcmapContrastTRC(
				ByVal cmap as PixColormap, 
				ByVal factor as Single) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapContrastTRC( cmap.Pointer, factor)

	Return _Result
End Function

' SRC\colormap.c (2186, 1)
' pixcmapShiftIntensity()
' pixcmapShiftIntensity(PIXCMAP *, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place transform
''' (2) It does a proportional shift of the intensity for each color.
''' (3) If fraction LT 0.0, it moves all colors towards (0,0,0).
''' This darkens the image.
''' If fraction GT 0.0, it moves all colors towards (255,255,255)
''' This fades the image.
''' (4) The equivalent transform can be accomplished with pixcmapGammaTRC(),
''' but it is considerably more difficult (see numaGammaTRC()).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - colormap</param>
'''  <param name="fraction">[in] - between -1.0 and +1.0</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixcmapShiftIntensity(
				ByVal cmap as PixColormap, 
				ByVal fraction as Single) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")
	If IsNothing (fraction) then Throw New ArgumentNullException  ("fraction cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapShiftIntensity( cmap.Pointer, fraction)

	Return _Result
End Function

' SRC\colormap.c (2236, 1)
' pixcmapShiftByComponent()
' pixcmapShiftByComponent(PIXCMAP *, l_uint32, l_uint32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place transform
''' (2) It implements pixelShiftByComponent() for each color.
''' The mapping is specified by srcval and dstval.
''' (3) If a component decreases, the component in the colormap
''' decreases by the same ratio.  Likewise for increasing, except
''' all ratios are taken with respect to the distance from 255.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - colormap</param>
'''  <param name="srcval">[in] - source color 0xrrggbb00</param>
'''  <param name="dstval">[in] - target color 0xrrggbb00</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixcmapShiftByComponent(
				ByVal cmap as PixColormap, 
				ByVal srcval as UInteger, 
				ByVal dstval as UInteger) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapShiftByComponent( cmap.Pointer, srcval, dstval)

	Return _Result
End Function

#End Region
#Region "SRC\colormorph.c"
' SRC\colormorph.c (66, 1)
' pixColorMorph()
' pixColorMorph(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This does the morph operation on each component separately,
''' and recombines the result.
''' (2) Sel is a brick with all elements being hits.
''' (3) If hsize = vsize = 1, just returns a copy.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="type">[in] - L_MORPH_DILATE, L_MORPH_ERODE, L_MORPH_OPEN, or L_MORPH_CLOSE</param>
'''  <param name="hsize">[in] - of Sel; must be odd; origin implicitly in center</param>
'''  <param name="vsize">[in] - ditto</param>
'''   <returns>pixd</returns>
Public Shared Function pixColorMorph(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.L_MORPH, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixColorMorph( pixs.Pointer, type, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\colorquant1.c"
' SRC\colorquant1.c (535, 1)
' pixOctreeColorQuant()
' pixOctreeColorQuant(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' I found one description in the literature of octree color
''' quantization, using progressive truncation of the octree,
''' by M. Gervautz and W. Purgathofer in Graphics Gems, pp.
''' 287-293, ed. A. Glassner, Academic Press, 1990.
''' Rather than setting up a fixed partitioning of the color
''' space ab initio, as we do here, they allow the octree to be
''' progressively truncated as new pixels are added.  They
''' need to set up some data structures that are traversed
''' with the addition of each 24 bit pixel, in order to decide
''' either 1) in which cluster (sub-branch of the octree to put
''' the pixel, or 2 whether to truncate the octree further
''' to place the pixel in an existing cluster, or 3 which
''' two existing clusters should be merged so that the pixel
''' can be left to start a truncated leaf of the octree.  Such dynamic
''' truncation is considerably more complicated, and Gervautz et
''' al. did not explain how they did it in anywhere near the
''' detail required to check their implementation.
''' The simple method in pixFixedOctcubeQuant256 is very
''' fast, and with dithering the results are good, but you
''' can do better if the color clusters are selected adaptively
''' from the image.  We want a method that makes much better
''' use of color samples in regions of color space with high
''' pixel density, while also fairly representing small numbers
''' of color pixels in low density regions.  Such adaptation
''' requires two passes through the image the first for generating
''' the pruned tree of color cubes and the second for computing the index
''' into the color table for each pixel.
''' A relatively simple adaptive method is pixOctreeQuantByPopulation.
''' That function first determines if the image has very few colors,
''' and, if so, quantizes to those colors.  If there are more than
''' 256 colors, it generates a histogram of octcube leaf occupancy
''' at level 4, chooses the 192 most populated such leaves as
''' the first 192 colors, and sets the remaining 64 colors to the
''' residual average pixel values in each of the 64 level 2 octcubes.
''' This is a bit faster than pixOctreeColorQuant, and does very
''' well without dithering, but for most images with dithering it
''' is clearly inferior.
''' We now describe pixOctreeColorQuant.  The first pass is done
''' on a subsampled image, because we do not need to use all the
''' pixels in the image to generate the tree.  Subsampling
''' down to 0.25 1/16 of the pixels makes the program run
''' about 1.3 times faster.
''' Instead of dividing the color space into 256 equal-sized
''' regions, we initially divide it into 2^12 or 2^15 or 2^18
''' equal-sized octcubes.  Suppose we choose to use 2^18 octcubes.
''' This gives us 6 octree levels.  We then prune back,
''' starting from level 6.  For every cube at level 6, there
''' are 8 cubes at level 5.  Call the operation of putting a
''' cube aside as a color table entry CTE a "saving."
''' We use a in general level-dependent threshold, and save
''' those level 6 cubes that are above threshold.
''' The rest are combined into the containing level 5 cube.
''' If between 1 and 7 level 6 cubes within a level 5
''' cube have been saved by thresholding, then the remaining
''' level 6 cubes in that level 5 cube are automatically
''' saved as well, without applying a threshold.  This greatly
''' simplifies both the description of the CTEs and the later
''' classification of each pixel as belonging to a CTE.
''' This procedure is iterated through every cube, starting at
''' level 5, and then 4, 3, and 2, successively.  The result is that
''' each CTE contains the entirety of a set of from 1 to 7 cubes
''' from a given level that all belong to a single cube at the
''' level above.   We classify the CTEs in terms of the
''' condition in which they are made as either being "threshold"
''' or "residual."  They are "threshold" CTEs if no subcubes
''' are CTEs that is, they contain every pixel within the cube
''' and the number of pixels exceeds the threshold for making
''' a CTE.  They are "residual" CTEs if at least one but not more
''' than 7 of the subcubes have already been determined to be CTEs;
''' this happens automatically -- no threshold is applied.
''' If all 8 subcubes are determined to be CTEs, the cube is
''' marked as having all pixels accounted for 'bleaf' = 1 but
''' is not saved as a CTE.
''' We stop the pruning at level 2, at which there are 64
''' sub-cubes.  Any pixels not already claimed in a CTE are
''' put in these cubes.
''' As the cubes are saved as color samples in the color table,
''' the number of remaining pixels P and the number of
''' remaining colors in the color table N are recomputed,
''' along with the average number of pixels P/N ppc to go in
''' each of the remaining colors.  This running average number is
''' used to set the threshold at the current level.
''' Because we are going to very small cubes at levels 6 or 5,
''' and will dither the colors for errors, it is not necessary
''' to compute the color center of each cluster; we can simply
''' use the center of the cube.  This gives us a minimax error
''' condition the maximum error is half the width of the
''' level 2 cubes -- 32 color values out of 256 -- for each color
''' sample.  In practice, most of the pixels will be very much
''' closer to the center of their cells.  And with dithering,
''' the average pixel color in a small region will be closer still.
''' Thus with the octree quantizer, we are able to capture
''' regions of high color pdf probability density function in small
''' but accurate CTEs, and to have only a small number of pixels
''' that end up a significant distance with a guaranteed maximum
''' from their true color.
''' How should the threshold factor vary?  Threshold factors
''' are required for levels 2, 3, 4 and 5 in the pruning stage.
''' The threshold for level 5 is actually applied to cubes at
''' level 6, etc.  From various experiments, it appears that
''' the results do not vary appreciably for threshold values near 1.0.
''' If you want more colors in smaller cubes, the threshold
''' factors can be set lower than 1.0 for cubes at levels 4 and 5.
''' However, if the factor is set much lower than 1.0 for
''' levels 2 and 3, we can easily run out of colors.
''' We put aside 64 colors in the calculation of the threshold
''' values, because we must have 64 color centers at level 2,
''' that will have very few pixels in most of them.
''' If we reduce the factor for level 5 to 0.4, this will
''' generate many level 6 CTEs, and consequently
''' many residual cells will be formed up from those leaves,
''' resulting in the possibility of running out of colors.
''' Remember, the residual CTEs are mandatory, and are formed
''' without using the threshold, regardless of the number of
''' pixels that are absorbed.
''' The implementation logically has four parts
''' 1 accumulation into small, fixed cells
''' 2 pruning back into selected CTE cubes
''' 3 organizing the CTEs for fast search to find
''' the CTE to which any image pixel belongs
''' 4 doing a second scan to code the image pixels by CTE
''' Step 1 is straightforward; we use 2^15 cells.
''' We've already discussed how the pruning step 2 will be performed.
''' Steps 3) and (4 are related, in that the organization
''' used by step 3 determines how the search actually
''' takes place for each pixel in step 4.
''' There are many ways to do step 3.  Let's explore a few.
''' a The simplest is to order the cubes from highest occupancy
''' to lowest, and traverse the list looking for the deepest
''' match.  To make this more efficient, so that we know when
''' to stop looking, any cube that has separate CTE subcubes
''' would be marked as such, so that we know when we hit a
''' true leaf.
''' b Alternatively, we can order the cubes by highest
''' occupancy separately each level, and work upward,
''' starting at level 5, so that when we find a match we
''' know that it will be correct.
''' c Another approach would be to order the cubes by
''' "address" and use a hash table to find the cube
''' corresponding to a pixel color.  I don't know how to
''' do this with a variable length address, as each CTE
''' will have 3n bits, where n is the level.
''' d Another approach entirely is to put the CTE cubes into
''' a tree, in such a way that starting from the root, and
''' using 3 bits of address at a time, the correct branch of
''' each octree can be taken until a leaf is found.  Because
''' a given cube can be both a leaf and also have branches
''' going to sub-cubes, the search stops only when no
''' marked subcubes have addresses that match the given pixel.
''' In the tree method, we can start with a dense infrastructure,
''' and place the leaves corresponding to the N colors
''' in the tree, or we can grow from the root only those
''' branches that end directly on leaves.
''' What we do here is to take approach d, and implement the tree
''' "virtually", as a set of arrays, one array for each level
''' of the tree.   Initially we start at level 5, an array with
''' 2^15 cubes, each with 8 subcubes.  We then build nodes at
''' levels closer to the root; at level 4 there are 2^12 nodes
''' each with 8 subcubes; etc.  Using these arrays has
''' several advantages
''' ~  We don't need to keep track of links between cubes
''' and subcubes, because we can use the canonical
''' addressing on the cell arrays directly to determine
''' which nodes are parent cubes and which are sub-cubes.
''' ~  We can prune directly on this tree
''' ~  We can navigate the pruned tree quickly to classify
''' each pixel in the image.
''' Canonical addressing guarantees that the i-th node at level k
''' has 8 subnodes given by the 8i ... 8i+7 nodes at level k+1.
''' The pruning step works as follows.  We go from the lowest
''' level up.  At each level, the threshold is found from the
''' product of a factor near 1.0 and the ratio of unmarked pixels
''' to remaining colors minus the 64.  We march through
''' the space, sequentially considering a cube and its 8 subcubes.
''' We first check those subcubes that are not already
''' marked as CTE to see if any are above threshold, and if so,
''' generate a CTE and mark them as such.
''' We then determine if any of the subcubes have been marked.
''' If so, and there are subcubes that are not marked,
''' we generate a CTE for the cube from the remaining unmarked
''' subcubes; this is mandatory and does not depend on how many
''' pixels are in the set of subcubes.  If none of the subcubes
''' are marked, we aggregate their pixels into the cube
''' containing them, but do not mark it as a CTE; that
''' will be determined when iterating through the next level up.
''' When all the pixels in a cube are accounted for in one or more
''' colors, we set the boolean 'bleaf' to true.  This is the
''' flag used to mark the cubes in the pruning step.  If a cube
''' is marked, and all 8 subcubes are marked, then it is not
''' itself given a CTE because all pixels have already been
''' accounted for.
''' Note that the pruning of the tree and labelling of the CTEs
''' step 2 accomplishes step 3 implicitly, because the marked
''' and pruned tree is ready for use in labelling each pixel
''' in step 4.  We now, for every pixel in the image, traverse
''' the tree from the root, looking for the lowest cube that is a leaf.
''' At each level we have a cube and subcube.  If we reach a subcube
''' leaf that is marked 0, we know that the color is stored in the
''' cube above, and we've found the CTE.  Otherwise, the subcube
''' leaf is marked 1.  If we're at the last level, we've reached
''' the final leaf and must use it.  Otherwise, continue the
''' process at the next level down.
''' For robustness, efficiency and high quality output, we do the following
''' (1) Measure the color content of the image.  If there is very little
''' color, quantize in grayscale.
''' (2) For efficiency, build the octree with a subsampled image if the
''' image is larger than some threshold size.
''' (3) Reserve an extra set of colors to prevent running out of colors
''' when pruning the octree; specifically, during the assignment
''' of those level 2 cells out of the 64 that have unassigned
''' pixels.  The problem of running out is more likely to happen
''' with small images, because the estimation we use for the
''' number of pixels available is not accurate.
''' (4) In the unlikely event that we run out of colors, the dithered
''' image can be very poor.  As this would only happen with very
''' small images, and dithering is not particularly noticeable with
''' such images, turn it off.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp; 24-bit color</param>
'''  <param name="colors">[in] - in colormap; some number in range [128 ... 256]; the actual number of colors used will be smaller</param>
'''  <param name="ditherflag">[in] - 1 to dither, 0 otherwise</param>
'''   <returns>pixd 8 bpp with colormap, or NULL on error</returns>
Public Shared Function pixOctreeColorQuant(
				ByVal pixs as Pix, 
				ByVal colors as Integer, 
				ByVal ditherflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOctreeColorQuant( pixs.Pointer, colors, ditherflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant1.c (601, 1)
' pixOctreeColorQuantGeneral()
' pixOctreeColorQuantGeneral(PIX *, l_int32, l_int32, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) The parameters %validthresh and %colorthresh are used to
''' determine if color quantization should be used on an image,
''' or whether, instead, it should be quantized in grayscale.
''' If the image has very few non-white and non-black pixels, or
''' if those pixels that are non-white and non-black are all
''' very close to either white or black, it is usually better
''' to treat the color as accidental and to quantize the image
''' to gray only.  These parameters are useful if you know
''' something a priori about the image.  Perhaps you know that
''' there is only a very small fraction of color pixels, but they're
''' important to preserve; then you want to use a smaller value for
''' these parameters.  To disable conversion to gray and force
''' color quantization, use %validthresh = 0.0 and %colorthresh = 0.0.
''' (2) See pixOctreeColorQuant() for algorithmic and implementation
''' details.  This function has a more general interface.
''' (3) See pixColorFraction() for computing the fraction of pixels
''' that are neither white nor black, and the fraction of those
''' pixels that have little color.  From the documentation there
''' If pixfract is very small, there are few pixels that are
''' neither black nor white.  If colorfract is very small,
''' the pixels that are neither black nor white have very
''' little color content.  The product 'pixfract  colorfract'
''' gives the fraction of pixels with significant color content.
''' We test against the product %validthresh  %colorthresh
''' to find color in images that have either very few
''' intermediate gray pixels or that have many such gray pixels.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp; 24-bit color</param>
'''  <param name="colors">[in] - in colormap; some number in range [128 ... 240]; the actual number of colors used will be smaller</param>
'''  <param name="ditherflag">[in] - 1 to dither, 0 otherwise</param>
'''  <param name="validthresh">[in] - minimum fraction of pixels neither near white nor black, required for color quantization; typically ~0.01, but smaller for images that have color but are nearly all white</param>
'''  <param name="colorthresh">[in] - minimum fraction of pixels with color that are not near white or black, that are required for color quantization; typ. ~0.01, but smaller for images that have color along with a significant fraction of gray</param>
'''   <returns>pixd 8 bit with colormap, or NULL on error</returns>
Public Shared Function pixOctreeColorQuantGeneral(
				ByVal pixs as Pix, 
				ByVal colors as Integer, 
				ByVal ditherflag as Integer, 
				ByVal validthresh as Single, 
				ByVal colorthresh as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (validthresh) then Throw New ArgumentNullException  ("validthresh cannot be Nothing")
	If IsNothing (colorthresh) then Throw New ArgumentNullException  ("colorthresh cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOctreeColorQuantGeneral( pixs.Pointer, colors, ditherflag, validthresh, colorthresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant1.c (1361, 1)
' makeRGBToIndexTables()
' makeRGBToIndexTables(l_uint32 **, l_uint32 **, l_uint32 **, l_int32) as l_ok
'''  <summary>
''' Set up tables.  e.g., for cqlevels = 5, we need an integer 0 LT i LT 2^15
''' rtab = 0  i7  0   0  i6  0   0  i5  0   0   i4  0   0   i3  0   0
''' gtab = 0  0   i7  0   0  i6  0   0  i5  0   0   i4  0   0   i3  0
''' btab = 0  0   0   i7  0  0   i6  0  0   i5  0   0   i4  0   0   i3
''' The tables are then used to map from rbg --GT index as follows
''' index = 0  r7  g7  b7  r6  g6  b6  r5  g5  b5  r4  g4  b4  r3  g3  b3
''' e.g., for cqlevels = 4, we map to
''' index = 0  0   0   0   r7  g7  b7  r6  g6  b6  r5  g5  b5  r4  g4  b4
''' This may look a bit strange.  The notation 'r7' means the MSBit of
''' the r value which has 8 bits, going down from r7 to r0.
''' Keep in mind that r7 is actually the r component bit for level 1 of
''' the octtree.  Level 1 is composed of 8 octcubes, represented by
''' the bits r7 g7 b7, which divide the entire color space into
''' 8 cubes.  At level 2, each of these 8 octcubes is further divided into
''' 8 cubes, each labeled by the second most significant bits r6 g6 b6
''' of the rgb color.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="prtab">[out] - tables</param>
'''  <param name="pgtab">[out] - tables</param>
'''  <param name="pbtab">[out] - tables</param>
'''  <param name="cqlevels">[in] - can be 1, 2, 3, 4, 5 or 6</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function makeRGBToIndexTables(
				ByRef prtab as Byte(), 
				ByRef pgtab as Byte(), 
				ByRef pbtab as Byte(), 
				ByVal cqlevels as Integer) as Integer


	Dim prtabPTR As IntPtr = IntPtr.Zero
	Dim pgtabPTR As IntPtr = IntPtr.Zero
	Dim pbtabPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.makeRGBToIndexTables( prtabPTR, pgtabPTR, pbtabPTR, cqlevels)
	ReDim prtab(IIf(1 > 0, 1, 1) - 1) : If prtabPTR <> IntPtr.Zero Then Marshal.Copy(prtabPTR, prtab, 0, prtab.count)
	ReDim pgtab(IIf(1 > 0, 1, 1) - 1) : If pgtabPTR <> IntPtr.Zero Then Marshal.Copy(pgtabPTR, pgtab, 0, pgtab.count)
	ReDim pbtab(IIf(1 > 0, 1, 1) - 1) : If pbtabPTR <> IntPtr.Zero Then Marshal.Copy(pbtabPTR, pbtab, 0, pbtab.count)

	Return _Result
End Function

' SRC\colorquant1.c (1470, 1)
' getOctcubeIndexFromRGB()
' getOctcubeIndexFromRGB(l_int32, l_int32, l_int32, l_uint32 *, l_uint32 *, l_uint32 *, l_uint32 *) as void
'''  <summary>
''' Notes
''' No error checking!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''  <param name="rtab">[in] - generated with makeRGBToIndexTables()</param>
'''  <param name="gtab">[in] - generated with makeRGBToIndexTables()</param>
'''  <param name="btab">[in] - generated with makeRGBToIndexTables()</param>
'''  <param name="pindex">[out] - found index</param>
Public Shared Sub getOctcubeIndexFromRGB(
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByVal rtab as Byte(), 
				ByVal gtab as Byte(), 
				ByVal btab as Byte(), 
				ByRef pindex as UInteger)

	If IsNothing (rtab) then Throw New ArgumentNullException  ("rtab cannot be Nothing")
	If IsNothing (gtab) then Throw New ArgumentNullException  ("gtab cannot be Nothing")
	If IsNothing (btab) then Throw New ArgumentNullException  ("btab cannot be Nothing")

	Dim rtabPTR As IntPtr = Marshal.AllocHGlobal(rtab.Count) : Marshal.Copy(rtab, 0, rtabPTR, rtab.Length)
	Dim gtabPTR As IntPtr = Marshal.AllocHGlobal(gtab.Count) : Marshal.Copy(gtab, 0, gtabPTR, gtab.Length)
	Dim btabPTR As IntPtr = Marshal.AllocHGlobal(btab.Count) : Marshal.Copy(btab, 0, btabPTR, btab.Length)

	LeptonicaSharp.Natives.getOctcubeIndexFromRGB( rval, gval, bval, rtabPTR, gtabPTR, btabPTR, pindex)

End Sub

' SRC\colorquant1.c (1701, 1)
' pixOctreeQuantByPopulation()
' pixOctreeQuantByPopulation(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This color quantization method works very well without
''' dithering, using octcubes at two different levels
''' (a) the input %level, which is either 3 or 4
''' (b) level 2 (64 octcubes to cover the entire color space)
''' (2) For best results, using %level = 4 is recommended.
''' Why do we provide an option for using level 3?  Because
''' there are 512 octcubes at level 3, and for many images
''' not more than 256 are filled.  As a result, on some images
''' a very accurate quantized representation is possible using
''' %level = 3.
''' (3) This first breaks up the color space into octcubes at the
''' input %level, and computes, for each octcube, the average
''' value of the pixels that are in it.
''' (4) Then there are two possible situations
''' (a) If there are not more than 256 populated octcubes,
''' it returns a cmapped pix with those values assigned.
''' (b) Otherwise, it selects 192 octcubes containing the largest
''' number of pixels and quantizes pixels within those octcubes
''' to their average.  Then, to handle the residual pixels
''' that are not in those 192 octcubes, it generates a
''' level 2 octree consisting of 64 octcubes, and within
''' each octcube it quantizes the residual pixels to their
''' average within each of those level 2 octcubes.
''' (5) Unpopulated level 2 octcubes are represented in the colormap
''' by their centers.  This, of course, has no effect unless
''' dithering is used for the output image.
''' (6) The depth of pixd is the minimum required to support the
''' number of colors found at %level; namely, 2, 4 or 8.
''' (7) This function works particularly well on images such as maps,
''' where there are a relatively small number of well-populated
''' colors, but due to antialiasing and compression artifacts
''' there may be a large number of different colors.  This will
''' pull out and represent accurately the highly populated colors,
''' while still making a reasonable approximation for the others.
''' (8) The highest level of octcubes allowed is 4.  Use of higher
''' levels typically results in having a small fraction of
''' pixels in the most populated 192 octcubes.  As a result,
''' most of the pixels are represented at level 2, which is
''' not sufficiently accurate.
''' (9) Dithering shows artifacts on some images.  If you plan to
''' dither, pixOctreeColorQuant() and pixFixedOctcubeQuant256()
''' usually give better results.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="level">[in] - significant bits for each of RGB; valid for {3,4}, Use 0 for default (level 4; recommended</param>
'''  <param name="ditherflag">[in] - 1 to dither, 0 otherwise</param>
'''   <returns>pixd quantized to octcubes or NULL on error</returns>
Public Shared Function pixOctreeQuantByPopulation(
				ByVal pixs as Pix, 
				ByVal level as Integer, 
				ByVal ditherflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOctreeQuantByPopulation( pixs.Pointer, level, ditherflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant1.c (2263, 1)
' pixOctreeQuantNumColors()
' pixOctreeQuantNumColors(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' pixOctreeColorQuant is very flexible in terms of the relative
''' depth of different cubes of the octree.   By contrast, this function,
''' pixOctreeQuantNumColors is also adaptive, but it supports octcube
''' leaves at only two depths a smaller depth that guarantees
''' full coverage of the color space and octcubes at one level
''' deeper for more accurate colors.  Its main virutes are simplicity
''' and speed, which are both derived from the natural indexing of
''' the octcubes from the RGB values.
''' Before describing pixOctreeQuantNumColors, consider an even simpler
''' approach for 4 bpp with either 8 or 16 colors.  With 8 colors,
''' you simply go to level 1 octcubes and use the average color
''' found in each cube.  For 16 colors, you find which of the three
''' colors has the largest variance at the second level, and use two
''' indices for that color.  The result is quite poor, because 1 some
''' of the cubes are nearly empty and 2 you don't get much color
''' differentiation for the extra 8 colors.  Trust me, this method may
''' be simple, but it isn't worth anything.
''' In pixOctreeQuantNumColors, we generate colormapped images at
''' either 4 bpp or 8 bpp.  For 4 bpp, we have a minimum of 8 colors
''' for the level 1 octcubes, plus up to 8 additional colors that
''' are determined from the level 2 popularity.  If the number of colors
''' is between 8 and 16, the output is a 4 bpp image.  If the number of
''' colors is greater than 16, the output is a 8 bpp image.
''' We use a priority queue, implemented with a heap, to select the
''' requisite number of most populated octcubes at the deepest level
''' level 2 for 64 or fewer colors; level 3 for more than 64 colors.
''' These are combined with one color for each octcube one level above,
''' which is used to span the color space of octcubes that were not
''' included at the deeper level.
''' If the deepest level is 2, we combine the popular level 2 octcubes
''' out of a total of 64 with the 8 level 1 octcubes.  If the deepest
''' level is 3, we combine the popular level 3 octcubes out of a
''' total 512 with the 64 level 2 octcubes that span the color space.
''' In the latter case, we require a minimum of 64 colors for the level 2
''' octcubes, plus up to 192 additional colors determined from level 3
''' popularity.
''' The parameter 'maxlevel' is the deepest octcube level that is used.
''' The implementation also uses two LUTs, which are employed in
''' two successive traversals of the dest image.  The first maps
''' from the src octindex at 'maxlevel' to the color table index,
''' which is the value that is stored in the 4 or 8 bpp dest pixel.
''' The second LUT maps from that colormap value in the dest to a
''' new colormap value for a minimum sized colormap, stored back in
''' the dest.  It is used to remove any color map entries that
''' correspond to color space regions that have no pixels in the
''' source image.  These regions can be either from the higher level
''' e.g., level 1 for 4 bpp, or from octcubes at 'maxlevel' that
''' are unoccupied.  This remapping results in the minimum number
''' of colors used according to the constraints induced by the
''' input 'maxcolors'.  We also compute the average R, G and B color
''' values in each region of the color space represented by a
''' colormap entry, and store them in the colormap.
''' The maximum number of colors is input, which determines the
''' following properties of the dest image and octcube regions used
''' Number of colors   dest image depth   maxlevel
''' ----------------   ----------------   --------
''' 8 to 16   4 bpp   2
''' 17 to 64  8 bpp   2
''' 65 to 256 8 bpp   3
''' It may turn out that the number of extra colors, beyond the
''' minimum 8 and 64 for maxlevel 2 and 3, respectively, is larger
''' than the actual number of occupied cubes at these levels
''' In that case, all the pixels are contained in this
''' subset of cubes at maxlevel, and no colormap colors are needed
''' to represent the remainder pixels one level above.  Thus, for
''' example, in use one often finds that the pixels in an image
''' occupy less than 192 octcubes at level 3, so they can be represented
''' by a colormap for octcubes at level 3 only.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="maxcolors">[in] - 8 to 256; the actual number of colors used may be less than this</param>
'''  <param name="subsample">[in] - factor for computing color distribution; use 0 for default</param>
'''   <returns>pixd 4 or 8 bpp, colormapped, or NULL on error</returns>
Public Shared Function pixOctreeQuantNumColors(
				ByVal pixs as Pix, 
				ByVal maxcolors as Integer, 
				ByVal subsample as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOctreeQuantNumColors( pixs.Pointer, maxcolors, subsample)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant1.c (2587, 1)
' pixOctcubeQuantMixedWithGray()
' pixOctcubeQuantMixedWithGray(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Generates a colormapped image, where the colormap table values
''' have two components octcube values representing pixels with
''' color content, and grayscale values for the rest.
''' (2) The threshold (delta) is the maximum allowable difference of
''' the max abs value of | r - g |, | r - b | and | g - b |.
''' (3) The octcube values are the averages of all pixels that are
''' found in the octcube, and that are far enough from gray to
''' be considered color.  This can roughly be visualized as all
''' the points in the rgb color cube that are not within a "cylinder"
''' of diameter approximately 'delta' along the main diagonal.
''' (4) We want to guarantee full coverage of the rgb color space; thus,
''' if the output depth is 4, the octlevel is 1 (2 x 2 x 2 = 8 cubes)
''' and if the output depth is 8, the octlevel is 2 (4 x 4 x 4
''' = 64 cubes).
''' (5) Consequently, we have the following constraint on the number
''' of allowed gray levels for 4 bpp, 8; for 8 bpp, 192.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="depth">[in] - of output pix</param>
'''  <param name="graylevels">[in] - graylevels (must be GT 1)</param>
'''  <param name="delta">[in] - threshold for deciding if a pix is color or gray</param>
'''   <returns>pixd     quantized to octcube and gray levels or NULL on error</returns>
Public Shared Function pixOctcubeQuantMixedWithGray(
				ByVal pixs as Pix, 
				ByVal depth as Integer, 
				ByVal graylevels as Integer, 
				ByVal delta as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOctcubeQuantMixedWithGray( pixs.Pointer, depth, graylevels, delta)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant1.c (2806, 1)
' pixFixedOctcubeQuant256()
' pixFixedOctcubeQuant256(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' This simple 1-pass color quantization works by breaking the
''' color space into 256 pieces, with 3 bits quantized for each of
''' red and green, and 2 bits quantized for blue.  We shortchange
''' blue because the eye is least sensitive to blue.  This
''' division of the color space is into two levels of octrees,
''' followed by a further division by 4 not 8, where both
''' blue octrees have been combined in the third level.
''' The color map is generated from the 256 color centers by
''' taking the representative color to be the center of the
''' cell volume.  This gives a maximum error in the red and
''' green values of 16 levels, and a maximum error in the
''' blue sample of 32 levels.
''' Each pixel in the 24-bit color image is placed in its containing
''' cell, given by the relevant MSbits of the red, green and blue
''' samples.  An error-diffusion dithering is performed on each
''' color sample to give the appearance of good average local color.
''' Dithering is required; without it, the contouring and visible
''' color errors are very bad.
''' I originally implemented this algorithm in two passes,
''' where the first pass was used to compute the weighted average
''' of each sample in each pre-allocated region of color space.
''' The idea was to use these centroids in the dithering algorithm
''' of the second pass, to reduce the average error that was
''' being dithered.  However, with dithering, there is
''' virtually no difference, so there is no reason to make the
''' first pass.  Consequently, this 1-pass version just assigns
''' the pixels to the centers of the pre-allocated cells.
''' We use dithering to spread the difference between the sample
''' value and the location of the center of the cell.  For speed
''' and simplicity, we use integer dithering and propagate only
''' to the right, down, and diagonally down-right, with ratios
''' 3/8, 3/8 and 1/4, respectively.  The results should be nearly
''' as good, and a bit faster, with propagation only to the right
''' and down.
''' The algorithm is very fast, because there is no search,
''' only fast generation of the cell index for each pixel.
''' We use a simple mapping from the three 8 bit rgb samples
''' to the 8 bit cell index; namely, r7 r6 r5 g7 g6 g5 b7 b6.
''' This is not in an octcube format, but it doesn't matter.
''' There are no storage requirements.  We could keep a
''' running average of the center of each sample in each
''' cluster, rather than using the center of the cell, but
''' this is just extra work, esp. with dithering.
''' This method gives surprisingly good results with dithering.
''' However, without dithering, the loss of color accuracy is
''' evident in regions that are very light or that have subtle
''' blending of colors.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp; 24-bit color</param>
'''  <param name="ditherflag">[in] - 1 for dithering; 0 for no dithering</param>
'''   <returns>pixd 8 bit with colormap, or NULL on error</returns>
Public Shared Function pixFixedOctcubeQuant256(
				ByVal pixs as Pix, 
				ByVal ditherflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFixedOctcubeQuant256( pixs.Pointer, ditherflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant1.c (2940, 1)
' pixFewColorsOctcubeQuant1()
' pixFewColorsOctcubeQuant1(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Generates a colormapped image, where the colormap table values
''' are the averages of all pixels that are found in the octcube.
''' (2) This fails if there are more than 256 colors (i.e., more
''' than 256 occupied octcubes).
''' (3) Often level 3 (512 octcubes) will succeed because not more
''' than half of them are occupied with 1 or more pixels.
''' (4) The depth of the result, which is either 2, 4 or 8 bpp,
''' is the minimum required to hold the number of colors that
''' are found.
''' (5) This can be useful for quantizing orthographically generated
''' images such as color maps, where there may be more than 256 colors
''' because of aliasing or jpeg artifacts on text or lines, but
''' there are a relatively small number of solid colors.  Then,
''' use with level = 3 can often generate a compact and accurate
''' representation of the original RGB image.  For this purpose,
''' it is better than pixFewColorsOctcubeQuant2(), because it
''' uses the average value of pixels in the octcube rather
''' than the first found pixel.  It is also simpler to use,
''' because it generates the histogram internally.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="level">[in] - significant bits for each of RGB; valid in [1...6]</param>
'''   <returns>pixd quantized to octcube or NULL on error</returns>
Public Shared Function pixFewColorsOctcubeQuant1(
				ByVal pixs as Pix, 
				ByVal level as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFewColorsOctcubeQuant1( pixs.Pointer, level)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant1.c (3110, 1)
' pixFewColorsOctcubeQuant2()
' pixFewColorsOctcubeQuant2(PIX *, l_int32, NUMA *, l_int32, l_int32 *) as PIX *
'''  <summary>
''' Notes
''' (1) Generates a colormapped image, where the colormap table values
''' are the averages of all pixels that are found in the octcube.
''' (2) This fails if there are more than 256 colors (i.e., more
''' than 256 occupied octcubes).
''' (3) Often level 3 (512 octcubes) will succeed because not more
''' than half of them are occupied with 1 or more pixels.
''' (4) For an image with not more than 256 colors, it is unlikely
''' that two pixels of different color will fall in the same
''' octcube at level = 4.   However it is possible, and this
''' function optionally returns %nerrors, the number of pixels
''' where, because more than one color is in the same octcube,
''' the pixel color is not exactly reproduced in the colormap.
''' The colormap for an occupied leaf of the octree contains
''' the color of the first pixel encountered in that octcube.
''' (5) This differs from pixFewColorsOctcubeQuant1(), which also
''' requires not more than 256 occupied leaves, but represents
''' the color of each leaf by an average over the pixels in
''' that leaf.  This also requires precomputing the histogram
''' of occupied octree leaves, which is generated using
''' pixOctcubeHistogram().
''' (6) This is used in pixConvertRGBToColormap() for images that
''' are determined, by their histogram, to have relatively few
''' colors.  This typically happens with orthographically
''' produced images (as oppopsed to natural images), where
''' it is expected that most of the pixels within a leaf
''' octcube have exactly the same color, and quantization to
''' that color is lossless.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="level">[in] - of octcube indexing, for histogram 3, 4, 5, 6</param>
'''  <param name="na">[in] - histogram of pixel occupation in octree leaves at given level</param>
'''  <param name="ncolors">[in] - number of occupied octree leaves at given level</param>
'''  <param name="pnerrors">[out][optional] - num of pixels not exactly represented in the colormap</param>
'''   <returns>pixd 2, 4 or 8 bpp with colormap, or NULL on error</returns>
Public Shared Function pixFewColorsOctcubeQuant2(
				ByVal pixs as Pix, 
				ByVal level as Integer, 
				ByVal na as Numa, 
				ByVal ncolors as Integer, 
				ByRef pnerrors as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFewColorsOctcubeQuant2( pixs.Pointer, level, na.Pointer, ncolors, pnerrors)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant1.c (3299, 1)
' pixFewColorsOctcubeQuantMixed()
' pixFewColorsOctcubeQuantMixed(PIX *, l_int32, l_int32, l_int32, l_int32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) First runs pixFewColorsOctcubeQuant1().  If this succeeds,
''' it separates the color from gray(ish) entries in the cmap,
''' and re-quantizes the gray pixels.  The result has some pixels
''' in color and others in gray.
''' (2) This fails if there are more than 256 colors (i.e., more
''' than 256 occupied octcubes in the color quantization).
''' (3) Level 3 (512 octcubes) will usually succeed because not more
''' than half of them are occupied with 1 or more pixels.
''' (4) This uses the criterion from pixColorFraction() for deciding
''' if a colormap entry is color; namely, if the color components
''' are not too close to either black or white, and the maximum
''' difference between component values equals or exceeds a threshold.
''' (5) For quantizing the gray pixels, it uses a histogram-based
''' method where input parameters determining the buckets are
''' the minimum population fraction and the maximum allowed size.
''' (6) Recommended input parameters are
''' %level  3 or 4  (3 is default)
''' %darkthresh  20
''' %lightthresh 244
''' %diffthresh 20
''' %minfract 0.05
''' %maxspan 15
''' These numbers are intended to be conservative (somewhat over-
''' sensitive) in color detection,  It's usually better to pay
''' extra with octcube quantization of a grayscale image than
''' to use grayscale quantization on an image that has some
''' actual color.  Input 0 on any of these to get the default.
''' (7) This can be useful for quantizing orthographically generated
''' images such as color maps, where there may be more than 256 colors
''' because of aliasing or jpeg artifacts on text or lines, but
''' there are a relatively small number of solid colors.  It usually
''' gives results that are better than pixOctcubeQuantMixedWithGray(),
''' both in size and appearance.  But it is a bit slower.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="level">[in] - significant octcube bits for each of RGB; valid in [1...6]; use 0 for default</param>
'''  <param name="darkthresh">[in] - threshold near black; if the lightest component is below this, the pixel is not considered to be gray or color; uses 0 for default</param>
'''  <param name="lightthresh">[in] - threshold near white; if the darkest component is above this, the pixel is not considered to be gray or color; use 0 for default</param>
'''  <param name="diffthresh">[in] - thresh for the max difference between component values; for differences below this, the pixel is considered to be gray; use 0 for default</param>
'''  <param name="minfract">[in] - min fraction of pixels for gray histo bin; use 0.0 for default</param>
'''  <param name="maxspan">[in] - max size of gray histo bin; use 0 for default</param>
'''   <returns>pixd 8 bpp, quantized to octcube for pixels that are not gray; gray pixels are quantized separately over the full gray range, or NULL on error</returns>
Public Shared Function pixFewColorsOctcubeQuantMixed(
				ByVal pixs as Pix, 
				ByVal level as Integer, 
				ByVal darkthresh as Integer, 
				ByVal lightthresh as Integer, 
				ByVal diffthresh as Integer, 
				ByVal minfract as Single, 
				ByVal maxspan as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (minfract) then Throw New ArgumentNullException  ("minfract cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFewColorsOctcubeQuantMixed( pixs.Pointer, level, darkthresh, lightthresh, diffthresh, minfract, maxspan)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant1.c (3417, 1)
' pixFixedOctcubeQuantGenRGB()
' pixFixedOctcubeQuantGenRGB(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Unlike the other color quantization functions, this one
''' generates an rgb image.
''' (2) The pixel values are quantized to the center of each octcube
''' (at the specified level) containing the pixel.  They are
''' not quantized to the average of the pixels in that octcube.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="level">[in] - significant bits for each of r,g,b</param>
'''   <returns>pixd rgb; quantized to octcube centers, or NULL on error</returns>
Public Shared Function pixFixedOctcubeQuantGenRGB(
				ByVal pixs as Pix, 
				ByVal level as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFixedOctcubeQuantGenRGB( pixs.Pointer, level)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant1.c (3490, 1)
' pixQuantFromCmap()
' pixQuantFromCmap(PIX *, PIXCMAP *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a top-level wrapper for quantizing either grayscale
''' or rgb images to a specified colormap.
''' (2) The actual output depth is constrained by %mindepth and
''' by the number of colors in %cmap.
''' (3) For grayscale, %level and %metric are ignored.
''' (4) If the cmap has color and pixs is grayscale, the color is
''' removed from the cmap before quantizing pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale without cmap, or 32 bpp rgb</param>
'''  <param name="cmap">[in] - to quantize to; insert copy into dest pix</param>
'''  <param name="mindepth">[in] - minimum depth of pixd can be 2, 4 or 8 bpp</param>
'''  <param name="level">[in] - of octcube used for finding nearest color in cmap</param>
'''  <param name="metric">[in] - L_MANHATTAN_DISTANCE, L_EUCLIDEAN_DISTANCE</param>
'''   <returns>pixd  2, 4 or 8 bpp, colormapped, or NULL on error</returns>
Public Shared Function pixQuantFromCmap(
				ByVal pixs as Pix, 
				ByVal cmap as PixColormap, 
				ByVal mindepth as Integer, 
				ByVal level as Integer, 
				ByVal metric as Enumerations.L_AN_DISTANCE) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixQuantFromCmap( pixs.Pointer, cmap.Pointer, mindepth, level, metric)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant1.c (3579, 1)
' pixOctcubeQuantFromCmap()
' pixOctcubeQuantFromCmap(PIX *, PIXCMAP *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) In typical use, we are doing an operation, such as
''' interpolative scaling, on a colormapped pix, where it is
''' necessary to remove the colormap before the operation.
''' We then want to re-quantize the RGB result using the same
''' colormap.
''' (2) The level is used to divide the color space into octcubes.
''' Each input pixel is, in effect, placed at the center of an
''' octcube at the given level, and it is mapped into the
''' exact color (given in the colormap) that is the closest
''' to that location.  We need to know that distance, for each color
''' in the colormap.  The higher the level of the octtree, the smaller
''' the octcubes in the color space, and hence the more accurately
''' we can determine the closest color in the colormap; however,
''' the size of the LUT, which is the total number of octcubes,
''' increases by a factor of 8 for each increase of 1 level.
''' The time required to acquire a level 4 mapping table, which has
''' about 4K entries, is less than 1 msec, so that is the
''' recommended minimum size to be used.  At that size, the
''' octcubes have their centers 16 units apart in each (r,g,b)
''' direction.  If two colors are in the same octcube, the one
''' closest to the center will always be chosen.  The maximum
''' error for any component occurs when the correct color is
''' at a cube corner and there is an incorrect color just inside
''' the cube next to the opposite corner, giving an error of
''' 14 units (out of 256) for each component.   Using a level 5
''' mapping table reduces the maximum error to 6 units.
''' (3) Typically you should use the Euclidean metric, because the
''' resulting voronoi cells (which are generated using the actual
''' colormap values as seeds) are convex for Euclidean distance
''' but not for Manhattan distance.  In terms of the octcubes,
''' convexity of the voronoi cells means that if the 8 corners
''' of any cube (of which the octcubes are special cases)
''' are all within a cell, then every point in the cube will
''' lie within the cell.
''' (4) The depth of the output pixd is equal to the maximum of
''' (a) %mindepth and (b) the minimum (2, 4 or 8 bpp) necessary
''' to hold the indices in the colormap.
''' (5) We build a mapping table from octcube to colormap index so
''' that this function can run in a time (otherwise) independent
''' of the number of colors in the colormap.  This avoids a
''' brute-force search for the closest colormap color to each
''' pixel in the image.
''' (6) This is similar to the function pixAssignToNearestColor()
''' used for color segmentation.
''' (7) Except for very small images or when using level GT 4,
''' it takes very little time to generate the tables,
''' compared to the generation of the colormapped dest pix,
''' so one would not typically use the low-level version.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="cmap">[in] - to quantize to; insert copy into dest pix</param>
'''  <param name="mindepth">[in] - minimum depth of pixd can be 2, 4 or 8 bpp</param>
'''  <param name="level">[in] - of octcube used for finding nearest color in cmap</param>
'''  <param name="metric">[in] - L_MANHATTAN_DISTANCE, L_EUCLIDEAN_DISTANCE</param>
'''   <returns>pixd  2, 4 or 8 bpp, colormapped, or NULL on error</returns>
Public Shared Function pixOctcubeQuantFromCmap(
				ByVal pixs as Pix, 
				ByVal cmap as PixColormap, 
				ByVal mindepth as Integer, 
				ByVal level as Integer, 
				ByVal metric as Enumerations.L_AN_DISTANCE) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOctcubeQuantFromCmap( pixs.Pointer, cmap.Pointer, mindepth, level, metric)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant1.c (3729, 1)
' pixOctcubeHistogram()
' pixOctcubeHistogram(PIX *, l_int32, l_int32 *) as NUMA *
'''  <summary>
''' Notes
''' (1) Input NULL for ncolors to prevent computation and return value.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="level">[in] - significant bits for each of RGB; valid in [1...6]</param>
'''  <param name="pncolors">[out][optional] - number of occupied cubes</param>
'''   <returns>numa histogram of color pixels, or NULL on error</returns>
Public Shared Function pixOctcubeHistogram(
				ByVal pixs as Pix, 
				ByVal level as Integer, 
				ByRef pncolors as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOctcubeHistogram( pixs.Pointer, level, pncolors)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\colorquant1.c (3852, 1)
' pixcmapToOctcubeLUT()
' pixcmapToOctcubeLUT(PIXCMAP *, l_int32, l_int32) as l_int32 *
'''  <summary>
''' Notes
''' (1) This function is used to quickly find the colormap color
''' that is closest to any rgb color.  It is used to assign
''' rgb colors to an existing colormap.  It can be very expensive
''' to search through the entire colormap for the closest color
''' to each pixel.  Instead, we first set up this table, which is
''' populated by the colormap index nearest to each octcube
''' color.  Then we go through the image; for each pixel,
''' do two table lookups first to generate the octcube index
''' from rgb and second to use this table to read out the
''' colormap index.
''' (2) Do a slight modification for white and black.  For level = 4,
''' each octcube size is 16.  The center of the whitest octcube
''' is at (248, 248, 248), which is closer to 242 than 255.
''' Consequently, any gray color between 242 and 254 will
''' be selected, even if white (255, 255, 255) exists.  This is
''' typically not optimal, because the original color was
''' likely white.  Therefore, if white exists in the colormap,
''' use it for any rgb color that falls into the most white octcube.
''' Do the similar thing for black.
''' (3) Here are the actual function calls for quantizing to a
''' specified colormap
''' ~ first make the tables that map from rgb --GT octcube index
''' makeRGBToIndexTables()
''' ~ then for each pixel
''' use the tables to get the octcube index
''' getOctcubeIndexFromRGB()
''' use this table to get the nearest color in the colormap
''' cmap_index = tab[index]
''' (4) Distance can be either manhattan or euclidean.
''' (5) In typical use, level = 4 gives reasonable results, and
''' level = 5 is slightly better.  When this function is used
''' for color segmentation, there are typically a small number
''' of colors and the number of levels can be small (e.g., level = 3).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - </param>
'''  <param name="level">[in] - significant bits for each of RGB; valid in [1...6]</param>
'''  <param name="metric">[in] - L_MANHATTAN_DISTANCE, L_EUCLIDEAN_DISTANCE</param>
'''   <returns>tab[23  level]</returns>
Public Shared Function pixcmapToOctcubeLUT(
				ByVal cmap as PixColormap, 
				ByVal level as Integer, 
				ByVal metric as Enumerations.L_AN_DISTANCE) as Integer()

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer() = LeptonicaSharp.Natives.pixcmapToOctcubeLUT( cmap.Pointer, level, metric)

	Return _Result
End Function

' SRC\colorquant1.c (3938, 1)
' pixRemoveUnusedColors()
' pixRemoveUnusedColors(PIX *) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place operation.
''' (2) If the image doesn't have a colormap, returns without error.
''' (3) Unusued colors are removed from the colormap, and the
''' image pixels are re-numbered.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - colormapped</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRemoveUnusedColors(
				ByVal pixs as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRemoveUnusedColors( pixs.Pointer)

	Return _Result
End Function

' SRC\colorquant1.c (4084, 1)
' pixNumberOccupiedOctcubes()
' pixNumberOccupiedOctcubes(PIX *, l_int32, l_int32, l_float32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Exactly one of (%mincount, %minfract) must be -1, so, e.g.,
''' if %mincount == -1, then we use %minfract.
''' (2) If all occupied octcubes are to count, set %mincount == 1.
''' Setting %minfract == 0.0 is taken to mean the same thing.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 32 bpp</param>
'''  <param name="level">[in] - of octcube</param>
'''  <param name="mincount">[in] - minimum num pixels in an octcube to be counted; -1 to not use</param>
'''  <param name="minfract">[in] - minimum fract of pixels in an octcube to be counted; -1 to not use</param>
'''  <param name="pncolors">[out] - number of occupied octcubes</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixNumberOccupiedOctcubes(
				ByVal pix as Pix, 
				ByVal level as Integer, 
				ByVal mincount as Integer, 
				ByVal minfract as Single, 
				ByRef pncolors as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (minfract) then Throw New ArgumentNullException  ("minfract cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixNumberOccupiedOctcubes( pix.Pointer, level, mincount, minfract, pncolors)

	Return _Result
End Function

#End Region
#Region "SRC\colorquant2.c"
' SRC\colorquant2.c (257, 1)
' pixMedianCutQuant()
' pixMedianCutQuant(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Simple interface.  See pixMedianCutQuantGeneral() for
''' use of defaulted parameters.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp; rgb color</param>
'''  <param name="ditherflag">[in] - 1 for dither; 0 for no dither</param>
'''   <returns>pixd 8 bit with colormap, or NULL on error</returns>
Public Shared Function pixMedianCutQuant(
				ByVal pixs as Pix, 
				ByVal ditherflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMedianCutQuant( pixs.Pointer, ditherflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant2.c (308, 1)
' pixMedianCutQuantGeneral()
' pixMedianCutQuantGeneral(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) %maxcolors must be in the range [2 ... 256].
''' (2) Use %outdepth = 0 to have the output depth computed as the
''' minimum required to hold the actual colors found, given
''' the %maxcolors constraint.
''' (3) Use %outdepth = 1, 2, 4 or 8 to specify the output depth.
''' In that case, %maxcolors must not exceed 2^(outdepth).
''' (4) If there are fewer quantized colors in the image than %maxcolors,
''' the colormap is simply generated from those colors.
''' (5) %maxsub is the maximum allowed subsampling to be used in the
''' computation of the color histogram and region of occupied
''' color space.  The subsampling is chosen internally for
''' efficiency, based on the image size, but this parameter
''' limits it.  Use %maxsub = 0 for the internal default, which is the
''' maximum allowed subsampling.  Use %maxsub = 1 to prevent
''' subsampling.  In general use %maxsub GT= 1 to specify the
''' maximum subsampling to be allowed, where the actual subsampling
''' will be the minimum of this value and the internally
''' determined default value.
''' (6) If the image appears gray because either most of the pixels
''' are gray or most of the pixels are essentially black or white,
''' the image is trivially quantized with a grayscale colormap.  The
''' reason is that median cut divides the color space into rectangular
''' regions, and it does a very poor job if all the pixels are
''' near the diagonal of the color space cube.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp; rgb color</param>
'''  <param name="ditherflag">[in] - 1 for dither; 0 for no dither</param>
'''  <param name="outdepth">[in] - output depth; valid 0, 1, 2, 4, 8</param>
'''  <param name="maxcolors">[in] - between 2 and 256</param>
'''  <param name="sigbits">[in] - valid 5 or 6; use 0 for default</param>
'''  <param name="maxsub">[in] - max subsampling, integer; use 0 for default; 1 for no subsampling</param>
'''  <param name="checkbw">[in] - 1 to check if color content is very small, 0 to assume there is sufficient color</param>
'''   <returns>pixd 8 bit with colormap, or NULL on error</returns>
Public Shared Function pixMedianCutQuantGeneral(
				ByVal pixs as Pix, 
				ByVal ditherflag as Integer, 
				ByVal outdepth as Integer, 
				ByVal maxcolors as Integer, 
				ByVal sigbits as Integer, 
				ByVal maxsub as Integer, 
				ByVal checkbw as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMedianCutQuantGeneral( pixs.Pointer, ditherflag, outdepth, maxcolors, sigbits, maxsub, checkbw)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant2.c (579, 1)
' pixMedianCutQuantMixed()
' pixMedianCutQuantMixed(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) ncolor + ngray must not exceed 255.
''' (2) The method makes use of pixMedianCutQuantGeneral() with
''' minimal addition.
''' (a) Preprocess the image, setting all pixels with little color
''' to black, and populating an auxiliary 8 bpp image with the
''' expected colormap values corresponding to the set of
''' quantized gray values.
''' (b) Color quantize the altered input image to n + 1 colors.
''' (c) Augment the colormap with the gray indices, and
''' substitute the gray quantized values from the auxiliary
''' image for those in the color quantized output that had
''' been quantized as black.
''' (3) Median cut color quantization is relatively poor for grayscale
''' images with many colors, when compared to octcube quantization.
''' Thus, for images with both gray and color, it is important
''' to quantize the gray pixels by another method.  Here, we
''' are conservative in detecting color, preferring to use
''' a few extra bits to encode colorful pixels that push them
''' to gray.  This is particularly reasonable with this function,
''' because it handles the gray and color pixels separately,
''' using median cut color quantization for the color pixels
''' and equal-bin grayscale quantization for the non-color pixels.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp; rgb color</param>
'''  <param name="ncolor">[in] - maximum number of colors assigned to pixels with significant color</param>
'''  <param name="ngray">[in] - number of gray colors to be used; must be GT= 2</param>
'''  <param name="darkthresh">[in] - threshold near black; if the lightest component is below this, the pixel is not considered to be gray or color; uses 0 for default</param>
'''  <param name="lightthresh">[in] - threshold near white; if the darkest component is above this, the pixel is not considered to be gray or color; use 0 for default</param>
'''  <param name="diffthresh">[in] - thresh for the max difference between component values; for differences below this, the pixel is considered to be gray; use 0 for default</param>
'''   <returns>pixd 8 bpp cmapped, or NULL on error</returns>
Public Shared Function pixMedianCutQuantMixed(
				ByVal pixs as Pix, 
				ByVal ncolor as Integer, 
				ByVal ngray as Integer, 
				ByVal darkthresh as Integer, 
				ByVal lightthresh as Integer, 
				ByVal diffthresh as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMedianCutQuantMixed( pixs.Pointer, ncolor, ngray, darkthresh, lightthresh, diffthresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant2.c (754, 1)
' pixFewColorsMedianCutQuantMixed()
' pixFewColorsMedianCutQuantMixed(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is the "few colors" version of pixMedianCutQuantMixed().
''' It fails (returns NULL) if it finds more than maxncolors, but
''' otherwise it gives the same result.
''' (2) Recommended input parameters are
''' %maxncolors  20
''' %darkthresh  20
''' %lightthresh 244
''' %diffthresh  15  (any higher can miss colors differing
''' slightly from gray)
''' (3) Both ncolor and ngray should be at least equal to maxncolors.
''' If they're not, they are automatically increased, and a
''' warning is given.
''' (4) If very little color content is found, the input is
''' converted to gray and quantized in equal intervals.
''' (5) This can be useful for quantizing orthographically generated
''' images such as color maps, where there may be more than 256 colors
''' because of aliasing or jpeg artifacts on text or lines, but
''' there are a relatively small number of solid colors.
''' (6) Example of usage
''' // Try to quantize, using default values for mixed med cut
''' Pix pixq = pixFewColorsMedianCutQuantMixed(pixs, 100, 20,
''' 0, 0, 0, 0);
''' if (!pixq)  // too many colors; don't quantize
''' pixq = pixClone(pixs);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="ncolor">[in] - number of colors to be assigned to pixels with significant color</param>
'''  <param name="ngray">[in] - number of gray colors to be used; must be GT= 2</param>
'''  <param name="maxncolors">[in] - maximum number of colors to be returned from pixColorsForQuantization(); use 0 for default</param>
'''  <param name="darkthresh">[in] - threshold near black; if the lightest component is below this, the pixel is not considered to be gray or color; use 0 for default</param>
'''  <param name="lightthresh">[in] - threshold near white; if the darkest component is above this, the pixel is not considered to be gray or color; use 0 for default</param>
'''  <param name="diffthresh">[in] - thresh for the max difference between component values; for differences below this, the pixel is considered to be gray; use 0 for default</param>
'''   <returns>pixd 8 bpp, median cut quantized for pixels that are not gray; gray pixels are quantized separately over the full gray range; null if too many colors or on error</returns>
Public Shared Function pixFewColorsMedianCutQuantMixed(
				ByVal pixs as Pix, 
				ByVal ncolor as Integer, 
				ByVal ngray as Integer, 
				ByVal maxncolors as Integer, 
				ByVal darkthresh as Integer, 
				ByVal lightthresh as Integer, 
				ByVal diffthresh as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFewColorsMedianCutQuantMixed( pixs.Pointer, ncolor, ngray, maxncolors, darkthresh, lightthresh, diffthresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorquant2.c (826, 1)
' pixMedianCutHisto()
' pixMedianCutHisto(PIX *, l_int32, l_int32) as l_int32 *
'''  <summary>
''' Notes
''' (1) Array is indexed by (3  sigbits) bits.  The array size
''' is 2^(3  sigbits).
''' (2) Indexing into the array from rgb uses red sigbits as
''' most significant and blue as least.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp; rgb color</param>
'''  <param name="sigbits">[in] - valid 5 or 6</param>
'''  <param name="subsample">[in] - integer GT 0</param>
'''   <returns>histo 1-d array, giving the number of pixels in each quantized region of color space, or NULL on error</returns>
Public Shared Function pixMedianCutHisto(
				ByVal pixs as Pix, 
				ByVal sigbits as Integer, 
				ByVal subsample as Integer) as Integer()

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer() = LeptonicaSharp.Natives.pixMedianCutHisto( pixs.Pointer, sigbits, subsample)

	Return _Result
End Function

#End Region
#Region "SRC\colorseg.c"
' SRC\colorseg.c (129, 1)
' pixColorSegment()
' pixColorSegment(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Color segmentation proceeds in four phases
''' Phase 1  pixColorSegmentCluster()
''' The image is traversed in raster order.  Each pixel either
''' becomes the representative for a new cluster or is assigned to an
''' existing cluster.  Assignment is greedy.  The data is stored in
''' a colormapped image.  Three auxiliary arrays are used to hold
''' the colors of the representative pixels, for fast lookup.
''' The average color in each cluster is computed.
''' Phase 2.  pixAssignToNearestColor()
''' A second non-greedy clustering pass is performed, where each pixel
''' is assigned to the nearest cluster average.  We also keep track
''' of how many pixels are assigned to each cluster.
''' Phase 3.  pixColorSegmentClean()
''' For each cluster, starting with the largest, do a morphological
''' closing to eliminate small components within larger ones.
''' Phase 4.  pixColorSegmentRemoveColors()
''' Eliminate all colors except the most populated 'finalcolors'.
''' Then remove unused colors from the colormap, and reassign those
''' pixels to the nearest remaining cluster, using the original pixel values.
''' Notes
''' (1) The goal is to generate a small number of colors.
''' Typically this would be specified by 'finalcolors',
''' a number that would be somewhere between 3 and 6.
''' The parameter 'maxcolors' specifies the maximum number of
''' colors generated in the first phase.  This should be
''' larger than finalcolors, perhaps twice as large.
''' If more than 'maxcolors' are generated in the first phase
''' using the input 'maxdist', the distance is repeatedly
''' increased by a multiplicative factor until the condition
''' is satisfied.  The implicit relation between 'maxdist'
''' and 'maxcolors' is thus adjusted programmatically.
''' (2) As a very rough guideline, given a target value of 'finalcolors',
''' here are approximate values of 'maxdist' and 'maxcolors'
''' to start with
''' finalcolors maxcolors maxdist
''' ----------- --------- -------
''' 3 6 100
''' 4 8  90
''' 5   10  75
''' 6   12  60
''' For a given number of finalcolors, if you use too many
''' maxcolors, the result will be noisy.  If you use too few,
''' the result will be a relatively poor assignment of colors.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp; 24-bit color</param>
'''  <param name="maxdist">[in] - max euclidean dist to existing cluster</param>
'''  <param name="maxcolors">[in] - max number of colors allowed in first pass</param>
'''  <param name="selsize">[in] - linear size of sel for closing to remove noise</param>
'''  <param name="finalcolors">[in] - max number of final colors allowed after 4th pass</param>
'''  <param name="debugflag">[in] - 1 for debug output; 0 otherwise</param>
'''   <returns>pixd 8 bit with colormap, or NULL on error</returns>
Public Shared Function pixColorSegment(
				ByVal pixs as Pix, 
				ByVal maxdist as Integer, 
				ByVal maxcolors as Integer, 
				ByVal selsize as Integer, 
				ByVal finalcolors as Integer, 
				ByVal debugflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixColorSegment( pixs.Pointer, maxdist, maxcolors, selsize, finalcolors, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorseg.c (200, 1)
' pixColorSegmentCluster()
' pixColorSegmentCluster(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is phase 1.  See description in pixColorSegment().
''' (2) Greedy unsupervised classification.  If the limit 'maxcolors'
''' is exceeded, the computation is repeated with a larger
''' allowed cluster size.
''' (3) On each successive iteration, 'maxdist' is increased by a
''' constant factor.  See comments in pixColorSegment() for
''' a guideline on parameter selection.
''' Note that the diagonal of the 8-bit rgb color cube is about
''' 440, so for 'maxdist' = 440, you are guaranteed to get 1 color!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp; 24-bit color</param>
'''  <param name="maxdist">[in] - max euclidean dist to existing cluster</param>
'''  <param name="maxcolors">[in] - max number of colors allowed in first pass</param>
'''  <param name="debugflag">[in] - 1 for debug output; 0 otherwise</param>
'''   <returns>pixd 8 bit with colormap, or NULL on error</returns>
Public Shared Function pixColorSegmentCluster(
				ByVal pixs as Pix, 
				ByVal maxdist as Integer, 
				ByVal maxcolors as Integer, 
				ByVal debugflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixColorSegmentCluster( pixs.Pointer, maxdist, maxcolors, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorseg.c (412, 1)
' pixAssignToNearestColor()
' pixAssignToNearestColor(PIX *, PIX *, PIX *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This is used in phase 2 of color segmentation, where pixs
''' is the original input image to pixColorSegment(), and
''' pixd is the colormapped image returned from
''' pixColorSegmentCluster().  It is also used, with a mask,
''' in phase 4.
''' (2) This is an in-place operation.
''' (3) The colormap in pixd is unchanged.
''' (4) pixs and pixd must be the same size (w, h).
''' (5) The selection mask pixm can be null.  If it exists, it must
''' be the same size as pixs and pixd, and only pixels
''' corresponding to fg in pixm are assigned.  Set to
''' NULL if all pixels in pixd are to be assigned.
''' (6) The countarray can be null.  If it exists, it is pre-allocated
''' and of a size at least equal to the size of the colormap in pixd.
''' (7) This does a best-fit (non-greedy) assignment of pixels to
''' existing clusters.  Specifically, it assigns each pixel
''' in pixd to the color index in the pixd colormap that has a
''' color closest to the corresponding rgb pixel in pixs.
''' (8) 'level' is the octcube level used to quickly find the nearest
''' color in the colormap for each pixel.  For color segmentation,
''' this parameter is set to LEVEL_IN_OCTCUBE.
''' (9) We build a mapping table from octcube to colormap index so
''' that this function can run in a time (otherwise) independent
''' of the number of colors in the colormap.  This avoids a
''' brute-force search for the closest colormap color to each
''' pixel in the image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - 8 bpp, colormapped</param>
'''  <param name="pixs">[in] - 32 bpp; 24-bit color</param>
'''  <param name="pixm">[in][optional] - 1 bpp</param>
'''  <param name="level">[in] - of octcube used for finding nearest color in cmap</param>
'''  <param name="countarray">[in][optional] - ptr to array, in which we can store the number of pixels found in each color in the colormap in pixd</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixAssignToNearestColor(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal level as Integer, 
				ByVal countarray as Integer()) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixm.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixAssignToNearestColor( pixd.Pointer, pixs.Pointer, pixmPTR, level, countarray)

	Return _Result
End Function

' SRC\colorseg.c (512, 1)
' pixColorSegmentClean()
' pixColorSegmentClean(PIX *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This operation is in-place.
''' (2) This is phase 3 of color segmentation.  It is the first
''' part of a two-step noise removal process.  Colors with a
''' large population are closed first; this operation absorbs
''' small sets of intercolated pixels of a different color.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, colormapped</param>
'''  <param name="selsize">[in] - for closing</param>
'''  <param name="countarray">[in] - ptr to array containing the number of pixels found in each color in the colormap</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixColorSegmentClean(
				ByVal pixs as Pix, 
				ByVal selsize as Integer, 
				ByVal countarray as Integer()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (countarray) then Throw New ArgumentNullException  ("countarray cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixColorSegmentClean( pixs.Pointer, selsize, countarray)

	Return _Result
End Function

' SRC\colorseg.c (584, 1)
' pixColorSegmentRemoveColors()
' pixColorSegmentRemoveColors(PIX *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This operation is in-place.
''' (2) This is phase 4 of color segmentation, and the second part
''' of the 2-step noise removal.  Only 'finalcolors' different
''' colors are retained, with colors with smaller populations
''' being replaced by the nearest color of the remaining colors.
''' For highest accuracy, for pixels that are being replaced,
''' we find the nearest colormap color  to the original rgb color.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - 8 bpp, colormapped</param>
'''  <param name="pixs">[in] - 32 bpp rgb, with initial pixel values</param>
'''  <param name="finalcolors">[in] - max number of colors to retain</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixColorSegmentRemoveColors(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal finalcolors as Integer) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixColorSegmentRemoveColors( pixd.Pointer, pixs.Pointer, finalcolors)

	Return _Result
End Function

#End Region
#Region "SRC\colorspace.c"
' SRC\colorspace.c (134, 1)
' pixConvertRGBToHSV()
' pixConvertRGBToHSV(PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) For pixs = pixd, this is in-place; otherwise pixd must be NULL.
''' (2) The definition of our HSV space is given in convertRGBToHSV().
''' (3) The h, s and v values are stored in the same places as
''' the r, g and b values, respectively.  Here, they are explicitly
''' placed in the 3 MS bytes in the pixel.
''' (4) Normalizing to 1 and considering the r,g,b components,
''' a simple way to understand the HSV space is
''' ~ v = max(r,g,b)
''' ~ s = (max - min) / max
''' ~ h ~ (mid - min) / (max - min)  [apart from signs and constants]
''' (5) Normalizing to 1, some properties of the HSV space are
''' ~ For gray values (r = g = b) along the continuum between
''' black and white
''' s = 0  (becoming undefined as you approach black)
''' h is undefined everywhere
''' ~ Where one component is saturated and the others are zero
''' v = 1
''' s = 1
''' h = 0 (r = max), 1/3 (g = max), 2/3 (b = max)
''' ~ Where two components are saturated and the other is zero
''' v = 1
''' s = 1
''' h = 1/2 (if r = 0), 5/6 (if g = 0), 1/6 (if b = 0)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in]can be NULL - ; if not NULL, must == pixs</param>
'''  <param name="pixs">[in] - </param>
'''   <returns>pixd always</returns>
Public Shared Function pixConvertRGBToHSV(
				ByVal pixd as Pix, 
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertRGBToHSV( pixdPTR, pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (198, 1)
' pixConvertHSVToRGB()
' pixConvertHSVToRGB(PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) For pixs = pixd, this is in-place; otherwise pixd must be NULL.
''' (2) The user takes responsibility for making sure that pixs is
''' in our HSV space.  The definition of our HSV space is given
''' in convertRGBToHSV().
''' (3) The h, s and v values are stored in the same places as
''' the r, g and b values, respectively.  Here, they are explicitly
''' placed in the 3 MS bytes in the pixel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in]can be NULL - ; if not NULL, must == pixs</param>
'''  <param name="pixs">[in] - </param>
'''   <returns>pixd always</returns>
Public Shared Function pixConvertHSVToRGB(
				ByVal pixd as Pix, 
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertHSVToRGB( pixdPTR, pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (273, 1)
' convertRGBToHSV()
' convertRGBToHSV(l_int32, l_int32, l_int32, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The range of returned values is
''' h [0 ... 239]
''' s [0 ... 255]
''' v [0 ... 255]
''' (2) If r = g = b, the pixel is gray (s = 0), and we define h = 0.
''' (3) h wraps around, so that h = 0 and h = 240 are equivalent
''' in hue space.
''' (4) h has the following correspondence to color
''' h = 0   magenta
''' h = 40  red
''' h = 80  yellow
''' h = 120 green
''' h = 160 cyan
''' h = 200 blue
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rval">[in] - RGB input</param>
'''  <param name="gval">[in] - RGB input</param>
'''  <param name="bval">[in] - RGB input</param>
'''  <param name="phval">[out] - HSV values</param>
'''  <param name="psval">[out] - HSV values</param>
'''  <param name="pvval">[out] - HSV values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertRGBToHSV(
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByRef phval as Integer, 
				ByRef psval as Integer, 
				ByRef pvval as Integer) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.convertRGBToHSV( rval, gval, bval, phval, psval, pvval)

	Return _Result
End Function

' SRC\colorspace.c (335, 1)
' convertHSVToRGB()
' convertHSVToRGB(l_int32, l_int32, l_int32, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) See convertRGBToHSV() for valid input range of HSV values
''' and their interpretation in color space.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="hval">[in] - </param>
'''  <param name="sval">[in] - </param>
'''  <param name="vval">[in] - </param>
'''  <param name="prval">[out] - RGB values</param>
'''  <param name="pgval">[out] - RGB values</param>
'''  <param name="pbval">[out] - RGB values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertHSVToRGB(
				ByVal hval as Integer, 
				ByVal sval as Integer, 
				ByVal vval as Integer, 
				ByRef prval as Integer, 
				ByRef pgval as Integer, 
				ByRef pbval as Integer) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.convertHSVToRGB( hval, sval, vval, prval, pgval, pbval)

	Return _Result
End Function

' SRC\colorspace.c (424, 1)
' pixcmapConvertRGBToHSV()
' pixcmapConvertRGBToHSV(PIXCMAP *) as l_ok
'''  <summary>
''' Notes
''' ~ in-place transform
''' ~ See convertRGBToHSV() for def'n of HSV space.
''' ~ replaces r --GT h, g --GT s, b --GT v
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - colormap</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixcmapConvertRGBToHSV(
				ByVal cmap as PixColormap) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapConvertRGBToHSV( cmap.Pointer)

	Return _Result
End Function

' SRC\colorspace.c (457, 1)
' pixcmapConvertHSVToRGB()
' pixcmapConvertHSVToRGB(PIXCMAP *) as l_ok
'''  <summary>
''' Notes
''' ~ in-place transform
''' ~ See convertRGBToHSV() for def'n of HSV space.
''' ~ replaces h --GT r, s --GT g, v --GT b
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - colormap</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixcmapConvertHSVToRGB(
				ByVal cmap as PixColormap) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapConvertHSVToRGB( cmap.Pointer)

	Return _Result
End Function

' SRC\colorspace.c (492, 1)
' pixConvertRGBToHue()
' pixConvertRGBToHue(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) The conversion to HSV hue is in-lined here.
''' (2) If there is a colormap, it is removed.
''' (3) If you just want the hue component, this does it
''' at about 10 Mpixels/sec/GHz, which is about
''' 2x faster than using pixConvertRGBToHSV()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp RGB or 8 bpp with colormap</param>
'''   <returns>pixd 8 bpp hue of HSV, or NULL on error</returns>
Public Shared Function pixConvertRGBToHue(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertRGBToHue( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (568, 1)
' pixConvertRGBToSaturation()
' pixConvertRGBToSaturation(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) The conversion to HSV sat is in-lined here.
''' (2) If there is a colormap, it is removed.
''' (3) If you just want the saturation component, this does it
''' at about 12 Mpixels/sec/GHz.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp RGB or 8 bpp with colormap</param>
'''   <returns>pixd 8 bpp sat of HSV, or NULL on error</returns>
Public Shared Function pixConvertRGBToSaturation(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertRGBToSaturation( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (633, 1)
' pixConvertRGBToValue()
' pixConvertRGBToValue(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) The conversion to HSV sat is in-lined here.
''' (2) If there is a colormap, it is removed.
''' (3) If you just want the value component, this does it
''' at about 35 Mpixels/sec/GHz.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp RGB or 8 bpp with colormap</param>
'''   <returns>pixd 8 bpp max component intensity of HSV, or NULL on error</returns>
Public Shared Function pixConvertRGBToValue(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertRGBToValue( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (702, 1)
' pixMakeRangeMaskHS()
' pixMakeRangeMaskHS(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The pixels are selected based on the specified ranges of
''' hue and saturation.  For selection or exclusion, the pixel
''' HS component values must be within both ranges.  Care must
''' be taken in finding the hue range because of wrap-around.
''' (2) Use %regionflag == L_INCLUDE_REGION to take only those
''' pixels within the rectangular region specified in HS space.
''' Use %regionflag == L_EXCLUDE_REGION to take all pixels except
''' those within the rectangular region specified in HS space.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="huecenter">[in] - center value of hue range</param>
'''  <param name="huehw">[in] - half-width of hue range</param>
'''  <param name="satcenter">[in] - center value of saturation range</param>
'''  <param name="sathw">[in] - half-width of saturation range</param>
'''  <param name="regionflag">[in] - L_INCLUDE_REGION, L_EXCLUDE_REGION</param>
'''   <returns>pixd 1 bpp mask over selected pixels, or NULL on error</returns>
Public Shared Function pixMakeRangeMaskHS(
				ByVal pixs as Pix, 
				ByVal huecenter as Integer, 
				ByVal huehw as Integer, 
				ByVal satcenter as Integer, 
				ByVal sathw as Integer, 
				ByVal regionflag as Enumerations.L_CLUDE_REGION) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMakeRangeMaskHS( pixs.Pointer, huecenter, huehw, satcenter, sathw, regionflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (801, 1)
' pixMakeRangeMaskHV()
' pixMakeRangeMaskHV(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The pixels are selected based on the specified ranges of
''' hue and max intensity values.  For selection or exclusion,
''' the pixel HV component values must be within both ranges.
''' Care must be taken in finding the hue range because of wrap-around.
''' (2) Use %regionflag == L_INCLUDE_REGION to take only those
''' pixels within the rectangular region specified in HV space.
''' Use %regionflag == L_EXCLUDE_REGION to take all pixels except
''' those within the rectangular region specified in HV space.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="huecenter">[in] - center value of hue range</param>
'''  <param name="huehw">[in] - half-width of hue range</param>
'''  <param name="valcenter">[in] - center value of max intensity range</param>
'''  <param name="valhw">[in] - half-width of max intensity range</param>
'''  <param name="regionflag">[in] - L_INCLUDE_REGION, L_EXCLUDE_REGION</param>
'''   <returns>pixd 1 bpp mask over selected pixels, or NULL on error</returns>
Public Shared Function pixMakeRangeMaskHV(
				ByVal pixs as Pix, 
				ByVal huecenter as Integer, 
				ByVal huehw as Integer, 
				ByVal valcenter as Integer, 
				ByVal valhw as Integer, 
				ByVal regionflag as Enumerations.L_CLUDE_REGION) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMakeRangeMaskHV( pixs.Pointer, huecenter, huehw, valcenter, valhw, regionflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (899, 1)
' pixMakeRangeMaskSV()
' pixMakeRangeMaskSV(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The pixels are selected based on the specified ranges of
''' saturation and max intensity (val).  For selection or
''' exclusion, the pixel SV component values must be within both ranges.
''' (2) Use %regionflag == L_INCLUDE_REGION to take only those
''' pixels within the rectangular region specified in SV space.
''' Use %regionflag == L_EXCLUDE_REGION to take all pixels except
''' those within the rectangular region specified in SV space.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="satcenter">[in] - center value of saturation range</param>
'''  <param name="sathw">[in] - half-width of saturation range</param>
'''  <param name="valcenter">[in] - center value of max intensity range</param>
'''  <param name="valhw">[in] - half-width of max intensity range</param>
'''  <param name="regionflag">[in] - L_INCLUDE_REGION, L_EXCLUDE_REGION</param>
'''   <returns>pixd 1 bpp mask over selected pixels, or NULL on error</returns>
Public Shared Function pixMakeRangeMaskSV(
				ByVal pixs as Pix, 
				ByVal satcenter as Integer, 
				ByVal sathw as Integer, 
				ByVal valcenter as Integer, 
				ByVal valhw as Integer, 
				ByVal regionflag as Enumerations.L_CLUDE_REGION) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMakeRangeMaskSV( pixs.Pointer, satcenter, sathw, valcenter, valhw, regionflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (988, 1)
' pixMakeHistoHS()
' pixMakeHistoHS(PIX *, l_int32, NUMA **, NUMA **) as PIX *
'''  <summary>
''' Notes
''' (1) pixs is a 32 bpp image in HSV colorspace; hue is in the "red"
''' byte, saturation is in the "green" byte.
''' (2) In pixd, hue is displayed vertically; saturation horizontally.
''' The dimensions of pixd are w = 256, h = 240, and the depth
''' is 32 bpp.  The value at each point is simply the number
''' of pixels found at that value of hue and saturation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - HSV colorspace</param>
'''  <param name="factor">[in] - subsampling factor; integer</param>
'''  <param name="pnahue">[out][optional] - hue histogram</param>
'''  <param name="pnasat">[out][optional] - saturation histogram</param>
'''   <returns>pixd 32 bpp histogram in hue and saturation, or NULL on error</returns>
Public Shared Function pixMakeHistoHS(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByRef pnahue as Numa, 
				ByRef pnasat as Numa) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim pnahuePTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnahue) Then pnahuePTR = pnahue.Pointer
Dim pnasatPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnasat) Then pnasatPTR = pnasat.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMakeHistoHS( pixs.Pointer, factor, pnahuePTR, pnasatPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnahuePTR <> IntPtr.Zero then pnahue = new Numa(pnahuePTR)
	if pnasatPTR <> IntPtr.Zero then pnasat = new Numa(pnasatPTR)

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (1079, 1)
' pixMakeHistoHV()
' pixMakeHistoHV(PIX *, l_int32, NUMA **, NUMA **) as PIX *
'''  <summary>
''' Notes
''' (1) pixs is a 32 bpp image in HSV colorspace; hue is in the "red"
''' byte, max intensity ("value") is in the "blue" byte.
''' (2) In pixd, hue is displayed vertically; intensity horizontally.
''' The dimensions of pixd are w = 256, h = 240, and the depth
''' is 32 bpp.  The value at each point is simply the number
''' of pixels found at that value of hue and intensity.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - HSV colorspace</param>
'''  <param name="factor">[in] - subsampling factor; integer</param>
'''  <param name="pnahue">[out][optional] - hue histogram</param>
'''  <param name="pnaval">[out][optional] - max intensity (value) histogram</param>
'''   <returns>pixd 32 bpp histogram in hue and value, or NULL on error</returns>
Public Shared Function pixMakeHistoHV(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByRef pnahue as Numa, 
				ByRef pnaval as Numa) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim pnahuePTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnahue) Then pnahuePTR = pnahue.Pointer
Dim pnavalPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaval) Then pnavalPTR = pnaval.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMakeHistoHV( pixs.Pointer, factor, pnahuePTR, pnavalPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnahuePTR <> IntPtr.Zero then pnahue = new Numa(pnahuePTR)
	if pnavalPTR <> IntPtr.Zero then pnaval = new Numa(pnavalPTR)

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (1162, 1)
' pixMakeHistoSV()
' pixMakeHistoSV(PIX *, l_int32, NUMA **, NUMA **) as PIX *
'''  <summary>
''' Notes
''' (1) pixs is a 32 bpp image in HSV colorspace; sat is in the "green"
''' byte, max intensity ("value") is in the "blue" byte.
''' (2) In pixd, sat is displayed vertically; intensity horizontally.
''' The dimensions of pixd are w = 256, h = 256, and the depth
''' is 32 bpp.  The value at each point is simply the number
''' of pixels found at that value of saturation and intensity.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - HSV colorspace</param>
'''  <param name="factor">[in] - subsampling factor; integer</param>
'''  <param name="pnasat">[out][optional] - sat histogram</param>
'''  <param name="pnaval">[out][optional] - max intensity (value) histogram</param>
'''   <returns>pixd 32 bpp histogram in sat and value, or NULL on error</returns>
Public Shared Function pixMakeHistoSV(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByRef pnasat as Numa, 
				ByRef pnaval as Numa) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim pnasatPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnasat) Then pnasatPTR = pnasat.Pointer
Dim pnavalPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaval) Then pnavalPTR = pnaval.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMakeHistoSV( pixs.Pointer, factor, pnasatPTR, pnavalPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnasatPTR <> IntPtr.Zero then pnasat = new Numa(pnasatPTR)
	if pnavalPTR <> IntPtr.Zero then pnaval = new Numa(pnavalPTR)

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (1253, 1)
' pixFindHistoPeaksHSV()
' pixFindHistoPeaksHSV(PIX *, l_int32, l_int32, l_int32, l_int32, l_float32, PTA **, NUMA **, PIXA **) as l_ok
'''  <summary>
''' Notes
''' (1) pixs is a 32 bpp histogram in a pair of HSV colorspace.  It
''' should be thought of as a single sample with 32 bps (bits/sample).
''' (2) After each peak is found, the peak is erased with a window
''' that is centered on the peak and scaled from the sliding
''' window by %erasefactor.  Typically, %erasefactor is chosen
''' to be GT 1.0.
''' (3) Data for a maximum of %npeaks is returned in %pta and %natot.
''' (4) For debugging, after the pixa is returned, display with
''' pixd = pixaDisplayTiledInRows(pixa, 32, 1000, 1.0, 0, 30, 2);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp; HS, HV or SV histogram; not changed</param>
'''  <param name="type">[in] - L_HS_HISTO, L_HV_HISTO or L_SV_HISTO</param>
'''  <param name="width">[in] - half width of sliding window</param>
'''  <param name="height">[in] - half height of sliding window</param>
'''  <param name="npeaks">[in] - number of peaks to look for</param>
'''  <param name="erasefactor">[in] - ratio of erase window size to sliding window size</param>
'''  <param name="ppta">[out] - locations of max for each integrated peak area</param>
'''  <param name="pnatot">[out] - integrated peak areas</param>
'''  <param name="ppixa">[out][optional] - pixa for debugging; NULL to skip</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFindHistoPeaksHSV(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.L_HISTO, 
				ByVal width as Integer, 
				ByVal height as Integer, 
				ByVal npeaks as Integer, 
				ByVal erasefactor as Single, 
				ByRef ppta as Pta, 
				ByRef pnatot as Numa, 
				ByRef ppixa as Pixa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (erasefactor) then Throw New ArgumentNullException  ("erasefactor cannot be Nothing")

	Dim pptaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppta) Then pptaPTR = ppta.Pointer
	Dim pnatotPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnatot) Then pnatotPTR = pnatot.Pointer
Dim ppixaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixa) Then ppixaPTR = ppixa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindHistoPeaksHSV( pixs.Pointer, type, width, height, npeaks, erasefactor, pptaPTR, pnatotPTR, ppixaPTR)
	if pptaPTR <> IntPtr.Zero then ppta = new Pta(pptaPTR)
	if pnatotPTR <> IntPtr.Zero then pnatot = new Numa(pnatotPTR)
	if ppixaPTR <> IntPtr.Zero then ppixa = new Pixa(ppixaPTR)

	Return _Result
End Function

' SRC\colorspace.c (1378, 1)
' displayHSVColorRange()
' displayHSVColorRange(l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The total number of color samplings in each of the hue
''' and saturation directions is 2  nsamp + 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="hval">[in] - hue center value; in range [0 ... 240]</param>
'''  <param name="sval">[in] - saturation center value; in range [0 ... 255]</param>
'''  <param name="vval">[in] - max intensity value; in range [0 ... 255]</param>
'''  <param name="huehw">[in] - half-width of hue range; GT 0</param>
'''  <param name="sathw">[in] - half-width of saturation range; GT 0</param>
'''  <param name="nsamp">[in] - number of samplings in each half-width in hue and sat</param>
'''  <param name="factor">[in] - linear size of each color square, in pixels; GT 3</param>
'''   <returns>pixd 32 bpp set of color squares over input range, or NULL on error</returns>
Public Shared Function displayHSVColorRange(
				ByVal hval as Integer, 
				ByVal sval as Integer, 
				ByVal vval as Integer, 
				ByVal huehw as Integer, 
				ByVal sathw as Integer, 
				ByVal nsamp as Integer, 
				ByVal factor as Integer) as Pix



	Dim _Result as IntPtr = LeptonicaSharp.Natives.displayHSVColorRange( hval, sval, vval, huehw, sathw, nsamp, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (1454, 1)
' pixConvertRGBToYUV()
' pixConvertRGBToYUV(PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) For pixs = pixd, this is in-place; otherwise pixd must be NULL.
''' (2) The Y, U and V values are stored in the same places as
''' the r, g and b values, respectively.  Here, they are explicitly
''' placed in the 3 MS bytes in the pixel.
''' (3) Normalizing to 1 and considering the r,g,b components,
''' a simple way to understand the YUV space is
''' ~ Y = weighted sum of (r,g,b)
''' ~ U = weighted difference between Y and B
''' ~ V = weighted difference between Y and R
''' (4) Following video conventions, Y, U and V are in the range
''' Y [16, 235]
''' U [16, 240]
''' V [16, 240]
''' (5) For the coefficients in the transform matrices, see eq. 4 in
''' "Frequently Asked Questions about Color" by Charles Poynton,
''' //http//user.engineering.uiowa.edu/~aip/Misc/ColorFAQ.html
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in]can be NULL - ; if not NULL, must == pixs</param>
'''  <param name="pixs">[in] - </param>
'''   <returns>pixd always</returns>
Public Shared Function pixConvertRGBToYUV(
				ByVal pixd as Pix, 
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertRGBToYUV( pixdPTR, pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (1517, 1)
' pixConvertYUVToRGB()
' pixConvertYUVToRGB(PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) For pixs = pixd, this is in-place; otherwise pixd must be NULL.
''' (2) The user takes responsibility for making sure that pixs is
''' in YUV space.
''' (3) The Y, U and V values are stored in the same places as
''' the r, g and b values, respectively.  Here, they are explicitly
''' placed in the 3 MS bytes in the pixel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in]can be NULL - ; if not NULL, must == pixs</param>
'''  <param name="pixs">[in] - </param>
'''   <returns>pixd always</returns>
Public Shared Function pixConvertYUVToRGB(
				ByVal pixd as Pix, 
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertYUVToRGB( pixdPTR, pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (1582, 1)
' convertRGBToYUV()
' convertRGBToYUV(l_int32, l_int32, l_int32, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The range of returned values is
''' Y [16 ... 235]
''' U [16 ... 240]
''' V [16 ... 240]
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rval">[in] - RGB input</param>
'''  <param name="gval">[in] - RGB input</param>
'''  <param name="bval">[in] - RGB input</param>
'''  <param name="pyval">[out] - YUV values</param>
'''  <param name="puval">[out] - YUV values</param>
'''  <param name="pvval">[out] - YUV values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertRGBToYUV(
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByRef pyval as Integer, 
				ByRef puval as Integer, 
				ByRef pvval as Integer) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.convertRGBToYUV( rval, gval, bval, pyval, puval, pvval)

	Return _Result
End Function

' SRC\colorspace.c (1630, 1)
' convertYUVToRGB()
' convertYUVToRGB(l_int32, l_int32, l_int32, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The range of valid input values is
''' Y [16 ... 235]
''' U [16 ... 240]
''' V [16 ... 240]
''' (2) Conversion of RGB --GT YUV --GT RGB leaves the image unchanged.
''' (3) The YUV gamut is larger than the RBG gamut; many YUV values
''' will result in an invalid RGB value.  We clip individual
''' r,g,b components to the range [0, 255], and do not test input.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="yval">[in] - </param>
'''  <param name="uval">[in] - </param>
'''  <param name="vval">[in] - </param>
'''  <param name="prval">[out] - RGB values</param>
'''  <param name="pgval">[out] - RGB values</param>
'''  <param name="pbval">[out] - RGB values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertYUVToRGB(
				ByVal yval as Integer, 
				ByVal uval as Integer, 
				ByVal vval as Integer, 
				ByRef prval as Integer, 
				ByRef pgval as Integer, 
				ByRef pbval as Integer) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.convertYUVToRGB( yval, uval, vval, prval, pgval, pbval)

	Return _Result
End Function

' SRC\colorspace.c (1678, 1)
' pixcmapConvertRGBToYUV()
' pixcmapConvertRGBToYUV(PIXCMAP *) as l_ok
'''  <summary>
''' Notes
''' ~ in-place transform
''' ~ See convertRGBToYUV() for def'n of YUV space.
''' ~ replaces r --GT y, g --GT u, b --GT v
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - colormap</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixcmapConvertRGBToYUV(
				ByVal cmap as PixColormap) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapConvertRGBToYUV( cmap.Pointer)

	Return _Result
End Function

' SRC\colorspace.c (1711, 1)
' pixcmapConvertYUVToRGB()
' pixcmapConvertYUVToRGB(PIXCMAP *) as l_ok
'''  <summary>
''' Notes
''' ~ in-place transform
''' ~ See convertRGBToYUV() for def'n of YUV space.
''' ~ replaces y --GT r, u --GT g, v --GT b
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - colormap</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixcmapConvertYUVToRGB(
				ByVal cmap as PixColormap) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcmapConvertYUVToRGB( cmap.Pointer)

	Return _Result
End Function

' SRC\colorspace.c (1762, 1)
' pixConvertRGBToXYZ()
' pixConvertRGBToXYZ(PIX *) as FPIXA *
'''  <summary>
''' Notes
''' (1) The [x,y,z] values are stored as float values in three fpix
''' that are returned in a fpixa.
''' (2) The XYZ color space was defined in 1931 as a reference model that
''' simulates human color perception.  When Y is taken as luminance,
''' the values of X and Z constitute a color plane representing
''' all the hues that can be perceived.  This gamut of colors
''' is larger than the gamuts that can be displayed or printed.
''' For example, although all rgb values map to XYZ, the converse
''' is not true.
''' (3) The value of the coefficients depends on the illuminant.  We use
''' coefficients for converting sRGB under D65 (the spectrum from
''' a 6500 degree K black body; an approximation to daylight color).
''' See, e.g.,
''' http//www.cs.rit.edu/~ncs/color/t_convert.html
''' For more general information on color transforms, see
''' http//www.brucelindbloom.com/
''' http//user.engineering.uiowa.edu/~aip/Misc/ColorFAQ.html
''' http//en.wikipedia.org/wiki/CIE_1931_color_space
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - rgb</param>
'''   <returns>fpixa xyz</returns>
Public Shared Function pixConvertRGBToXYZ(
				ByVal pixs as Pix) as FPixa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertRGBToXYZ( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPixa(_Result)
End Function

' SRC\colorspace.c (1821, 1)
' fpixaConvertXYZToRGB()
' fpixaConvertXYZToRGB(FPIXA *) as PIX *
'''  <summary>
''' Notes
''' (1) The xyz image is stored in three fpix.
''' (2) For values of xyz that are out of gamut for rgb, the rgb
''' components are set to the closest valid color.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixa">[in] - three fpix x,y,z</param>
'''   <returns>pixd rgb</returns>
Public Shared Function fpixaConvertXYZToRGB(
				ByVal fpixa as FPixa) as Pix

	If IsNothing (fpixa) then Throw New ArgumentNullException  ("fpixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixaConvertXYZToRGB( fpixa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (1879, 1)
' convertRGBToXYZ()
' convertRGBToXYZ(l_int32, l_int32, l_int32, l_float32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) These conversions are for illuminant D65 acting on linear sRGB
''' values.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rval">[in] - rgb input</param>
'''  <param name="gval">[in] - rgb input</param>
'''  <param name="bval">[in] - rgb input</param>
'''  <param name="pfxval">[out] - xyz values</param>
'''  <param name="pfyval">[out] - xyz values</param>
'''  <param name="pfzval">[out] - xyz values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertRGBToXYZ(
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByRef pfxval as Single(), 
				ByRef pfyval as Single(), 
				ByRef pfzval as Single()) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.convertRGBToXYZ( rval, gval, bval, pfxval, pfyval, pfzval)

	Return _Result
End Function

' SRC\colorspace.c (1921, 1)
' convertXYZToRGB()
' convertXYZToRGB(l_float32, l_float32, l_float32, l_int32, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) For values of xyz that are out of gamut for rgb, at least
''' one of the r, g or b components will be either less than 0
''' or greater than 255.  For that situation
''' if blackout == 0, the individual component(s) that are out
''' of gamut will be set to 0 or 255, respectively.
''' if blackout == 1, the output color will be set to black
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fxval">[in] - </param>
'''  <param name="fyval">[in] - </param>
'''  <param name="fzval">[in] - </param>
'''  <param name="blackout">[in] - 0 to output nearest color if out of gamut; 1 to output black</param>
'''  <param name="prval">[out] - rgb values</param>
'''  <param name="pgval">[out] - rgb values</param>
'''  <param name="pbval">[out] - rgb values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertXYZToRGB(
				ByVal fxval as Single, 
				ByVal fyval as Single, 
				ByVal fzval as Single, 
				ByVal blackout as Integer, 
				ByRef prval as Integer, 
				ByRef pgval as Integer, 
				ByRef pbval as Integer) as Integer

	If IsNothing (fxval) then Throw New ArgumentNullException  ("fxval cannot be Nothing")
	If IsNothing (fyval) then Throw New ArgumentNullException  ("fyval cannot be Nothing")
	If IsNothing (fzval) then Throw New ArgumentNullException  ("fzval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertXYZToRGB( fxval, fyval, fzval, blackout, prval, pgval, pbval)

	Return _Result
End Function

' SRC\colorspace.c (1982, 1)
' fpixaConvertXYZToLAB()
' fpixaConvertXYZToLAB(FPIXA *) as FPIXA *
'''  <summary>
''' Notes
''' (1) The input [x,y,z] and output [l,a,b] values are stored as
''' float values, each set in three fpix.
''' (2) The CIE LAB color space was invented in 1976, as an
''' absolute reference for specifying colors that we can
''' perceive, independently of the rendering device.  It was
''' invented to align color display and print images.
''' For information, see
''' http//www.brucelindbloom.com/
''' http//en.wikipedia.org/wiki/Lab_color_space
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixas">[in] - xyz</param>
'''   <returns>fpixa lab</returns>
Public Shared Function fpixaConvertXYZToLAB(
				ByVal fpixas as FPixa) as FPixa

	If IsNothing (fpixas) then Throw New ArgumentNullException  ("fpixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixaConvertXYZToLAB( fpixas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPixa(_Result)
End Function

' SRC\colorspace.c (2048, 1)
' fpixaConvertLABToXYZ()
' fpixaConvertLABToXYZ(FPIXA *) as FPIXA *
'''  <summary>
''' Notes
''' (1) The input [l,a,b] and output [x,y,z] values are stored as
''' float values, each set in three fpix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixas">[in] - lab</param>
'''   <returns>fpixa xyz</returns>
Public Shared Function fpixaConvertLABToXYZ(
				ByVal fpixas as FPixa) as FPixa

	If IsNothing (fpixas) then Throw New ArgumentNullException  ("fpixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixaConvertLABToXYZ( fpixas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPixa(_Result)
End Function

' SRC\colorspace.c (2109, 1)
' convertXYZToLAB()
' convertXYZToLAB(l_float32, l_float32, l_float32, l_float32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="xval">[in] - xyz input</param>
'''  <param name="yval">[in] - xyz input</param>
'''  <param name="zval">[in] - xyz input</param>
'''  <param name="plval">[out] - lab values</param>
'''  <param name="paval">[out] - lab values</param>
'''  <param name="pbval">[out] - lab values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertXYZToLAB(
				ByVal xval as Single, 
				ByVal yval as Single, 
				ByVal zval as Single, 
				ByRef plval as Single(), 
				ByRef paval as Single(), 
				ByRef pbval as Single()) as Integer

	If IsNothing (xval) then Throw New ArgumentNullException  ("xval cannot be Nothing")
	If IsNothing (yval) then Throw New ArgumentNullException  ("yval cannot be Nothing")
	If IsNothing (zval) then Throw New ArgumentNullException  ("zval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertXYZToLAB( xval, yval, zval, plval, paval, pbval)

	Return _Result
End Function

' SRC\colorspace.c (2149, 1)
' convertLABToXYZ()
' convertLABToXYZ(l_float32, l_float32, l_float32, l_float32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="lval">[in] - </param>
'''  <param name="aval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''  <param name="pxval">[out] - xyz values</param>
'''  <param name="pyval">[out] - xyz values</param>
'''  <param name="pzval">[out] - xyz values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertLABToXYZ(
				ByVal lval as Single, 
				ByVal aval as Single, 
				ByVal bval as Single, 
				ByRef pxval as Single(), 
				ByRef pyval as Single(), 
				ByRef pzval as Single()) as Integer

	If IsNothing (lval) then Throw New ArgumentNullException  ("lval cannot be Nothing")
	If IsNothing (aval) then Throw New ArgumentNullException  ("aval cannot be Nothing")
	If IsNothing (bval) then Throw New ArgumentNullException  ("bval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertLABToXYZ( lval, aval, bval, pxval, pyval, pzval)

	Return _Result
End Function

' SRC\colorspace.c (2243, 1)
' pixConvertRGBToLAB()
' pixConvertRGBToLAB(PIX *) as FPIXA *
'''  <summary>
''' Notes
''' (1) The [l,a,b] values are stored as float values in three fpix
''' that are returned in a fpixa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - rgb</param>
'''   <returns>fpixa lab</returns>
Public Shared Function pixConvertRGBToLAB(
				ByVal pixs as Pix) as FPixa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertRGBToLAB( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPixa(_Result)
End Function

' SRC\colorspace.c (2300, 1)
' fpixaConvertLABToRGB()
' fpixaConvertLABToRGB(FPIXA *) as PIX *
'''  <summary>
''' Notes
''' (1) The lab image is stored in three fpix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixa">[in] - three fpix l,a,b</param>
'''   <returns>pixd rgb</returns>
Public Shared Function fpixaConvertLABToRGB(
				ByVal fpixa as FPixa) as Pix

	If IsNothing (fpixa) then Throw New ArgumentNullException  ("fpixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixaConvertLABToRGB( fpixa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\colorspace.c (2358, 1)
' convertRGBToLAB()
' convertRGBToLAB(l_int32, l_int32, l_int32, l_float32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) These conversions are for illuminant D65 acting on linear sRGB
''' values.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rval">[in] - rgb input</param>
'''  <param name="gval">[in] - rgb input</param>
'''  <param name="bval">[in] - rgb input</param>
'''  <param name="pflval">[out] - lab values</param>
'''  <param name="pfaval">[out] - lab values</param>
'''  <param name="pfbval">[out] - lab values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertRGBToLAB(
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByRef pflval as Single(), 
				ByRef pfaval as Single(), 
				ByRef pfbval as Single()) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.convertRGBToLAB( rval, gval, bval, pflval, pfaval, pfbval)

	Return _Result
End Function

' SRC\colorspace.c (2395, 1)
' convertLABToRGB()
' convertLABToRGB(l_float32, l_float32, l_float32, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) For values of lab that are out of gamut for rgb, the rgb
''' components are set to the closest valid color.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="flval">[in] - </param>
'''  <param name="faval">[in] - </param>
'''  <param name="fbval">[in] - </param>
'''  <param name="prval">[out] - rgb values</param>
'''  <param name="pgval">[out] - rgb values</param>
'''  <param name="pbval">[out] - rgb values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertLABToRGB(
				ByVal flval as Single, 
				ByVal faval as Single, 
				ByVal fbval as Single, 
				ByRef prval as Integer, 
				ByRef pgval as Integer, 
				ByRef pbval as Integer) as Integer

	If IsNothing (flval) then Throw New ArgumentNullException  ("flval cannot be Nothing")
	If IsNothing (faval) then Throw New ArgumentNullException  ("faval cannot be Nothing")
	If IsNothing (fbval) then Throw New ArgumentNullException  ("fbval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertLABToRGB( flval, faval, fbval, prval, pgval, pbval)

	Return _Result
End Function

#End Region
#Region "SRC\compare.c"
' SRC\compare.c (150, 1)
' pixEqual()
' pixEqual(PIX *, PIX *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Equality is defined as having the same pixel values for
''' each respective image pixel.
''' (2) This works on two pix of any depth.  If one or both pix
''' have a colormap, the depths can be different and the
''' two pix can still be equal.
''' (3) This ignores the alpha component for 32 bpp images.
''' (4) If both pix have colormaps and the depths are equal,
''' use the pixEqualWithCmap() function, which does a fast
''' comparison if the colormaps are identical and a relatively
''' slow comparison otherwise.
''' (5) In all other cases, any existing colormaps must first be
''' removed before doing pixel comparison.  After the colormaps
''' are removed, the resulting two images must have the same depth.
''' The "lowest common denominator" is RGB, but this is only
''' chosen when necessary, or when both have colormaps but
''' different depths.
''' (6) For images without colormaps that are not 32 bpp, all bits
''' in the image part of the data array must be identical.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - </param>
'''  <param name="pix2">[in] - </param>
'''  <param name="psame">[out] - 1 if same; 0 if different</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixEqual(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByRef psame as Integer) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixEqual( pix1.Pointer, pix2.Pointer, psame)

	Return _Result
End Function

' SRC\compare.c (176, 1)
' pixEqualWithAlpha()
' pixEqualWithAlpha(PIX *, PIX *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) See notes in pixEqual().
''' (2) This is more general than pixEqual(), in that for 32 bpp
''' RGBA images, where spp = 4, you can optionally include
''' the alpha component in the comparison.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - </param>
'''  <param name="pix2">[in] - </param>
'''  <param name="use_alpha">[in] - 1 to compare alpha in RGBA; 0 to ignore</param>
'''  <param name="psame">[out] - 1 if same; 0 if different</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixEqualWithAlpha(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal use_alpha as Integer, 
				ByRef psame as Integer) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixEqualWithAlpha( pix1.Pointer, pix2.Pointer, use_alpha, psame)

	Return _Result
End Function

' SRC\compare.c (378, 1)
' pixEqualWithCmap()
' pixEqualWithCmap(PIX *, PIX *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This returns same = TRUE if the images have identical content.
''' (2) Both pix must have a colormap, and be of equal size and depth.
''' If these conditions are not satisfied, it is not an error;
''' the returned result is same = FALSE.
''' (3) We then check whether the colormaps are the same; if so,
''' the comparison proceeds 32 bits at a time.
''' (4) If the colormaps are different, the comparison is done by
''' slow brute force.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - </param>
'''  <param name="pix2">[in] - </param>
'''  <param name="psame">[out] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixEqualWithCmap(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByRef psame as Integer) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixEqualWithCmap( pix1.Pointer, pix2.Pointer, psame)

	Return _Result
End Function

' SRC\compare.c (474, 1)
' cmapEqual()
' cmapEqual(PIXCMAP *, PIXCMAP *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This returns %same = TRUE if the colormaps have identical entries.
''' (2) If %ncomps == 4, the alpha components of the colormaps are also
''' compared.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap1">[in] - </param>
'''  <param name="cmap2">[in] - </param>
'''  <param name="ncomps">[in] - 3 for RGB, 4 for RGBA</param>
'''  <param name="psame">[out] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function cmapEqual(
				ByVal cmap1 as PixColormap, 
				ByVal cmap2 as PixColormap, 
				ByVal ncomps as Integer, 
				ByRef psame as Integer) as Integer

	If IsNothing (cmap1) then Throw New ArgumentNullException  ("cmap1 cannot be Nothing")
	If IsNothing (cmap2) then Throw New ArgumentNullException  ("cmap2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.cmapEqual( cmap1.Pointer, cmap2.Pointer, ncomps, psame)

	Return _Result
End Function

' SRC\compare.c (532, 1)
' pixUsesCmapColor()
' pixUsesCmapColor(PIX *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This returns color = TRUE if three things are obtained
''' (a) the pix has a colormap
''' (b) the colormap has at least one color entry
''' (c) a color entry is actually used
''' (2) It is used in pixEqual() for comparing two images, in a
''' situation where it is required to know if the colormap
''' has color entries that are actually used in the image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth, colormap</param>
'''  <param name="pcolor">[out] - TRUE if color found</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixUsesCmapColor(
				ByVal pixs as Pix, 
				ByRef pcolor as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixUsesCmapColor( pixs.Pointer, pcolor)

	Return _Result
End Function

' SRC\compare.c (598, 1)
' pixCorrelationBinary()
' pixCorrelationBinary(PIX *, PIX *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The correlation is a number between 0.0 and 1.0,
''' based on foreground similarity
''' (|1 AND 2|)2
''' correlation =  --------------
''' |1|  |2|
''' where |x| is the count of foreground pixels in image x.
''' If the images are identical, this is 1.0.
''' If they have no fg pixels in common, this is 0.0.
''' If one or both images have no fg pixels, the correlation is 0.0.
''' (2) Typically the two images are of equal size, but this
''' is not enforced.  Instead, the UL corners are aligned.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 1 bpp</param>
'''  <param name="pix2">[in] - 1 bpp</param>
'''  <param name="pval">[out] - correlation</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixCorrelationBinary(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByRef pval as Single()) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If {1}.contains (pix1.d) = false then Throw New ArgumentException ("1 bpp")
	If {1}.contains (pix2.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCorrelationBinary( pix1.Pointer, pix2.Pointer, pval)

	Return _Result
End Function

' SRC\compare.c (656, 1)
' pixDisplayDiffBinary()
' pixDisplayDiffBinary(PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This gives a color representation of the difference between
''' pix1 and pix2.  The color difference depends on the order.
''' The pixels in pixd have 4 colors
''' unchanged  black (on), white (off)
''' on in pix1, off in pix2 red
''' on in pix2, off in pix1 green
''' (2) This aligns the UL corners of pix1 and pix2, and crops
''' to the overlapping pixels.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 1 bpp</param>
'''  <param name="pix2">[in] - 1 bpp</param>
'''   <returns>pixd 4 bpp cmapped, or NULL on error</returns>
Public Shared Function pixDisplayDiffBinary(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix) as Pix

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If {1}.contains (pix1.d) = false then Throw New ArgumentException ("1 bpp")
	If {1}.contains (pix2.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDisplayDiffBinary( pix1.Pointer, pix2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\compare.c (712, 1)
' pixCompareBinary()
' pixCompareBinary(PIX *, PIX *, l_int32, l_float32 *, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) The two images are aligned at the UL corner, and do not
''' need to be the same size.
''' (2) If using L_COMPARE_SUBTRACT, pix2 is subtracted from pix1.
''' (3) The total number of pixels is determined by pix1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 1 bpp</param>
'''  <param name="pix2">[in] - 1 bpp</param>
'''  <param name="comptype">[in] - L_COMPARE_XOR, L_COMPARE_SUBTRACT</param>
'''  <param name="pfract">[out] - fraction of pixels that are different</param>
'''  <param name="ppixdiff">[out][optional] - pix of difference</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixCompareBinary(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal comptype as Enumerations.L_COMPARE, 
				ByRef pfract as Single(), 
				ByRef ppixdiff as Pix) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If {1}.contains (pix1.d) = false then Throw New ArgumentException ("1 bpp")
	If {1}.contains (pix2.d) = false then Throw New ArgumentException ("1 bpp")

Dim ppixdiffPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdiff) Then ppixdiffPTR = ppixdiff.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCompareBinary( pix1.Pointer, pix2.Pointer, comptype, pfract, ppixdiffPTR)
	if ppixdiffPTR <> IntPtr.Zero then ppixdiff = new Pix(ppixdiffPTR)

	Return _Result
End Function

' SRC\compare.c (788, 1)
' pixCompareGrayOrRGB()
' pixCompareGrayOrRGB(PIX *, PIX *, l_int32, l_int32, l_int32 *, l_float32 *, l_float32 *, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) The two images are aligned at the UL corner, and do not
''' need to be the same size.  If they are not the same size,
''' the comparison will be made over overlapping pixels.
''' (2) If there is a colormap, it is removed and the result
''' is either gray or RGB depending on the colormap.
''' (3) If RGB, each component is compared separately.
''' (4) If type is L_COMPARE_ABS_DIFF, pix2 is subtracted from pix1
''' and the absolute value is taken.
''' (5) If type is L_COMPARE_SUBTRACT, pix2 is subtracted from pix1
''' and the result is clipped to 0.
''' (6) The plot output types are specified in gplot.h.
''' Use 0 if no difference plot is to be made.
''' (7) If the images are pixelwise identical, no difference
''' plot is made, even if requested.  The result (TRUE or FALSE)
''' is optionally returned in the parameter 'same'.
''' (8) The average difference (either subtracting or absolute value)
''' is optionally returned in the parameter 'diff'.
''' (9) The RMS difference is optionally returned in the
''' parameter 'rmsdiff'.  For RGB, we return the average of
''' the RMS differences for each of the components.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 8 or 16 bpp gray, 32 bpp rgb, or colormapped</param>
'''  <param name="pix2">[in] - 8 or 16 bpp gray, 32 bpp rgb, or colormapped</param>
'''  <param name="comptype">[in] - L_COMPARE_SUBTRACT, L_COMPARE_ABS_DIFF</param>
'''  <param name="plottype">[in] - gplot plot output type, or 0 for no plot</param>
'''  <param name="psame">[out][optional] - 1 if pixel values are identical</param>
'''  <param name="pdiff">[out][optional] - average difference</param>
'''  <param name="prmsdiff">[out][optional] - rms of difference</param>
'''  <param name="ppixdiff">[out][optional] - pix of difference</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixCompareGrayOrRGB(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal comptype as Enumerations.L_COMPARE, 
				ByVal plottype as Integer, 
				ByRef psame as Integer, 
				ByRef pdiff as Single(), 
				ByRef prmsdiff as Single(), 
				ByRef ppixdiff as Pix) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")

Dim ppixdiffPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdiff) Then ppixdiffPTR = ppixdiff.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCompareGrayOrRGB( pix1.Pointer, pix2.Pointer, comptype, plottype, psame, pdiff, prmsdiff, ppixdiffPTR)
	if ppixdiffPTR <> IntPtr.Zero then ppixdiff = new Pix(ppixdiffPTR)

	Return _Result
End Function

' SRC\compare.c (859, 1)
' pixCompareGray()
' pixCompareGray(PIX *, PIX *, l_int32, l_int32, l_int32 *, l_float32 *, l_float32 *, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) See pixCompareGrayOrRGB() for details.
''' (2) Use pixCompareGrayOrRGB() if the input pix are colormapped.
''' (3) Note setting %plottype GT 0 can result in writing named
''' output files.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 8 or 16 bpp, not cmapped</param>
'''  <param name="pix2">[in] - 8 or 16 bpp, not cmapped</param>
'''  <param name="comptype">[in] - L_COMPARE_SUBTRACT, L_COMPARE_ABS_DIFF</param>
'''  <param name="plottype">[in] - gplot plot output type, or 0 for no plot</param>
'''  <param name="psame">[out][optional] - 1 if pixel values are identical</param>
'''  <param name="pdiff">[out][optional] - average difference</param>
'''  <param name="prmsdiff">[out][optional] - rms of difference</param>
'''  <param name="ppixdiff">[out][optional] - pix of difference</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixCompareGray(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal comptype as Enumerations.L_COMPARE, 
				ByVal plottype as Integer, 
				ByRef psame as Integer, 
				ByRef pdiff as Single(), 
				ByRef prmsdiff as Single(), 
				ByRef ppixdiff as Pix) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")

Dim ppixdiffPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdiff) Then ppixdiffPTR = ppixdiff.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCompareGray( pix1.Pointer, pix2.Pointer, comptype, plottype, psame, pdiff, prmsdiff, ppixdiffPTR)
	if ppixdiffPTR <> IntPtr.Zero then ppixdiff = new Pix(ppixdiffPTR)

	Return _Result
End Function

' SRC\compare.c (968, 1)
' pixCompareRGB()
' pixCompareRGB(PIX *, PIX *, l_int32, l_int32, l_int32 *, l_float32 *, l_float32 *, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) See pixCompareGrayOrRGB() for details.
''' (2) Note setting %plottype GT 0 can result in writing named
''' output files.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 32 bpp rgb</param>
'''  <param name="pix2">[in] - 32 bpp rgb</param>
'''  <param name="comptype">[in] - L_COMPARE_SUBTRACT, L_COMPARE_ABS_DIFF</param>
'''  <param name="plottype">[in] - gplot plot output type, or 0 for no plot</param>
'''  <param name="psame">[out][optional] - 1 if pixel values are identical</param>
'''  <param name="pdiff">[out][optional] - average difference</param>
'''  <param name="prmsdiff">[out][optional] - rms of difference</param>
'''  <param name="ppixdiff">[out][optional] - pix of difference</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixCompareRGB(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal comptype as Enumerations.L_COMPARE, 
				ByVal plottype as Integer, 
				ByRef psame as Integer, 
				ByRef pdiff as Single(), 
				ByRef prmsdiff as Single(), 
				ByRef ppixdiff as Pix) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If {32}.contains (pix1.d) = false then Throw New ArgumentException ("32 bpp rgb")
	If {32}.contains (pix2.d) = false then Throw New ArgumentException ("32 bpp rgb")

Dim ppixdiffPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdiff) Then ppixdiffPTR = ppixdiff.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCompareRGB( pix1.Pointer, pix2.Pointer, comptype, plottype, psame, pdiff, prmsdiff, ppixdiffPTR)
	if ppixdiffPTR <> IntPtr.Zero then ppixdiff = new Pix(ppixdiffPTR)

	Return _Result
End Function

' SRC\compare.c (1124, 1)
' pixCompareTiled()
' pixCompareTiled(PIX *, PIX *, l_int32, l_int32, l_int32, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) With L_MEAN_ABSVAL, we compute for each tile the
''' average abs value of the pixel component difference between
''' the two (aligned) images.  With L_ROOT_MEAN_SQUARE, we
''' compute instead the rms difference over all components.
''' (2) The two input pix must be the same depth.  Comparison is made
''' using UL corner alignment.
''' (3) For 32 bpp, the distance between corresponding tiles
''' is found by averaging the measured difference over all three
''' components of each pixel in the tile.
''' (4) The result, pixdiff, contains one pixel for each source tile.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 8 bpp or 32 bpp rgb</param>
'''  <param name="pix2">[in] - 8 bpp 32 bpp rgb</param>
'''  <param name="sx">[in] - tile size; must be GT 1 in each dimension</param>
'''  <param name="sy">[in] - tile size; must be GT 1 in each dimension</param>
'''  <param name="type">[in] - L_MEAN_ABSVAL or L_ROOT_MEAN_SQUARE</param>
'''  <param name="ppixdiff">[out] - pix of difference</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixCompareTiled(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer, 
				ByVal type as Enumerations.L_statistical_measures, 
				ByRef ppixdiff as Pix) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")

	Dim ppixdiffPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdiff) Then ppixdiffPTR = ppixdiff.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCompareTiled( pix1.Pointer, pix2.Pointer, sx, sy, type, ppixdiffPTR)
	if ppixdiffPTR <> IntPtr.Zero then ppixdiff = new Pix(ppixdiffPTR)

	Return _Result
End Function

' SRC\compare.c (1218, 1)
' pixCompareRankDifference()
' pixCompareRankDifference(PIX *, PIX *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) This answers the question if the pixel values in each
''' component are compared by absolute difference, for
''' any value of difference, what is the fraction of
''' pixel pairs that have a difference of this magnitude
''' or greater.  For a difference of 0, the fraction is 1.0.
''' In this sense, it is a mapping from pixel difference to
''' rank order of difference.
''' (2) The two images are aligned at the UL corner, and do not
''' need to be the same size.  If they are not the same size,
''' the comparison will be made over overlapping pixels.
''' (3) If there is a colormap, it is removed and the result
''' is either gray or RGB depending on the colormap.
''' (4) If RGB, pixel differences for each component are aggregated
''' into a single histogram.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 8 bpp gray or 32 bpp rgb, or colormapped</param>
'''  <param name="pix2">[in] - 8 bpp gray or 32 bpp rgb, or colormapped</param>
'''  <param name="factor">[in] - subsampling factor; use 0 or 1 for no subsampling</param>
'''   <returns>narank      numa of rank difference, or NULL on error</returns>
Public Shared Function pixCompareRankDifference(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal factor as Integer) as Numa

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCompareRankDifference( pix1.Pointer, pix2.Pointer, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\compare.c (1303, 1)
' pixTestForSimilarity()
' pixTestForSimilarity(PIX *, PIX *, l_int32, l_int32, l_float32, l_float32, l_int32 *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This takes 2 pix that are the same size and determines using
''' 3 input parameters if they are "similar".  The first parameter
''' %mindiff establishes a criterion of pixel-to-pixel similarity
''' two pixels are not similar if their difference in value is
''' at least mindiff.  Then %maxfract and %maxave are thresholds
''' on the number and distribution of dissimilar pixels
''' allowed for the two pix to be similar.   If the pix are
''' to be similar, neither threshold can be exceeded.
''' (2) In setting the %maxfract and %maxave thresholds, you have
''' these options
''' (a) Base the comparison only on %maxfract.  Then set
''' %maxave = 0.0 or 256.0.  (If 0, we always ignore it.)
''' (b) Base the comparison only on %maxave.  Then set
''' %maxfract = 1.0.
''' (c) Base the comparison on both thresholds.
''' (3) Example of values that can be expected at mindiff = 15 when
''' comparing lossless png encoding with jpeg encoding, q=75
''' (smoothish bg) fractdiff = 0.01, avediff = 2.5
''' (natural scene)   fractdiff = 0.13, avediff = 3.5
''' To identify these images as 'similar', select maxfract
''' and maxave to be upper bounds of what you expect.
''' (4) See pixGetDifferenceStats() for a discussion of why we subtract
''' mindiff from the computed average diff of the nonsimilar pixels
''' to get the 'avediff' returned by that function.
''' (5) If there is a colormap, it is removed and the result
''' is either gray or RGB depending on the colormap.
''' (6) If RGB, the maximum difference between pixel components is
''' saved in the histogram.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 8 bpp gray or 32 bpp rgb, or colormapped</param>
'''  <param name="pix2">[in] - 8 bpp gray or 32 bpp rgb, or colormapped</param>
'''  <param name="factor">[in] - subsampling factor; use 0 or 1 for no subsampling</param>
'''  <param name="mindiff">[in] - minimum pixel difference to be counted; GT 0</param>
'''  <param name="maxfract">[in] - maximum fraction of pixels allowed to have diff greater than or equal to mindiff</param>
'''  <param name="maxave">[in] - maximum average difference of pixels allowed for pixels with diff greater than or equal to mindiff, after subtracting mindiff</param>
'''  <param name="psimilar">[out] - 1 if similar, 0 otherwise</param>
'''  <param name="details">[in] - use 1 to give normalized histogram and other data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixTestForSimilarity(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal factor as Integer, 
				ByVal mindiff as Integer, 
				ByVal maxfract as Single, 
				ByVal maxave as Single, 
				ByRef psimilar as Integer, 
				ByVal details as Integer) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If IsNothing (maxfract) then Throw New ArgumentNullException  ("maxfract cannot be Nothing")
	If IsNothing (maxave) then Throw New ArgumentNullException  ("maxave cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixTestForSimilarity( pix1.Pointer, pix2.Pointer, factor, mindiff, maxfract, maxave, psimilar, details)

	Return _Result
End Function

' SRC\compare.c (1382, 1)
' pixGetDifferenceStats()
' pixGetDifferenceStats(PIX *, PIX *, l_int32, l_int32, l_float32 *, l_float32 *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This takes a threshold %mindiff and describes the difference
''' between two images in terms of two numbers
''' (a) the fraction of pixels, %fractdiff, whose difference
''' equals or exceeds the threshold %mindiff, and
''' (b) the average value %avediff of the difference in pixel value
''' for the pixels in the set given by (a), after you subtract
''' %mindiff.  The reason for subtracting %mindiff is that
''' you then get a useful measure for the rate of falloff
''' of the distribution for larger differences.  For example,
''' if %mindiff = 10 and you find that %avediff = 2.5, it
''' says that of the pixels with diff GT 10, the average of
''' their diffs is just mindiff + 2.5 = 12.5.  This is a
''' fast falloff in the histogram with increasing difference.
''' (2) The two images are aligned at the UL corner, and do not
''' need to be the same size.  If they are not the same size,
''' the comparison will be made over overlapping pixels.
''' (3) If there is a colormap, it is removed and the result
''' is either gray or RGB depending on the colormap.
''' (4) If RGB, the maximum difference between pixel components is
''' saved in the histogram.
''' (5) Set %details == 1 to see the difference histogram and get
''' an output that shows for each value of %mindiff, what are the
''' minimum values required for fractdiff and avediff in order
''' that the two pix will be considered similar.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 8 bpp gray or 32 bpp rgb, or colormapped</param>
'''  <param name="pix2">[in] - 8 bpp gray or 32 bpp rgb, or colormapped</param>
'''  <param name="factor">[in] - subsampling factor; use 0 or 1 for no subsampling</param>
'''  <param name="mindiff">[in] - minimum pixel difference to be counted; GT 0</param>
'''  <param name="pfractdiff">[out] - fraction of pixels with diff greater than or equal to mindiff</param>
'''  <param name="pavediff">[out] - average difference of pixels with diff greater than or equal to mindiff, less mindiff</param>
'''  <param name="details">[in] - use 1 to give normalized histogram and other data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetDifferenceStats(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal factor as Integer, 
				ByVal mindiff as Integer, 
				ByRef pfractdiff as Single(), 
				ByRef pavediff as Single(), 
				ByVal details as Integer) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetDifferenceStats( pix1.Pointer, pix2.Pointer, factor, mindiff, pfractdiff, pavediff, details)

	Return _Result
End Function

' SRC\compare.c (1484, 1)
' pixGetDifferenceHistogram()
' pixGetDifferenceHistogram(PIX *, PIX *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The two images are aligned at the UL corner, and do not
''' need to be the same size.  If they are not the same size,
''' the comparison will be made over overlapping pixels.
''' (2) If there is a colormap, it is removed and the result
''' is either gray or RGB depending on the colormap.
''' (3) If RGB, the maximum difference between pixel components is
''' saved in the histogram.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 8 bpp gray or 32 bpp rgb, or colormapped</param>
'''  <param name="pix2">[in] - 8 bpp gray or 32 bpp rgb, or colormapped</param>
'''  <param name="factor">[in] - subsampling factor; use 0 or 1 for no subsampling</param>
'''   <returns>na     Numa of histogram of differences, or NULL on error</returns>
Public Shared Function pixGetDifferenceHistogram(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal factor as Integer) as Numa

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetDifferenceHistogram( pix1.Pointer, pix2.Pointer, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\compare.c (1615, 1)
' pixGetPerceptualDiff()
' pixGetPerceptualDiff(PIX *, PIX *, l_int32, l_int32, l_int32, l_float32 *, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This takes 2 pix and determines, using 2 input parameters
''' %dilation specifies the amount of grayscale or color
''' dilation to apply to the images, to compensate for
''' a small amount of misregistration.  A typical number might
''' be 5, which uses a 5x5 Sel.  Grayscale dilation expands
''' lighter pixels into darker pixel regions.
''' %mindiff determines the threshold on the difference in
''' pixel values to be counted -- two pixels are not similar
''' if their difference in value is at least %mindiff.  For
''' color pixels, we use the maximum component difference.
''' (2) The pixelwise comparison is always done with the UL corners
''' aligned.  The sizes of pix1 and pix2 need not be the same,
''' although in practice it can be useful to scale to the same size.
''' (3) If there is a colormap, it is removed and the result
''' is either gray or RGB depending on the colormap.
''' (4) Two optional diff images can be retrieved (typ. for debugging)
''' pixdiff1 the gray or color difference
''' pixdiff2 thresholded to 1 bpp for pixels exceeding %mindiff
''' (5) The returned value of fract can be compared to some threshold,
''' which is application dependent.
''' (6) This method is in analogy to the two-sided hausdorff transform,
''' except here it is for d GT 1.  For d == 1 (see pixRankHaustest()),
''' we verify that when one pix1 is dilated, it covers at least a
''' given fraction of the pixels in pix2, and v.v.; in that
''' case, the two pix are sufficiently similar.  Here, we
''' do an analogous thing subtract the dilated pix1 from pix2 to
''' get a 1-sided hausdorff-like transform.  Then do it the
''' other way.  Take the component-wise max of the two results,
''' and threshold to get the fraction of pixels with a difference
''' below the threshold.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs1">[in] - 8 bpp gray or 32 bpp rgb, or colormapped</param>
'''  <param name="pixs2">[in] - 8 bpp gray or 32 bpp rgb, or colormapped</param>
'''  <param name="sampling">[in] - subsampling factor; use 0 or 1 for no subsampling</param>
'''  <param name="dilation">[in] - size of grayscale or color Sel; odd</param>
'''  <param name="mindiff">[in] - minimum pixel difference to be counted; GT 0</param>
'''  <param name="pfract">[out] - fraction of pixels with diff greater than mindiff</param>
'''  <param name="ppixdiff1">[out][optional] - showing difference (gray or color)</param>
'''  <param name="ppixdiff2">[out][optional] - showing pixels of sufficient diff</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetPerceptualDiff(
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix, 
				ByVal sampling as Integer, 
				ByVal dilation as Integer, 
				ByVal mindiff as Integer, 
				ByRef pfract as Single(), 
				ByRef ppixdiff1 as Pix, 
				ByRef ppixdiff2 as Pix) as Integer

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")

Dim ppixdiff1PTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdiff1) Then ppixdiff1PTR = ppixdiff1.Pointer
Dim ppixdiff2PTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdiff2) Then ppixdiff2PTR = ppixdiff2.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetPerceptualDiff( pixs1.Pointer, pixs2.Pointer, sampling, dilation, mindiff, pfract, ppixdiff1PTR, ppixdiff2PTR)
	if ppixdiff1PTR <> IntPtr.Zero then ppixdiff1 = new Pix(ppixdiff1PTR)
	if ppixdiff2PTR <> IntPtr.Zero then ppixdiff2 = new Pix(ppixdiff2PTR)

	Return _Result
End Function

' SRC\compare.c (1778, 1)
' pixGetPSNR()
' pixGetPSNR(PIX *, PIX *, l_int32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This computes the power S/N ratio, in dB, for the difference
''' between two images.  By convention, the power S/N
''' for a grayscale image is ('log' == log base 10,
''' and 'ln == log base e)
''' PSNR = 10  log((255/MSE)^2)
''' = 4.3429  ln((255/MSE)^2)
''' = -4.3429  ln((MSE/255)^2)
''' where MSE is the mean squared error.
''' Here are some examples
''' MSE PSNR
''' --- ----
''' 10  28.1
''' 3   38.6
''' 1   48.1
''' 0.1 68.1
''' (2) If pix1 and pix2 have the same pixel values, the MSE = 0.0
''' and the PSNR is infinity.  For that case, this returns
''' PSNR = 1000, which corresponds to the very small MSE of
''' about 10^(-48).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 8 or 32 bpp; no colormap</param>
'''  <param name="pix2">[in] - 8 or 32 bpp; no colormap</param>
'''  <param name="factor">[in] - sampling factor; GT= 1</param>
'''  <param name="ppsnr">[out] - power signal/noise ratio difference</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetPSNR(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal factor as Integer, 
				ByRef ppsnr as Single()) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetPSNR( pix1.Pointer, pix2.Pointer, factor, ppsnr)

	Return _Result
End Function

' SRC\compare.c (1893, 1)
' pixaComparePhotoRegionsByHisto()
' pixaComparePhotoRegionsByHisto(PIXA *, l_float32, l_float32, l_int32, l_int32, l_int32, l_float32, NUMA **, l_float32 **, PIX **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This function takes a pixa of cropped photo images and
''' compares each one to the others for similarity.
''' Each image is first tested to see if it is a photo that can
''' be compared by tiled histograms.  If so, it is padded to put
''' the centroid in the center of the image, and the histograms
''' are generated.  The final step of comparing each histogram
''' with all the others is very fast.
''' (2) An initial filter gives %score = 0 if the ratio of widths
''' and heights (smallest / largest) does not exceed a
''' threshold %minratio.  If set at 1.0, both images must be
''' exactly the same size.  A typical value for %minratio is 0.9.
''' (3) The comparison score between two images is a value in [0.0 .. 1.0].
''' If the comparison score GT= %simthresh, the images are placed in
''' the same similarity class.  Default value for %simthresh is 0.25.
''' (4) An array %nai of similarity class indices for pix in the
''' input pixa is returned.
''' (5) There are two debugging options
''' An optional 2D matrix of scores is returned as a 1D array.
''' A visualization of this is written to a temp file.
''' An optional pix showing the similarity classes can be
''' returned.  Text in each input pix is reproduced.
''' (6) See the notes in pixComparePhotoRegionsByHisto() for details
''' on the implementation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - any depth; colormap OK</param>
'''  <param name="minratio">[in] - requiring sizes be compatible; LT 1.0</param>
'''  <param name="textthresh">[in] - threshold for text/photo; use 0 for default</param>
'''  <param name="factor">[in] - subsampling; GT= 1</param>
'''  <param name="nx">[in] - num subregions to use for histograms; e.g. 3x3</param>
'''  <param name="ny">[in] - num subregions to use for histograms; e.g. 3x3</param>
'''  <param name="simthresh">[in] - threshold for similarity; use 0 for default</param>
'''  <param name="pnai">[out] - array  giving similarity class indices</param>
'''  <param name="pscores">[out][optional] - score matrix as 1-D array of size N^2</param>
'''  <param name="ppixd">[out][optional] - pix of similarity classes</param>
'''  <param name="debug">[in] - 1 to output histograms; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaComparePhotoRegionsByHisto(
				ByVal pixa as Pixa, 
				ByVal minratio as Single, 
				ByVal textthresh as Single, 
				ByVal factor as Integer, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByVal simthresh as Single, 
				ByRef pnai as Numa, 
				ByRef pscores as List(Of Single()), 
				ByRef ppixd as Pix, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (minratio) then Throw New ArgumentNullException  ("minratio cannot be Nothing")
	If IsNothing (textthresh) then Throw New ArgumentNullException  ("textthresh cannot be Nothing")
	If IsNothing (simthresh) then Throw New ArgumentNullException  ("simthresh cannot be Nothing")

	Dim pnaiPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnai) Then pnaiPTR = pnai.Pointer
Dim pscoresPTR As IntPtr = IntPtr.Zero: if not isNothing (pscores) then pscoresPTR = Marshal.AllocHGlobal(Marshal.SizeOf(pscores.toarray))
Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaComparePhotoRegionsByHisto( pixa.Pointer, minratio, textthresh, factor, nx, ny, simthresh, pnaiPTR, pscoresPTR, ppixdPTR, debug)
	if pnaiPTR <> IntPtr.Zero then pnai = new Numa(pnaiPTR)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return _Result
End Function

' SRC\compare.c (2104, 1)
' pixComparePhotoRegionsByHisto()
' pixComparePhotoRegionsByHisto(PIX *, PIX *, BOX *, BOX *, l_float32, l_int32, l_int32, l_int32, l_float32 *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This function compares two grayscale photo regions.  If a
''' box is given, the region is clipped; otherwise assume
''' the entire images are photo regions.  This is done with a
''' set of (nx  ny) spatially aligned histograms, which are
''' aligned using the centroid of the inverse image.
''' (2) An initial filter gives %score = 0 if the ratio of widths
''' and heights (smallest / largest) does not exceed a
''' threshold %minratio.  This must be between 0.5 and 1.0.
''' If set at 1.0, both images must be exactly the same size.
''' A typical value for %minratio is 0.9.
''' (3) Because this function should not be used on text or
''' line graphics, which can give false positive results
''' (i.e., high scores for different images), filter the images
''' using pixGenPhotoHistos(), which returns tiled histograms
''' only if an image is not text and comparison is expected
''' to work with histograms.  If either image fails the test,
''' the comparison returns a score of 0.0.
''' (4) The white value counts in the histograms are removed; they
''' are typically pixels that were padded to achieve alignment.
''' (5) For an efficient representation of the histogram, normalize
''' using a multiplicative factor so that the number in the
''' maximum bucket is 255.  It then takes 256 bytes to store.
''' (6) When comparing the histograms of two regions, use the
''' Earth Mover distance (EMD), with the histograms normalized
''' so that the sum over bins is the same.  Further normalize
''' by dividing by 255, so that the result is in [0.0 ... 1.0].
''' (7) Get a similarity score S = 1.0 - k  D, where
''' k is a constant, say in the range 5-10
''' D = normalized EMD
''' and for multiple tiles, take the Min(S) to be the final score.
''' Using aligned tiles gives protection against accidental
''' similarity of the overall grayscale histograms.
''' A small number of aligned tiles works well.
''' (8) With debug on, you get a pdf that shows, for each tile,
''' the images, histograms and score.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - any depth; colormap OK</param>
'''  <param name="pix2">[in] - any depth; colormap OK</param>
'''  <param name="box1">[in][optional] - photo regions from each; can be null</param>
'''  <param name="box2">[in][optional] - photo regions from each; can be null</param>
'''  <param name="minratio">[in] - requiring sizes be compatible; LT 1.0</param>
'''  <param name="factor">[in] - subsampling factor; GT= 1</param>
'''  <param name="nx">[in] - num subregions to use for histograms; e.g. 3x3</param>
'''  <param name="ny">[in] - num subregions to use for histograms; e.g. 3x3</param>
'''  <param name="pscore">[out] - similarity score of histograms</param>
'''  <param name="debugflag">[in] - 1 for debug output; 0 for no debugging</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixComparePhotoRegionsByHisto(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal box1 as Box, 
				ByVal box2 as Box, 
				ByVal minratio as Single, 
				ByVal factor as Integer, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByRef pscore as Single(), 
				ByVal debugflag as Integer) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If IsNothing (minratio) then Throw New ArgumentNullException  ("minratio cannot be Nothing")

	Dim box1PTR As IntPtr = IntPtr.Zero : If Not IsNothing(box1) Then box1PTR = box1.Pointer
	Dim box2PTR As IntPtr = IntPtr.Zero : If Not IsNothing(box2) Then box2PTR = box2.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixComparePhotoRegionsByHisto( pix1.Pointer, pix2.Pointer, box1PTR, box2PTR, minratio, factor, nx, ny, pscore, debugflag)

	Return _Result
End Function

' SRC\compare.c (2214, 1)
' pixGenPhotoHistos()
' pixGenPhotoHistos(PIX *, BOX *, l_int32, l_float32, l_int32, l_int32, NUMAA **, l_int32 *, l_int32 *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This crops and converts to 8 bpp if necessary.  It adds a
''' minimal white boundary such that the centroid of the
''' photo-inverted image is in the center. This allows
''' automatic alignment with histograms of other image regions.
''' (2) The white value in the histogram is removed, because of
''' the padding.
''' (3) Use 0 for conservative default (1.3) for thresh.
''' (4) For an efficient representation of the histogram, normalize
''' using a multiplicative factor so that the number in the
''' maximum bucket is 255.  It then takes 256 bytes to store.
''' (5) With %debugindex GT 0, this makes a pdf that shows, for each tile,
''' the images and histograms.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - depth GT 1 bpp; colormap OK</param>
'''  <param name="box">[in][optional] - region to be selected; can be null</param>
'''  <param name="factor">[in] - subsampling; GT= 1</param>
'''  <param name="thresh">[in] - threshold for photo/text; use 0 for default</param>
'''  <param name="nx">[in] - number of subregions to use for histograms; e.g. 3x3</param>
'''  <param name="ny">[in] - number of subregions to use for histograms; e.g. 3x3</param>
'''  <param name="pnaa">[out] - nx  ny 256-entry gray histograms</param>
'''  <param name="pw">[out] - width of image used to make histograms</param>
'''  <param name="ph">[out] - height of image used to make histograms</param>
'''  <param name="debugindex">[in] - 0 for no debugging; positive integer otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGenPhotoHistos(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal factor as Integer, 
				ByVal thresh as Single, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByRef pnaa as Numaa, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByVal debugindex as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer
	Dim pnaaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaa) Then pnaaPTR = pnaa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGenPhotoHistos( pixs.Pointer, boxPTR, factor, thresh, nx, ny, pnaaPTR, pw, ph, debugindex)
	if pnaaPTR <> IntPtr.Zero then pnaa = new Numaa(pnaaPTR)

	Return _Result
End Function

' SRC\compare.c (2326, 1)
' pixPadToCenterCentroid()
' pixPadToCenterCentroid(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This add minimum white padding to an 8 bpp pix, such that
''' the centroid of the photometric inverse is in the center of
''' the resulting image.  Thus in computing the centroid,
''' black pixels have weight 255, and white pixels have weight 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth, colormap OK</param>
'''  <param name="factor">[in] - subsampling for centroid; GT= 1</param>
'''   <returns>pixd padded with white pixels, or NULL on error.</returns>
Public Shared Function pixPadToCenterCentroid(
				ByVal pixs as Pix, 
				ByVal factor as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixPadToCenterCentroid( pixs.Pointer, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\compare.c (2380, 1)
' pixCentroid8()
' pixCentroid8(PIX *, l_int32, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This first does a photometric inversion (black = 255, white = 0).
''' It then finds the centroid of the result.  The inversion is
''' done because white is usually background, so the centroid
''' is computed based on the "foreground" gray pixels, and the
''' darker the pixel, the more weight it is given.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="factor">[in] - subsampling factor; GT= 1</param>
'''  <param name="pcx">[out] - x value of centroid</param>
'''  <param name="pcy">[out] - y value of centroid</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixCentroid8(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByRef pcx as Single(), 
				ByRef pcy as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCentroid8( pixs.Pointer, factor, pcx, pcy)

	Return _Result
End Function

' SRC\compare.c (2458, 1)
' pixDecideIfPhotoImage()
' pixDecideIfPhotoImage(PIX *, l_int32, l_int32, l_int32, l_float32, NUMAA **, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) The input image must be 8 bpp (no colormap), and padded with
''' white pixels so the centroid of photo-inverted pixels is at
''' the center of the image.
''' (2) If the pix is not almost certainly a photoimage, the returned
''' histograms (%naa) are null.
''' (3) If histograms are generated, the white (255) count is set
''' to 0.  This removes all pixels values above 230, including
''' white padding from the centroid matching operation, from
''' consideration.  The resulting histograms are then normalized
''' so the maximum count is 255.
''' (4) Default for %thresh is 1.3; this seems sufficiently conservative.
''' (5) Use %pixadebug == NULL unless debug output is requested.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 bpp, centroid in center</param>
'''  <param name="factor">[in] - subsampling for histograms; GT= 1</param>
'''  <param name="nx">[in] - number of subregions to use for histograms</param>
'''  <param name="ny">[in] - number of subregions to use for histograms</param>
'''  <param name="thresh">[in] - threshold for photo/text; use 0 for default</param>
'''  <param name="pnaa">[out] - array of normalized histograms</param>
'''  <param name="pixadebug">[in][optional] - use only for debug output</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixDecideIfPhotoImage(
				ByVal pix as Pix, 
				ByVal factor as Integer, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByVal thresh as Single, 
				ByRef pnaa as Numaa, 
				ByVal pixadebug as Pixa) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")

	Dim pnaaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaa) Then pnaaPTR = pnaa.Pointer
	Dim pixadebugPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixadebug) Then pixadebugPTR = pixadebug.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixDecideIfPhotoImage( pix.Pointer, factor, nx, ny, thresh, pnaaPTR, pixadebugPTR)
	if pnaaPTR <> IntPtr.Zero then pnaa = new Numaa(pnaaPTR)

	Return _Result
End Function

' SRC\compare.c (2590, 1)
' compareTilesByHisto()
' compareTilesByHisto(NUMAA *, NUMAA *, l_float32, l_int32, l_int32, l_int32, l_int32, l_float32 *, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) naa1 and naa2 must be generated using pixGenPhotoHistos(),
''' using the same tile sizes.
''' (2) The image dimensions must be similar.  The score is 0.0
''' if the ratio of widths and heights (smallest / largest)
''' exceeds a threshold %minratio, which must be between
''' 0.5 and 1.0.  If set at 1.0, both images must be exactly
''' the same size.  A typical value for %minratio is 0.9.
''' (2) The input pixadebug is null unless debug output is requested.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa1">[in] - each is a set of 256 entry histograms</param>
'''  <param name="naa2">[in] - each is a set of 256 entry histograms</param>
'''  <param name="minratio">[in] - requiring image sizes be compatible; LT 1.0</param>
'''  <param name="w1">[in] - image sizes from which histograms were made</param>
'''  <param name="h1">[in] - image sizes from which histograms were made</param>
'''  <param name="w2">[in] - image sizes from which histograms were made</param>
'''  <param name="h2">[in] - image sizes from which histograms were made</param>
'''  <param name="pscore">[out] - similarity score of histograms</param>
'''  <param name="pixadebug">[in][optional] - use only for debug output</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function compareTilesByHisto(
				ByVal naa1 as Numaa, 
				ByVal naa2 as Numaa, 
				ByVal minratio as Single, 
				ByVal w1 as Integer, 
				ByVal h1 as Integer, 
				ByVal w2 as Integer, 
				ByVal h2 as Integer, 
				ByRef pscore as Single(), 
				ByVal pixadebug as Pixa) as Integer

	If IsNothing (naa1) then Throw New ArgumentNullException  ("naa1 cannot be Nothing")
	If IsNothing (naa2) then Throw New ArgumentNullException  ("naa2 cannot be Nothing")
	If IsNothing (minratio) then Throw New ArgumentNullException  ("minratio cannot be Nothing")

	Dim pixadebugPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixadebug) Then pixadebugPTR = pixadebug.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.compareTilesByHisto( naa1.Pointer, naa2.Pointer, minratio, w1, h1, w2, h2, pscore, pixadebugPTR)

	Return _Result
End Function

' SRC\compare.c (2758, 1)
' pixCompareGrayByHisto()
' pixCompareGrayByHisto(PIX *, PIX *, BOX *, BOX *, l_float32, l_int32, l_int32, l_int32, l_int32, l_float32 *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This function compares two grayscale photo regions.  It can
''' do it with a single histogram from each region, or with a
''' set of (nx  ny) spatially aligned histograms.  For both
''' cases, align the regions using the centroid of the inverse
''' image, and crop to the smallest of the two.
''' (2) An initial filter gives %score = 0 if the ratio of widths
''' and heights (smallest / largest) does not exceed a
''' threshold %minratio.  This must be between 0.5 and 1.0.
''' If set at 1.0, both images must be exactly the same size.
''' A typical value for %minratio is 0.9.
''' (3) The lightest values in the histogram can be disregarded.
''' Set %maxgray to the lightest value to be kept.  For example,
''' to eliminate white (255), set %maxgray = 254.  %maxgray must
''' be GT= 200.
''' (4) For an efficient representation of the histogram, normalize
''' using a multiplicative factor so that the number in the
''' maximum bucket is 255.  It then takes 256 bytes to store.
''' (5) When comparing the histograms of two regions
''' ~ Use %maxgray = 254 to ignore the white pixels, the number
''' of which may be sensitive to the crop region if the pixels
''' outside that region are white.
''' ~ Use the Earth Mover distance (EMD), with the histograms
''' normalized so that the sum over bins is the same.
''' Further normalize by dividing by 255, so that the result
''' is in [0.0 ... 1.0].
''' (6) Get a similarity score S = 1.0 - k  D, where
''' k is a constant, say in the range 5-10
''' D = normalized EMD
''' and for multiple tiles, take the Min(S) to be the final score.
''' Using aligned tiles gives protection against accidental
''' similarity of the overall grayscale histograms.
''' A small number of aligned tiles works well.
''' (7) With debug on, you get a pdf that shows, for each tile,
''' the images, histograms and score.
''' (8) When to use
''' (a) Because this function should not be used on text or
''' line graphics, which can give false positive results
''' (i.e., high scores for different images), the input
''' images should be filtered.
''' (b) To filter, first use pixDecideIfText().  If that function
''' says the image is text, do not use it.  If the function
''' says it is not text, it still may be line graphics, and
''' in that case, use
''' pixGetGrayHistogramTiled()
''' grayInterHistogramStats()
''' to determine whether it is photo or line graphics.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - any depth; colormap OK</param>
'''  <param name="pix2">[in] - any depth; colormap OK</param>
'''  <param name="box1">[in][optional] - region selected from each; can be null</param>
'''  <param name="box2">[in][optional] - region selected from each; can be null</param>
'''  <param name="minratio">[in] - requiring sizes be compatible; LT 1.0</param>
'''  <param name="maxgray">[in] - max value to keep in histo; GT= 200, 255 to keep all</param>
'''  <param name="factor">[in] - subsampling factor; GT= 1</param>
'''  <param name="nx">[in] - num subregions to use for histograms; e.g. 3x3</param>
'''  <param name="ny">[in] - num subregions to use for histograms; e.g. 3x3</param>
'''  <param name="pscore">[out] - similarity score of histograms</param>
'''  <param name="debugflag">[in] - 1 for debug output; 0 for no debugging</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixCompareGrayByHisto(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal box1 as Box, 
				ByVal box2 as Box, 
				ByVal minratio as Single, 
				ByVal maxgray as Integer, 
				ByVal factor as Integer, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByRef pscore as Single(), 
				ByVal debugflag as Integer) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If IsNothing (minratio) then Throw New ArgumentNullException  ("minratio cannot be Nothing")

	Dim box1PTR As IntPtr = IntPtr.Zero : If Not IsNothing(box1) Then box1PTR = box1.Pointer
	Dim box2PTR As IntPtr = IntPtr.Zero : If Not IsNothing(box2) Then box2PTR = box2.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCompareGrayByHisto( pix1.Pointer, pix2.Pointer, box1PTR, box2PTR, minratio, maxgray, factor, nx, ny, pscore, debugflag)

	Return _Result
End Function

' SRC\compare.c (3011, 1)
' pixCropAlignedToCentroid()
' pixCropAlignedToCentroid(PIX *, PIX *, l_int32, BOX **, BOX **) as l_ok
'''  <summary>
''' Notes
''' (1) This finds the maximum crop boxes for two 8 bpp images when
''' their centroids of their photometric inverses are aligned.
''' Black pixels have weight 255; white pixels have weight 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - any depth; colormap OK</param>
'''  <param name="pix2">[in] - any depth; colormap OK</param>
'''  <param name="factor">[in] - subsampling; GT= 1</param>
'''  <param name="pbox1">[out] - crop box for pix1</param>
'''  <param name="pbox2">[out] - crop box for pix2</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixCropAlignedToCentroid(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal factor as Integer, 
				ByRef pbox1 as Box, 
				ByRef pbox2 as Box) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")

	Dim pbox1PTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbox1) Then pbox1PTR = pbox1.Pointer
	Dim pbox2PTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbox2) Then pbox2PTR = pbox2.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCropAlignedToCentroid( pix1.Pointer, pix2.Pointer, factor, pbox1PTR, pbox2PTR)
	if pbox1PTR <> IntPtr.Zero then pbox1 = new Box(pbox1PTR)
	if pbox2PTR <> IntPtr.Zero then pbox2 = new Box(pbox2PTR)

	Return _Result
End Function

' SRC\compare.c (3086, 1)
' l_compressGrayHistograms()
' l_compressGrayHistograms(NUMAA *, l_int32, l_int32, size_t *) as l_uint8 *
'''  <summary>
''' Notes
''' (1) This first writes w and h to the byte array as 4 byte ints.
''' (2) Then it normalizes each histogram to a max value of 255,
''' and saves each value as a byte.  If there are
''' N histograms, the output bytearray has 8 + 256  N bytes.
''' (3) Further compression of the array with zlib yields only about
''' a 25% decrease in size, so we don't bother.  If size reduction
''' were important, a lossy transform using a 1-dimensional DCT
''' would be effective, because we don't care about the fine
''' details of these histograms.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa">[in] - set of 256-entry histograms</param>
'''  <param name="w">[in] - size of image</param>
'''  <param name="h">[in] - size of image</param>
'''  <param name="psize">[out] - size of byte array</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_compressGrayHistograms(
				ByVal naa as Numaa, 
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByRef psize as UInteger) as Byte()

	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")


	Dim _Result as Byte() = LeptonicaSharp.Natives.l_compressGrayHistograms( naa.Pointer, w, h, psize)

	Return _Result
End Function

' SRC\compare.c (3154, 1)
' l_uncompressGrayHistograms()
' l_uncompressGrayHistograms(l_uint8 *, size_t, l_int32 *, l_int32 *) as NUMAA *
'''  <summary>
''' Notes
''' (1) The first 8 bytes are read as two 32-bit ints.
''' (2) Then this constructs a numaa representing some number of
''' gray histograms that are normalized such that the max value
''' in each histogram is 255.  The data is stored as a byte
''' array, with 256 bytes holding the data for each histogram.
''' Each gray histogram was computed from a tile of a grayscale image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="bytea">[in] - byte array of size 8 + 256  N, N an integer</param>
'''  <param name="size">[in] - size of byte array</param>
'''  <param name="pw">[out] - width of the image that generated the histograms</param>
'''  <param name="ph">[out] - height of the image</param>
'''   <returns>numaa     representing N histograms, each with 256 bins, or NULL on error.</returns>
Public Shared Function l_uncompressGrayHistograms(
				ByVal bytea as Byte(), 
				ByVal size as UInteger, 
				ByRef pw as Integer, 
				ByRef ph as Integer) as Numaa

	If IsNothing (bytea) then Throw New ArgumentNullException  ("bytea cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_uncompressGrayHistograms( bytea, size, pw, ph)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numaa(_Result)
End Function

' SRC\compare.c (3223, 1)
' pixCompareWithTranslation()
' pixCompareWithTranslation(PIX *, PIX *, l_int32, l_int32 *, l_int32 *, l_float32 *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This does a coarse-to-fine search for best translational
''' alignment of two images, measured by a scoring function
''' that is the correlation between the fg pixels.
''' (2) The threshold is used if the images aren't 1 bpp.
''' (3) With debug on, you get a pdf that shows, as a grayscale
''' image, the score as a function of shift from the initial
''' estimate, for each of the four levels.  The shift is 0 at
''' the center of the image.
''' (4) With debug on, you also get a pdf that shows the
''' difference at the best alignment between the two images,
''' at each of the four levels.  The red and green pixels
''' show locations where one image has a fg pixel and the
''' other doesn't.  The black pixels are where both images
''' have fg pixels, and white pixels are where neither image
''' has fg pixels.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - any depth; colormap OK</param>
'''  <param name="pix2">[in] - any depth; colormap OK</param>
'''  <param name="thresh">[in] - threshold for converting to 1 bpp</param>
'''  <param name="pdelx">[out] - x translation on pix2 to align with pix1</param>
'''  <param name="pdely">[out] - y translation on pix2 to align with pix1</param>
'''  <param name="pscore">[out] - correlation score at best alignment</param>
'''  <param name="debugflag">[in] - 1 for debug output; 0 for no debugging</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixCompareWithTranslation(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal thresh as Integer, 
				ByRef pdelx as Integer, 
				ByRef pdely as Integer, 
				ByRef pscore as Single(), 
				ByVal debugflag as Integer) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCompareWithTranslation( pix1.Pointer, pix2.Pointer, thresh, pdelx, pdely, pscore, debugflag)

	Return _Result
End Function

' SRC\compare.c (3377, 1)
' pixBestCorrelation()
' pixBestCorrelation(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32 *, l_int32 *, l_int32 *, l_float32 *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This maximizes the correlation score between two 1 bpp images,
''' by starting with an estimate of the alignment
''' (%etransx, %etransy) and computing the correlation around this.
''' It optionally returns the shift (%delx, %dely) that maximizes
''' the correlation score when pix2 is shifted by this amount
''' relative to pix1.
''' (2) Get the centroids of pix1 and pix2, using pixCentroid(),
''' to compute (%etransx, %etransy).  Get the areas using
''' pixCountPixels().
''' (3) The centroid of pix2 is shifted with respect to the centroid
''' of pix1 by all values between -maxshiftx and maxshiftx,
''' and likewise for the y shifts.  Therefore, the number of
''' correlations computed is
''' (2  maxshiftx + 1)  (2  maxshifty + 1)
''' Consequently, if pix1 and pix2 are large, you should do this
''' in a coarse-to-fine sequence.  See the use of this function
''' in pixCompareWithTranslation().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 1 bpp</param>
'''  <param name="pix2">[in] - 1 bpp</param>
'''  <param name="area1">[in] - number of on pixels in pix1</param>
'''  <param name="area2">[in] - number of on pixels in pix2</param>
'''  <param name="etransx">[in] - estimated x translation of pix2 to align with pix1</param>
'''  <param name="etransy">[in] - estimated y translation of pix2 to align with pix1</param>
'''  <param name="maxshift">[in] - max x and y shift of pix2, around the estimated alignment location, relative to pix1</param>
'''  <param name="tab8">[in][optional] - sum tab for ON pixels in byte; can be NULL</param>
'''  <param name="pdelx">[out][optional] - best x shift of pix2 relative to pix1</param>
'''  <param name="pdely">[out][optional] - best y shift of pix2 relative to pix1</param>
'''  <param name="pscore">[out][optional] - maximum score found; can be NULL</param>
'''  <param name="debugflag">[in] - LT= 0 to skip; positive to generate output. The integer is used to label the debug image.</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixBestCorrelation(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal area1 as Integer, 
				ByVal area2 as Integer, 
				ByVal etransx as Integer, 
				ByVal etransy as Integer, 
				ByVal maxshift as Integer, 
				ByVal tab8 as Integer(), 
				ByRef pdelx as Integer, 
				ByRef pdely as Integer, 
				ByRef pscore as Single(), 
				ByVal debugflag as Integer) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If {1}.contains (pix1.d) = false then Throw New ArgumentException ("1 bpp")
	If {1}.contains (pix2.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixBestCorrelation( pix1.Pointer, pix2.Pointer, area1, area2, etransx, etransy, maxshift, tab8, pdelx, pdely, pscore, debugflag)

	Return _Result
End Function

#End Region
#Region "SRC\conncomp.c"
' SRC\conncomp.c (144, 1)
' pixConnComp()
' pixConnComp(PIX *, PIXA **, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This is the top-level call for getting bounding boxes or
''' a pixa of the components, and it can be used instead
''' of either pixConnCompBB() or pixConnCompPixa(), rsp.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="ppixa">[out][optional] - pixa of each c.c.</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>boxa, or NULL on error</returns>
Public Shared Function pixConnComp(
				ByVal pixs as Pix, 
				ByRef ppixa as Pixa, 
				ByVal connectivity as Integer) as Boxa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

Dim ppixaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixa) Then ppixaPTR = ppixa.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConnComp( pixs.Pointer, ppixaPTR, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixaPTR <> IntPtr.Zero then ppixa = new Pixa(ppixaPTR)

	Return  new Boxa(_Result)
End Function

' SRC\conncomp.c (190, 1)
' pixConnCompPixa()
' pixConnCompPixa(PIX *, PIXA **, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This finds bounding boxes of 4- or 8-connected components
''' in a binary image, and saves images of each c.c
''' in a pixa array.
''' (2) It sets up 2 temporary pix, and for each c.c. that is
''' located in raster order, it erases the c.c. from one pix,
''' then uses the b.b. to extract the c.c. from the two pix using
''' an XOR, and finally erases the c.c. from the second pix.
''' (3) A clone of the returned boxa (where all boxes in the array
''' are clones) is inserted into the pixa.
''' (4) If the input is valid, this always returns a boxa and a pixa.
''' If pixs is empty, the boxa and pixa will be empty.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="ppixa">[out] - pixa of each c.c.</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>boxa, or NULL on error</returns>
Public Shared Function pixConnCompPixa(
				ByVal pixs as Pix, 
				ByRef ppixa as Pixa, 
				ByVal connectivity as Integer) as Boxa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim ppixaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixa) Then ppixaPTR = ppixa.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConnCompPixa( pixs.Pointer, ppixaPTR, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixaPTR <> IntPtr.Zero then ppixa = new Pixa(ppixaPTR)

	Return  new Boxa(_Result)
End Function

' SRC\conncomp.c (304, 1)
' pixConnCompBB()
' pixConnCompBB(PIX *, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) Finds bounding boxes of 4- or 8-connected components
''' in a binary image.
''' (2) This works on a copy of the input pix.  The c.c. are located
''' in raster order and erased one at a time.  In the process,
''' the b.b. is computed and saved.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>boxa, or NULL on error</returns>
Public Shared Function pixConnCompBB(
				ByVal pixs as Pix, 
				ByVal connectivity as Integer) as Boxa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConnCompBB( pixs.Pointer, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\conncomp.c (387, 1)
' pixCountConnComp()
' pixCountConnComp(PIX *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="pcount">[out] - </param>
'''   <returns>0 if OK, 1 on error Notes (1 This is the top-level call for getting the number of 4- or 8-connected components in a 1 bpp image. 2 It works on a copy of the input pix.  The c.c. are located in raster order and erased one at a time.</returns>
Public Shared Function pixCountConnComp(
				ByVal pixs as Pix, 
				ByVal connectivity as Integer, 
				ByRef pcount as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCountConnComp( pixs.Pointer, connectivity, pcount)

	Return _Result
End Function

' SRC\conncomp.c (449, 1)
' nextOnPixelInRaster()
' nextOnPixelInRaster(PIX *, l_int32, l_int32, l_int32 *, l_int32 *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="xstart">[in] - starting point for search</param>
'''  <param name="ystart">[in] - starting point for search</param>
'''  <param name="px">[out] - coord value of next ON pixel</param>
'''  <param name="py">[out] - coord value of next ON pixel</param>
'''   <returns>1 if a pixel is found; 0 otherwise or on error</returns>
Public Shared Function nextOnPixelInRaster(
				ByVal pixs as Pix, 
				ByVal xstart as Integer, 
				ByVal ystart as Integer, 
				ByRef px as Integer, 
				ByRef py as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.nextOnPixelInRaster( pixs.Pointer, xstart, ystart, px, py)

	Return _Result
End Function

' SRC\conncomp.c (483, 1)
' nextOnPixelInRasterLow()
' nextOnPixelInRasterLow(l_uint32 *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32 *, l_int32 *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - pix data</param>
'''  <param name="w">[in] - width and height</param>
'''  <param name="h">[in] - width and height</param>
'''  <param name="wpl">[in] - words per line</param>
'''  <param name="xstart">[in] - starting point for search</param>
'''  <param name="ystart">[in] - starting point for search</param>
'''  <param name="px">[out] - coord value of next ON pixel</param>
'''  <param name="py">[out] - coord value of next ON pixel</param>
'''   <returns>1 if a pixel is found; 0 otherwise or on error</returns>
Public Shared Function nextOnPixelInRasterLow(
				ByVal data as Byte(), 
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal wpl as Integer, 
				ByVal xstart as Integer, 
				ByVal ystart as Integer, 
				ByRef px as Integer, 
				ByRef py as Integer) as Integer

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")

	Dim dataPTR As IntPtr = Marshal.AllocHGlobal(data.Count) : Marshal.Copy(data, 0, dataPTR, data.Length)

	Dim _Result as Integer = LeptonicaSharp.Natives.nextOnPixelInRasterLow( dataPTR, w, h, wpl, xstart, ystart, px, py)

	Return _Result
End Function

' SRC\conncomp.c (560, 1)
' pixSeedfillBB()
' pixSeedfillBB(PIX *, L_STACK *, l_int32, l_int32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) This is the high-level interface to Paul Heckbert's
''' stack-based seedfill algorithm.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="stack">[in] - for holding fillsegs</param>
'''  <param name="x">[in] - ,y   location of seed pixel</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>box or NULL on error</returns>
Public Shared Function pixSeedfillBB(
				ByVal pixs as Pix, 
				ByVal stack as L_Stack, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByVal connectivity as Integer) as Box

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (stack) then Throw New ArgumentNullException  ("stack cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSeedfillBB( pixs.Pointer, stack.Pointer, x, y, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\conncomp.c (623, 1)
' pixSeedfill4BB()
' pixSeedfill4BB(PIX *, L_STACK *, l_int32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) This is Paul Heckbert's stack-based 4-cc seedfill algorithm.
''' (2) This operates on the input 1 bpp pix to remove the fg seed
''' pixel, at (x,y), and all pixels that are 4-connected to it.
''' The seed pixel at (x,y) must initially be ON.
''' (3) Returns the bounding box of the erased 4-cc component.
''' (4) Reference see Paul Heckbert's stack-based seed fill algorithm
''' in "Graphic Gems", ed. Andrew Glassner, Academic
''' Press, 1990.  The algorithm description is given
''' on pp. 275-277; working C code is on pp. 721-722.)
''' The code here follows Heckbert's exactly, except
''' we use function calls instead of macros for
''' pushing data on and popping data off the stack.
''' This makes sense to do because Heckbert's fixed-size
''' stack with macros is dangerous images exist that
''' will overrun the stack and crash.   The stack utility
''' here grows dynamically as needed, and the fillseg
''' structures that are not in use are stored in another
''' stack for reuse.  It should be noted that the
''' overhead in the function calls (vs. macros) is negligible.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="stack">[in] - for holding fillsegs</param>
'''  <param name="x">[in] - ,y   location of seed pixel</param>
'''   <returns>box or NULL on error.</returns>
Public Shared Function pixSeedfill4BB(
				ByVal pixs as Pix, 
				ByVal stack as L_Stack, 
				ByVal x as Integer, 
				ByRef y as Integer) as Box

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (stack) then Throw New ArgumentNullException  ("stack cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSeedfill4BB( pixs.Pointer, stack.Pointer, x, y)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\conncomp.c (738, 1)
' pixSeedfill8BB()
' pixSeedfill8BB(PIX *, L_STACK *, l_int32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) This is Paul Heckbert's stack-based 8-cc seedfill algorithm.
''' (2) This operates on the input 1 bpp pix to remove the fg seed
''' pixel, at (x,y), and all pixels that are 8-connected to it.
''' The seed pixel at (x,y) must initially be ON.
''' (3) Returns the bounding box of the erased 8-cc component.
''' (4) Reference see Paul Heckbert's stack-based seed fill algorithm
''' in "Graphic Gems", ed. Andrew Glassner, Academic
''' Press, 1990.  The algorithm description is given
''' on pp. 275-277; working C code is on pp. 721-722.)
''' The code here follows Heckbert's closely, except
''' the leak checks are changed for 8 connectivity.
''' See comments on pixSeedfill4BB() for more details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="stack">[in] - for holding fillsegs</param>
'''  <param name="x">[in] - ,y   location of seed pixel</param>
'''   <returns>box or NULL on error.</returns>
Public Shared Function pixSeedfill8BB(
				ByVal pixs as Pix, 
				ByVal stack as L_Stack, 
				ByVal x as Integer, 
				ByRef y as Integer) as Box

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (stack) then Throw New ArgumentNullException  ("stack cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSeedfill8BB( pixs.Pointer, stack.Pointer, x, y)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\conncomp.c (844, 1)
' pixSeedfill()
' pixSeedfill(PIX *, L_STACK *, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This removes the component from pixs with a fg pixel at (x,y).
''' (2) See pixSeedfill4() and pixSeedfill8() for details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="stack">[in] - for holding fillsegs</param>
'''  <param name="x">[in] - ,y   location of seed pixel</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSeedfill(
				ByVal pixs as Pix, 
				ByVal stack as L_Stack, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByVal connectivity as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (stack) then Throw New ArgumentNullException  ("stack cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSeedfill( pixs.Pointer, stack.Pointer, x, y, connectivity)

	Return _Result
End Function

' SRC\conncomp.c (888, 1)
' pixSeedfill4()
' pixSeedfill4(PIX *, L_STACK *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is Paul Heckbert's stack-based 4-cc seedfill algorithm.
''' (2) This operates on the input 1 bpp pix to remove the fg seed
''' pixel, at (x,y), and all pixels that are 4-connected to it.
''' The seed pixel at (x,y) must initially be ON.
''' (3) Reference see pixSeedFill4BB()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="stack">[in] - for holding fillsegs</param>
'''  <param name="x">[in] - ,y   location of seed pixel</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSeedfill4(
				ByVal pixs as Pix, 
				ByVal stack as L_Stack, 
				ByVal x as Integer, 
				ByRef y as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (stack) then Throw New ArgumentNullException  ("stack cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSeedfill4( pixs.Pointer, stack.Pointer, x, y)

	Return _Result
End Function

' SRC\conncomp.c (982, 1)
' pixSeedfill8()
' pixSeedfill8(PIX *, L_STACK *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is Paul Heckbert's stack-based 8-cc seedfill algorithm.
''' (2) This operates on the input 1 bpp pix to remove the fg seed
''' pixel, at (x,y), and all pixels that are 8-connected to it.
''' The seed pixel at (x,y) must initially be ON.
''' (3) Reference see pixSeedFill8BB()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="stack">[in] - for holding fillsegs</param>
'''  <param name="x">[in] - ,y   location of seed pixel</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSeedfill8(
				ByVal pixs as Pix, 
				ByVal stack as L_Stack, 
				ByVal x as Integer, 
				ByRef y as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (stack) then Throw New ArgumentNullException  ("stack cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSeedfill8( pixs.Pointer, stack.Pointer, x, y)

	Return _Result
End Function

#End Region
#Region "SRC\convertfiles.c"
' SRC\convertfiles.c (67, 1)
' convertFilesTo1bpp()
' convertFilesTo1bpp(const char *, const char *, l_int32, l_int32, l_int32, l_int32, const char *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Images are sorted lexicographically, and the names in the
''' output directory are retained except for the extension.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirin">[in] - </param>
'''  <param name="substr">[in][optional] - substring filter on filenames; can be NULL</param>
'''  <param name="upscaling">[in] - 1, 2 or 4; only for input color or grayscale</param>
'''  <param name="thresh">[in] - global threshold for binarization; use 0 for default</param>
'''  <param name="firstpage">[in] - </param>
'''  <param name="npages">[in] - use 0 to do all from %firstpage to the end</param>
'''  <param name="dirout">[in] - </param>
'''  <param name="outformat">[in] - IFF_PNG, IFF_TIFF_G4</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertFilesTo1bpp(
				ByVal dirin as String, 
				ByVal substr as String, 
				ByVal upscaling as Integer, 
				ByVal thresh as Integer, 
				ByVal firstpage as Integer, 
				ByVal npages as Integer, 
				ByVal dirout as String, 
				ByVal outformat as Enumerations.IFF) as Integer

	If IsNothing (dirin) then Throw New ArgumentNullException  ("dirin cannot be Nothing")
	If IsNothing (dirout) then Throw New ArgumentNullException  ("dirout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertFilesTo1bpp( dirin, substr, upscaling, thresh, firstpage, npages, dirout, outformat)

	Return _Result
End Function

#End Region
#Region "SRC\convolve.c"
' SRC\convolve.c (127, 1)
' pixBlockconv()
' pixBlockconv(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The full width and height of the convolution kernel
''' are (2  wc + 1) and (2  hc + 1)
''' (2) Returns a copy if both wc and hc are 0
''' (3) Require that w GT= 2  wc + 1 and h GT= 2  hc + 1,
''' where (w,h) are the dimensions of pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 or 32 bpp; or 2, 4 or 8 bpp with colormap</param>
'''  <param name="wc">[in] - half width/height of convolution kernel</param>
'''  <param name="hc">[in] - half width/height of convolution kernel</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixBlockconv(
				ByVal pix as Pix, 
				ByVal wc as Integer, 
				ByVal hc as Integer) as Pix

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlockconv( pix.Pointer, wc, hc)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (210, 1)
' pixBlockconvGray()
' pixBlockconvGray(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If accum pix is null, make one and destroy it before
''' returning; otherwise, just use the input accum pix.
''' (2) The full width and height of the convolution kernel
''' are (2  wc + 1) and (2  hc + 1).
''' (3) Returns a copy if both wc and hc are 0.
''' (4) Require that w GT= 2  wc + 1 and h GT= 2  hc + 1,
''' where (w,h) are the dimensions of pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="pixacc">[in] - pix 32 bpp; can be null</param>
'''  <param name="wc">[in] - half width/height of convolution kernel</param>
'''  <param name="hc">[in] - half width/height of convolution kernel</param>
'''   <returns>pix 8 bpp, or NULL on error</returns>
Public Shared Function pixBlockconvGray(
				ByVal pixs as Pix, 
				ByVal pixacc as Pix, 
				ByVal wc as Integer, 
				ByVal hc as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixacc) then Throw New ArgumentNullException  ("pixacc cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlockconvGray( pixs.Pointer, pixacc.Pointer, wc, hc)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (455, 1)
' pixBlockconvAccum()
' pixBlockconvAccum(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) The general recursion relation is
''' a(i,j) = v(i,j) + a(i-1, j) + a(i, j-1) - a(i-1, j-1)
''' For the first line, this reduces to the special case
''' a(i,j) = v(i,j) + a(i, j-1)
''' For the first column, the special case is
''' a(i,j) = v(i,j) + a(i-1, j)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 8 or 32 bpp</param>
'''   <returns>accum pix 32 bpp, or NULL on error.</returns>
Public Shared Function pixBlockconvAccum(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlockconvAccum( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (636, 1)
' pixBlockconvGrayUnnormalized()
' pixBlockconvGrayUnnormalized(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The full width and height of the convolution kernel
''' are (2  wc + 1) and (2  hc + 1).
''' (2) Require that w GT= 2  wc + 1 and h GT= 2  hc + 1,
''' where (w,h) are the dimensions of pixs.
''' (3) Returns a copy if both wc and hc are 0.
''' (3) Adds mirrored border to avoid treating the boundary pixels
''' specially.  Note that we add wc + 1 pixels to the left
''' and wc to the right.  The added width is 2  wc + 1 pixels,
''' and the particular choice simplifies the indexing in the loop.
''' Likewise, add hc + 1 pixels to the top and hc to the bottom.
''' (4) To get the normalized result, divide by the area of the
''' convolution kernel (2  wc + 1)  (2  hc + 1)
''' Specifically, do this
''' pixc = pixBlockconvGrayUnnormalized(pixs, wc, hc);
''' fract = 1. / ((2  wc + 1)  (2  hc + 1));
''' pixMultConstantGray(pixc, fract);
''' pixd = pixGetRGBComponent(pixc, L_ALPHA_CHANNEL);
''' (5) Unlike pixBlockconvGray(), this always computes the accumulation
''' pix because its size is tied to wc and hc.
''' (6) Compare this implementation with pixBlockconvGray(), where
''' most of the code in blockconvLow() is special casing for
''' efficiently handling the boundary.  Here, the use of
''' mirrored borders and destination indexing makes the
''' implementation very simple.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="wc">[in] - half width/height of convolution kernel</param>
'''  <param name="hc">[in] - half width/height of convolution kernel</param>
'''   <returns>pix 32 bpp; containing the convolution without normalizing for the window size, or NULL on error</returns>
Public Shared Function pixBlockconvGrayUnnormalized(
				ByVal pixs as Pix, 
				ByVal wc as Integer, 
				ByVal hc as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlockconvGrayUnnormalized( pixs.Pointer, wc, hc)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (727, 1)
' pixBlockconvTiled()
' pixBlockconvTiled(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The full width and height of the convolution kernel
''' are (2  wc + 1) and (2  hc + 1)
''' (2) Returns a copy if both wc and hc are 0
''' (3) Require that w GT= 2  wc + 1 and h GT= 2  hc + 1,
''' where (w,h) are the dimensions of pixs.
''' (4) For nx == ny == 1, this defaults to pixBlockconv(), which
''' is typically about twice as fast, and gives nearly
''' identical results as pixBlockconvGrayTile().
''' (5) If the tiles are too small, nx and/or ny are reduced
''' a minimum amount so that the tiles are expanded to the
''' smallest workable size in the problematic direction(s).
''' (6) Why a tiled version?  Three reasons
''' (a) Because the accumulator is a uint32, overflow can occur
''' for an image with more than 16M pixels.
''' (b) The accumulator array for 16M pixels is 64 MB; using
''' tiles reduces the size of this array.
''' (c) Each tile can be processed independently, in parallel,
''' on a multicore processor.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 or 32 bpp; or 2, 4 or 8 bpp with colormap</param>
'''  <param name="wc">[in] - half width/height of convolution kernel</param>
'''  <param name="hc">[in] - half width/height of convolution kernel</param>
'''  <param name="nx">[in] - subdivision into tiles</param>
'''  <param name="ny">[in] - subdivision into tiles</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixBlockconvTiled(
				ByVal pix as Pix, 
				ByVal wc as Integer, 
				ByVal hc as Integer, 
				ByVal nx as Integer, 
				ByVal ny as Integer) as Pix

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlockconvTiled( pix.Pointer, wc, hc, nx, ny)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (853, 1)
' pixBlockconvGrayTile()
' pixBlockconvGrayTile(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The full width and height of the convolution kernel
''' are (2  wc + 1) and (2  hc + 1)
''' (2) Assumes that the input pixs is padded with (wc + 1) pixels on
''' left and right, and with (hc + 1) pixels on top and bottom.
''' The returned pix has these stripped off; they are only used
''' for computation.
''' (3) Returns a copy if both wc and hc are 0
''' (4) Require that w GT 2  wc + 1 and h GT 2  hc + 1,
''' where (w,h) are the dimensions of pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp gray</param>
'''  <param name="pixacc">[in] - 32 bpp accum pix</param>
'''  <param name="wc">[in] - half width/height of convolution kernel</param>
'''  <param name="hc">[in] - half width/height of convolution kernel</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixBlockconvGrayTile(
				ByVal pixs as Pix, 
				ByVal pixacc as Pix, 
				ByVal wc as Integer, 
				ByVal hc as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixacc) then Throw New ArgumentNullException  ("pixacc cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlockconvGrayTile( pixs.Pointer, pixacc.Pointer, wc, hc)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (980, 1)
' pixWindowedStats()
' pixWindowedStats(PIX *, l_int32, l_int32, l_int32, PIX **, PIX **, FPIX **, FPIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This is a high-level convenience function for calculating
''' any or all of these derived images.
''' (2) If %hasborder = 0, a border is added and the result is
''' computed over all pixels in pixs.  Otherwise, no border is
''' added and the border pixels are removed from the output images.
''' (3) These statistical measures over the pixels in the
''' rectangular window are
''' ~ average value LTpGT  (pixm)
''' ~ average squared value LTppGT (pixms)
''' ~ variance LT(p - LTpGT)(p - LTpGT)GT = LTppGT - LTpGTLTpGT  (pixv)
''' ~ square-root of variance (pixrv)
''' where the brackets LT .. GT indicate that the average value is
''' to be taken over the window.
''' (4) Note that the variance is just the mean square difference from
''' the mean value; and the square root of the variance is the
''' root mean square difference from the mean, sometimes also
''' called the 'standard deviation'.
''' (5) The added border, along with the use of an accumulator array,
''' allows computation without special treatment of pixels near
''' the image boundary, and runs in a time that is independent
''' of the size of the convolution kernel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale</param>
'''  <param name="wc">[in] - half width/height of convolution kernel</param>
'''  <param name="hc">[in] - half width/height of convolution kernel</param>
'''  <param name="hasborder">[in] - use 1 if it already has (wc + 1 border pixels on left and right, and hc + 1 on top and bottom; use 0 to add kernel-dependent border)</param>
'''  <param name="ppixm">[out][optional] - 8 bpp mean value in window</param>
'''  <param name="ppixms">[out][optional] - 32 bpp mean square value in window</param>
'''  <param name="pfpixv">[out][optional] - float variance in window</param>
'''  <param name="pfpixrv">[out][optional] - float rms deviation from the mean</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWindowedStats(
				ByVal pixs as Pix, 
				ByVal wc as Integer, 
				ByVal hc as Integer, 
				ByVal hasborder as Integer, 
				ByRef ppixm as Pix, 
				ByRef ppixms as Pix, 
				ByRef pfpixv as FPix, 
				ByRef pfpixrv as FPix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale")

Dim ppixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixm) Then ppixmPTR = ppixm.Pointer
Dim ppixmsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixms) Then ppixmsPTR = ppixms.Pointer
Dim pfpixvPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pfpixv) Then pfpixvPTR = pfpixv.Pointer
Dim pfpixrvPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pfpixrv) Then pfpixrvPTR = pfpixrv.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWindowedStats( pixs.Pointer, wc, hc, hasborder, ppixmPTR, ppixmsPTR, pfpixvPTR, pfpixrvPTR)
	if ppixmPTR <> IntPtr.Zero then ppixm = new Pix(ppixmPTR)
	if ppixmsPTR <> IntPtr.Zero then ppixms = new Pix(ppixmsPTR)
	if pfpixvPTR <> IntPtr.Zero then pfpixv = new FPix(pfpixvPTR)
	if pfpixrvPTR <> IntPtr.Zero then pfpixrv = new FPix(pfpixrvPTR)

	Return _Result
End Function

' SRC\convolve.c (1065, 1)
' pixWindowedMean()
' pixWindowedMean(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The input and output depths are the same.
''' (2) A set of border pixels of width (wc + 1) on left and right,
''' and of height (hc + 1) on top and bottom, must be on the
''' pix before the accumulator is found.  The output pixd
''' (after convolution) has this border removed.
''' If %hasborder = 0, the required border is added.
''' (3) Typically, %normflag == 1.  However, if you want the sum
''' within the window, rather than a normalized convolution,
''' use %normflag == 0.
''' (4) This builds a block accumulator pix, uses it here, and
''' destroys it.
''' (5) The added border, along with the use of an accumulator array,
''' allows computation without special treatment of pixels near
''' the image boundary, and runs in a time that is independent
''' of the size of the convolution kernel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 or 32 bpp grayscale</param>
'''  <param name="wc">[in] - half width/height of convolution kernel</param>
'''  <param name="hc">[in] - half width/height of convolution kernel</param>
'''  <param name="hasborder">[in] - use 1 if it already has (wc + 1 border pixels on left and right, and hc + 1 on top and bottom; use 0 to add kernel-dependent border)</param>
'''  <param name="normflag">[in] - 1 for normalization to get average in window; 0 for the sum in the window (un-normalized)</param>
'''   <returns>pixd 8 or 32 bpp, average over kernel window</returns>
Public Shared Function pixWindowedMean(
				ByVal pixs as Pix, 
				ByVal wc as Integer, 
				ByVal hc as Integer, 
				ByVal hasborder as Integer, 
				ByVal normflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixWindowedMean( pixs.Pointer, wc, hc, hasborder, normflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (1182, 1)
' pixWindowedMeanSquare()
' pixWindowedMeanSquare(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) A set of border pixels of width (wc + 1) on left and right,
''' and of height (hc + 1) on top and bottom, must be on the
''' pix before the accumulator is found.  The output pixd
''' (after convolution) has this border removed.
''' If %hasborder = 0, the required border is added.
''' (2) The advantage is that we are unaffected by the boundary, and
''' it is not necessary to treat pixels within %wc and %hc of the
''' border differently.  This is because processing for pixd
''' only takes place for pixels in pixs for which the
''' kernel is entirely contained in pixs.
''' (3) Why do we have an added border of width (%wc + 1) and
''' height (%hc + 1), when we only need %wc and %hc pixels
''' to satisfy this condition?  Answer the accumulators
''' are asymmetric, requiring an extra row and column of
''' pixels at top and left to work accurately.
''' (4) The added border, along with the use of an accumulator array,
''' allows computation without special treatment of pixels near
''' the image boundary, and runs in a time that is independent
''' of the size of the convolution kernel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale</param>
'''  <param name="wc">[in] - half width/height of convolution kernel</param>
'''  <param name="hc">[in] - half width/height of convolution kernel</param>
'''  <param name="hasborder">[in] - use 1 if it already has (wc + 1 border pixels on left and right, and hc + 1 on top and bottom; use 0 to add kernel-dependent border)</param>
'''   <returns>pixd 32 bpp, average over rectangular window of width = 2  wc + 1 and height = 2  hc + 1</returns>
Public Shared Function pixWindowedMeanSquare(
				ByVal pixs as Pix, 
				ByVal wc as Integer, 
				ByVal hc as Integer, 
				ByVal hasborder as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixWindowedMeanSquare( pixs.Pointer, wc, hc, hasborder)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (1280, 1)
' pixWindowedVariance()
' pixWindowedVariance(PIX *, PIX *, FPIX **, FPIX **) as l_ok
'''  <summary>
''' Notes
''' (1) The mean and mean square values are precomputed, using
''' pixWindowedMean() and pixWindowedMeanSquare().
''' (2) Either or both of the variance and square-root of variance
''' are returned as an fpix, where the variance is the
''' average over the window of the mean square difference of
''' the pixel value from the mean
''' LT(p - LTpGT)(p - LTpGT)GT = LTppGT - LTpGTLTpGT
''' (3) To visualize the results
''' ~ for both, use fpixDisplayMaxDynamicRange().
''' ~ for rms deviation, simply convert the output fpix to pix,
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixm">[in] - mean over window; 8 or 32 bpp grayscale</param>
'''  <param name="pixms">[in] - mean square over window; 32 bpp</param>
'''  <param name="pfpixv">[out][optional] - float variance -- the ms deviation from the mean</param>
'''  <param name="pfpixrv">[out][optional] - float rms deviation from the mean</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWindowedVariance(
				ByVal pixm as Pix, 
				ByVal pixms as Pix, 
				ByRef pfpixv as FPix, 
				ByRef pfpixrv as FPix) as Integer

	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")
	If IsNothing (pixms) then Throw New ArgumentNullException  ("pixms cannot be Nothing")

Dim pfpixvPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pfpixv) Then pfpixvPTR = pfpixv.Pointer
Dim pfpixrvPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pfpixrv) Then pfpixrvPTR = pfpixrv.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWindowedVariance( pixm.Pointer, pixms.Pointer, pfpixvPTR, pfpixrvPTR)
	if pfpixvPTR <> IntPtr.Zero then pfpixv = new FPix(pfpixvPTR)
	if pfpixrvPTR <> IntPtr.Zero then pfpixrv = new FPix(pfpixrvPTR)

	Return _Result
End Function

' SRC\convolve.c (1369, 1)
' pixMeanSquareAccum()
' pixMeanSquareAccum(PIX *) as DPIX *
'''  <summary>
''' Notes
''' (1) Similar to pixBlockconvAccum(), this computes the
''' sum of the squares of the pixel values in such a way
''' that the value at (i,j) is the sum of all squares in
''' the rectangle from the origin to (i,j).
''' (2) The general recursion relation (v are squared pixel values) is
''' a(i,j) = v(i,j) + a(i-1, j) + a(i, j-1) - a(i-1, j-1)
''' For the first line, this reduces to the special case
''' a(i,j) = v(i,j) + a(i, j-1)
''' For the first column, the special case is
''' a(i,j) = v(i,j) + a(i-1, j)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale</param>
'''   <returns>dpix 64 bit array, or NULL on error</returns>
Public Shared Function pixMeanSquareAccum(
				ByVal pixs as Pix) as DPix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMeanSquareAccum( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new DPix(_Result)
End Function

' SRC\convolve.c (1450, 1)
' pixBlockrank()
' pixBlockrank(PIX *, PIX *, l_int32, l_int32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) The full width and height of the convolution kernel
''' are (2  wc + 1) and (2  hc + 1)
''' (2) This returns a pixd where each pixel is a 1 if the
''' neighborhood (2  wc + 1) x (2  hc + 1)) pixels
''' contains the rank fraction of 1 pixels.  Otherwise,
''' the returned pixel is 0.  Note that the special case
''' of rank = 0.0 is always satisfied, so the returned
''' pixd has all pixels with value 1.
''' (3) If accum pix is null, make one, use it, and destroy it
''' before returning; otherwise, just use the input accum pix
''' (4) If both wc and hc are 0, returns a copy unless rank == 0.0,
''' in which case this returns an all-ones image.
''' (5) Require that w GT= 2  wc + 1 and h GT= 2  hc + 1,
''' where (w,h) are the dimensions of pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="pixacc">[in] - pix [optional] 32 bpp</param>
'''  <param name="wc">[in] - half width/height of block sum/rank kernel</param>
'''  <param name="hc">[in] - half width/height of block sum/rank kernel</param>
'''  <param name="rank">[in] - between 0.0 and 1.0; 0.5 is median filter</param>
'''   <returns>pixd 1 bpp</returns>
Public Shared Function pixBlockrank(
				ByVal pixs as Pix, 
				ByVal pixacc as Pix, 
				ByVal wc as Integer, 
				ByVal hc as Integer, 
				ByVal rank as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rank) then Throw New ArgumentNullException  ("rank cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixaccPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixacc) Then pixaccPTR = pixacc.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlockrank( pixs.Pointer, pixaccPTR, wc, hc, rank)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (1532, 1)
' pixBlocksum()
' pixBlocksum(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If accum pix is null, make one and destroy it before
''' returning; otherwise, just use the input accum pix
''' (2) The full width and height of the convolution kernel
''' are (2  wc + 1) and (2  hc + 1)
''' (3) Use of wc = hc = 1, followed by pixInvert() on the
''' 8 bpp result, gives a nice anti-aliased, and somewhat
''' darkened, result on text.
''' (4) Require that w GT= 2  wc + 1 and h GT= 2  hc + 1,
''' where (w,h) are the dimensions of pixs.
''' (5) Returns in each dest pixel the sum of all src pixels
''' that are within a block of size of the kernel, centered
''' on the dest pixel.  This sum is the number of src ON
''' pixels in the block at each location, normalized to 255
''' for a block containing all ON pixels.  For pixels near
''' the boundary, where the block is not entirely contained
''' within the image, we then multiply by a second normalization
''' factor that is greater than one, so that all results
''' are normalized by the number of participating pixels
''' within the block.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="pixacc">[in] - pix [optional] 32 bpp</param>
'''  <param name="wc">[in] - half width/height of block sum/rank kernel</param>
'''  <param name="hc">[in] - half width/height of block sum/rank kernel</param>
'''   <returns>pixd 8 bpp</returns>
Public Shared Function pixBlocksum(
				ByVal pixs as Pix, 
				ByVal pixacc as Pix, 
				ByVal wc as Integer, 
				ByVal hc as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixaccPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixacc) Then pixaccPTR = pixacc.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixBlocksum( pixs.Pointer, pixaccPTR, wc, hc)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (1772, 1)
' pixCensusTransform()
' pixCensusTransform(PIX *, l_int32, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) The Census transform was invented by Ramin Zabih and John Woodfill
''' ("Non-parametric local transforms for computing visual
''' correspondence", Third European Conference on Computer Vision,
''' Stockholm, Sweden, May 1994); see publications at
''' http//www.cs.cornell.edu/~rdz/index.htm
''' This compares each pixel against the average of its neighbors,
''' in a square of odd dimension centered on the pixel.
''' If the pixel is greater than the average of its neighbors,
''' the output pixel value is 1; otherwise it is 0.
''' (2) This can be used as an encoding for an image that is
''' fairly robust against slow illumination changes, with
''' applications in image comparison and mosaicing.
''' (3) The size of the convolution kernel is (2  halfsize + 1)
''' on a side.  The halfsize parameter must be GT= 1.
''' (4) If accum pix is null, make one, use it, and destroy it
''' before returning; otherwise, just use the input accum pix
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="halfsize">[in] - of square over which neighbors are averaged</param>
'''  <param name="pixacc">[in] - pix [optional] 32 bpp</param>
'''   <returns>pixd 1 bpp</returns>
Public Shared Function pixCensusTransform(
				ByVal pixs as Pix, 
				ByVal halfsize as Integer, 
				ByVal pixacc as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")

	Dim pixaccPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixacc) Then pixaccPTR = pixacc.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCensusTransform( pixs.Pointer, halfsize, pixaccPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (1872, 1)
' pixConvolve()
' pixConvolve(PIX *, L_KERNEL *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This gives a convolution with an arbitrary kernel.
''' (2) The input pixs must have only one sample/pixel.
''' To do a convolution on an RGB image, use pixConvolveRGB().
''' (3) The parameter %outdepth determines the depth of the result.
''' If the kernel is normalized to unit sum, the output values
''' can never exceed 255, so an output depth of 8 bpp is sufficient.
''' If the kernel is not normalized, it may be necessary to use
''' 16 or 32 bpp output to avoid overflow.
''' (4) If normflag == 1, the result is normalized by scaling all
''' kernel values for a unit sum.  If the sum of kernel values
''' is very close to zero, the kernel can not be normalized and
''' the convolution will not be performed.  A warning is issued.
''' (5) The kernel values can be positive or negative, but the
''' result for the convolution can only be stored as a positive
''' number.  Consequently, if it goes negative, the choices are
''' to clip to 0 or take the absolute value.  We're choosing
''' to take the absolute value.  (Another possibility would be
''' to output a second unsigned image for the negative values.)
''' If you want to get a clipped result, or to keep the negative
''' values in the result, use fpixConvolve(), with the
''' converters in fpix2.c between pix and fpix.
''' (6) This uses a mirrored border to avoid special casing on
''' the boundaries.
''' (7) To get a subsampled output, call l_setConvolveSampling().
''' The time to make a subsampled output is reduced by the
''' product of the sampling factors.
''' (8) The function is slow, running at about 12 machine cycles for
''' each pixel-op in the convolution.  For example, with a 3 GHz
''' cpu, a 1 Mpixel grayscale image, and a kernel with
''' (sx  sy) = 25 elements, the convolution takes about 100 msec.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8, 16, 32 bpp; no colormap</param>
'''  <param name="kel">[in] - kernel</param>
'''  <param name="outdepth">[in] - of pixd 8, 16 or 32</param>
'''  <param name="normflag">[in] - 1 to normalize kernel to unit sum; 0 otherwise</param>
'''   <returns>pixd 8, 16 or 32 bpp</returns>
Public Shared Function pixConvolve(
				ByVal pixs as Pix, 
				ByVal kel as L_Kernel, 
				ByVal outdepth as Integer, 
				ByVal normflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (kel) then Throw New ArgumentNullException  ("kel cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvolve( pixs.Pointer, kel.Pointer, outdepth, normflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (2002, 1)
' pixConvolveSep()
' pixConvolveSep(PIX *, L_KERNEL *, L_KERNEL *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This does a convolution with a separable kernel that is
''' is a sequence of convolutions in x and y.  The two
''' one-dimensional kernel components must be input separately;
''' the full kernel is the product of these components.
''' The support for the full kernel is thus a rectangular region.
''' (2) The input pixs must have only one sample/pixel.
''' To do a convolution on an RGB image, use pixConvolveSepRGB().
''' (3) The parameter %outdepth determines the depth of the result.
''' If the kernel is normalized to unit sum, the output values
''' can never exceed 255, so an output depth of 8 bpp is sufficient.
''' If the kernel is not normalized, it may be necessary to use
''' 16 or 32 bpp output to avoid overflow.
''' (2) The %normflag parameter is used as in pixConvolve().
''' (4) The kernel values can be positive or negative, but the
''' result for the convolution can only be stored as a positive
''' number.  Consequently, if it goes negative, the choices are
''' to clip to 0 or take the absolute value.  We're choosing
''' the former for now.  Another possibility would be to output
''' a second unsigned image for the negative values.
''' (5) Warning if you use l_setConvolveSampling() to get a
''' subsampled output, and the sampling factor is larger than
''' the kernel half-width, it is faster to use the non-separable
''' version pixConvolve().  This is because the first convolution
''' here must be done on every raster line, regardless of the
''' vertical sampling factor.  If the sampling factor is smaller
''' than kernel half-width, it's faster to use the separable
''' convolution.
''' (6) This uses mirrored borders to avoid special casing on
''' the boundaries.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8, 16, 32 bpp; no colormap</param>
'''  <param name="kelx">[in] - x-dependent kernel</param>
'''  <param name="kely">[in] - y-dependent kernel</param>
'''  <param name="outdepth">[in] - of pixd 8, 16 or 32</param>
'''  <param name="normflag">[in] - 1 to normalize kernel to unit sum; 0 otherwise</param>
'''   <returns>pixd 8, 16 or 32 bpp</returns>
Public Shared Function pixConvolveSep(
				ByVal pixs as Pix, 
				ByVal kelx as L_Kernel, 
				ByVal kely as L_Kernel, 
				ByVal outdepth as Integer, 
				ByVal normflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (kelx) then Throw New ArgumentNullException  ("kelx cannot be Nothing")
	If IsNothing (kely) then Throw New ArgumentNullException  ("kely cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvolveSep( pixs.Pointer, kelx.Pointer, kely.Pointer, outdepth, normflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (2074, 1)
' pixConvolveRGB()
' pixConvolveRGB(PIX *, L_KERNEL *) as PIX *
'''  <summary>
''' Notes
''' (1) This gives a convolution on an RGB image using an
''' arbitrary kernel (which we normalize to keep each
''' component within the range [0 ... 255].
''' (2) The input pixs must be RGB.
''' (3) The kernel values can be positive or negative, but the
''' result for the convolution can only be stored as a positive
''' number.  Consequently, if it goes negative, we clip the
''' result to 0.
''' (4) To get a subsampled output, call l_setConvolveSampling().
''' The time to make a subsampled output is reduced by the
''' product of the sampling factors.
''' (5) This uses a mirrored border to avoid special casing on
''' the boundaries.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="kel">[in] - kernel</param>
'''   <returns>pixd 32 bpp rgb</returns>
Public Shared Function pixConvolveRGB(
				ByVal pixs as Pix, 
				ByVal kel as L_Kernel) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (kel) then Throw New ArgumentNullException  ("kel cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvolveRGB( pixs.Pointer, kel.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (2133, 1)
' pixConvolveRGBSep()
' pixConvolveRGBSep(PIX *, L_KERNEL *, L_KERNEL *) as PIX *
'''  <summary>
''' Notes
''' (1) This does a convolution on an RGB image using a separable
''' kernel that is a sequence of convolutions in x and y.  The two
''' one-dimensional kernel components must be input separately;
''' the full kernel is the product of these components.
''' The support for the full kernel is thus a rectangular region.
''' (2) The kernel values can be positive or negative, but the
''' result for the convolution can only be stored as a positive
''' number.  Consequently, if it goes negative, we clip the
''' result to 0.
''' (3) To get a subsampled output, call l_setConvolveSampling().
''' The time to make a subsampled output is reduced by the
''' product of the sampling factors.
''' (4) This uses a mirrored border to avoid special casing on
''' the boundaries.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="kelx">[in] - x-dependent kernel</param>
'''  <param name="kely">[in] - y-dependent kernel</param>
'''   <returns>pixd 32 bpp rgb</returns>
Public Shared Function pixConvolveRGBSep(
				ByVal pixs as Pix, 
				ByVal kelx as L_Kernel, 
				ByVal kely as L_Kernel) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (kelx) then Throw New ArgumentNullException  ("kelx cannot be Nothing")
	If IsNothing (kely) then Throw New ArgumentNullException  ("kely cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvolveRGBSep( pixs.Pointer, kelx.Pointer, kely.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (2195, 1)
' fpixConvolve()
' fpixConvolve(FPIX *, L_KERNEL *, l_int32) as FPIX *
'''  <summary>
''' Notes
''' (1) This gives a float convolution with an arbitrary kernel.
''' (2) If normflag == 1, the result is normalized by scaling all
''' kernel values for a unit sum.  If the sum of kernel values
''' is very close to zero, the kernel can not be normalized and
''' the convolution will not be performed.  A warning is issued.
''' (3) With the FPix, there are no issues about negative
''' array or kernel values.  The convolution is performed
''' with single precision arithmetic.
''' (4) To get a subsampled output, call l_setConvolveSampling().
''' The time to make a subsampled output is reduced by the
''' product of the sampling factors.
''' (5) This uses a mirrored border to avoid special casing on
''' the boundaries.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - 32 bit float array</param>
'''  <param name="kel">[in] - kernel</param>
'''  <param name="normflag">[in] - 1 to normalize kernel to unit sum; 0 otherwise</param>
'''   <returns>fpixd 32 bit float array</returns>
Public Shared Function fpixConvolve(
				ByVal fpixs as FPix, 
				ByVal kel as L_Kernel, 
				ByVal normflag as Integer) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")
	If IsNothing (kel) then Throw New ArgumentNullException  ("kel cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixConvolve( fpixs.Pointer, kel.Pointer, normflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\convolve.c (2289, 1)
' fpixConvolveSep()
' fpixConvolveSep(FPIX *, L_KERNEL *, L_KERNEL *, l_int32) as FPIX *
'''  <summary>
''' Notes
''' (1) This does a convolution with a separable kernel that is
''' is a sequence of convolutions in x and y.  The two
''' one-dimensional kernel components must be input separately;
''' the full kernel is the product of these components.
''' The support for the full kernel is thus a rectangular region.
''' (2) The normflag parameter is used as in fpixConvolve().
''' (3) Warning if you use l_setConvolveSampling() to get a
''' subsampled output, and the sampling factor is larger than
''' the kernel half-width, it is faster to use the non-separable
''' version pixConvolve().  This is because the first convolution
''' here must be done on every raster line, regardless of the
''' vertical sampling factor.  If the sampling factor is smaller
''' than kernel half-width, it's faster to use the separable
''' convolution.
''' (4) This uses mirrored borders to avoid special casing on
''' the boundaries.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - 32 bit float array</param>
'''  <param name="kelx">[in] - x-dependent kernel</param>
'''  <param name="kely">[in] - y-dependent kernel</param>
'''  <param name="normflag">[in] - 1 to normalize kernel to unit sum; 0 otherwise</param>
'''   <returns>fpixd 32 bit float array</returns>
Public Shared Function fpixConvolveSep(
				ByVal fpixs as FPix, 
				ByVal kelx as L_Kernel, 
				ByVal kely as L_Kernel, 
				ByVal normflag as Integer) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")
	If IsNothing (kelx) then Throw New ArgumentNullException  ("kelx cannot be Nothing")
	If IsNothing (kely) then Throw New ArgumentNullException  ("kely cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixConvolveSep( fpixs.Pointer, kelx.Pointer, kely.Pointer, normflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\convolve.c (2367, 1)
' pixConvolveWithBias()
' pixConvolveWithBias(PIX *, L_KERNEL *, L_KERNEL *, l_int32, l_int32 *) as PIX *
'''  <summary>
''' Notes
''' (1) This does a convolution with either a single kernel or
''' a pair of separable kernels, and automatically applies whatever
''' bias (shift) is required so that the resulting pixel values
''' are non-negative.
''' (2) The kernel is always normalized.  If there are no negative
''' values in the kernel, a standard normalized convolution is
''' performed, with 8 bpp output.  If the sum of kernel values is
''' very close to zero, the kernel can not be normalized and
''' the convolution will not be performed.  An error message results.
''' (3) If there are negative values in the kernel, the pix is
''' converted to an fpix, the convolution is done on the fpix, and
''' a bias (shift) may need to be applied.
''' (4) If force8 == TRUE and the range of values after the convolution
''' is GT 255, the output values will be scaled to fit in [0 ... 255].
''' If force8 == FALSE, the output will be either 8 or 16 bpp,
''' to accommodate the dynamic range of output values without scaling.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; no colormap</param>
'''  <param name="kel1">[in] - </param>
'''  <param name="kel2">[in]can be null - ; use if separable</param>
'''  <param name="force8">[in] - if 1, force output to 8 bpp; otherwise, determine output depth by the dynamic range of pixel values</param>
'''  <param name="pbias">[out] - applied bias</param>
'''   <returns>pixd 8 or 16 bpp</returns>
Public Shared Function pixConvolveWithBias(
				ByVal pixs as Pix, 
				ByVal kel1 as L_Kernel, 
				ByVal kel2 as L_Kernel, 
				ByVal force8 as Integer, 
				ByRef pbias as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (kel1) then Throw New ArgumentNullException  ("kel1 cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp; no colormap")

	Dim kel2PTR As IntPtr = IntPtr.Zero : If Not IsNothing(kel2) Then kel2PTR = kel2.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvolveWithBias( pixs.Pointer, kel1.Pointer, kel2PTR, force8, pbias)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (2457, 1)
' l_setConvolveSampling()
' l_setConvolveSampling(l_int32, l_int32) as void
'''  <summary>
''' Notes
''' (1) This sets the x and y output subsampling factors for generic pix
''' and fpix convolution.  The default values are 1 (no subsampling).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="xfact">[in] - integer GT= 1</param>
'''  <param name="yfact">[in] - integer GT= 1</param>
Public Shared Sub l_setConvolveSampling(
				ByVal xfact as Integer, 
				ByVal yfact as Integer)



	LeptonicaSharp.Natives.l_setConvolveSampling( xfact, yfact)

End Sub

' SRC\convolve.c (2484, 1)
' pixAddGaussianNoise()
' pixAddGaussianNoise(PIX *, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This adds noise to each pixel, taken from a normal
''' distribution with zero mean and specified standard deviation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp gray or 32 bpp rgb; no colormap</param>
'''  <param name="stdev">[in] - of noise</param>
'''   <returns>pixd 8 or 32 bpp, or NULL on error</returns>
Public Shared Function pixAddGaussianNoise(
				ByVal pixs as Pix, 
				ByVal stdev as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (stdev) then Throw New ArgumentNullException  ("stdev cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAddGaussianNoise( pixs.Pointer, stdev)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\convolve.c (2547, 1)
' gaussDistribSampling() Return gaussian distributed variable with zero mean and unit stdev Notes (1) For an explanation of the Box-Muller method for generating a normally distributed random variable with zero mean and unit standard deviation, see Numerical Recipes in C, 2nd edition, p. 288ff. (2) This can be called sequentially to get samples that can be used for adding noise to each pixel of an image, for example.
' gaussDistribSampling() as l_float32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function gaussDistribSampling() as Single



	Dim _Result as Single = LeptonicaSharp.Natives.gaussDistribSampling( )

	Return _Result
End Function

#End Region
#Region "SRC\correlscore.c"
' SRC\correlscore.c (125, 1)
' pixCorrelationScore()
' pixCorrelationScore(PIX *, PIX *, l_int32, l_int32, l_float32, l_float32, l_int32, l_int32, l_int32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' We check first that the two pix are roughly the same size.
''' For jbclass (jbig2) applications at roughly 300 ppi, maxdiffw and
''' maxdiffh should be at least 2.
''' Only if they meet that criterion do we compare the bitmaps.
''' The centroid difference is used to align the two images to the
''' nearest integer for the correlation.
''' The correlation score is the ratio of the square of the number of
''' pixels in the AND of the two bitmaps to the product of the number
''' of ON pixels in each.  Denote the number of ON pixels in pix1
''' by |1|, the number in pix2 by |2|, and the number in the AND
''' of pix1 and pix2 by |1  2|.  The correlation score is then
''' (|1  2|)2 / (|1||2|).
''' This score is compared with an input threshold, which can
''' be modified depending on the weight of the template.
''' The modified threshold is
''' thresh + (1.0 - thresh)  weight  R
''' where
''' weight is a fixed input factor between 0.0 and 1.0
''' R = |2| / area(2)
''' and area(2) is the total number of pixels in 2 (i.e., width x height).
''' To understand why a weight factor is useful, consider what happens
''' with thick, sans-serif characters that look similar and have a value
''' of R near 1.  Different characters can have a high correlation value,
''' and the classifier will make incorrect substitutions.  The weight
''' factor raises the threshold for these characters.
''' Yet another approach to reduce such substitutions is to run the classifier
''' in a non-greedy way, matching to the template with the highest
''' score, not the first template with a score satisfying the matching
''' constraint.  However, this is not particularly effective.
''' The implementation here gives the same result as in
''' pixCorrelationScoreSimple(), where a temporary Pix is made to hold
''' the AND and implementation uses rasterop
''' pixt = pixCreateTemplate(pix1);
''' pixRasterop(pixt, idelx, idely, wt, ht, PIX_SRC, pix2, 0, 0);
''' pixRasterop(pixt, 0, 0, wi, hi, PIX_SRC  PIX_DST, pix1, 0, 0);
''' pixCountPixels(pixt, count, tab);
''' pixDestroy(pixt);
''' However, here it is done in a streaming fashion, counting as it goes,
''' and touching memory exactly once, giving a 3-4x speedup over the
''' simple implementation.  This very fast correlation matcher was
''' contributed by William Rucklidge.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - test pix, 1 bpp</param>
'''  <param name="pix2">[in] - exemplar pix, 1 bpp</param>
'''  <param name="area1">[in] - number of on pixels in pix1</param>
'''  <param name="area2">[in] - number of on pixels in pix2</param>
'''  <param name="delx">[in] - x comp of centroid difference</param>
'''  <param name="dely">[in] - y comp of centroid difference</param>
'''  <param name="maxdiffw">[in] - max width difference of pix1 and pix2</param>
'''  <param name="maxdiffh">[in] - max height difference of pix1 and pix2</param>
'''  <param name="tab">[in] - sum tab for byte</param>
'''  <param name="pscore">[out] - correlation score</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixCorrelationScore(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal area1 as Integer, 
				ByVal area2 as Integer, 
				ByVal delx as Single, 
				ByVal dely as Single, 
				ByVal maxdiffw as Integer, 
				ByVal maxdiffh as Integer, 
				ByVal tab as Integer(), 
				ByRef pscore as Single()) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If IsNothing (delx) then Throw New ArgumentNullException  ("delx cannot be Nothing")
	If IsNothing (dely) then Throw New ArgumentNullException  ("dely cannot be Nothing")
	If IsNothing (tab) then Throw New ArgumentNullException  ("tab cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCorrelationScore( pix1.Pointer, pix2.Pointer, area1, area2, delx, dely, maxdiffw, maxdiffh, tab, pscore)

	Return _Result
End Function

' SRC\correlscore.c (423, 1)
' pixCorrelationScoreThresholded()
' pixCorrelationScoreThresholded(PIX *, PIX *, l_int32, l_int32, l_float32, l_float32, l_int32, l_int32, l_int32 *, l_int32 *, l_float32) as l_int32
'''  <summary>
''' Notes
''' We check first that the two pix are roughly the same size.
''' Only if they meet that criterion do we compare the bitmaps.
''' The centroid difference is used to align the two images to the
''' nearest integer for the correlation.
''' The correlation score is the ratio of the square of the number of
''' pixels in the AND of the two bitmaps to the product of the number
''' of ON pixels in each.  Denote the number of ON pixels in pix1
''' by |1|, the number in pix2 by |2|, and the number in the AND
''' of pix1 and pix2 by |1  2|.  The correlation score is then
''' (|1  2|)2 / (|1||2|).
''' This score is compared with an input threshold, which can
''' be modified depending on the weight of the template.
''' The modified threshold is
''' thresh + (1.0 - thresh)  weight  R
''' where
''' weight is a fixed input factor between 0.0 and 1.0
''' R = |2| / area(2)
''' and area(2) is the total number of pixels in 2 (i.e., width x height).
''' To understand why a weight factor is useful, consider what happens
''' with thick, sans-serif characters that look similar and have a value
''' of R near 1.  Different characters can have a high correlation value,
''' and the classifier will make incorrect substitutions.  The weight
''' factor raises the threshold for these characters.
''' Yet another approach to reduce such substitutions is to run the classifier
''' in a non-greedy way, matching to the template with the highest
''' score, not the first template with a score satisfying the matching
''' constraint.  However, this is not particularly effective.
''' This very fast correlation matcher was contributed by William Rucklidge.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - test pix, 1 bpp</param>
'''  <param name="pix2">[in] - exemplar pix, 1 bpp</param>
'''  <param name="area1">[in] - number of on pixels in pix1</param>
'''  <param name="area2">[in] - number of on pixels in pix2</param>
'''  <param name="delx">[in] - x comp of centroid difference</param>
'''  <param name="dely">[in] - y comp of centroid difference</param>
'''  <param name="maxdiffw">[in] - max width difference of pix1 and pix2</param>
'''  <param name="maxdiffh">[in] - max height difference of pix1 and pix2</param>
'''  <param name="tab">[in] - sum tab for byte</param>
'''  <param name="downcount">[in] - count of 1 pixels below each row of pix1</param>
'''  <param name="score_threshold">[in] - </param>
'''   <returns>whether the correlation score is GT= score_threshold</returns>
Public Shared Function pixCorrelationScoreThresholded(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal area1 as Integer, 
				ByVal area2 as Integer, 
				ByVal delx as Single, 
				ByVal dely as Single, 
				ByVal maxdiffw as Integer, 
				ByVal maxdiffh as Integer, 
				ByVal tab as Integer(), 
				ByVal downcount as Integer(), 
				ByVal score_threshold as Single) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If IsNothing (delx) then Throw New ArgumentNullException  ("delx cannot be Nothing")
	If IsNothing (dely) then Throw New ArgumentNullException  ("dely cannot be Nothing")
	If IsNothing (tab) then Throw New ArgumentNullException  ("tab cannot be Nothing")
	If IsNothing (downcount) then Throw New ArgumentNullException  ("downcount cannot be Nothing")
	If IsNothing (score_threshold) then Throw New ArgumentNullException  ("score_threshold cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCorrelationScoreThresholded( pix1.Pointer, pix2.Pointer, area1, area2, delx, dely, maxdiffw, maxdiffh, tab, downcount, score_threshold)

	Return _Result
End Function

' SRC\correlscore.c (732, 1)
' pixCorrelationScoreSimple()
' pixCorrelationScoreSimple(PIX *, PIX *, l_int32, l_int32, l_float32, l_float32, l_int32, l_int32, l_int32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This calculates exactly the same value as pixCorrelationScore().
''' It is 2-3x slower, but much simpler to understand.
''' (2) The returned correlation score is 0.0 if the width or height
''' exceed %maxdiffw or %maxdiffh.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - test pix, 1 bpp</param>
'''  <param name="pix2">[in] - exemplar pix, 1 bpp</param>
'''  <param name="area1">[in] - number of on pixels in pix1</param>
'''  <param name="area2">[in] - number of on pixels in pix2</param>
'''  <param name="delx">[in] - x comp of centroid difference</param>
'''  <param name="dely">[in] - y comp of centroid difference</param>
'''  <param name="maxdiffw">[in] - max width difference of pix1 and pix2</param>
'''  <param name="maxdiffh">[in] - max height difference of pix1 and pix2</param>
'''  <param name="tab">[in] - sum tab for byte</param>
'''  <param name="pscore">[out] - correlation score, in range [0.0 ... 1.0]</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixCorrelationScoreSimple(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal area1 as Integer, 
				ByVal area2 as Integer, 
				ByVal delx as Single, 
				ByVal dely as Single, 
				ByVal maxdiffw as Integer, 
				ByVal maxdiffh as Integer, 
				ByVal tab as Integer(), 
				ByRef pscore as Single()) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If IsNothing (delx) then Throw New ArgumentNullException  ("delx cannot be Nothing")
	If IsNothing (dely) then Throw New ArgumentNullException  ("dely cannot be Nothing")
	If IsNothing (tab) then Throw New ArgumentNullException  ("tab cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCorrelationScoreSimple( pix1.Pointer, pix2.Pointer, area1, area2, delx, dely, maxdiffw, maxdiffh, tab, pscore)

	Return _Result
End Function

' SRC\correlscore.c (835, 1)
' pixCorrelationScoreShifted()
' pixCorrelationScoreShifted(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_int32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This finds the correlation between two 1 bpp images,
''' when pix2 is shifted by (delx, dely) with respect
''' to each other.
''' (2) This is implemented by starting with a copy of pix1 and
''' ANDing its pixels with those of a shifted pix2.
''' (3) Get the pixel counts for area1 and area2 using piCountPixels().
''' (4) A good estimate for a shift that would maximize the correlation
''' is to align the centroids (cx1, cy1; cx2, cy2), giving the
''' relative translations etransx and etransy
''' etransx = cx1 - cx2
''' etransy = cy1 - cy2
''' Typically delx is chosen to be near etransx; ditto for dely.
''' This function is used in pixBestCorrelation(), where the
''' translations delx and dely are varied to find the best alignment.
''' (5) We do not check the sizes of pix1 and pix2, because they should
''' be comparable.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 1 bpp</param>
'''  <param name="pix2">[in] - 1 bpp</param>
'''  <param name="area1">[in] - number of on pixels in pix1</param>
'''  <param name="area2">[in] - number of on pixels in pix2</param>
'''  <param name="delx">[in] - x translation of pix2 relative to pix1</param>
'''  <param name="dely">[in] - y translation of pix2 relative to pix1</param>
'''  <param name="tab">[in] - sum tab for byte</param>
'''  <param name="pscore">[out] - correlation score</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixCorrelationScoreShifted(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal area1 as Integer, 
				ByVal area2 as Integer, 
				ByVal delx as Integer, 
				ByVal dely as Integer, 
				ByVal tab as Integer(), 
				ByRef pscore as Single()) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If IsNothing (tab) then Throw New ArgumentNullException  ("tab cannot be Nothing")
	If {1}.contains (pix1.d) = false then Throw New ArgumentException ("1 bpp")
	If {1}.contains (pix2.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCorrelationScoreShifted( pix1.Pointer, pix2.Pointer, area1, area2, delx, dely, tab, pscore)

	Return _Result
End Function

#End Region
#Region "SRC\dewarp1.c"
' SRC\dewarp1.c (446, 1)
' dewarpCreate()
' dewarpCreate(PIX *, l_int32) as L_DEWARP *
'''  <summary>
''' Notes
''' (1) The input pixs is either full resolution or 2x reduced.
''' (2) The page number is typically 0-based.  If scanned from a book,
''' the even pages are usually on the left.  Disparity arrays
''' built for even pages should only be applied to even pages.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="pageno">[in] - page number</param>
'''   <returns>dew or NULL on error</returns>
Public Shared Function dewarpCreate(
				ByVal pixs as Pix, 
				ByVal pageno as Integer) as L_Dewarp

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dewarpCreate( pixs.Pointer, pageno)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dewarp(_Result)
End Function

' SRC\dewarp1.c (486, 1)
' dewarpCreateRef()
' dewarpCreateRef(l_int32, l_int32) as L_DEWARP *
'''  <summary>
''' Notes
''' (1) This specifies which dewarp struct should be used for
''' the given page.  It is placed in dewarpa for pages
''' for which no model can be built.
''' (2) This page and the reference page have the same parity and
''' the reference page is the closest page with a disparity model
''' to this page.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pageno">[in] - this page number</param>
'''  <param name="refpage">[in] - page number of dewarp disparity arrays to be used</param>
'''   <returns>dew or NULL on error</returns>
Public Shared Function dewarpCreateRef(
				ByVal pageno as Integer, 
				ByVal refpage as Integer) as L_Dewarp



	Dim _Result as IntPtr = LeptonicaSharp.Natives.dewarpCreateRef( pageno, refpage)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dewarp(_Result)
End Function

' SRC\dewarp1.c (509, 1)
' dewarpDestroy()
' dewarpDestroy(L_DEWARP **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdew">[in,out] - will be set to null before returning</param>
Public Shared Sub dewarpDestroy(
				ByRef pdew as L_Dewarp)


	Dim pdewPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pdew) Then pdewPTR = pdew.Pointer

	LeptonicaSharp.Natives.dewarpDestroy( pdewPTR)
	if pdewPTR <> IntPtr.Zero then pdew = new L_Dewarp(pdewPTR)

End Sub

' SRC\dewarp1.c (572, 1)
' dewarpaCreate()
' dewarpaCreate(l_int32, l_int32, l_int32, l_int32, l_int32) as L_DEWARPA *
'''  <summary>
''' Notes
''' (1) The sampling, minlines and maxdist parameters will be
''' applied to all images.
''' (2) The sampling factor is used for generating the disparity arrays
''' from the input image.  For 2x reduced input, use a sampling
''' factor that is half the sampling you want on the full resolution
''' images.
''' (3) Use %redfactor = 1 for full resolution; 2 for 2x reduction.
''' All input images must be at one of these two resolutions.
''' (4) %minlines is the minimum number of nearly full-length lines
''' required to generate a vertical disparity array.  The default
''' number is 15.  Use a smaller number to accept a questionable
''' array, but not smaller than 4.
''' (5) When a model can't be built for a page, it looks up to %maxdist
''' in either direction for a valid model with the same page parity.
''' Use -1 for the default value of %maxdist; use 0 to avoid using
''' a ref model.
''' (6) The ptr array is expanded as necessary to accommodate page images.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nptrs">[in] - number of dewarp page ptrs; typically the number of pages</param>
'''  <param name="sampling">[in] - use 0 for default value; the minimum allowed is 8</param>
'''  <param name="redfactor">[in] - of input images 1 is full resolution; 2 is 2x reduced</param>
'''  <param name="minlines">[in] - minimum number of lines to accept; use 0 for default</param>
'''  <param name="maxdist">[in] - for locating reference disparity; use -1 for default</param>
'''   <returns>dewa or NULL on error</returns>
Public Shared Function dewarpaCreate(
				ByVal nptrs as Integer, 
				ByVal sampling as Integer, 
				ByVal redfactor as Integer, 
				ByVal minlines as Integer, 
				ByVal maxdist as Integer) as L_Dewarpa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.dewarpaCreate( nptrs, sampling, redfactor, minlines, maxdist)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dewarpa(_Result)
End Function

' SRC\dewarp1.c (661, 1)
' dewarpaCreateFromPixacomp()
' dewarpaCreateFromPixacomp(PIXAC *, l_int32, l_int32, l_int32, l_int32) as L_DEWARPA *
'''  <summary>
''' Notes
''' (1) The returned dewa has disparity arrays calculated and
''' is ready for serialization or for use in dewarping.
''' (2) The sampling, minlines and maxdist parameters are
''' applied to all images.  See notes in dewarpaCreate() for details.
''' (3) The pixac is full.  Placeholders, if any, are w=h=d=1 images,
''' and the real input images are 1 bpp at full resolution.
''' They are assumed to be cropped to the actual page regions,
''' and may be arbitrarily sparse in the array.
''' (4) The output dewarpa is indexed by the page number.
''' The offset in the pixac gives the mapping between the
''' array index in the pixac and the page number.
''' (5) This adds the ref page models.
''' (6) This can be used to make models for any desired set of pages.
''' The direct models are only made for pages with images in
''' the pixacomp; the ref models are made for pages of the
''' same parity within %maxdist of the nearest direct model.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - pixacomp of G4, 1 bpp images; with 1x1x1 placeholders</param>
'''  <param name="useboth">[in] - 0 for only vert disparity; 1 for both vert and horiz</param>
'''  <param name="sampling">[in] - use -1 or 0 for default value; otherwise minimum of 5</param>
'''  <param name="minlines">[in] - minimum number of lines to accept; e.g., 10</param>
'''  <param name="maxdist">[in] - for locating reference disparity; use -1 for default</param>
'''   <returns>dewa or NULL on error</returns>
Public Shared Function dewarpaCreateFromPixacomp(
				ByVal pixac as PixaComp, 
				ByVal useboth as Integer, 
				ByVal sampling as Integer, 
				ByVal minlines as Integer, 
				ByVal maxdist as Integer) as L_Dewarpa

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dewarpaCreateFromPixacomp( pixac.Pointer, useboth, sampling, minlines, maxdist)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dewarpa(_Result)
End Function

' SRC\dewarp1.c (722, 1)
' dewarpaDestroy()
' dewarpaDestroy(L_DEWARPA **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdewa">[in,out] - will be set to null before returning</param>
Public Shared Sub dewarpaDestroy(
				ByRef pdewa as L_Dewarpa)


	Dim pdewaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pdewa) Then pdewaPTR = pdewa.Pointer

	LeptonicaSharp.Natives.dewarpaDestroy( pdewaPTR)
	if pdewaPTR <> IntPtr.Zero then pdewa = new L_Dewarpa(pdewaPTR)

End Sub

' SRC\dewarp1.c (762, 1)
' dewarpaDestroyDewarp()
' dewarpaDestroyDewarp(L_DEWARPA *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - </param>
'''  <param name="pageno">[in] - of dew to be destroyed</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaDestroyDewarp(
				ByVal dewa as L_Dewarpa, 
				ByVal pageno as Integer) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaDestroyDewarp( dewa.Pointer, pageno)

	Return _Result
End Function

' SRC\dewarp1.c (805, 1)
' dewarpaInsertDewarp()
' dewarpaInsertDewarp(L_DEWARPA *, L_DEWARP *) as l_ok
'''  <summary>
''' Notes
''' (1) This inserts the dewarp into the array, which now owns it.
''' It also keeps track of the largest page number stored.
''' It must be done before the disparity model is built.
''' (2) Note that this differs from the usual method of filling out
''' arrays in leptonica, where the arrays are compact and
''' new elements are typically added to the end.  Here,
''' the dewarp can be added anywhere, even beyond the initial
''' allocation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - </param>
'''  <param name="dew">[in] - to be added</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaInsertDewarp(
				ByVal dewa as L_Dewarpa, 
				ByVal dew as L_Dewarp) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")
	If IsNothing (dew) then Throw New ArgumentNullException  ("dew cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaInsertDewarp( dewa.Pointer, dew.Pointer)

	Return _Result
End Function

' SRC\dewarp1.c (902, 1)
' dewarpaGetDewarp()
' dewarpaGetDewarp(L_DEWARPA *, l_int32) as L_DEWARP *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - populated with dewarp structs for pages</param>
'''  <param name="index">[in] - into dewa this is the pageno</param>
'''   <returns>dew handle; still owned by dewa, or NULL on error</returns>
Public Shared Function dewarpaGetDewarp(
				ByVal dewa as L_Dewarpa, 
				ByVal index as Integer) as L_Dewarp

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dewarpaGetDewarp( dewa.Pointer, index)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dewarp(_Result)
End Function

' SRC\dewarp1.c (966, 1)
' dewarpaSetCurvatures()
' dewarpaSetCurvatures(L_DEWARPA *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Approximating the line by a quadratic, the coefficient
''' of the quadratic term is the curvature, and distance
''' units are in pixels (of course).  The curvature is very
''' small, so we multiply by 10^6 and express the constraints
''' on the model curvatures in micro-units.
''' (2) This sets five curvature thresholds and a slope threshold
''' the maximum absolute value of the vertical disparity
''' line curvatures
''' the minimum absolute value of the largest difference in
''' vertical disparity line curvatures (Use a value of 0
''' to accept all models.)
''' the maximum absolute value of the largest difference in
''' vertical disparity line curvatures
''' the maximum absolute value of the left and right edge
''' curvature for the horizontal disparity
''' the maximum absolute value of the difference between
''' left and right edge curvature for the horizontal disparity
''' all in micro-units, for dewarping to take place.
''' Use -1 for default values.
''' (3) An image with a line curvature less than about 0.00001
''' has fairly straight textlines.  This is 10 micro-units.
''' (4) For example, if %max_linecurv == 100, this would prevent dewarping
''' if any of the lines has a curvature exceeding 100 micro-units.
''' A model having maximum line curvature larger than about 150
''' micro-units should probably not be used.
''' (5) A model having a left or right edge curvature larger than
''' about 100 micro-units should probably not be used.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - </param>
'''  <param name="max_linecurv">[in] - -1 for default</param>
'''  <param name="min_diff_linecurv">[in] - -1 for default; 0 to accept all models</param>
'''  <param name="max_diff_linecurv">[in] - -1 for default</param>
'''  <param name="max_edgecurv">[in] - -1 for default</param>
'''  <param name="max_diff_edgecurv">[in] - -1 for default</param>
'''  <param name="max_edgeslope">[in] - -1 for default</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaSetCurvatures(
				ByVal dewa as L_Dewarpa, 
				ByVal max_linecurv as Integer, 
				ByVal min_diff_linecurv as Integer, 
				ByVal max_diff_linecurv as Integer, 
				ByVal max_edgecurv as Integer, 
				ByVal max_diff_edgecurv as Integer, 
				ByVal max_edgeslope as Integer) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaSetCurvatures( dewa.Pointer, max_linecurv, min_diff_linecurv, max_diff_linecurv, max_edgecurv, max_diff_edgecurv, max_edgeslope)

	Return _Result
End Function

' SRC\dewarp1.c (1030, 1)
' dewarpaUseBothArrays()
' dewarpaUseBothArrays(L_DEWARPA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This sets the useboth field.  If set, this will attempt
''' to apply both vertical and horizontal disparity arrays.
''' Note that a model with only a vertical disparity array will
''' always be valid.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - </param>
'''  <param name="useboth">[in] - 0 for false, 1 for true</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaUseBothArrays(
				ByVal dewa as L_Dewarpa, 
				ByVal useboth as Integer) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaUseBothArrays( dewa.Pointer, useboth)

	Return _Result
End Function

' SRC\dewarp1.c (1069, 1)
' dewarpaSetCheckColumns()
' dewarpaSetCheckColumns(L_DEWARPA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This sets the 'check_columns" field.  If set, and if
''' 'useboth' is set, this will count the number of text
''' columns.  If the number is larger than 1, this will
''' prevent the application of horizontal disparity arrays
''' if they exist.  Note that the default value of check_columns
''' if 0 (FALSE).
''' (2) This field is set to 0 by default.  For horizontal disparity
''' correction to take place on a single column of text, you must have
''' - a valid horizontal disparity array
''' - useboth = 1 (TRUE)
''' If there are multiple columns, additionally
''' - check_columns = 0 (FALSE)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - </param>
'''  <param name="check_columns">[in] - 0 for false, 1 for true</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaSetCheckColumns(
				ByVal dewa as L_Dewarpa, 
				ByVal check_columns as Integer) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaSetCheckColumns( dewa.Pointer, check_columns)

	Return _Result
End Function

' SRC\dewarp1.c (1095, 1)
' dewarpaSetMaxDistance()
' dewarpaSetMaxDistance(L_DEWARPA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This sets the maxdist field.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - </param>
'''  <param name="maxdist">[in] - for using ref models</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaSetMaxDistance(
				ByVal dewa as L_Dewarpa, 
				ByVal maxdist as Integer) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaSetMaxDistance( dewa.Pointer, maxdist)

	Return _Result
End Function

' SRC\dewarp1.c (1119, 1)
' dewarpRead()
' dewarpRead(const char *) as L_DEWARP *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>dew, or NULL on error</returns>
Public Shared Function dewarpRead(
				ByVal filename as String) as L_Dewarp

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dewarpRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dewarp(_Result)
End Function

' SRC\dewarp1.c (1159, 1)
' dewarpReadStream()
' dewarpReadStream(FILE *) as L_DEWARP *
'''  <summary>
''' Notes
''' (1) The dewarp struct is stored in minimized format, with only
''' subsampled disparity arrays.
''' (2) The sampling and extra horizontal disparity parameters are
''' stored here.  During generation of the dewarp struct, they
''' are passed in from the dewarpa.  In readback, it is assumed
''' that they are (a) the same for each page and (b) the same
''' as the values used to create the dewarpa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>dew, or NULL on error</returns>
Public Shared Function dewarpReadStream(
				ByVal fp as FILE) as L_Dewarp

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dewarpReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dewarp(_Result)
End Function

' SRC\dewarp1.c (1264, 1)
' dewarpReadMem()
' dewarpReadMem(const l_uint8 *, size_t) as L_DEWARP *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - serialization of dewarp</param>
'''  <param name="size">[in] - of data in bytes</param>
'''   <returns>dew  dewarp, or NULL on error</returns>
Public Shared Function dewarpReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as L_Dewarp

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dewarpReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dewarp(_Result)
End Function

' SRC\dewarp1.c (1292, 1)
' dewarpWrite()
' dewarpWrite(const char *, L_DEWARP *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="dew">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpWrite(
				ByVal filename as String, 
				ByVal dew as L_Dewarp) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (dew) then Throw New ArgumentNullException  ("dew cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpWrite( filename, dew.Pointer)

	Return _Result
End Function

' SRC\dewarp1.c (1330, 1)
' dewarpWriteStream()
' dewarpWriteStream(FILE *, L_DEWARP *) as l_ok
'''  <summary>
''' Notes
''' (1) This should not be written if there is no sampled
''' vertical disparity array, which means that no model has
''' been built for this page.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for "wb"</param>
'''  <param name="dew">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpWriteStream(
				ByVal fp as FILE, 
				ByVal dew as L_Dewarp) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (dew) then Throw New ArgumentNullException  ("dew cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpWriteStream( fp.Pointer, dew.Pointer)

	Return _Result
End Function

' SRC\dewarp1.c (1386, 1)
' dewarpWriteMem()
' dewarpWriteMem(l_uint8 **, size_t *, L_DEWARP *) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a dewarp in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized dewarp (not ascii)</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="dew">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal dew as L_Dewarp) as Integer

	If IsNothing (dew) then Throw New ArgumentNullException  ("dew cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpWriteMem( pdataPTR, psize, dew.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\dewarp1.c (1436, 1)
' dewarpaRead()
' dewarpaRead(const char *) as L_DEWARPA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>dewa, or NULL on error</returns>
Public Shared Function dewarpaRead(
				ByVal filename as String) as L_Dewarpa

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dewarpaRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dewarpa(_Result)
End Function

' SRC\dewarp1.c (1473, 1)
' dewarpaReadStream()
' dewarpaReadStream(FILE *) as L_DEWARPA *
'''  <summary>
''' Notes
''' (1) The serialized dewarp contains a Numa that gives the
''' (increasing) page number of the dewarp structs that are
''' contained.
''' (2) Reference pages are added in after readback.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>dewa, or NULL on error</returns>
Public Shared Function dewarpaReadStream(
				ByVal fp as FILE) as L_Dewarpa

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dewarpaReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dewarpa(_Result)
End Function

' SRC\dewarp1.c (1545, 1)
' dewarpaReadMem()
' dewarpaReadMem(const l_uint8 *, size_t) as L_DEWARPA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - serialization of dewarpa</param>
'''  <param name="size">[in] - of data in bytes</param>
'''   <returns>dewa  dewarpa, or NULL on error</returns>
Public Shared Function dewarpaReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as L_Dewarpa

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dewarpaReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dewarpa(_Result)
End Function

' SRC\dewarp1.c (1573, 1)
' dewarpaWrite()
' dewarpaWrite(const char *, L_DEWARPA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="dewa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaWrite(
				ByVal filename as String, 
				ByVal dewa as L_Dewarpa) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaWrite( filename, dewa.Pointer)

	Return _Result
End Function

' SRC\dewarp1.c (1604, 1)
' dewarpaWriteStream()
' dewarpaWriteStream(FILE *, L_DEWARPA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for "wb"</param>
'''  <param name="dewa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaWriteStream(
				ByVal fp as FILE, 
				ByVal dewa as L_Dewarpa) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaWriteStream( fp.Pointer, dewa.Pointer)

	Return _Result
End Function

' SRC\dewarp1.c (1660, 1)
' dewarpaWriteMem()
' dewarpaWriteMem(l_uint8 **, size_t *, L_DEWARPA *) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a dewarpa in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized dewarpa (not ascii)</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="dewa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal dewa as L_Dewarpa) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaWriteMem( pdataPTR, psize, dewa.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

#End Region
#Region "SRC\dewarp2.c"
' SRC\dewarp2.c (148, 1)
' dewarpBuildPageModel()
' dewarpBuildPageModel(L_DEWARP *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This is the basic function that builds the horizontal and
''' vertical disparity arrays, which allow determination of the
''' src pixel in the input image corresponding to each
''' dest pixel in the dewarped image.
''' (2) Sets vsuccess = 1 if the vertical disparity array builds.
''' Always attempts to build the horizontal disparity array,
''' even if it will not be requested (useboth == 0).
''' Sets hsuccess = 1 if horizontal disparity builds.
''' (3) The method is as follows
''' (a) Estimate the points along the centers of all the
''' long textlines.  If there are too few lines, no
''' disparity models are built.
''' (b) From the vertical deviation of the lines, estimate
''' the vertical disparity.
''' (c) From the ends of the lines, estimate the horizontal
''' disparity, assuming that the text is made of lines
''' that are close to left and right justified.
''' (d) One can also compute an additional contribution to the
''' horizontal disparity, inferred from slopes of the top
''' and bottom lines.  We do not do this.
''' (4) In more detail for the vertical disparity
''' (a) Fit a LS quadratic to center locations along each line.
''' This smooths the curves.
''' (b) Sample each curve at a regular interval, find the y-value
''' of the mid-point on each curve, and subtract the sampled
''' curve value from this value.  This is the vertical
''' disparity at sampled points along each curve.
''' (c) Fit a LS quadratic to each set of vertically aligned
''' disparity samples.  This smooths the disparity values
''' in the vertical direction.  Then resample at the same
''' regular interval.  We now have a regular grid of smoothed
''' vertical disparity valuels.
''' (5) Once the sampled vertical disparity array is found, it can be
''' interpolated to get a full resolution vertical disparity map.
''' This can be applied directly to the src image pixels
''' to dewarp the image in the vertical direction, making
''' all textlines horizontal.  Likewise, the horizontal
''' disparity array is used to left- and right-align the
''' longest textlines.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dew">[in] - </param>
'''  <param name="debugfile">[in]use NULL to skip - writing this</param>
'''   <returns>0 if OK, 1 if unable to build the model or on error</returns>
Public Shared Function dewarpBuildPageModel(
				ByVal dew as L_Dewarp, 
				ByVal debugfile as String) as Integer

	If IsNothing (dew) then Throw New ArgumentNullException  ("dew cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpBuildPageModel( dew.Pointer, debugfile)

	Return _Result
End Function

' SRC\dewarp2.c (294, 1)
' dewarpFindVertDisparity()
' dewarpFindVertDisparity(L_DEWARP *, PTAA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This starts with points along the centers of textlines.
''' It does quadratic fitting (and smoothing), first along the
''' lines and then in the vertical direction, to generate
''' the sampled vertical disparity map.  This can then be
''' interpolated to full resolution and used to remove
''' the vertical line warping.
''' (2) Use %rotflag == 1 if you are dewarping vertical lines, as
''' is done in dewarpBuildLineModel().  The usual case is for
''' %rotflag == 0.
''' (3) Note that this builds a vertical disparity model (VDM), but
''' does not check it against constraints for validity.
''' Constraint checking is done after building the models,
''' and before inserting reference models.
''' (4) This sets the vsuccess flag to 1 on success.
''' (5) Pix debug output goes to /tmp/dewvert/ for collection into
''' a pdf.  Non-pix debug output goes to /tmp.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dew">[in] - </param>
'''  <param name="ptaa">[in] - unsmoothed lines, not vertically ordered</param>
'''  <param name="rotflag">[in] - 0 if using dew-GTpixs; 1 if rotated by 90 degrees cw</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpFindVertDisparity(
				ByVal dew as L_Dewarp, 
				ByVal ptaa as Ptaa, 
				ByVal rotflag as Integer) as Integer

	If IsNothing (dew) then Throw New ArgumentNullException  ("dew cannot be Nothing")
	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpFindVertDisparity( dew.Pointer, ptaa.Pointer, rotflag)

	Return _Result
End Function

' SRC\dewarp2.c (558, 1)
' dewarpFindHorizDisparity()
' dewarpFindHorizDisparity(L_DEWARP *, PTAA *) as l_ok
'''  <summary>
''' Notes
''' (1) This builds a horizontal disparity model (HDM), but
''' does not check it against constraints for validity.
''' Constraint checking is done at rendering time.
''' (2) Horizontal disparity is not required for a successful model;
''' only the vertical disparity is required.  This will not be
''' called if the function to build the vertical disparity fails.
''' (3) This sets the hsuccess flag to 1 on success.
''' (4) Internally in ptal1, ptar1, ptal2, ptar2 x and y are reversed,
''' so the 'y' value is horizontal distance across the image width.
''' (5) Debug output goes to /tmp/lept/dewmod/ for collection into a pdf.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dew">[in] - </param>
'''  <param name="ptaa">[in] - unsmoothed lines, not vertically ordered</param>
'''   <returns>0 if OK, 1 if horizontal disparity array is not built, or on error</returns>
Public Shared Function dewarpFindHorizDisparity(
				ByVal dew as L_Dewarp, 
				ByVal ptaa as Ptaa) as Integer

	If IsNothing (dew) then Throw New ArgumentNullException  ("dew cannot be Nothing")
	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpFindHorizDisparity( dew.Pointer, ptaa.Pointer)

	Return _Result
End Function

' SRC\dewarp2.c (762, 1)
' dewarpGetTextlineCenters()
' dewarpGetTextlineCenters(PIX *, l_int32) as PTAA *
'''  <summary>
''' Notes
''' (1) This in general does not have a point for each value
''' of x, because there will be gaps between words.
''' It doesn't matter because we will fit a quadratic to the
''' points that we do have.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="debugflag">[in] - 1 for debug output</param>
'''   <returns>ptaa of center values of textlines</returns>
Public Shared Function dewarpGetTextlineCenters(
				ByVal pixs as Pix, 
				ByVal debugflag as Integer) as Ptaa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dewarpGetTextlineCenters( pixs.Pointer, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Ptaa(_Result)
End Function

' SRC\dewarp2.c (916, 1)
' dewarpRemoveShortLines()
' dewarpRemoveShortLines(PIX *, PTAA *, l_float32, l_int32) as PTAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="ptaas">[in] - input lines</param>
'''  <param name="fract">[in] - minimum fraction of longest line to keep</param>
'''  <param name="debugflag">[in] - </param>
'''   <returns>ptaad containing only lines of sufficient length, or NULL on error</returns>
Public Shared Function dewarpRemoveShortLines(
				ByVal pixs as Pix, 
				ByVal ptaas as Ptaa, 
				ByVal fract as Single, 
				ByVal debugflag as Integer) as Ptaa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptaas) then Throw New ArgumentNullException  ("ptaas cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dewarpRemoveShortLines( pixs.Pointer, ptaas.Pointer, fract, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Ptaa(_Result)
End Function

' SRC\dewarp2.c (1378, 1)
' dewarpFindHorizSlopeDisparity()
' dewarpFindHorizSlopeDisparity(L_DEWARP *, PIX *, l_float32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) %fractthresh is a threshold on the fractional difference in stroke
''' density between between left and right sides.  Process this
''' disparity only if the absolute value of the fractional
''' difference equals or exceeds this threshold.
''' (2) %parity indicates where the binding is on the left for
''' %parity == 0 and on the right for %parity == 1.
''' (3) This takes a 1 bpp %pixb where both vertical and horizontal
''' disparity have been applied, so the text lines are straight and,
''' more importantly, the line end points are vertically aligned.
''' It estimates the foreshortening of the characters on the
''' binding side, and if significant, computes a one-dimensional
''' horizontal disparity function to compensate.
''' (4) The first attempt was to use the average width of the
''' connected components (c.c.) in vertical slices.  This does not work
''' reliably, because the horizontal compression of the text is
''' often accompanied by horizontal joining of c.c.
''' (5) We use the density of vertical strokes, measured by first using
''' a vertical opening, which improves the signal.  The result
''' is relatively insensitive to the size of the opening; we use
''' a 10-pixel opening.  The relative density is measured by
''' finding the number of c.c. in a full height sliding window
''' of width 50 pixels, and compute every 25 pixels.  Similar results
''' are obtained counting c.c. that either intersect the window
''' or are fully contained within it.
''' (6) Debug output goes to /tmp/lept/dewmod/ for collection into a pdf.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dew">[in] - </param>
'''  <param name="pixb">[in] - (1 bpp, with vertical and horizontal disparity removed)</param>
'''  <param name="fractthresh">[in] - (threshold fractional difference in density)</param>
'''  <param name="parity">[in] - (0 if even page, 1 if odd page)</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpFindHorizSlopeDisparity(
				ByVal dew as L_Dewarp, 
				ByVal pixb as Pix, 
				ByVal fractthresh as Single, 
				ByVal parity as Integer) as Integer

	If IsNothing (dew) then Throw New ArgumentNullException  ("dew cannot be Nothing")
	If IsNothing (pixb) then Throw New ArgumentNullException  ("pixb cannot be Nothing")
	If IsNothing (fractthresh) then Throw New ArgumentNullException  ("fractthresh cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpFindHorizSlopeDisparity( dew.Pointer, pixb.Pointer, fractthresh, parity)

	Return _Result
End Function

' SRC\dewarp2.c (1606, 1)
' dewarpBuildLineModel()
' dewarpBuildLineModel(L_DEWARP *, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This builds the horizontal and vertical disparity arrays
''' for an input of ruled lines, typically for calibration.
''' In book scanning, you could lay the ruled paper over a page.
''' Then for that page and several below it, you can use the
''' disparity correction of the line model to dewarp the pages.
''' (2) The dew has been initialized with the image of ruled lines.
''' These lines must be continuous, but we do a small amount
''' of pre-processing here to insure that.
''' (3) %opensize is typically about 8.  It must be larger than
''' the thickness of the lines to be extracted.  This is the
''' default value, which is applied if %opensize LT 3.
''' (4) Sets vsuccess = 1 and hsuccess = 1 if the vertical and/or
''' horizontal disparity arrays build.
''' (5) Similar to dewarpBuildPageModel(), except here the vertical
''' and horizontal disparity arrays are both built from ruled lines.
''' See notes there.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dew">[in] - </param>
'''  <param name="opensize">[in] - size of opening to remove perpendicular lines</param>
'''  <param name="debugfile">[in]use NULL to skip - writing this</param>
'''   <returns>0 if OK, 1 if unable to build the model or on error</returns>
Public Shared Function dewarpBuildLineModel(
				ByVal dew as L_Dewarp, 
				ByVal opensize as Integer, 
				ByVal debugfile as String) as Integer

	If IsNothing (dew) then Throw New ArgumentNullException  ("dew cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpBuildLineModel( dew.Pointer, opensize, debugfile)

	Return _Result
End Function

' SRC\dewarp2.c (1790, 1)
' dewarpaModelStatus()
' dewarpaModelStatus(L_DEWARPA *, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This tests if a model has been built, not if it is valid.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - </param>
'''  <param name="pageno">[in] - </param>
'''  <param name="pvsuccess">[out][optional] - 1 on success</param>
'''  <param name="phsuccess">[out][optional] - 1 on success</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaModelStatus(
				ByVal dewa as L_Dewarpa, 
				ByVal pageno as Integer, 
				ByRef pvsuccess as Integer, 
				ByRef phsuccess as Integer) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaModelStatus( dewa.Pointer, pageno, pvsuccess, phsuccess)

	Return _Result
End Function

#End Region
#Region "SRC\dewarp3.c"
' SRC\dewarp3.c (114, 1)
' dewarpaApplyDisparity()
' dewarpaApplyDisparity(L_DEWARPA *, l_int32, PIX *, l_int32, l_int32, l_int32, PIX **, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This applies the disparity arrays to the specified image.
''' (2) Specify gray color for pixels brought in from the outside
''' 0 is black, 255 is white.  Use -1 to select pixels from the
''' boundary of the source image.
''' (3) If the models and ref models have not been validated, this
''' will do so by calling dewarpaInsertRefModels().
''' (4) This works with both stripped and full resolution page models.
''' If the full res disparity array(s) are missing, they are remade.
''' (5) The caller must handle errors that are returned because there
''' are no valid models or ref models for the page -- typically
''' by using the input pixs.
''' (6) If there is no model for %pageno, this will use the model for
''' 'refpage' and put the result in the dew for %pageno.
''' (7) This populates the full resolution disparity arrays if
''' necessary.  If x and/or y are positive, they are used,
''' in conjunction with pixs, to determine the required
''' slope-based extension of the full resolution disparity
''' arrays in each direction.  When (x,y) == (0,0), all
''' extension is to the right and down.  Nonzero values of (x,y)
''' are useful for dewarping when pixs is deliberately undercropped.
''' (8) Important when applying disparity to a number of images,
''' after calling this function and saving the resulting pixd,
''' you should call dewarpMinimize(dew) on the dew for %pageno.
''' This will remove pixs and pixd (or their clones) stored in dew,
''' as well as the full resolution disparity arrays.  Together,
''' these hold approximately 16 bytes for each pixel in pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - </param>
'''  <param name="pageno">[in] - of page model to be used; may be a ref model</param>
'''  <param name="pixs">[in] - image to be modified; can be 1, 8 or 32 bpp</param>
'''  <param name="grayin">[in] - gray value, from 0 to 255, for pixels brought in; use -1 to use pixels on the boundary of pixs</param>
'''  <param name="x">[in] - origin for generation of disparity arrays</param>
'''  <param name="y">[in] - origin for generation of disparity arrays</param>
'''  <param name="ppixd">[out] - disparity corrected image</param>
'''  <param name="debugfile">[in]use NULL to skip - writing this</param>
'''   <returns>0 if OK, 1 on error no models or ref models available</returns>
Public Shared Function dewarpaApplyDisparity(
				ByVal dewa as L_Dewarpa, 
				ByVal pageno as Integer, 
				ByVal pixs as Pix, 
				ByVal grayin as Integer, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByRef ppixd as Pix, 
				ByVal debugfile as String) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaApplyDisparity( dewa.Pointer, pageno, pixs.Pointer, grayin, x, y, ppixdPTR, debugfile)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return _Result
End Function

' SRC\dewarp3.c (537, 1)
' dewarpaApplyDisparityBoxa()
' dewarpaApplyDisparityBoxa(L_DEWARPA *, l_int32, PIX *, BOXA *, l_int32, l_int32, l_int32, BOXA **, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This applies the disparity arrays in one of two mapping directions
''' to the specified boxa.  It can be used in the backward direction
''' to locate a box in the original coordinates that would have
''' been dewarped to to the specified image.
''' (2) If there is no model for %pageno, this will use the model for
''' 'refpage' and put the result in the dew for %pageno.
''' (3) This works with both stripped and full resolution page models.
''' If the full res disparity array(s) are missing, they are remade.
''' (4) If an error occurs, a copy of the input boxa is returned.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - </param>
'''  <param name="pageno">[in] - of page model to be used; may be a ref model</param>
'''  <param name="pixs">[in] - initial pix reference; for alignment and debugging</param>
'''  <param name="boxas">[in] - boxa to be mapped</param>
'''  <param name="mapdir">[in] - 1 if mapping forward from original to dewarped; 0 if backward</param>
'''  <param name="x">[in] - origin for generation of disparity arrays with respect to the source region</param>
'''  <param name="y">[in] - origin for generation of disparity arrays with respect to the source region</param>
'''  <param name="pboxad">[out] - disparity corrected boxa</param>
'''  <param name="debugfile">[in]use NULL to skip - writing this</param>
'''   <returns>0 if OK, 1 on error no models or ref models available</returns>
Public Shared Function dewarpaApplyDisparityBoxa(
				ByVal dewa as L_Dewarpa, 
				ByVal pageno as Integer, 
				ByVal pixs as Pix, 
				ByVal boxas as Boxa, 
				ByVal mapdir as Integer, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByRef pboxad as Boxa, 
				ByVal debugfile as String) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")

	Dim pboxadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxad) Then pboxadPTR = pboxad.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaApplyDisparityBoxa( dewa.Pointer, pageno, pixs.Pointer, boxas.Pointer, mapdir, x, y, pboxadPTR, debugfile)
	if pboxadPTR <> IntPtr.Zero then pboxad = new Boxa(pboxadPTR)

	Return _Result
End Function

' SRC\dewarp3.c (729, 1)
' dewarpMinimize()
' dewarpMinimize(L_DEWARP *) as l_ok
'''  <summary>
''' Notes
''' (1) This removes all data that is not needed for serialization.
''' It keeps the subsampled disparity array(s), so the full
''' resolution arrays can be reconstructed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dew">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpMinimize(
				ByVal dew as L_Dewarp) as Integer

	If IsNothing (dew) then Throw New ArgumentNullException  ("dew cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpMinimize( dew.Pointer)

	Return _Result
End Function

' SRC\dewarp3.c (785, 1)
' dewarpPopulateFullRes()
' dewarpPopulateFullRes(L_DEWARP *, PIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) If the full resolution vertical and horizontal disparity
''' arrays do not exist, they are built from the subsampled ones.
''' (2) If pixs is not given, the size of the arrays is determined
''' by the original image from which the sampled version was
''' generated.  Any values of (x,y) are ignored.
''' (3) If pixs is given, the full resolution disparity arrays must
''' be large enough to accommodate it.
''' (a) If the arrays do not exist, the value of (x,y) determines
''' the origin of the full resolution arrays without extension,
''' relative to pixs.  Thus, (x,y) gives the amount of
''' slope extension in (left, top).  The (right, bottom)
''' extension is then determined by the size of pixs and
''' (x,y); the values should never be LT 0.
''' (b) If the arrays exist and pixs is too large, the existing
''' full res arrays are destroyed and new ones are made,
''' again using (x,y) to determine the extension in the
''' four directions.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dew">[in] - </param>
'''  <param name="pix">[in][optional] - , to give size of actual image</param>
'''  <param name="x">[in] - origin for generation of disparity arrays</param>
'''  <param name="y">[in] - origin for generation of disparity arrays</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpPopulateFullRes(
				ByVal dew as L_Dewarp, 
				ByVal pix as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer) as Integer

	If IsNothing (dew) then Throw New ArgumentNullException  ("dew cannot be Nothing")

	Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpPopulateFullRes( dew.Pointer, pixPTR, x, y)

	Return _Result
End Function

#End Region
#Region "SRC\dewarp4.c"
' SRC\dewarp4.c (97, 1)
' dewarpSinglePage()
' dewarpSinglePage(PIX *, l_int32, l_int32, l_int32, l_int32, PIX **, L_DEWARPA **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Dewarps pixs and returns the result in pixd.
''' (2) This uses default values for all model parameters.
''' (3) If pixs is 1 bpp, the parameters %adaptive and %thresh are ignored.
''' (4) If it can't build a model, returns a copy of pixs in pixd.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - with text, any depth</param>
'''  <param name="thresh">[in] - for global thresholding to 1 bpp; ignored otherwise</param>
'''  <param name="adaptive">[in] - 1 for adaptive thresholding; 0 for global threshold</param>
'''  <param name="useboth">[in] - 1 for horizontal and vertical; 0 for vertical only</param>
'''  <param name="check_columns">[in] - 1 to skip horizontal if multiple columns; 0 otherwise; default is to skip</param>
'''  <param name="ppixd">[out] - dewarped result</param>
'''  <param name="pdewa">[out][optional] - dewa with single page; NULL to skip</param>
'''  <param name="debug">[in] - 1 for debugging output, 0 otherwise</param>
'''   <returns>0 if OK, 1 on error list of page numbers, or NULL on error</returns>
Public Shared Function dewarpSinglePage(
				ByVal pixs as Pix, 
				ByVal thresh as Integer, 
				ByVal adaptive as Integer, 
				ByVal useboth as Integer, 
				ByVal check_columns as Integer, 
				ByRef ppixd as Pix, 
				ByRef pdewa as L_Dewarpa, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer
Dim pdewaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pdewa) Then pdewaPTR = pdewa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpSinglePage( pixs.Pointer, thresh, adaptive, useboth, check_columns, ppixdPTR, pdewaPTR, debug)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)
	if pdewaPTR <> IntPtr.Zero then pdewa = new L_Dewarpa(pdewaPTR)

	Return _Result
End Function

' SRC\dewarp4.c (165, 1)
' dewarpSinglePageInit()
' dewarpSinglePageInit(PIX *, l_int32, l_int32, l_int32, l_int32, PIX **, L_DEWARPA **) as l_ok
'''  <summary>
''' Notes
''' (1) This binarizes the input pixs if necessary, returning the
''' binarized image.  It also initializes the dewa to default values
''' for the model parameters.
''' (2) If pixs is 1 bpp, the parameters %adaptive and %thresh are ignored.
''' (3) To change the model parameters, call dewarpaSetCurvatures()
''' before running dewarpSinglePageRun().  For example
''' dewarpSinglePageInit(pixs, 0, 1, 1, 1, pixb, dewa);
''' dewarpaSetCurvatures(dewa, 250, -1, -1, 80, 70, 150);
''' dewarpSinglePageRun(pixs, pixb, dewa, pixd, 0);
''' dewarpaDestroy(dewa);
''' pixDestroy(pixb);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - with text, any depth</param>
'''  <param name="thresh">[in] - for global thresholding to 1 bpp; ignored otherwise</param>
'''  <param name="adaptive">[in] - 1 for adaptive thresholding; 0 for global threshold</param>
'''  <param name="useboth">[in] - 1 for horizontal and vertical; 0 for vertical only</param>
'''  <param name="check_columns">[in] - 1 to skip horizontal if multiple columns; 0 otherwise; default is to skip</param>
'''  <param name="ppixb">[out] - 1 bpp image</param>
'''  <param name="pdewa">[out] - initialized dewa</param>
'''   <returns>0 if OK, 1 on error list of page numbers, or NULL on error</returns>
Public Shared Function dewarpSinglePageInit(
				ByVal pixs as Pix, 
				ByVal thresh as Integer, 
				ByVal adaptive as Integer, 
				ByVal useboth as Integer, 
				ByVal check_columns as Integer, 
				ByRef ppixb as Pix, 
				ByRef pdewa as L_Dewarpa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim ppixbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixb) Then ppixbPTR = ppixb.Pointer
	Dim pdewaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pdewa) Then pdewaPTR = pdewa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpSinglePageInit( pixs.Pointer, thresh, adaptive, useboth, check_columns, ppixbPTR, pdewaPTR)
	if ppixbPTR <> IntPtr.Zero then ppixb = new Pix(ppixbPTR)
	if pdewaPTR <> IntPtr.Zero then pdewa = new L_Dewarpa(pdewaPTR)

	Return _Result
End Function

' SRC\dewarp4.c (223, 1)
' dewarpSinglePageRun()
' dewarpSinglePageRun(PIX *, PIX *, L_DEWARPA *, PIX **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Dewarps pixs and returns the result in pixd.
''' (2) The 1 bpp version %pixb and %dewa are conveniently generated by
''' dewarpSinglePageInit().
''' (3) Non-default model parameters must be set before calling this.
''' (4) If a model cannot be built, this returns a copy of pixs in pixd.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth</param>
'''  <param name="pixb">[in] - 1 bpp</param>
'''  <param name="dewa">[in] - initialized</param>
'''  <param name="ppixd">[out] - dewarped result</param>
'''  <param name="debug">[in] - 1 for debugging output, 0 otherwise</param>
'''   <returns>0 if OK, 1 on error list of page numbers, or NULL on error</returns>
Public Shared Function dewarpSinglePageRun(
				ByVal pixs as Pix, 
				ByVal pixb as Pix, 
				ByVal dewa as L_Dewarpa, 
				ByRef ppixd as Pix, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixb) then Throw New ArgumentNullException  ("pixb cannot be Nothing")
	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")
	If {1}.contains (pixb.d) = false then Throw New ArgumentException ("1 bpp")

	Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpSinglePageRun( pixs.Pointer, pixb.Pointer, dewa.Pointer, ppixdPTR, debug)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return _Result
End Function

' SRC\dewarp4.c (289, 1)
' dewarpaListPages()
' dewarpaListPages(L_DEWARPA *) as l_ok
'''  <summary>
''' Notes
''' (1) This generates two numas, stored in the dewarpa, that give
''' (a) the page number for each dew that has a page model.
''' (b) the page number for each dew that has either a page
''' model or a reference model.
''' It can be called at any time.
''' (2) It is called by the dewarpa serializer before writing.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - populated with dewarp structs for pages</param>
'''   <returns>0 if OK, 1 on error list of page numbers, or NULL on error</returns>
Public Shared Function dewarpaListPages(
				ByVal dewa as L_Dewarpa) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaListPages( dewa.Pointer)

	Return _Result
End Function

' SRC\dewarp4.c (341, 1)
' dewarpaSetValidModels()
' dewarpaSetValidModels(L_DEWARPA *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) A valid model must meet the rendering requirements, which
''' include whether or not a vertical disparity model exists
''' and conditions on curvatures for vertical and horizontal
''' disparity models.
''' (2) If %notests == 1, this ignores the curvature constraints
''' and assumes that all successfully built models are valid.
''' (3) This function does not need to be called by the application.
''' It is called by dewarpaInsertRefModels(), which
''' will destroy all invalid dewarps.  Consequently, to inspect
''' an invalid dewarp model, it must be done before calling
''' dewarpaInsertRefModels().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - </param>
'''  <param name="notests">[in] - </param>
'''  <param name="debug">[in] - 1 to output information on invalid page models</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaSetValidModels(
				ByVal dewa as L_Dewarpa, 
				ByVal notests as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaSetValidModels( dewa.Pointer, notests, debug)

	Return _Result
End Function

' SRC\dewarp4.c (447, 1)
' dewarpaInsertRefModels()
' dewarpaInsertRefModels(L_DEWARPA *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This destroys all dewarp models that are invalid, and then
''' inserts reference models where possible.
''' (2) If %notests == 1, this ignores the curvature constraints
''' and assumes that all successfully built models are valid.
''' (3) If useboth == 0, it uses the closest valid model within the
''' distance and parity constraints.  If useboth == 1, it tries
''' to use the closest allowed hvalid model; if it doesn't find
''' an hvalid model, it uses the closest valid model.
''' (4) For all pages without a model, this clears out any existing
''' invalid and reference dewarps, finds the nearest valid model
''' with the same parity, and inserts an empty dewarp with the
''' reference page.
''' (5) Then if it is requested to use both vertical and horizontal
''' disparity arrays (useboth == 1), it tries to replace any
''' hvalid == 0 model or reference with an hvalid == 1 reference.
''' (6) The distance constraint is that any reference model must
''' be within maxdist.  Note that with the parity constraint,
''' no reference models will be used if maxdist LT 2.
''' (7) This function must be called, even if reference models will
''' not be used.  It should be called after building models on all
''' available pages, and after setting the rendering parameters.
''' (8) If the dewa has been serialized, this function is called by
''' dewarpaRead() when it is read back.  It is also called
''' any time the rendering parameters are changed.
''' (9) Note if this has been called with useboth == 1, and useboth
''' is reset to 0, you should first call dewarpaRestoreModels()
''' to bring real models from the cache back to the primary array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - </param>
'''  <param name="notests">[in] - if 1, ignore curvature constraints on model</param>
'''  <param name="debug">[in] - 1 to output information on invalid page models</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaInsertRefModels(
				ByVal dewa as L_Dewarpa, 
				ByVal notests as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaInsertRefModels( dewa.Pointer, notests, debug)

	Return _Result
End Function

' SRC\dewarp4.c (578, 1)
' dewarpaStripRefModels()
' dewarpaStripRefModels(L_DEWARPA *) as l_ok
'''  <summary>
''' Notes
''' (1) This examines each dew in a dewarpa, and removes
''' all that don't have their own page model (i.e., all
''' that have "references" to nearby pages with valid models).
''' These references were generated by dewarpaInsertRefModels(dewa).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - populated with dewarp structs for pages</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaStripRefModels(
				ByVal dewa as L_Dewarpa) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaStripRefModels( dewa.Pointer)

	Return _Result
End Function

' SRC\dewarp4.c (619, 1)
' dewarpaRestoreModels()
' dewarpaRestoreModels(L_DEWARPA *) as l_ok
'''  <summary>
''' Notes
''' (1) This puts all real models (and only real models) in the
''' primary dewarpa array.  First remove all dewarps that are
''' only references to other page models.  Then move all models
''' that had been cached back into the primary dewarp array.
''' (2) After this is done, we still need to recompute and insert
''' the reference models before dewa-GTmodelsready is true.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - populated with dewarp structs for pages</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaRestoreModels(
				ByVal dewa as L_Dewarpa) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaRestoreModels( dewa.Pointer)

	Return _Result
End Function

' SRC\dewarp4.c (664, 1)
' dewarpaInfo()
' dewarpaInfo(FILE *, L_DEWARPA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - </param>
'''  <param name="dewa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaInfo(
				ByVal fp as FILE, 
				ByVal dewa as L_Dewarpa) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaInfo( fp.Pointer, dewa.Pointer)

	Return _Result
End Function

' SRC\dewarp4.c (756, 1)
' dewarpaModelStats()
' dewarpaModelStats(L_DEWARPA *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) A page without a model has no dew.  It most likely failed to
''' generate a vertical model, and has not been assigned a ref
''' model from a neighboring page with a valid vertical model.
''' (2) A page has vsuccess == 1 if there is at least a model of the
''' vertical disparity.  The model may be invalid, in which case
''' dewarpaInsertRefModels() will stash it in the cache and
''' attempt to replace it by a valid ref model.
''' (3) A vvvalid model is a vertical disparity model whose parameters
''' satisfy the constraints given in dewarpaSetValidModels().
''' (4) A page has hsuccess == 1 if both the vertical and horizontal
''' disparity arrays have been constructed.
''' (5) An  hvalid model has vertical and horizontal disparity
''' models whose parameters satisfy the constraints given
''' in dewarpaSetValidModels().
''' (6) A page has a ref model if it failed to generate a valid
''' model but was assigned a vvalid or hvalid model on another
''' page (within maxdist) by dewarpaInsertRefModel().
''' (7) This calls dewarpaTestForValidModel(); it ignores the vvalid
''' and hvalid fields.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - </param>
'''  <param name="pnnone">[out][optional] - number without any model</param>
'''  <param name="pnvsuccess">[out][optional] - number with a vert model</param>
'''  <param name="pnvvalid">[out][optional] - number with a valid vert model</param>
'''  <param name="pnhsuccess">[out][optional] - number with both models</param>
'''  <param name="pnhvalid">[out][optional] - number with both models valid</param>
'''  <param name="pnref">[out][optional] - number with a reference model</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaModelStats(
				ByVal dewa as L_Dewarpa, 
				ByRef pnnone as Integer, 
				ByRef pnvsuccess as Integer, 
				ByRef pnvvalid as Integer, 
				ByRef pnhsuccess as Integer, 
				ByRef pnhvalid as Integer, 
				ByRef pnref as Integer) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaModelStats( dewa.Pointer, pnnone, pnvsuccess, pnvvalid, pnhsuccess, pnhvalid, pnref)

	Return _Result
End Function

' SRC\dewarp4.c (912, 1)
' dewarpaShowArrays()
' dewarpaShowArrays(L_DEWARPA *, l_float32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Generates a pdf of contour plots of the disparity arrays.
''' (2) This only shows actual models; not ref models
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - </param>
'''  <param name="scalefact">[in] - on contour images; typ. 0.5</param>
'''  <param name="first">[in] - first page model to render</param>
'''  <param name="last">[in] - last page model to render; use 0 to go to end</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpaShowArrays(
				ByVal dewa as L_Dewarpa, 
				ByVal scalefact as Single, 
				ByVal first as Integer, 
				ByVal last as Integer) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")
	If IsNothing (scalefact) then Throw New ArgumentNullException  ("scalefact cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpaShowArrays( dewa.Pointer, scalefact, first, last)

	Return _Result
End Function

' SRC\dewarp4.c (1008, 1)
' dewarpDebug()
' dewarpDebug(L_DEWARP *, const char *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Prints dewarp fields and generates disparity array contour images.
''' The contour images are written to file
''' /tmp/[subdirs]/pixv_[index].png
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dew">[in] - </param>
'''  <param name="subdirs">[in] - one or more subdirectories of /tmp; e.g., "dew1"</param>
'''  <param name="index">[in] - to help label output images; e.g., the page number</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpDebug(
				ByVal dew as L_Dewarp, 
				ByVal subdirs as String, 
				ByVal index as Integer) as Integer

	If IsNothing (dew) then Throw New ArgumentNullException  ("dew cannot be Nothing")
	If IsNothing (subdirs) then Throw New ArgumentNullException  ("subdirs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpDebug( dew.Pointer, subdirs, index)

	Return _Result
End Function

' SRC\dewarp4.c (1094, 1)
' dewarpShowResults()
' dewarpShowResults(L_DEWARPA *, SARRAY *, BOXA *, l_int32, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This generates a pdf of image pairs (before, after) for
''' the designated set of input pages.
''' (2) If the boxa exists, its elements are aligned with numbers
''' in the filenames in %sa.  It is used to crop the input images.
''' It is assumed that the dewa was generated from the cropped
''' images.  No undercropping is applied before rendering.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dewa">[in] - </param>
'''  <param name="sa">[in] - of indexed input images</param>
'''  <param name="boxa">[in] - crop boxes for input images; can be null</param>
'''  <param name="firstpage">[in] - </param>
'''  <param name="lastpage">[in] - </param>
'''  <param name="pdfout">[in] - filename</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dewarpShowResults(
				ByVal dewa as L_Dewarpa, 
				ByVal sa as Sarray, 
				ByVal boxa as Boxa, 
				ByVal firstpage as Integer, 
				ByVal lastpage as Integer, 
				ByVal pdfout as String) as Integer

	If IsNothing (dewa) then Throw New ArgumentNullException  ("dewa cannot be Nothing")
	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If IsNothing (pdfout) then Throw New ArgumentNullException  ("pdfout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dewarpShowResults( dewa.Pointer, sa.Pointer, boxa.Pointer, firstpage, lastpage, pdfout)

	Return _Result
End Function

#End Region
#Region "SRC\dnabasic.c"
' SRC\dnabasic.c (169, 1)
' l_dnaCreate()
' l_dnaCreate(l_int32) as L_DNA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - size of number array to be alloc'd; 0 for default</param>
'''   <returns>da, or NULL on error</returns>
Public Shared Function l_dnaCreate(
				ByVal n as Integer) as L_Dna



	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnabasic.c (210, 1)
' l_dnaCreateFromIArray()
' l_dnaCreateFromIArray(l_int32 *, l_int32) as L_DNA *
'''  <summary>
''' Notes
''' (1) We can't insert this int array into the l_dna, because a l_dna
''' takes a double array.  So this just copies the data from the
''' input array into the l_dna.  The input array continues to be
''' owned by the caller.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="iarray">[in] - integer</param>
'''  <param name="size">[in] - of the array</param>
'''   <returns>da, or NULL on error</returns>
Public Shared Function l_dnaCreateFromIArray(
				ByVal iarray as Integer(), 
				ByVal size as Integer) as L_Dna

	If IsNothing (iarray) then Throw New ArgumentNullException  ("iarray cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaCreateFromIArray( iarray, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnabasic.c (247, 1)
' l_dnaCreateFromDArray()
' l_dnaCreateFromDArray(l_float64 *, l_int32, l_int32) as L_DNA *
'''  <summary>
''' Notes
''' (1) With L_INSERT, ownership of the input array is transferred
''' to the returned l_dna, and all %size elements are considered
''' to be valid.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="darray">[in] - float</param>
'''  <param name="size">[in] - of the array</param>
'''  <param name="copyflag">[in] - L_INSERT or L_COPY</param>
'''   <returns>da, or NULL on error</returns>
Public Shared Function l_dnaCreateFromDArray(
				ByVal darray as Double(), 
				ByVal size as Integer, 
				ByVal copyflag as Enumerations.L_access_storage) as L_Dna

	If IsNothing (darray) then Throw New ArgumentNullException  ("darray cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaCreateFromDArray( darray, size, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnabasic.c (286, 1)
' l_dnaMakeSequence()
' l_dnaMakeSequence(l_float64, l_float64, l_int32) as L_DNA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="startval">[in] - </param>
'''  <param name="increment">[in] - </param>
'''  <param name="size">[in] - of sequence</param>
'''   <returns>l_dna of sequence of evenly spaced values, or NULL on error</returns>
Public Shared Function l_dnaMakeSequence(
				ByVal startval as Double, 
				ByVal increment as Double, 
				ByVal size as Integer) as L_Dna

	If IsNothing (startval) then Throw New ArgumentNullException  ("startval cannot be Nothing")
	If IsNothing (increment) then Throw New ArgumentNullException  ("increment cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaMakeSequence( startval, increment, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnabasic.c (321, 1)
' l_dnaDestroy()
' l_dnaDestroy(L_DNA **) as void
'''  <summary>
''' Notes
''' (1) Decrements the ref count and, if 0, destroys the l_dna.
''' (2) Always nulls the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pda">[in,out] - to be nulled if it exists</param>
Public Shared Sub l_dnaDestroy(
				ByRef pda as L_Dna)


	Dim pdaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pda) Then pdaPTR = pda.Pointer

	LeptonicaSharp.Natives.l_dnaDestroy( pdaPTR)
	if pdaPTR <> IntPtr.Zero then pda = new L_Dna(pdaPTR)

End Sub

' SRC\dnabasic.c (360, 1)
' l_dnaCopy()
' l_dnaCopy(L_DNA *) as L_DNA *
'''  <summary>
''' Notes
''' (1) This removes unused ptrs above da-GTn.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''   <returns>copy of da, or NULL on error</returns>
Public Shared Function l_dnaCopy(
				ByVal da as L_Dna) as L_Dna

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaCopy( da.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnabasic.c (389, 1)
' l_dnaClone()
' l_dnaClone(L_DNA *) as L_DNA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''   <returns>ptr to same da, or NULL on error</returns>
Public Shared Function l_dnaClone(
				ByVal da as L_Dna) as L_Dna

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaClone( da.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnabasic.c (415, 1)
' l_dnaEmpty()
' l_dnaEmpty(L_DNA *) as l_ok
'''  <summary>
''' Notes
''' (1) This does not change the allocation of the array.
''' It just clears the number of stored numbers, so that
''' the array appears to be empty.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function l_dnaEmpty(
				ByVal da as L_Dna) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaEmpty( da.Pointer)

	Return _Result
End Function

' SRC\dnabasic.c (439, 1)
' l_dnaAddNumber()
' l_dnaAddNumber(L_DNA *, l_float64) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''  <param name="val">[in] - float or int to be added; stored as a float</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaAddNumber(
				ByVal da as L_Dna, 
				ByVal val as Double) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaAddNumber( da.Pointer, val)

	Return _Result
End Function

' SRC\dnabasic.c (500, 1)
' l_dnaInsertNumber()
' l_dnaInsertNumber(L_DNA *, l_int32, l_float64) as l_ok
'''  <summary>
''' Notes
''' (1) This shifts da[i] --GT da[i + 1] for all i GT= index,
''' and then inserts val as da[index].
''' (2) It should not be used repeatedly on large arrays,
''' because the function is O(n).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''  <param name="index">[in] - location in da to insert new value</param>
'''  <param name="val">[in] - float64 or integer to be added</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaInsertNumber(
				ByVal da as L_Dna, 
				ByVal index as Integer, 
				ByVal val as Double) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaInsertNumber( da.Pointer, index, val)

	Return _Result
End Function

' SRC\dnabasic.c (539, 1)
' l_dnaRemoveNumber()
' l_dnaRemoveNumber(L_DNA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This shifts da[i] --GT da[i - 1] for all i GT index.
''' (2) It should not be used repeatedly on large arrays,
''' because the function is O(n).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''  <param name="index">[in] - element to be removed</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaRemoveNumber(
				ByVal da as L_Dna, 
				ByVal index as Integer) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaRemoveNumber( da.Pointer, index)

	Return _Result
End Function

' SRC\dnabasic.c (568, 1)
' l_dnaReplaceNumber()
' l_dnaReplaceNumber(L_DNA *, l_int32, l_float64) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''  <param name="index">[in] - element to be replaced</param>
'''  <param name="val">[in] - new value to replace old one</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaReplaceNumber(
				ByVal da as L_Dna, 
				ByVal index as Integer, 
				ByVal val as Double) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaReplaceNumber( da.Pointer, index, val)

	Return _Result
End Function

' SRC\dnabasic.c (597, 1)
' l_dnaGetCount()
' l_dnaGetCount(L_DNA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''   <returns>count, or 0 if no numbers or on error</returns>
Public Shared Function l_dnaGetCount(
				ByVal da as L_Dna) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaGetCount( da.Pointer)

	Return _Result
End Function

' SRC\dnabasic.c (624, 1)
' l_dnaSetCount()
' l_dnaSetCount(L_DNA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) If newcount LT= da-GTnalloc, this resets da-GTn.
''' Using newcount = 0 is equivalent to l_dnaEmpty().
''' (2) If newcount GT da-GTnalloc, this causes a realloc
''' to a size da-GTnalloc = newcount.
''' (3) All the previously unused values in da are set to 0.0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''  <param name="newcount">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaSetCount(
				ByVal da as L_Dna, 
				ByVal newcount as Integer) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaSetCount( da.Pointer, newcount)

	Return _Result
End Function

' SRC\dnabasic.c (658, 1)
' l_dnaGetDValue()
' l_dnaGetDValue(L_DNA *, l_int32, l_float64 *) as l_ok
'''  <summary>
''' Notes
''' (1) Caller may need to check the function return value to
''' decide if a 0.0 in the returned ival is valid.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''  <param name="index">[in] - into l_dna</param>
'''  <param name="pval">[out] - double value; 0.0 on error</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function l_dnaGetDValue(
				ByVal da as L_Dna, 
				ByVal index as Integer, 
				ByRef pval as Double()) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaGetDValue( da.Pointer, index, pval)

	Return _Result
End Function

' SRC\dnabasic.c (693, 1)
' l_dnaGetIValue()
' l_dnaGetIValue(L_DNA *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Caller may need to check the function return value to
''' decide if a 0 in the returned ival is valid.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''  <param name="index">[in] - into l_dna</param>
'''  <param name="pival">[out] - integer value; 0 on error</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function l_dnaGetIValue(
				ByVal da as L_Dna, 
				ByVal index as Integer, 
				ByRef pival as Integer) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaGetIValue( da.Pointer, index, pival)

	Return _Result
End Function

' SRC\dnabasic.c (725, 1)
' l_dnaSetValue()
' l_dnaSetValue(L_DNA *, l_int32, l_float64) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''  <param name="index">[in] - to element to be set</param>
'''  <param name="val">[in] - to set element</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function l_dnaSetValue(
				ByVal da as L_Dna, 
				ByVal index as Integer, 
				ByVal val as Double) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaSetValue( da.Pointer, index, val)

	Return _Result
End Function

' SRC\dnabasic.c (750, 1)
' l_dnaShiftValue()
' l_dnaShiftValue(L_DNA *, l_int32, l_float64) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''  <param name="index">[in] - to element to change relative to the current value</param>
'''  <param name="diff">[in] - increment if diff GT 0 or decrement if diff LT 0</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function l_dnaShiftValue(
				ByVal da as L_Dna, 
				ByVal index as Integer, 
				ByVal diff as Double) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")
	If IsNothing (diff) then Throw New ArgumentNullException  ("diff cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaShiftValue( da.Pointer, index, diff)

	Return _Result
End Function

' SRC\dnabasic.c (786, 1)
' l_dnaGetIArray()
' l_dnaGetIArray(L_DNA *) as l_int32 *
'''  <summary>
''' Notes
''' (1) A copy of the array is made, because we need to
''' generate an integer array from the bare double array.
''' The caller is responsible for freeing the array.
''' (2) The array size is determined by the number of stored numbers,
''' not by the size of the allocated array in the l_dna.
''' (3) This function is provided to simplify calculations
''' using the bare internal array, rather than continually
''' calling accessors on the l_dna.  It is typically used
''' on an array of size 256.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''   <returns>a copy of the bare internal array, integerized by rounding, or NULL on error</returns>
Public Shared Function l_dnaGetIArray(
				ByVal da as L_Dna) as Integer()

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as Integer() = LeptonicaSharp.Natives.l_dnaGetIArray( da.Pointer)

	Return _Result
End Function

' SRC\dnabasic.c (831, 1)
' l_dnaGetDArray()
' l_dnaGetDArray(L_DNA *, l_int32) as l_float64 *
'''  <summary>
''' Notes
''' (1) If copyflag == L_COPY, it makes a copy which the caller
''' is responsible for freeing.  Otherwise, it operates
''' directly on the bare array of the l_dna.
''' (2) Very important for L_NOCOPY, any writes to the array
''' will be in the l_dna.  Do not write beyond the size of
''' the count field, because it will not be accessible
''' from the l_dna!  If necessary, be sure to set the count
''' field to a larger number (such as the alloc size)
''' BEFORE calling this function.  Creating with l_dnaMakeConstant()
''' is another way to insure full initialization.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''  <param name="copyflag">[in] - L_NOCOPY or L_COPY</param>
'''   <returns>either the bare internal array or a copy of it, or NULL on error</returns>
Public Shared Function l_dnaGetDArray(
				ByVal da as L_Dna, 
				ByVal copyflag as Enumerations.L_access_storage) as Double()

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as Double() = LeptonicaSharp.Natives.l_dnaGetDArray( da.Pointer, copyflag)

	Return _Result
End Function

' SRC\dnabasic.c (863, 1)
' l_dnaGetRefCount()
' l_dnaGetRefcount(L_DNA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''   <returns>refcount, or UNDEF on error</returns>
Public Shared Function l_dnaGetRefcount(
				ByVal da as L_Dna) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaGetRefcount( da.Pointer)

	Return _Result
End Function

' SRC\dnabasic.c (881, 1)
' l_dnaChangeRefCount()
' l_dnaChangeRefcount(L_DNA *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''  <param name="delta">[in] - change to be applied</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaChangeRefcount(
				ByVal da as L_Dna, 
				ByVal delta as Integer) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaChangeRefcount( da.Pointer, delta)

	Return _Result
End Function

' SRC\dnabasic.c (902, 1)
' l_dnaGetParameters()
' l_dnaGetParameters(L_DNA *, l_float64 *, l_float64 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''  <param name="pstartx">[out][optional] - startx</param>
'''  <param name="pdelx">[out][optional] - delx</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaGetParameters(
				ByVal da as L_Dna, 
				ByRef pstartx as Double(), 
				ByRef pdelx as Double()) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaGetParameters( da.Pointer, pstartx, pdelx)

	Return _Result
End Function

' SRC\dnabasic.c (932, 1)
' l_dnaSetParameters()
' l_dnaSetParameters(L_DNA *, l_float64, l_float64) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''  <param name="startx">[in] - x value corresponding to da[0]</param>
'''  <param name="delx">[in] - difference in x values for the situation where the elements of da correspond to the evaulation of a function at equal intervals of size %delx</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaSetParameters(
				ByVal da as L_Dna, 
				ByVal startx as Double, 
				ByVal delx as Double) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")
	If IsNothing (startx) then Throw New ArgumentNullException  ("startx cannot be Nothing")
	If IsNothing (delx) then Throw New ArgumentNullException  ("delx cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaSetParameters( da.Pointer, startx, delx)

	Return _Result
End Function

' SRC\dnabasic.c (955, 1)
' l_dnaCopyParameters()
' l_dnaCopyParameters(L_DNA *, L_DNA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dad">[in] - destination DNuma</param>
'''  <param name="das">[in] - source DNuma</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaCopyParameters(
				ByVal dad as L_Dna, 
				ByVal das as L_Dna) as Integer

	If IsNothing (dad) then Throw New ArgumentNullException  ("dad cannot be Nothing")
	If IsNothing (das) then Throw New ArgumentNullException  ("das cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaCopyParameters( dad.Pointer, das.Pointer)

	Return _Result
End Function

' SRC\dnabasic.c (981, 1)
' l_dnaRead()
' l_dnaRead(const char *) as L_DNA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>da, or NULL on error</returns>
Public Shared Function l_dnaRead(
				ByVal filename as String) as L_Dna

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnabasic.c (1013, 1)
' l_dnaReadStream()
' l_dnaReadStream(FILE *) as L_DNA *
'''  <summary>
''' Notes
''' (1) fscanf takes %lf to read a double; fprintf takes %f to write it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>da, or NULL on error</returns>
Public Shared Function l_dnaReadStream(
				ByVal fp as FILE) as L_Dna

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnabasic.c (1056, 1)
' l_dnaWrite()
' l_dnaWrite(const char *, L_DNA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="da">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaWrite(
				ByVal filename as String, 
				ByVal da as L_Dna) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaWrite( filename, da.Pointer)

	Return _Result
End Function

' SRC\dnabasic.c (1087, 1)
' l_dnaWriteStream()
' l_dnaWriteStream(FILE *, L_DNA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="da">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaWriteStream(
				ByVal fp as FILE, 
				ByVal da as L_Dna) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaWriteStream( fp.Pointer, da.Pointer)

	Return _Result
End Function

' SRC\dnabasic.c (1127, 1)
' l_dnaaCreate()
' l_dnaaCreate(l_int32) as L_DNAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - size of l_dna ptr array to be alloc'd 0 for default</param>
'''   <returns>daa, or NULL on error</returns>
Public Shared Function l_dnaaCreate(
				ByVal n as Integer) as L_Dnaa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaaCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dnaa(_Result)
End Function

' SRC\dnabasic.c (1163, 1)
' l_dnaaCreateFull()
' l_dnaaCreateFull(l_int32, l_int32) as L_DNAA *
'''  <summary>
''' Notes
''' (1) This allocates a dnaa and fills the array with allocated dnas.
''' In use, after calling this function, use
''' l_dnaaAddNumber(dnaa, index, val);
''' to add val to the index-th dna in dnaa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nptr">[in] - size of dna ptr array to be alloc'd</param>
'''  <param name="n">[in] - size of individual dna arrays to be alloc'd 0 for default</param>
'''   <returns>daa, or NULL on error</returns>
Public Shared Function l_dnaaCreateFull(
				ByVal nptr as Integer, 
				ByVal n as Integer) as L_Dnaa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaaCreateFull( nptr, n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dnaa(_Result)
End Function

' SRC\dnabasic.c (1194, 1)
' l_dnaaTruncate()
' l_dnaaTruncate(L_DNAA *) as l_ok
'''  <summary>
''' Notes
''' (1) This identifies the largest index containing a dna that
''' has any numbers within it, destroys all dna beyond that
''' index, and resets the count.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="daa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaaTruncate(
				ByVal daa as L_Dnaa) as Integer

	If IsNothing (daa) then Throw New ArgumentNullException  ("daa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaaTruncate( daa.Pointer)

	Return _Result
End Function

' SRC\dnabasic.c (1228, 1)
' l_dnaaDestroy()
' l_dnaaDestroy(L_DNAA **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdaa">[in,out] - to be nulled if it exists</param>
Public Shared Sub l_dnaaDestroy(
				ByRef pdaa as L_Dnaa)


	Dim pdaaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pdaa) Then pdaaPTR = pdaa.Pointer

	LeptonicaSharp.Natives.l_dnaaDestroy( pdaaPTR)
	if pdaaPTR <> IntPtr.Zero then pdaa = new L_Dnaa(pdaaPTR)

End Sub

' SRC\dnabasic.c (1265, 1)
' l_dnaaAddDna()
' l_dnaaAddDna(L_DNAA *, L_DNA *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="daa">[in] - </param>
'''  <param name="da">[in] - to be added</param>
'''  <param name="copyflag">[in] - L_INSERT, L_COPY, L_CLONE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaaAddDna(
				ByVal daa as L_Dnaa, 
				ByVal da as L_Dna, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (daa) then Throw New ArgumentNullException  ("daa cannot be Nothing")
	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaaAddDna( daa.Pointer, da.Pointer, copyflag)

	Return _Result
End Function

' SRC\dnabasic.c (1333, 1)
' l_dnaaGetCount()
' l_dnaaGetCount(L_DNAA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="daa">[in] - </param>
'''   <returns>count number of l_dna, or 0 if no l_dna or on error</returns>
Public Shared Function l_dnaaGetCount(
				ByVal daa as L_Dnaa) as Integer

	If IsNothing (daa) then Throw New ArgumentNullException  ("daa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaaGetCount( daa.Pointer)

	Return _Result
End Function

' SRC\dnabasic.c (1351, 1)
' l_dnaaGetDnaCount()
' l_dnaaGetDnaCount(L_DNAA *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="daa">[in] - </param>
'''  <param name="index">[in] - of l_dna in daa</param>
'''   <returns>count of numbers in the referenced l_dna, or 0 on error.</returns>
Public Shared Function l_dnaaGetDnaCount(
				ByVal daa as L_Dnaa, 
				ByVal index as Integer) as Integer

	If IsNothing (daa) then Throw New ArgumentNullException  ("daa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaaGetDnaCount( daa.Pointer, index)

	Return _Result
End Function

' SRC\dnabasic.c (1372, 1)
' l_dnaaGetNumberCount()
' l_dnaaGetNumberCount(L_DNAA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="daa">[in] - </param>
'''   <returns>count total number of numbers in the l_dnaa, or 0 if no numbers or on error</returns>
Public Shared Function l_dnaaGetNumberCount(
				ByVal daa as L_Dnaa) as Integer

	If IsNothing (daa) then Throw New ArgumentNullException  ("daa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaaGetNumberCount( daa.Pointer)

	Return _Result
End Function

' SRC\dnabasic.c (1402, 1)
' l_dnaaGetDna()
' l_dnaaGetDna(L_DNAA *, l_int32, l_int32) as L_DNA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="daa">[in] - </param>
'''  <param name="index">[in] - to the index-th l_dna</param>
'''  <param name="accessflag">[in] - L_COPY or L_CLONE</param>
'''   <returns>l_dna, or NULL on error</returns>
Public Shared Function l_dnaaGetDna(
				ByVal daa as L_Dnaa, 
				ByVal index as Integer, 
				ByVal accessflag as Enumerations.L_access_storage) as L_Dna

	If IsNothing (daa) then Throw New ArgumentNullException  ("daa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaaGetDna( daa.Pointer, index, accessflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnabasic.c (1438, 1)
' l_dnaaReplaceDna()
' l_dnaaReplaceDna(L_DNAA *, l_int32, L_DNA *) as l_ok
'''  <summary>
''' Notes
''' (1) Any existing l_dna is destroyed, and the input one
''' is inserted in its place.
''' (2) If the index is invalid, return 1 (error)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="daa">[in] - </param>
'''  <param name="index">[in] - to the index-th l_dna</param>
'''  <param name="da">[in] - insert and replace any existing one</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaaReplaceDna(
				ByVal daa as L_Dnaa, 
				ByVal index as Integer, 
				ByVal da as L_Dna) as Integer

	If IsNothing (daa) then Throw New ArgumentNullException  ("daa cannot be Nothing")
	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaaReplaceDna( daa.Pointer, index, da.Pointer)

	Return _Result
End Function

' SRC\dnabasic.c (1470, 1)
' l_dnaaGetValue()
' l_dnaaGetValue(L_DNAA *, l_int32, l_int32, l_float64 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="daa">[in] - </param>
'''  <param name="i">[in] - index of l_dna within l_dnaa</param>
'''  <param name="j">[in] - index into l_dna</param>
'''  <param name="pval">[out] - double value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaaGetValue(
				ByVal daa as L_Dnaa, 
				ByVal i as Integer, 
				ByVal j as Integer, 
				ByRef pval as Double()) as Integer

	If IsNothing (daa) then Throw New ArgumentNullException  ("daa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaaGetValue( daa.Pointer, i, j, pval)

	Return _Result
End Function

' SRC\dnabasic.c (1510, 1)
' l_dnaaAddNumber()
' l_dnaaAddNumber(L_DNAA *, l_int32, l_float64) as l_ok
'''  <summary>
''' Notes
''' (1) Adds to an existing l_dna only.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="daa">[in] - </param>
'''  <param name="index">[in] - of l_dna within l_dnaa</param>
'''  <param name="val">[in] - number to be added; stored as a double</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaaAddNumber(
				ByVal daa as L_Dnaa, 
				ByVal index as Integer, 
				ByVal val as Double) as Integer

	If IsNothing (daa) then Throw New ArgumentNullException  ("daa cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaaAddNumber( daa.Pointer, index, val)

	Return _Result
End Function

' SRC\dnabasic.c (1542, 1)
' l_dnaaRead()
' l_dnaaRead(const char *) as L_DNAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>daa, or NULL on error</returns>
Public Shared Function l_dnaaRead(
				ByVal filename as String) as L_Dnaa

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaaRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dnaa(_Result)
End Function

' SRC\dnabasic.c (1569, 1)
' l_dnaaReadStream()
' l_dnaaReadStream(FILE *) as L_DNAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>daa, or NULL on error</returns>
Public Shared Function l_dnaaReadStream(
				ByVal fp as FILE) as L_Dnaa

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaaReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dnaa(_Result)
End Function

' SRC\dnabasic.c (1613, 1)
' l_dnaaWrite()
' l_dnaaWrite(const char *, L_DNAA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="daa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaaWrite(
				ByVal filename as String, 
				ByVal daa as L_Dnaa) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (daa) then Throw New ArgumentNullException  ("daa cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaaWrite( filename, daa.Pointer)

	Return _Result
End Function

' SRC\dnabasic.c (1644, 1)
' l_dnaaWriteStream()
' l_dnaaWriteStream(FILE *, L_DNAA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="daa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaaWriteStream(
				ByVal fp as FILE, 
				ByVal daa as L_Dnaa) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (daa) then Throw New ArgumentNullException  ("daa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaaWriteStream( fp.Pointer, daa.Pointer)

	Return _Result
End Function

#End Region
#Region "SRC\dnafunc1.c"
' SRC\dnafunc1.c (79, 1)
' l_dnaJoin()
' l_dnaJoin(L_DNA *, L_DNA *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) istart LT 0 is taken to mean 'read from the start' (istart = 0)
''' (2) iend LT 0 means 'read to the end'
''' (3) if das == NULL, this is a no-op
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dad">[in] - dest dna; add to this one</param>
'''  <param name="das">[in][optional] - source dna; add from this one</param>
'''  <param name="istart">[in] - starting index in das</param>
'''  <param name="iend">[in] - ending index in das; use -1 to cat all</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_dnaJoin(
				ByVal dad as L_Dna, 
				ByVal das as L_Dna, 
				ByVal istart as Integer, 
				ByVal iend as Integer) as Integer

	If IsNothing (dad) then Throw New ArgumentNullException  ("dad cannot be Nothing")

	Dim dasPTR As IntPtr = IntPtr.Zero : If Not IsNothing(das) Then dasPTR = das.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaJoin( dad.Pointer, dasPTR, istart, iend)

	Return _Result
End Function

' SRC\dnafunc1.c (125, 1)
' l_dnaaFlattenToDna()
' l_dnaaFlattenToDna(L_DNAA *) as L_DNA *
'''  <summary>
''' Notes
''' (1) This 'flattens' the dnaa to a dna, by joining successively
''' each dna in the dnaa.
''' (2) It leaves the input dnaa unchanged.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="daa">[in] - </param>
'''   <returns>dad, or NULL on error</returns>
Public Shared Function l_dnaaFlattenToDna(
				ByVal daa as L_Dnaa) as L_Dna

	If IsNothing (daa) then Throw New ArgumentNullException  ("daa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaaFlattenToDna( daa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnafunc1.c (159, 1)
' l_dnaConvertToNuma()
' l_dnaConvertToNuma(L_DNA *) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''   <returns>na, or NULL on error</returns>
Public Shared Function l_dnaConvertToNuma(
				ByVal da as L_Dna) as Numa

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaConvertToNuma( da.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\dnafunc1.c (187, 1)
' numaConvertToDna
' numaConvertToDna(NUMA *) as L_DNA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''   <returns>da, or NULL on error</returns>
Public Shared Function numaConvertToDna(
				ByVal na as Numa) as L_Dna

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaConvertToDna( na.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnafunc1.c (226, 1)
' l_dnaUnionByAset()
' l_dnaUnionByAset(L_DNA *, L_DNA *) as L_DNA *
'''  <summary>
''' Notes
''' (1) See sarrayUnionByAset() for the approach.
''' (2) Here, the key in building the sorted tree is the number itself.
''' (3) Operations using an underlying tree are O(nlogn), which is
''' typically less efficient than hashing, which is O(n).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da1">[in] - </param>
'''  <param name="da2">[in] - </param>
'''   <returns>dad with the union of the set of numbers, or NULL on error</returns>
Public Shared Function l_dnaUnionByAset(
				ByVal da1 as L_Dna, 
				ByVal da2 as L_Dna) as L_Dna

	If IsNothing (da1) then Throw New ArgumentNullException  ("da1 cannot be Nothing")
	If IsNothing (da2) then Throw New ArgumentNullException  ("da2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaUnionByAset( da1.Pointer, da2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnafunc1.c (256, 1)
' l_dnaRemoveDupsByAset()
' l_dnaRemoveDupsByAset(L_DNA *) as L_DNA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="das">[in] - </param>
'''   <returns>dad with duplicates removed, or NULL on error</returns>
Public Shared Function l_dnaRemoveDupsByAset(
				ByVal das as L_Dna) as L_Dna

	If IsNothing (das) then Throw New ArgumentNullException  ("das cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaRemoveDupsByAset( das.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnafunc1.c (301, 1)
' l_dnaIntersectionByAset()
' l_dnaIntersectionByAset(L_DNA *, L_DNA *) as L_DNA *
'''  <summary>
''' Notes
''' (1) See sarrayIntersection() for the approach.
''' (2) Here, the key in building the sorted tree is the number itself.
''' (3) Operations using an underlying tree are O(nlogn), which is
''' typically less efficient than hashing, which is O(n).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da1">[in] - </param>
'''  <param name="da2">[in] - </param>
'''   <returns>dad with the intersection of the two arrays, or NULL on error</returns>
Public Shared Function l_dnaIntersectionByAset(
				ByVal da1 as L_Dna, 
				ByVal da2 as L_Dna) as L_Dna

	If IsNothing (da1) then Throw New ArgumentNullException  ("da1 cannot be Nothing")
	If IsNothing (da2) then Throw New ArgumentNullException  ("da2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaIntersectionByAset( da1.Pointer, da2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnafunc1.c (350, 1)
' l_asetCreateFromDna()
' l_asetCreateFromDna(L_DNA *) as L_ASET *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - source dna</param>
'''   <returns>set using the doubles in %da as keys</returns>
Public Shared Function l_asetCreateFromDna(
				ByVal da as L_Dna) as L_Rbtree

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_asetCreateFromDna( da.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree(_Result)
End Function

' SRC\dnafunc1.c (385, 1)
' l_dnaDiffAdjValues()
' l_dnaDiffAdjValues(L_DNA *) as L_DNA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="das">[in] - input l_dna</param>
'''   <returns>dad of difference values val[i+1] - val[i], or NULL on error</returns>
Public Shared Function l_dnaDiffAdjValues(
				ByVal das as L_Dna) as L_Dna

	If IsNothing (das) then Throw New ArgumentNullException  ("das cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaDiffAdjValues( das.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

#End Region
#Region "SRC\dnahash.c"
' SRC\dnahash.c (122, 1)
' l_dnaHashCreate()
' l_dnaHashCreate(l_int32, l_int32) as L_DNAHASH *
'''  <summary>
''' Notes
''' (1) Actual dna are created only as required by l_dnaHashAdd()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nbuckets">[in] - the number of buckets in the hash table, which should be prime.</param>
'''  <param name="initsize">[in] - initial size of each allocated dna; 0 for default</param>
'''   <returns>ptr to new dnahash, or NULL on error</returns>
Public Shared Function l_dnaHashCreate(
				ByVal nbuckets as Integer, 
				ByVal initsize as Integer) as L_DnaHash



	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaHashCreate( nbuckets, initsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_DnaHash(_Result)
End Function

' SRC\dnahash.c (152, 1)
' l_dnaHashDestroy()
' l_dnaHashDestroy(L_DNAHASH **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdahash">[in,out] - to be nulled, if it exists</param>
Public Shared Sub l_dnaHashDestroy(
				ByRef pdahash as L_DnaHash)


	Dim pdahashPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pdahash) Then pdahashPTR = pdahash.Pointer

	LeptonicaSharp.Natives.l_dnaHashDestroy( pdahashPTR)
	if pdahashPTR <> IntPtr.Zero then pdahash = new L_DnaHash(pdahashPTR)

End Sub

' SRC\dnahash.c (185, 1)
' l_dnaHashGetCount()
' l_dnaHashGetCount(L_DNAHASH *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dahash">[in] - </param>
'''   <returns>nbuckets allocated, or 0 on error</returns>
Public Shared Function l_dnaHashGetCount(
				ByVal dahash as L_DnaHash) as Integer

	If IsNothing (dahash) then Throw New ArgumentNullException  ("dahash cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaHashGetCount( dahash.Pointer)

	Return _Result
End Function

' SRC\dnahash.c (203, 1)
' l_dnaHashGetTotalCount()
' l_dnaHashGetTotalCount(L_DNAHASH *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dahash">[in] - </param>
'''   <returns>n number of numbers in all dna, or 0 on error</returns>
Public Shared Function l_dnaHashGetTotalCount(
				ByVal dahash as L_DnaHash) as Integer

	If IsNothing (dahash) then Throw New ArgumentNullException  ("dahash cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaHashGetTotalCount( dahash.Pointer)

	Return _Result
End Function

' SRC\dnahash.c (232, 1)
' l_dnaHashGetDna()
' l_dnaHashGetDna(L_DNAHASH *, l_uint64, l_int32) as L_DNA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dahash">[in] - </param>
'''  <param name="key">[in] - key to be hashed into a bucket number</param>
'''  <param name="copyflag">[in] - L_NOCOPY, L_COPY, L_CLONE</param>
'''   <returns>ptr to dna</returns>
Public Shared Function l_dnaHashGetDna(
				ByVal dahash as L_DnaHash, 
				ByVal key as ULong, 
				ByVal copyflag as Enumerations.L_access_storage) as L_Dna

	If IsNothing (dahash) then Throw New ArgumentNullException  ("dahash cannot be Nothing")
	If IsNothing (key) then Throw New ArgumentNullException  ("key cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaHashGetDna( dahash.Pointer, key, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnahash.c (267, 1)
' l_dnaHashAdd()
' l_dnaHashAdd(L_DNAHASH *, l_uint64, l_float64) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dahash">[in] - </param>
'''  <param name="key">[in] - key to be hashed into a bucket number</param>
'''  <param name="value">[in] - float value to be appended to the specific dna</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function l_dnaHashAdd(
				ByVal dahash as L_DnaHash, 
				ByVal key as ULong, 
				ByVal value as Double) as Integer

	If IsNothing (dahash) then Throw New ArgumentNullException  ("dahash cannot be Nothing")
	If IsNothing (key) then Throw New ArgumentNullException  ("key cannot be Nothing")
	If IsNothing (value) then Throw New ArgumentNullException  ("value cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaHashAdd( dahash.Pointer, key, value)

	Return _Result
End Function

' SRC\dnahash.c (306, 1)
' l_dnaHashCreateFromDna()
' l_dnaHashCreateFromDna(L_DNA *) as L_DNAHASH *
'''  <summary>
''' Notes
''' (1) The values stored in the %dahash are indices into %da;
''' %dahash has no use without %da.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''   <returns>dahash if OK; 1 on error</returns>
Public Shared Function l_dnaHashCreateFromDna(
				ByVal da as L_Dna) as L_DnaHash

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaHashCreateFromDna( da.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_DnaHash(_Result)
End Function

' SRC\dnahash.c (350, 1)
' l_dnaRemoveDupsByHash()
' l_dnaRemoveDupsByHash(L_DNA *, L_DNA **, L_DNAHASH **) as l_ok
'''  <summary>
''' Notes
''' (1) Generates a dna with unique values.
''' (2) The dnahash is built up with dad to assure uniqueness.
''' It can be used to find if an element is in the set
''' l_dnaFindValByHash(dad, dahash, val, index)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="das">[in] - </param>
'''  <param name="pdad">[out] - hash set</param>
'''  <param name="pdahash">[out][optional] - dnahash used for lookup</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function l_dnaRemoveDupsByHash(
				ByVal das as L_Dna, 
				ByRef pdad as L_Dna, 
				ByRef pdahash as L_DnaHash) as Integer

	If IsNothing (das) then Throw New ArgumentNullException  ("das cannot be Nothing")

	Dim pdadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pdad) Then pdadPTR = pdad.Pointer
Dim pdahashPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pdahash) Then pdahashPTR = pdahash.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaRemoveDupsByHash( das.Pointer, pdadPTR, pdahashPTR)
	if pdadPTR <> IntPtr.Zero then pdad = new L_Dna(pdadPTR)
	if pdahashPTR <> IntPtr.Zero then pdahash = new L_DnaHash(pdahashPTR)

	Return _Result
End Function

' SRC\dnahash.c (421, 1)
' l_dnaMakeHistoByHash()
' l_dnaMakeHistoByHash(L_DNA *, L_DNAHASH **, L_DNA **, L_DNA **) as l_ok
'''  <summary>
''' Notes
''' (1) Generates and returns a dna of occurrences (histogram),
''' an aligned dna of values, and an associated hashmap.
''' The hashmap takes %dav and a value, and points into the
''' histogram in %dac.
''' (2) The dna of values, %dav, is aligned with the histogram %dac,
''' and is needed for fast lookup.  It is a hash set, because
''' the values are unique.
''' (3) Lookup is simple
''' l_dnaFindValByHash(dav, dahash, val, index);
''' if (index GT= 0)
''' l_dnaGetIValue(dac, index, icount);
''' else
''' icount = 0;
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="das">[in] - </param>
'''  <param name="pdahash">[out] - hash map val --GT index</param>
'''  <param name="pdav">[out] - array of values index --GT val</param>
'''  <param name="pdac">[out] - histo array of counts index --GT count</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function l_dnaMakeHistoByHash(
				ByVal das as L_Dna, 
				ByRef pdahash as L_DnaHash, 
				ByRef pdav as L_Dna, 
				ByRef pdac as L_Dna) as Integer

	If IsNothing (das) then Throw New ArgumentNullException  ("das cannot be Nothing")

	Dim pdahashPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pdahash) Then pdahashPTR = pdahash.Pointer
	Dim pdavPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pdav) Then pdavPTR = pdav.Pointer
	Dim pdacPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pdac) Then pdacPTR = pdac.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaMakeHistoByHash( das.Pointer, pdahashPTR, pdavPTR, pdacPTR)
	if pdahashPTR <> IntPtr.Zero then pdahash = new L_DnaHash(pdahashPTR)
	if pdavPTR <> IntPtr.Zero then pdav = new L_Dna(pdavPTR)
	if pdacPTR <> IntPtr.Zero then pdac = new L_Dna(pdacPTR)

	Return _Result
End Function

' SRC\dnahash.c (485, 1)
' l_dnaIntersectionByHash()
' l_dnaIntersectionByHash(L_DNA *, L_DNA *) as L_DNA *
'''  <summary>
''' Notes
''' (1) This uses the same method for building the intersection set
''' as ptaIntersectionByHash() and sarrayIntersectionByHash().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da1">[in] - </param>
'''  <param name="da2">[in] - </param>
'''   <returns>dad intersection of the number arrays, or NULL on error</returns>
Public Shared Function l_dnaIntersectionByHash(
				ByVal da1 as L_Dna, 
				ByVal da2 as L_Dna) as L_Dna

	If IsNothing (da1) then Throw New ArgumentNullException  ("da1 cannot be Nothing")
	If IsNothing (da2) then Throw New ArgumentNullException  ("da2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaIntersectionByHash( da1.Pointer, da2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\dnahash.c (553, 1)
' l_dnaFindValByHash()
' l_dnaFindValByHash(L_DNA *, L_DNAHASH *, l_float64, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Algo hash %val into a key; hash the key to get the dna
''' in %dahash (that holds indices into %da); traverse
''' the dna of indices looking for %val in %da.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="da">[in] - </param>
'''  <param name="dahash">[in] - containing indices into %da</param>
'''  <param name="val">[in] - searching for this number in %da</param>
'''  <param name="pindex">[out] - index into da if found; -1 otherwise</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function l_dnaFindValByHash(
				ByVal da as L_Dna, 
				ByVal dahash as L_DnaHash, 
				ByVal val as Double, 
				ByRef pindex as Integer) as Integer

	If IsNothing (da) then Throw New ArgumentNullException  ("da cannot be Nothing")
	If IsNothing (dahash) then Throw New ArgumentNullException  ("dahash cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_dnaFindValByHash( da.Pointer, dahash.Pointer, val, pindex)

	Return _Result
End Function

#End Region
#Region "SRC\dwacomb.2.c"
' SRC\dwacomb.2.c (37, 6)
' pixMorphDwa_2()
' pixMorphDwa_2(PIX *, PIX *, l_int32, char *) as PIX *
'''  <summary>
''' Notes
''' (1) This simply adds a border, calls the appropriate
''' pixFMorphopGen_(), and removes the border.
''' See the notes for that function.
''' (2) The size of the border depends on the operation
''' and the boundary conditions.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - usual 3 choices null, == pixs, != pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="operation">[in] - L_MORPH_DILATE, L_MORPH_ERODE, L_MORPH_OPEN, L_MORPH_CLOSE</param>
'''   <returns>pixd</returns>
Public Shared Function pixMorphDwa_2(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal operation as Enumerations.L_MORPH, 
				ByRef selname as String) as Pix

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (selname) then Throw New ArgumentNullException  ("selname cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMorphDwa_2( pixd.Pointer, pixs.Pointer, operation, selname)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\dwacomb.2.c (38, 6)
' pixFMorphopGen_2()
' pixFMorphopGen_2(PIX *, PIX *, l_int32, char *) as PIX *
'''  <summary>
''' Notes
''' (1) This is a dwa operation, and the Sels must be limited in
''' size to not more than 31 pixels about the origin.
''' (2) A border of appropriate size (32 pixels, or 64 pixels
''' for safe closing with asymmetric b.c.) must be added before
''' this function is called.
''' (3) This handles all required setting of the border pixels
''' before erosion and dilation.
''' (4) The closing operation is safe; no pixels can be removed
''' near the boundary.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - usual 3 choices null, == pixs, != pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="operation">[in] - L_MORPH_DILATE, L_MORPH_ERODE, L_MORPH_OPEN, L_MORPH_CLOSE</param>
'''   <returns>pixd</returns>
Public Shared Function pixFMorphopGen_2(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal operation as Enumerations.L_MORPH, 
				ByRef selname as String) as Pix

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (selname) then Throw New ArgumentNullException  ("selname cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFMorphopGen_2( pixd.Pointer, pixs.Pointer, operation, selname)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\dwacomb.2.c (39, 9)
' 
' fmorphopgen_low_2(l_uint32 *, l_int32, l_int32, l_int32, l_uint32 *, l_int32, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function fmorphopgen_low_2(
				ByRef datad as Object, 
				ByRef w as Integer, 
				ByRef h as Integer, 
				ByRef wpld as Integer, 
				ByRef datas as Object, 
				ByRef wpls as Integer, 
				ByRef index as Integer) as Integer

	If IsNothing (datad) then Throw New ArgumentNullException  ("datad cannot be Nothing")
	If IsNothing (datas) then Throw New ArgumentNullException  ("datas cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fmorphopgen_low_2( datad, w, h, wpld, datas, wpls, index)

	Return _Result
End Function

#End Region
#Region "SRC\edge.c"
' SRC\edge.c (91, 1)
' pixSobelEdgeFilter()
' pixSobelEdgeFilter(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Invert pixd to see larger gradients as darker (grayscale).
''' (2) To generate a binary image of the edges, threshold
''' the result using pixThresholdToBinary().  If the high
''' edge values are to be fg (1), invert after running
''' pixThresholdToBinary().
''' (3) Label the pixels as follows
''' 1 4 7
''' 2 5 8
''' 3 6 9
''' Read the data incrementally across the image and unroll
''' the loop.
''' (4) This runs at about 45 Mpix/sec on a 3 GHz processor.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; no colormap</param>
'''  <param name="orientflag">[in] - L_HORIZONTAL_EDGES, L_VERTICAL_EDGES, L_ALL_EDGES</param>
'''   <returns>pixd 8 bpp, edges are brighter, or NULL on error</returns>
Public Shared Function pixSobelEdgeFilter(
				ByVal pixs as Pix, 
				ByVal orientflag as Enumerations.L_L_EDGES) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp; no colormap")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSobelEdgeFilter( pixs.Pointer, orientflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\edge.c (199, 1)
' pixTwoSidedEdgeFilter()
' pixTwoSidedEdgeFilter(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) For detecting vertical edges, this considers the
''' difference of the central pixel from those on the left
''' and right.  For situations where the gradient is the same
''' sign on both sides, this computes and stores the minimum
''' (absolute value of the) difference.  The reason for
''' checking the sign is that we are looking for pixels within
''' a transition.  By contrast, for single pixel noise, the pixel
''' value is either larger than or smaller than its neighbors,
''' so the gradient would change direction on each side.  Horizontal
''' edges are handled similarly, looking for vertical gradients.
''' (2) To generate a binary image of the edges, threshold
''' the result using pixThresholdToBinary().  If the high
''' edge values are to be fg (1), invert after running
''' pixThresholdToBinary().
''' (3) This runs at about 60 Mpix/sec on a 3 GHz processor.
''' It is about 30% faster than Sobel, and the results are
''' similar.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; no colormap</param>
'''  <param name="orientflag">[in] - L_HORIZONTAL_EDGES, L_VERTICAL_EDGES</param>
'''   <returns>pixd 8 bpp, edges are brighter, or NULL on error</returns>
Public Shared Function pixTwoSidedEdgeFilter(
				ByVal pixs as Pix, 
				ByVal orientflag as Enumerations.L_L_EDGES) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp; no colormap")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixTwoSidedEdgeFilter( pixs.Pointer, orientflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\edge.c (309, 1)
' pixMeasureEdgeSmoothness()
' pixMeasureEdgeSmoothness(PIX *, l_int32, l_int32, l_int32, l_float32 *, l_float32 *, l_float32 *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This computes three measures of smoothness of the edge of a
''' connected component
''' jumps/length (jpl) the number of jumps of size GT= %minjump,
''' normalized to the length of the side
''' jump sum/length (jspl) the sum of all jump lengths of
''' size GT= %minjump, normalized to the length of the side
''' reversals/length (rpl) the number of peak LT--GT valley
''' reversals, using %minreverse as a minimum deviation of
''' the peak or valley from its preceding extremum,
''' normalized to the length of the side
''' (2) The input pix should be a single connected component, but
''' this is not required.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="side">[in] - L_FROM_LEFT, L_FROM_RIGHT, L_FROM_TOP, L_FROM_BOT</param>
'''  <param name="minjump">[in] - minimum jump to be counted; GT= 1</param>
'''  <param name="minreversal">[in] - minimum reversal size for new peak or valley</param>
'''  <param name="pjpl">[out][optional] - jumps/length number of jumps, normalized to length of component side</param>
'''  <param name="pjspl">[out][optional] - jumpsum/length sum of all sufficiently large jumps, normalized to length of component side</param>
'''  <param name="prpl">[out][optional] - reversals/length number of peak-to-valley or valley-to-peak reversals, normalized to length of component side</param>
'''  <param name="debugfile">[in][optional] - displays constructed edge; use NULL for no output</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixMeasureEdgeSmoothness(
				ByVal pixs as Pix, 
				ByVal side as Enumerations.L_scan_direction, 
				ByVal minjump as Integer, 
				ByVal minreversal as Integer, 
				ByRef pjpl as Single(), 
				ByRef pjspl as Single(), 
				ByRef prpl as Single(), 
				ByVal debugfile as String) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixMeasureEdgeSmoothness( pixs.Pointer, side, minjump, minreversal, pjpl, pjspl, prpl, debugfile)

	Return _Result
End Function

' SRC\edge.c (386, 1)
' pixGetEdgeProfile()
' pixGetEdgeProfile(PIX *, l_int32, const char *) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="side">[in] - L_FROM_LEFT, L_FROM_RIGHT, L_FROM_TOP, L_FROM_BOT</param>
'''  <param name="debugfile">[in][optional] - displays constructed edge; use NULL for no output</param>
'''   <returns>na of fg edge pixel locations, or NULL on error</returns>
Public Shared Function pixGetEdgeProfile(
				ByVal pixs as Pix, 
				ByVal side as Enumerations.L_scan_direction, 
				ByVal debugfile as String) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetEdgeProfile( pixs.Pointer, side, debugfile)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\edge.c (515, 1)
' 
' pixGetLastOffPixelInRun(PIX *, l_int32, l_int32, l_int32, l_int32 *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixGetLastOffPixelInRun(
				ByRef pixs as Pix, 
				ByRef x as Integer, 
				ByRef y as Integer, 
				ByRef direction as Integer, 
				ByRef ploc as Object) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ploc) then Throw New ArgumentNullException  ("ploc cannot be Nothing")

Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetLastOffPixelInRun( pixs.Pointer, x, y, direction, ploc)

	Return _Result
End Function

' SRC\edge.c (587, 1)
' 
' pixGetLastOnPixelInRun(PIX *, l_int32, l_int32, l_int32, l_int32 *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixGetLastOnPixelInRun(
				ByRef pixs as Pix, 
				ByRef x as Integer, 
				ByRef y as Integer, 
				ByRef direction as Integer, 
				ByRef ploc as Object) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ploc) then Throw New ArgumentNullException  ("ploc cannot be Nothing")

Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetLastOnPixelInRun( pixs.Pointer, x, y, direction, ploc)

	Return _Result
End Function

#End Region
#Region "SRC\encoding.c"
' SRC\encoding.c (100, 1)
' encodeBase64()
' encodeBase64(l_uint8 *, l_int32, l_int32 *) as char *
'''  <summary>
''' Notes
''' (1) The input character data is unrestricted binary.
''' The output encoded data consists of the 64 characters
''' in the base64 set, plus newlines and the pad character '='.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="inarray">[in] - input binary data</param>
'''  <param name="insize">[in] - number of bytes in input array</param>
'''  <param name="poutsize">[out] - number of bytes in output char array</param>
'''   <returns>chara with MAX_BASE64_LINE characters + \n in each line</returns>
Public Shared Function encodeBase64(
				ByVal inarray as Byte(), 
				ByVal insize as Integer, 
				ByRef poutsize as Integer) as String

	If IsNothing (inarray) then Throw New ArgumentNullException  ("inarray cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.encodeBase64( inarray, insize, poutsize)

	Return _Result
End Function

' SRC\encoding.c (188, 1)
' decodeBase64()
' decodeBase64(const char *, l_int32, l_int32 *) as l_uint8 *
'''  <summary>
''' Notes
''' (1) The input character data should have only 66 different characters
''' The 64 character set for base64 encoding, plus the pad
''' character '=' and newlines for formatting with fixed line
''' lengths.  If there are any other characters, the decoder
''' will declare the input data to be invalid and return NULL.
''' (2) The decoder ignores newlines and, for a valid input string,
''' stops reading input when a pad byte is found.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="inarray">[in] - input encoded char data, with 72 chars/line)</param>
'''  <param name="insize">[in] - number of bytes in input array</param>
'''  <param name="poutsize">[out] - number of bytes in output byte array</param>
'''   <returns>bytea decoded byte data, or NULL on error</returns>
Public Shared Function decodeBase64(
				ByVal inarray as String, 
				ByVal insize as Integer, 
				ByRef poutsize as Integer) as Byte()

	If IsNothing (inarray) then Throw New ArgumentNullException  ("inarray cannot be Nothing")


	Dim _Result as Byte() = LeptonicaSharp.Natives.decodeBase64( inarray, insize, poutsize)

	Return _Result
End Function

' SRC\encoding.c (339, 1)
' encodeAscii85()
' encodeAscii85(l_uint8 *, l_int32, l_int32 *) as char *
'''  <summary>
''' Notes
''' (1) Ghostscript has a stack break if the last line of
''' data only has a 'GT', so we avoid the problem by
''' always putting '~GT' on the last line.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="inarray">[in] - input data</param>
'''  <param name="insize">[in] - number of bytes in input array</param>
'''  <param name="poutsize">[out] - number of bytes in output char array</param>
'''   <returns>chara with 64 characters + \n in each line</returns>
Public Shared Function encodeAscii85(
				ByVal inarray as Byte(), 
				ByVal insize as Integer, 
				ByRef poutsize as Integer) as String

	If IsNothing (inarray) then Throw New ArgumentNullException  ("inarray cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.encodeAscii85( inarray, insize, poutsize)

	Return _Result
End Function

' SRC\encoding.c (473, 1)
' decodeAscii85()
' decodeAscii85(char *, l_int32, l_int32 *) as l_uint8 *
'''  <summary>
''' Notes
''' (1) We assume the data is properly encoded, so we do not check
''' for invalid characters or the final 'GT' character.
''' (2) We permit whitespace to be added to the encoding in an
''' arbitrary way.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="inarray">[in] - ascii85 input data</param>
'''  <param name="insize">[in] - number of bytes in input array</param>
'''  <param name="poutsize">[out] - number of bytes in output l_uint8 array</param>
'''   <returns>outarray binary</returns>
Public Shared Function decodeAscii85(
				ByVal inarray as String, 
				ByVal insize as Integer, 
				ByRef poutsize as Integer) as Byte()

	If IsNothing (inarray) then Throw New ArgumentNullException  ("inarray cannot be Nothing")


	Dim _Result as Byte() = LeptonicaSharp.Natives.decodeAscii85( inarray, insize, poutsize)

	Return _Result
End Function

' SRC\encoding.c (587, 1)
' reformatPacked64()
' reformatPacked64(char *, l_int32, l_int32, l_int32, l_int32, l_int32 *) as char *
'''  <summary>
''' Notes
''' (1) Each line in the output array has %leadspace space characters,
''' followed optionally by a double-quote, followed by %linechars
''' bytes of base64 data, followed optionally by a double-quote,
''' followed by a newline.
''' (2) This can be used to convert a base64 encoded string to a
''' string formatted for inclusion in a C source file.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="inarray">[in] - base64 encoded string with newlines</param>
'''  <param name="insize">[in] - number of bytes in input array</param>
'''  <param name="leadspace">[in] - number of spaces in each line before the data</param>
'''  <param name="linechars">[in] - number of bytes of data in each line; multiple of 4</param>
'''  <param name="addquotes">[in] - 1 to add quotes to each line of data; 0 to skip</param>
'''  <param name="poutsize">[out] - number of bytes in output char array</param>
'''   <returns>outarray ascii</returns>
Public Shared Function reformatPacked64(
				ByVal inarray as String, 
				ByVal insize as Integer, 
				ByVal leadspace as Integer, 
				ByVal linechars as Integer, 
				ByVal addquotes as Integer, 
				ByRef poutsize as Integer) as String

	If IsNothing (inarray) then Throw New ArgumentNullException  ("inarray cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.reformatPacked64( inarray, insize, leadspace, linechars, addquotes, poutsize)

	Return _Result
End Function

#End Region
#Region "SRC\enhance.c"
' SRC\enhance.c (174, 1)
' pixGammaTRC()
' pixGammaTRC(PIX *, PIX *, l_float32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) pixd must either be null or equal to pixs.
''' For in-place operation, set pixd == pixs
''' pixGammaTRC(pixs, pixs, ...);
''' To get a new image, set pixd == null
''' pixd = pixGammaTRC(NULL, pixs, ...);
''' (2) If pixs is colormapped, the colormap is transformed,
''' either in-place or in a copy of pixs.
''' (3) We use a gamma mapping between minval and maxval.
''' (4) If gamma LT 1.0, the image will appear darker;
''' if gamma GT 1.0, the image will appear lighter;
''' (5) If gamma = 1.0 and minval = 0 and maxval = 255, no
''' enhancement is performed; return a copy unless in-place,
''' in which case this is a no-op.
''' (6) For color images that are not colormapped, the mapping
''' is applied to each component.
''' (7) minval and maxval are not restricted to the interval [0, 255].
''' If minval LT 0, an input value of 0 is mapped to a
''' nonzero output.  This will turn black to gray.
''' If maxval GT 255, an input value of 255 is mapped to
''' an output value less than 255.  This will turn
''' white (e.g., in the background) to gray.
''' (8) Increasing minval darkens the image.
''' (9) Decreasing maxval bleaches the image.
''' (10) Simultaneously increasing minval and decreasing maxval
''' will darken the image and make the colors more intense;
''' e.g., minval = 50, maxval = 200.
''' (11) See numaGammaTRC() for further examples of use.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - null or equal to pixs</param>
'''  <param name="pixs">[in] - 8 or 32 bpp; or 2, 4 or 8 bpp with colormap</param>
'''  <param name="gamma">[in] - gamma correction; must be GT 0.0</param>
'''  <param name="minval">[in] - input value that gives 0 for output; can be LT 0</param>
'''  <param name="maxval">[in] - input value that gives 255 for output; can be GT 255</param>
'''   <returns>pixd always</returns>
Public Shared Function pixGammaTRC(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal gamma as Single, 
				ByVal minval as Integer, 
				ByVal maxval as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (gamma) then Throw New ArgumentNullException  ("gamma cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGammaTRC( pixdPTR, pixs.Pointer, gamma, minval, maxval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (242, 1)
' pixGammaTRCMasked()
' pixGammaTRCMasked(PIX *, PIX *, PIX *, l_float32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Same as pixGammaTRC() except mapping is optionally over
''' a subset of pixels described by pixm.
''' (2) Masking does not work for colormapped images.
''' (3) See pixGammaTRC() for details on how to use the parameters.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - null or equal to pixs</param>
'''  <param name="pixs">[in] - 8 or 32 bpp; not colormapped</param>
'''  <param name="pixm">[in][optional] - null or 1 bpp</param>
'''  <param name="gamma">[in] - gamma correction; must be GT 0.0</param>
'''  <param name="minval">[in] - input value that gives 0 for output; can be LT 0</param>
'''  <param name="maxval">[in] - input value that gives 255 for output; can be GT 255</param>
'''   <returns>pixd always</returns>
Public Shared Function pixGammaTRCMasked(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal gamma as Single, 
				ByVal minval as Integer, 
				ByVal maxval as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (gamma) then Throw New ArgumentNullException  ("gamma cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer
	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGammaTRCMasked( pixdPTR, pixs.Pointer, pixmPTR, gamma, minval, maxval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (306, 1)
' pixGammaTRCWithAlpha()
' pixGammaTRCWithAlpha(PIX *, PIX *, l_float32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See usage notes in pixGammaTRC().
''' (2) This version saves the alpha channel.  It is only valid
''' for 32 bpp (no colormap), and is a bit slower.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - null or equal to pixs</param>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="gamma">[in] - gamma correction; must be GT 0.0</param>
'''  <param name="minval">[in] - input value that gives 0 for output; can be LT 0</param>
'''  <param name="maxval">[in] - input value that gives 255 for output; can be GT 255</param>
'''   <returns>pixd always</returns>
Public Shared Function pixGammaTRCWithAlpha(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal gamma as Single, 
				ByVal minval as Integer, 
				ByVal maxval as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (gamma) then Throw New ArgumentNullException  ("gamma cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGammaTRCWithAlpha( pixdPTR, pixs.Pointer, gamma, minval, maxval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (366, 1)
' numaGammaTRC()
' numaGammaTRC(l_float32, l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The map is returned as a numa; values are clipped to [0, 255].
''' (2) To force all intensities into a range within fraction delta
''' of white, use minval = -256  (1 - delta) / delta
''' maxval = 255
''' (3) To force all intensities into a range within fraction delta
''' of black, use minval = 0
''' maxval = 256  (1 - delta) / delta
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="gamma">[in] - gamma factor; must be GT 0.0</param>
'''  <param name="minval">[in] - input value that gives 0 for output</param>
'''  <param name="maxval">[in] - input value that gives 255 for output</param>
'''   <returns>na, or NULL on error</returns>
Public Shared Function numaGammaTRC(
				ByVal gamma as Single, 
				ByVal minval as Integer, 
				ByVal maxval as Integer) as Numa

	If IsNothing (gamma) then Throw New ArgumentNullException  ("gamma cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaGammaTRC( gamma, minval, maxval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\enhance.c (436, 1)
' pixContrastTRC()
' pixContrastTRC(PIX *, PIX *, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) pixd must either be null or equal to pixs.
''' For in-place operation, set pixd == pixs
''' pixContrastTRC(pixs, pixs, ...);
''' To get a new image, set pixd == null
''' pixd = pixContrastTRC(NULL, pixs, ...);
''' (2) If pixs is colormapped, the colormap is transformed,
''' either in-place or in a copy of pixs.
''' (3) Contrast is enhanced by mapping each color component
''' using an atan function with maximum slope at 127.
''' Pixels below 127 are lowered in intensity and pixels
''' above 127 are increased.
''' (4) The useful range for the contrast factor is scaled to
''' be in (0.0 to 1.0), but larger values can also be used.
''' (5) If factor == 0.0, no enhancement is performed; return a copy
''' unless in-place, in which case this is a no-op.
''' (6) For color images that are not colormapped, the mapping
''' is applied to each component.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - null or equal to pixs</param>
'''  <param name="pixs">[in] - 8 or 32 bpp; or 2, 4 or 8 bpp with colormap</param>
'''  <param name="factor">[in] - 0.0 is no enhancement</param>
'''   <returns>pixd always</returns>
Public Shared Function pixContrastTRC(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal factor as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixContrastTRC( pixdPTR, pixs.Pointer, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (498, 1)
' pixContrastTRCMasked()
' pixContrastTRCMasked(PIX *, PIX *, PIX *, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) Same as pixContrastTRC() except mapping is optionally over
''' a subset of pixels described by pixm.
''' (2) Masking does not work for colormapped images.
''' (3) See pixContrastTRC() for details on how to use the parameters.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - null or equal to pixs</param>
'''  <param name="pixs">[in] - 8 or 32 bpp; or 2, 4 or 8 bpp with colormap</param>
'''  <param name="pixm">[in][optional] - null or 1 bpp</param>
'''  <param name="factor">[in] - 0.0 is no enhancement</param>
'''   <returns>pixd always</returns>
Public Shared Function pixContrastTRCMasked(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal factor as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer
	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixContrastTRCMasked( pixdPTR, pixs.Pointer, pixmPTR, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (557, 1)
' numaContrastTRC()
' numaContrastTRC(l_float32) as NUMA *
'''  <summary>
''' Notes
''' (1) The mapping is monotonic increasing, where 0 is mapped
''' to 0 and 255 is mapped to 255.
''' (2) As 'factor' is increased from 0.0 (where the mapping is linear),
''' the map gets closer to its limit as a step function that
''' jumps from 0 to 255 at the center (input value = 127).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="factor">[in] - generally between 0.0 [no enhancement] and 1.0, but can be larger than 1.0</param>
'''   <returns>na, or NULL on error</returns>
Public Shared Function numaContrastTRC(
				ByVal factor as Single) as Numa

	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaContrastTRC( factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\enhance.c (627, 1)
' pixEqualizeTRC()
' pixEqualizeTRC(PIX *, PIX *, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) pixd must either be null or equal to pixs.
''' For in-place operation, set pixd == pixs
''' pixEqualizeTRC(pixs, pixs, ...);
''' To get a new image, set pixd == null
''' pixd = pixEqualizeTRC(NULL, pixs, ...);
''' (2) In histogram equalization, a tone reproduction curve
''' mapping is used to make the number of pixels at each
''' intensity equal.
''' (3) If fract == 0.0, no equalization is performed; return a copy
''' unless in-place, in which case this is a no-op.
''' If fract == 1.0, equalization is complete.
''' (4) Set the subsampling factor GT 1 to reduce the amount of computation.
''' (5) If pixs is colormapped, the colormap is removed and
''' converted to rgb or grayscale.
''' (6) If pixs has color, equalization is done in each channel
''' separately.
''' (7) Note that even if there is a colormap, we can get an
''' in-place operation because the intermediate image pixt
''' is copied back to pixs (which for in-place is the same
''' as pixd).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - null or equal to pixs</param>
'''  <param name="pixs">[in] - 8 bpp gray, 32 bpp rgb, or colormapped</param>
'''  <param name="fract">[in] - fraction of equalization movement of pixel values</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixEqualizeTRC(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal fract as Single, 
				ByVal factor as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixEqualizeTRC( pixdPTR, pixs.Pointer, fract, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (714, 1)
' numaEqualizeTRC()
' numaEqualizeTRC(PIX *, l_float32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) If fract == 0.0, no equalization will be performed.
''' If fract == 1.0, equalization is complete.
''' (2) Set the subsampling factor GT 1 to reduce the amount of computation.
''' (3) The map is returned as a numa with 256 values, specifying
''' the equalized value (array value) for every input value
''' (the array index).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 bpp, no colormap</param>
'''  <param name="fract">[in] - fraction of equalization movement of pixel values</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''   <returns>nad, or NULL on error</returns>
Public Shared Function numaEqualizeTRC(
				ByVal pix as Pix, 
				ByVal fract as Single, 
				ByVal factor as Integer) as Numa

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaEqualizeTRC( pix.Pointer, fract, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\enhance.c (781, 1)
' pixTRCMap()
' pixTRCMap(PIX *, PIX *, NUMA *) as l_int32
'''  <summary>
''' Notes
''' (1) This operation is in-place on pixs.
''' (2) For 32 bpp, this applies the same map to each of the r,g,b
''' components.
''' (3) The mapping array is of size 256, and it maps the input
''' index into values in the range [0, 255].
''' (4) If defined, the optional 1 bpp mask pixm has its origin
''' aligned with pixs, and the map function is applied only
''' to pixels in pixs under the fg of pixm.
''' (5) For 32 bpp, this does not save the alpha channel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 grayscale or 32 bpp rgb; not colormapped</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask</param>
'''  <param name="na">[in] - mapping array</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixTRCMap(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal na as Numa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixTRCMap( pixs.Pointer, pixmPTR, na.Pointer)

	Return _Result
End Function

' SRC\enhance.c (904, 1)
' pixUnsharpMasking()
' pixUnsharpMasking(PIX *, l_int32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) We use symmetric smoothing filters of odd dimension,
''' typically use sizes of 3, 5, 7, etc.  The %halfwidth parameter
''' for these is (size - 1)/2; i.e., 1, 2, 3, etc.
''' (2) The fract parameter is typically taken in the
''' range  0.2 LT fract LT 0.7
''' (3) Returns a clone if no sharpening is requested.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths except 1 bpp; with or without colormaps</param>
'''  <param name="halfwidth">[in] - "half-width" of smoothing filter</param>
'''  <param name="fract">[in] - fraction of edge added back into image</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixUnsharpMasking(
				ByVal pixs as Pix, 
				ByVal halfwidth as Integer, 
				ByVal fract as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixUnsharpMasking( pixs.Pointer, halfwidth, fract)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (973, 1)
' pixUnsharpMaskingGray()
' pixUnsharpMaskingGray(PIX *, l_int32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) We use symmetric smoothing filters of odd dimension,
''' typically use sizes of 3, 5, 7, etc.  The %halfwidth parameter
''' for these is (size - 1)/2; i.e., 1, 2, 3, etc.
''' (2) The fract parameter is typically taken in the range
''' 0.2 LT fract LT 0.7
''' (3) Returns a clone if no sharpening is requested.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; no colormap</param>
'''  <param name="halfwidth">[in] - "half-width" of smoothing filter</param>
'''  <param name="fract">[in] - fraction of edge added back into image</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixUnsharpMaskingGray(
				ByVal pixs as Pix, 
				ByVal halfwidth as Integer, 
				ByVal fract as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp; no colormap")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixUnsharpMaskingGray( pixs.Pointer, halfwidth, fract)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (1070, 1)
' pixUnsharpMaskingFast()
' pixUnsharpMaskingFast(PIX *, l_int32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The fast version uses separable 1-D filters directly on
''' the input image.  The halfwidth is either 1 (full width = 3)
''' or 2 (full width = 5).
''' (2) The fract parameter is typically taken in the
''' range  0.2 LT fract LT 0.7
''' (3) To skip horizontal sharpening, use %fracth = 0.0; ditto for %fractv
''' (4) For one dimensional filtering (as an example)
''' For %halfwidth = 1, the low-pass filter is
''' L 1/3 1/3   1/3
''' and the high-pass filter is
''' H = I - L   -1/3   2/3   -1/3
''' For %halfwidth = 2, the low-pass filter is
''' L 1/5 1/5   1/5 1/5 1/5
''' and the high-pass filter is
''' H = I - L   -1/5  -1/5   4/5  -1/5   -1/5
''' The new sharpened pixel value is found by adding some fraction
''' of the high-pass filter value (which sums to 0) to the
''' initial pixel value
''' N = I + fract  H
''' (5) For 2D, the sharpening filter is not separable, because the
''' vertical filter depends on the horizontal location relative
''' to the filter origin, and v.v.   So we either do the full
''' 2D filter (for %halfwidth == 1) or do the low-pass
''' convolution separably and then compose with the original pix.
''' (6) Returns a clone if no sharpening is requested.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths except 1 bpp; with or without colormaps</param>
'''  <param name="halfwidth">[in] - "half-width" of smoothing filter; 1 and 2 only</param>
'''  <param name="fract">[in] - fraction of high frequency added to image</param>
'''  <param name="direction">[in] - L_HORIZ, L_VERT, L_BOTH_DIRECTIONS</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixUnsharpMaskingFast(
				ByVal pixs as Pix, 
				ByVal halfwidth as Integer, 
				ByVal fract as Single, 
				ByVal direction as Enumerations.L_direction) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixUnsharpMaskingFast( pixs.Pointer, halfwidth, fract, direction)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (1141, 1)
' pixUnsharpMaskingGrayFast()
' pixUnsharpMaskingGrayFast(PIX *, l_int32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) For usage and explanation of the algorithm, see notes
''' in pixUnsharpMaskingFast().
''' (2) Returns a clone if no sharpening is requested.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; no colormap</param>
'''  <param name="halfwidth">[in] - "half-width" of smoothing filter 1 or 2</param>
'''  <param name="fract">[in] - fraction of high frequency added to image</param>
'''  <param name="direction">[in] - L_HORIZ, L_VERT, L_BOTH_DIRECTIONS</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixUnsharpMaskingGrayFast(
				ByVal pixs as Pix, 
				ByVal halfwidth as Integer, 
				ByVal fract as Single, 
				ByVal direction as Enumerations.L_direction) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp; no colormap")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixUnsharpMaskingGrayFast( pixs.Pointer, halfwidth, fract, direction)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (1190, 1)
' pixUnsharpMaskingGray1D()
' pixUnsharpMaskingGray1D(PIX *, l_int32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) For usage and explanation of the algorithm, see notes
''' in pixUnsharpMaskingFast().
''' (2) Returns a clone if no sharpening is requested.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; no colormap</param>
'''  <param name="halfwidth">[in] - "half-width" of smoothing filter 1 or 2</param>
'''  <param name="fract">[in] - fraction of high frequency added to image</param>
'''  <param name="direction">[in] - filtering direction; use L_HORIZ or L_VERT</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixUnsharpMaskingGray1D(
				ByVal pixs as Pix, 
				ByVal halfwidth as Integer, 
				ByVal fract as Single, 
				ByVal direction as Enumerations.L_direction) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp; no colormap")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixUnsharpMaskingGray1D( pixs.Pointer, halfwidth, fract, direction)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (1324, 1)
' pixUnsharpMaskingGray2D()
' pixUnsharpMaskingGray2D(PIX *, l_int32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This is for %halfwidth == 1, 2.
''' (2) The lowpass filter is implemented separably.
''' (3) Returns a clone if no sharpening is requested.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; no colormap</param>
'''  <param name="halfwidth">[in] - "half-width" of smoothing filter 1 or 2</param>
'''  <param name="fract">[in] - fraction of high frequency added to image</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixUnsharpMaskingGray2D(
				ByVal pixs as Pix, 
				ByVal halfwidth as Integer, 
				ByVal fract as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp; no colormap")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixUnsharpMaskingGray2D( pixs.Pointer, halfwidth, fract)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (1469, 1)
' pixModifyHue()
' pixModifyHue(PIX *, PIX *, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) pixd must either be null or equal to pixs.
''' For in-place operation, set pixd == pixs
''' pixEqualizeTRC(pixs, pixs, ...);
''' To get a new image, set pixd == null
''' pixd = pixEqualizeTRC(NULL, pixs, ...);
''' (1) Use fract GT 0.0 to increase hue value; LT 0.0 to decrease it.
''' 1.0 (or -1.0) represents a 360 degree rotation; i.e., no change.
''' (2) If no modification is requested (fract = -1.0 or 0 or 1.0),
''' return a copy unless in-place, in which case this is a no-op.
''' (3) See discussion of color-modification methods, in coloring.c.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - can be null or equal to pixs</param>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="fract">[in] - between -1.0 and 1.0</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixModifyHue(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal fract as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixModifyHue( pixdPTR, pixs.Pointer, fract)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (1542, 1)
' pixModifySaturation()
' pixModifySaturation(PIX *, PIX *, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) If fract GT 0.0, it gives the fraction that the pixel
''' saturation is moved from its initial value toward 255.
''' If fract LT 0.0, it gives the fraction that the pixel
''' saturation is moved from its initial value toward 0.
''' The limiting values for fract = -1.0 (1.0) thus set the
''' saturation to 0 (255).
''' (2) If fract = 0, no modification is requested; return a copy
''' unless in-place, in which case this is a no-op.
''' (3) See discussion of color-modification methods, in coloring.c.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - can be null, existing or equal to pixs</param>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="fract">[in] - between -1.0 and 1.0</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixModifySaturation(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal fract as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixModifySaturation( pixdPTR, pixs.Pointer, fract)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (1597, 1)
' pixMeasureSaturation()
' pixMeasureSaturation(PIX *, l_int32, l_float32 *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''  <param name="psat">[out] - average saturation</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixMeasureSaturation(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByRef psat as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixMeasureSaturation( pixs.Pointer, factor, psat)

	Return _Result
End Function

' SRC\enhance.c (1658, 1)
' pixModifyBrightness()
' pixModifyBrightness(PIX *, PIX *, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) If fract GT 0.0, it gives the fraction that the v-parameter,
''' which is max(r,g,b), is moved from its initial value toward 255.
''' If fract LT 0.0, it gives the fraction that the v-parameter
''' is moved from its initial value toward 0.
''' The limiting values for fract = -1.0 (1.0) thus set the
''' v-parameter to 0 (255).
''' (2) If fract = 0, no modification is requested; return a copy
''' unless in-place, in which case this is a no-op.
''' (3) See discussion of color-modification methods, in coloring.c.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - can be null, existing or equal to pixs</param>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="fract">[in] - between -1.0 and 1.0</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixModifyBrightness(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal fract as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixModifyBrightness( pixdPTR, pixs.Pointer, fract)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (1737, 1)
' pixMosaicColorShiftRGB()
' pixMosaicColorShiftRGB(PIX *, l_float32, l_float32, l_float32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This generates a mosaic view of the effect of shifting the RGB
''' components.  See pixColorShiftRGB() for details on the shifting.
''' (2) The offsets (%roff, %goff, %boff) set the color center point,
''' and the deviations from this are shown separately for deltas
''' in r, g and b.  For each component, we show 2  %nincr + 1
''' images.
''' (3) Usage color prints differ from the original due to three factors
''' illumination, calibration of the camera in acquisition,
''' and calibration of the printer.  This function can be used
''' to iteratively match a color print to the original.  On each
''' iteration, the center offsets are set to the best match so
''' far, and the %delta increments are typically reduced.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="roff">[in] - center offset of red component</param>
'''  <param name="goff">[in] - center offset of green component</param>
'''  <param name="boff">[in] - center offset of blue component</param>
'''  <param name="delta">[in] - increments from center offsets [0.0 - 0.1]; use 0.0 to get the default (0.04)</param>
'''  <param name="nincr">[in] - number of increments in each (positive and negative) direction; use 0 to get the default (2).</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixMosaicColorShiftRGB(
				ByVal pixs as Pix, 
				ByVal roff as Single, 
				ByVal goff as Single, 
				ByVal boff as Single, 
				ByVal delta as Single, 
				ByVal nincr as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (roff) then Throw New ArgumentNullException  ("roff cannot be Nothing")
	If IsNothing (goff) then Throw New ArgumentNullException  ("goff cannot be Nothing")
	If IsNothing (boff) then Throw New ArgumentNullException  ("boff cannot be Nothing")
	If IsNothing (delta) then Throw New ArgumentNullException  ("delta cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMosaicColorShiftRGB( pixs.Pointer, roff, goff, boff, delta, nincr)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (1833, 1)
' pixColorShiftRGB()
' pixColorShiftRGB(PIX *, l_float32, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This allows independent fractional shifts of the r,g and b
''' components.  A positive shift pushes to saturation (255);
''' a negative shift pushes toward 0 (black).
''' (2) The effect can be imagined using a color wheel that consists
''' (for our purposes) of these 6 colors, separated by 60 degrees
''' red, magenta, blue, cyan, green, yellow
''' (3) So, for example, a negative shift of the blue component
''' (bfract LT 0) could be accompanied by positive shifts
''' of red and green to make an image more yellow.
''' (4) Examples of limiting cases
''' rfract = 1 ==GT r = 255
''' rfract = -1 ==GT r = 0
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="rfract">[in] - fractional shift in red component</param>
'''  <param name="gfract">[in] - fractional shift in green component</param>
'''  <param name="bfract">[in] - fractional shift in blue component</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixColorShiftRGB(
				ByVal pixs as Pix, 
				ByVal rfract as Single, 
				ByVal gfract as Single, 
				ByVal bfract as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rfract) then Throw New ArgumentNullException  ("rfract cannot be Nothing")
	If IsNothing (gfract) then Throw New ArgumentNullException  ("gfract cannot be Nothing")
	If IsNothing (bfract) then Throw New ArgumentNullException  ("bfract cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixColorShiftRGB( pixs.Pointer, rfract, gfract, bfract)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (1930, 1)
' pixDarkenGray()
' pixDarkenGray(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This darkens gray pixels, by a fraction (sat/%satlimit), where
''' the sat, the saturation, is the component difference (max - min).
''' The pixel value is unchanged if sat GT= %satlimit.  A typical
''' value of %satlimit might be 50; the larger the value, the
''' more that pixels with a smaller saturation will be darkened.
''' (2) Pixels with max component GT= %thresh are unchanged. This can be
''' used to prevent bright pixels with low saturation from being
''' darkened.  Setting thresh == 0 is a no-op; setting %thresh == 255
''' causes the darkening to be applied to all pixels.
''' (3) This function is useful to enhance pixels relative to a
''' gray background.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - can be null or equal to pixs</param>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="thresh">[in] - pixels with max component GT= %thresh are unchanged</param>
'''  <param name="satlimit">[in] - pixels with saturation GT= %satlimit are unchanged</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixDarkenGray(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal thresh as Integer, 
				ByVal satlimit as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDarkenGray( pixdPTR, pixs.Pointer, thresh, satlimit)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (2002, 1)
' pixMultConstantColor()
' pixMultConstantColor(PIX *, l_float32, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) rfact, gfact and bfact can only have non-negative values.
''' They can be greater than 1.0.  All transformed component
''' values are clipped to the interval [0, 255].
''' (2) For multiplication with a general 3x3 matrix of constants,
''' use pixMultMatrixColor().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - colormapped or rgb</param>
'''  <param name="rfact">[in] - red multiplicative factor</param>
'''  <param name="gfact">[in] - green multiplicative factor</param>
'''  <param name="bfact">[in] - blue multiplicative factor</param>
'''   <returns>pixd colormapped or rgb, with colors scaled, or NULL on error</returns>
Public Shared Function pixMultConstantColor(
				ByVal pixs as Pix, 
				ByVal rfact as Single, 
				ByVal gfact as Single, 
				ByVal bfact as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rfact) then Throw New ArgumentNullException  ("rfact cannot be Nothing")
	If IsNothing (gfact) then Throw New ArgumentNullException  ("gfact cannot be Nothing")
	If IsNothing (bfact) then Throw New ArgumentNullException  ("bfact cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMultConstantColor( pixs.Pointer, rfact, gfact, bfact)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (2104, 1)
' pixMultMatrixColor()
' pixMultMatrixColor(PIX *, L_KERNEL *) as PIX *
'''  <summary>
''' Notes
''' (1) The kernel is a data structure used mostly for floating point
''' convolution.  Here it is a 3x3 matrix of floats that are used
''' to transform the pixel values by matrix multiplication
''' nrval = a[0,0]  rval + a[0,1]  gval + a[0,2]  bval
''' ngval = a[1,0]  rval + a[1,1]  gval + a[1,2]  bval
''' nbval = a[2,0]  rval + a[2,1]  gval + a[2,2]  bval
''' (2) The matrix can be generated in several ways.
''' See kernel.c for details.  Here are two of them
''' (a) kel = kernelCreate(3, 3);
''' kernelSetElement(kel, 0, 0, val00);
''' kernelSetElement(kel, 0, 1, val01);
''' ...
''' (b) from a static string; e.g.,
''' const char kdata = " 0.6  0.3 -0.2 "
''' " 0.1  1.2  0.4 "
''' " -0.4 0.2  0.9 ";
''' kel = kernelCreateFromString(3, 3, 0, 0, kdata);
''' (3) For the special case where the matrix is diagonal, it is easier
''' to use pixMultConstantColor().
''' (4) Matrix entries can have positive and negative values, and can
''' be larger than 1.0.  All transformed component values
''' are clipped to [0, 255].
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - colormapped or rgb</param>
'''  <param name="kel">[in] - kernel 3x3 matrix of floats</param>
'''   <returns>pixd colormapped or rgb, or NULL on error</returns>
Public Shared Function pixMultMatrixColor(
				ByVal pixs as Pix, 
				ByVal kel as L_Kernel) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (kel) then Throw New ArgumentNullException  ("kel cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMultMatrixColor( pixs.Pointer, kel.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\enhance.c (2213, 1)
' pixHalfEdgeByBandpass()
' pixHalfEdgeByBandpass(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) We use symmetric smoothing filters of odd dimension,
''' typically use 3, 5, 7, etc.  The smoothing parameters
''' for these are 1, 2, 3, etc.  The filter size is related
''' to the smoothing parameter by
''' size = 2  smoothing + 1
''' (2) Because we take the difference of two lowpass filters,
''' this is actually a bandpass filter.
''' (3) We allow both filters to be anisotropic.
''' (4) Consider either the h or v component of the 2 filters.
''' Depending on whether sm1 GT sm2 or sm2 GT sm1, we get
''' different halves of the smoothed gradients (or "edges").
''' This difference of smoothed signals looks more like
''' a second derivative of a transition, which we rectify
''' by not allowing the signal to go below zero.  If sm1 LT sm2,
''' the sm2 transition is broader, so the difference between
''' sm1 and sm2 signals is positive on the upper half of
''' the transition.  Likewise, if sm1 GT sm2, the sm1 - sm2
''' signal difference is positive on the lower half of
''' the transition.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp gray or 32 bpp rgb</param>
'''  <param name="sm1h">[in] - "half-widths" of smoothing filter sm1</param>
'''  <param name="sm1v">[in] - "half-widths" of smoothing filter sm1</param>
'''  <param name="sm2h">[in] - "half-widths" of smoothing filter sm2; require sm2 != sm1</param>
'''  <param name="sm2v">[in] - "half-widths" of smoothing filter sm2; require sm2 != sm1</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixHalfEdgeByBandpass(
				ByVal pixs as Pix, 
				ByVal sm1h as Integer, 
				ByVal sm1v as Integer, 
				ByVal sm2h as Integer, 
				ByVal sm2v as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixHalfEdgeByBandpass( pixs.Pointer, sm1h, sm1v, sm2h, sm2v)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\fhmtauto.c"
' SRC\fhmtauto.c (207, 1)
' fhmtautogen()
' fhmtautogen(SELA *, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This function generates all the code for implementing
''' dwa morphological operations using all the sels in the sela.
''' (2) See fhmtautogen1() and fhmtautogen2() for details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in] - </param>
'''  <param name="fileindex">[in] - </param>
'''  <param name="filename">[in][optional] - ; can be null</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function fhmtautogen(
				ByVal sela as Sela, 
				ByVal fileindex as Integer, 
				ByVal filename as String) as Integer

	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fhmtautogen( sela.Pointer, fileindex, filename)

	Return _Result
End Function

' SRC\fhmtauto.c (249, 1)
' fhmtautogen1()
' fhmtautogen1(SELA *, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This function uses hmttemplate1.txt to create a
''' top-level file that contains two functions that carry
''' out the hit-miss transform for any of the sels in
''' the input sela.
''' (2) The fileindex parameter is inserted into the output
''' filename, as described below.
''' (3) If filename == NULL, the output file is fhmtgen.[n].c,
''' where [n] is equal to the 'fileindex' parameter.
''' (4) If filename != NULL, the output file is [filename].[n].c.
''' (5) Each sel must have at least one hit.  A sel with only misses
''' generates code that will abort the operation if it is called.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in] - array</param>
'''  <param name="fileindex">[in] - </param>
'''  <param name="filename">[in][optional] - ; can be null</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function fhmtautogen1(
				ByVal sela as Sela, 
				ByVal fileindex as Integer, 
				ByVal filename as String) as Integer

	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fhmtautogen1( sela.Pointer, fileindex, filename)

	Return _Result
End Function

' SRC\fhmtauto.c (431, 1)
' fhmtautogen2()
' fhmtautogen2(SELA *, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This function uses hmttemplate2.txt to create a
''' low-level file that contains the low-level functions for
''' implementing the hit-miss transform for every sel
''' in the input sela.
''' (2) The fileindex parameter is inserted into the output
''' filename, as described below.
''' (3) If filename == NULL, the output file is fhmtgenlow.[n].c,
''' where [n] is equal to the %fileindex parameter.
''' (4) If filename != NULL, the output file is [filename]low.[n].c.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in] - array</param>
'''  <param name="fileindex">[in] - </param>
'''  <param name="filename">[in][optional] - ; can be null</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function fhmtautogen2(
				ByVal sela as Sela, 
				ByVal fileindex as Integer, 
				ByVal filename as String) as Integer

	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fhmtautogen2( sela.Pointer, fileindex, filename)

	Return _Result
End Function

#End Region
#Region "SRC\fhmtgen.1.c"
' SRC\fhmtgen.1.c (37, 6)
' pixHMTDwa_1()
' pixHMTDwa_1(PIX *, PIX *, const char *) as PIX *
'''  <summary>
''' Notes
''' (1) This simply adds a 32 pixel border, calls the appropriate
''' pixFHMTGen_(), and removes the border.
''' See notes below for that function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - usual 3 choices null, == pixs, != pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>pixd</returns>
Public Shared Function pixHMTDwa_1(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByRef selname as String) as Pix

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (selname) then Throw New ArgumentNullException  ("selname cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixHMTDwa_1( pixd.Pointer, pixs.Pointer, selname)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\fhmtgen.1.c (38, 6)
' pixFHMTGen_1()
' pixFHMTGen_1(PIX *, PIX *, const char *) as PIX *
'''  <summary>
''' Notes
''' (1) This is a dwa implementation of the hit-miss transform
''' on pixs by the sel.
''' (2) The sel must be limited in size to not more than 31 pixels
''' about the origin.  It must have at least one hit, and it
''' can have any number of misses.
''' (3) This handles all required setting of the border pixels
''' before erosion and dilation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - usual 3 choices null, == pixs, != pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>pixd</returns>
Public Shared Function pixFHMTGen_1(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByRef selname as String) as Pix

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (selname) then Throw New ArgumentNullException  ("selname cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFHMTGen_1( pixd.Pointer, pixs.Pointer, selname)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\fhmtgen.1.c (39, 9)
' 
' fhmtgen_low_1(l_uint32 *, l_int32, l_int32, l_int32, l_uint32 *, l_int32, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function fhmtgen_low_1(
				ByRef datad as Object, 
				ByRef w as Integer, 
				ByRef h as Integer, 
				ByRef wpld as Integer, 
				ByRef datas as Object, 
				ByRef wpls as Integer, 
				ByRef index as Integer) as Integer

	If IsNothing (datad) then Throw New ArgumentNullException  ("datad cannot be Nothing")
	If IsNothing (datas) then Throw New ArgumentNullException  ("datas cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fhmtgen_low_1( datad, w, h, wpld, datas, wpls, index)

	Return _Result
End Function

#End Region
#Region "SRC\finditalic.c"
' SRC\finditalic.c (110, 1)
' pixItalicWords()
' pixItalicWords(PIX *, BOXA *, PIX *, BOXA **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) You can input the bounding boxes for the words in one of
''' two forms as bounding boxes (%boxaw) or as a word mask with
''' the word bounding boxes filled (%pixw).  For example,
''' to compute %pixw, you can use pixWordMaskByDilation().
''' (2) Alternatively, you can set both of these inputs to NULL,
''' in which case the word mask is generated here.  This is
''' done by dilating and closing the input image to connect
''' letters within a word, while leaving the words separated.
''' The parameters are chosen under the assumption that the
''' input is 10 to 12 pt text, scanned at about 300 ppi.
''' (3) sel_ital1 and sel_ital2 detect the right edges that are
''' nearly vertical, at approximately the angle of italic
''' strokes.  We use the right edge to avoid getting seeds
''' from lower-case 'y'.  The typical italic slant has a smaller
''' angle with the vertical than the 'W', so in most cases we
''' will not trigger on the slanted lines in the 'W'.
''' (4) Note that sel_ital2 is shorter than sel_ital1.  It is
''' more appropriate for a typical font scanned at 200 ppi.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="boxaw">[in][optional] - word bounding boxes; can be NULL</param>
'''  <param name="pixw">[in][optional] - word box mask; can be NULL</param>
'''  <param name="pboxa">[out] - boxa of italic words</param>
'''  <param name="debugflag">[in] - 1 for debug output; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixItalicWords(
				ByVal pixs as Pix, 
				ByVal boxaw as Boxa, 
				ByVal pixw as Pix, 
				ByRef pboxa as Boxa, 
				ByVal debugflag as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim boxawPTR As IntPtr = IntPtr.Zero : If Not IsNothing(boxaw) Then boxawPTR = boxaw.Pointer
	Dim pixwPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixw) Then pixwPTR = pixw.Pointer
	Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixItalicWords( pixs.Pointer, boxawPTR, pixwPTR, pboxaPTR, debugflag)
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)

	Return _Result
End Function

#End Region
#Region "SRC\flipdetect.c"
' SRC\flipdetect.c (242, 1)
' pixOrientCorrect()
' pixOrientCorrect(PIX *, l_float32, l_float32, l_float32 *, l_float32 *, l_int32 *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Simple top-level function to detect if Roman text is in
''' reading orientation, and to rotate the image accordingly if not.
''' (2) Returns a copy if no rotation is needed.
''' (3) See notes for pixOrientDetect() and pixOrientDecision().
''' Use 0.0 for default values for %minupconf and %minratio
''' (4) Optional output of intermediate confidence results and
''' the rotation performed on pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, deskewed, English text, 150 - 300 ppi</param>
'''  <param name="minupconf">[in] - minimum value for which a decision can be made</param>
'''  <param name="minratio">[in] - minimum conf ratio required for a decision</param>
'''  <param name="pupconf">[out][optional] - ; use NULL to skip</param>
'''  <param name="pleftconf">[out][optional] - ; use NULL to skip</param>
'''  <param name="protation">[out][optional] - ; use NULL to skip</param>
'''  <param name="debug">[in] - 1 for debug output; 0 otherwise</param>
'''   <returns>pixd  may be rotated by 90, 180 or 270; null on error</returns>
Public Shared Function pixOrientCorrect(
				ByVal pixs as Pix, 
				ByVal minupconf as Single, 
				ByVal minratio as Single, 
				ByRef pupconf as Single(), 
				ByRef pleftconf as Single(), 
				ByRef protation as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (minupconf) then Throw New ArgumentNullException  ("minupconf cannot be Nothing")
	If IsNothing (minratio) then Throw New ArgumentNullException  ("minratio cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOrientCorrect( pixs.Pointer, minupconf, minratio, pupconf, pleftconf, protation, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\flipdetect.c (370, 1)
' pixOrientDetect()
' pixOrientDetect(PIX *, l_float32 *, l_float32 *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) See "Measuring document image skew and orientation"
''' Dan S. Bloomberg, Gary E. Kopec and Lakshmi Dasari
''' IST/SPIE EI'95, Conference 2422 Document Recognition II
''' pp 302-316, Feb 6-7, 1995, San Jose, CA
''' (2) upconf is the normalized difference between up ascenders
''' and down ascenders.  The image is analyzed without rotation
''' for being rightside-up or upside-down.  Set upconf to null
''' to skip this operation.
''' (3) leftconf is the normalized difference between up ascenders
''' and down ascenders in the image after it has been
''' rotated 90 degrees clockwise.  With that rotation, ascenders
''' projecting to the left in the source image will project up
''' in the rotated image.  We compute this by rotating 90 degrees
''' clockwise and testing for up and down ascenders.  Set
''' leftconf to null to skip this operation.
''' (4) Note that upconf and leftconf are not linear measures of
''' confidence, e.g., in a range between 0 and 100.  They
''' measure how far you are out on the tail of a (presumably)
''' normal distribution.  For example, a confidence of 10 means
''' that it is nearly certain that the difference did not
''' happen at random.  However, these values must be interpreted
''' cautiously, taking into consideration the estimated prior
''' for a particular orientation or mirror flip.   The up-down
''' signal is very strong if applied to text with ascenders
''' up and down, and relatively weak for text at 90 degrees,
''' but even at 90 degrees, the difference can look significant.
''' For example, suppose the ascenders are oriented horizontally,
''' but the test is done vertically.  Then upconf can
''' be LT -MIN_CONF_FOR_UP_DOWN, suggesting the text may be
''' upside-down.  However, if instead the test were done
''' horizontally, leftconf will be very much larger
''' (in absolute value), giving the correct orientation.
''' (5) If you compute both upconf and leftconf, and there is
''' sufficient signal, the following table determines the
''' cw angle necessary to rotate pixs so that the text is
''' rightside-up
''' 0 deg   upconf GTGT 1, abs(upconf) GTGT abs(leftconf)
''' 90 deg  leftconf GTGT 1,  abs(leftconf) GTGT abs(upconf)
''' 180 deg upconf LTLT -1,   abs(upconf) GTGT abs(leftconf)
''' 270 deg leftconf LTLT -1, abs(leftconf) GTGT abs(upconf)
''' (6) One should probably not interpret the direction unless
''' there are a sufficient number of counts for both orientations,
''' in which case neither upconf nor leftconf will be 0.0.
''' (7) Uses rasterop implementation of HMT.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, deskewed, English text, 150 - 300 ppi</param>
'''  <param name="pupconf">[out][optional] - ; may be NULL</param>
'''  <param name="pleftconf">[out][optional] - ; may be NULL</param>
'''  <param name="mincount">[in] - min number of up + down; use 0 for default</param>
'''  <param name="debug">[in] - 1 for debug output; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixOrientDetect(
				ByVal pixs as Pix, 
				ByRef pupconf as Single(), 
				ByRef pleftconf as Single(), 
				ByVal mincount as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixOrientDetect( pixs.Pointer, pupconf, pleftconf, mincount, debug)

	Return _Result
End Function

' SRC\flipdetect.c (431, 1)
' makeOrientDecision()
' makeOrientDecision(l_float32, l_float32, l_float32, l_float32, l_int32 *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This can be run after pixOrientDetect()
''' (2) Both upconf and leftconf must be nonzero; otherwise the
''' orientation cannot be determined.
''' (3) The abs values of the input confidences are compared to
''' minupconf.
''' (4) The abs value of the largest of (upconf/leftconf) and
''' (leftconf/upconf) is compared with minratio.
''' (5) Input 0.0 for the default values for minupconf and minratio.
''' (6) The return value of orient is interpreted thus
''' L_TEXT_ORIENT_UNKNOWN  not enough evidence to determine
''' L_TEXT_ORIENT_UP text rightside-up
''' L_TEXT_ORIENT_LEFT  landscape, text up facing left
''' L_TEXT_ORIENT_DOWN  text upside-down
''' L_TEXT_ORIENT_RIGHT landscape, text up facing right
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="upconf">[in] - nonzero</param>
'''  <param name="leftconf">[in] - nonzero</param>
'''  <param name="minupconf">[in] - minimum value for which a decision can be made</param>
'''  <param name="minratio">[in] - minimum conf ratio required for a decision</param>
'''  <param name="porient">[out] - text orientation enum {0,1,2,3,4}</param>
'''  <param name="debug">[in] - 1 for debug output; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function makeOrientDecision(
				ByVal upconf as Single, 
				ByVal leftconf as Single, 
				ByVal minupconf as Single, 
				ByVal minratio as Single, 
				ByRef porient as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (upconf) then Throw New ArgumentNullException  ("upconf cannot be Nothing")
	If IsNothing (leftconf) then Throw New ArgumentNullException  ("leftconf cannot be Nothing")
	If IsNothing (minupconf) then Throw New ArgumentNullException  ("minupconf cannot be Nothing")
	If IsNothing (minratio) then Throw New ArgumentNullException  ("minratio cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.makeOrientDecision( upconf, leftconf, minupconf, minratio, porient, debug)

	Return _Result
End Function

' SRC\flipdetect.c (510, 1)
' pixUpDownDetect()
' pixUpDownDetect(PIX *, l_float32 *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Special (typical, slightly faster) case, where the pixels
''' identified through the HMT (hit-miss transform) are not
''' clipped by a truncated word mask pixm.  See pixOrientDetect()
''' and pixUpDownDetectGeneral() for details.
''' (2) The returned confidence is the normalized difference
''' between the number of detected up and down ascenders,
''' assuming that the text is either rightside-up or upside-down
''' and not rotated at a 90 degree angle.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, deskewed, English text, 150 - 300 ppi</param>
'''  <param name="pconf">[out] - confidence that text is rightside-up</param>
'''  <param name="mincount">[in] - min number of up + down; use 0 for default</param>
'''  <param name="debug">[in] - 1 for debug output; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixUpDownDetect(
				ByVal pixs as Pix, 
				ByRef pconf as Single(), 
				ByVal mincount as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixUpDownDetect( pixs.Pointer, pconf, mincount, debug)

	Return _Result
End Function

' SRC\flipdetect.c (558, 1)
' pixUpDownDetectGeneral()
' pixUpDownDetectGeneral(PIX *, l_float32 *, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) See pixOrientDetect() for other details.
''' (2) %conf is the normalized difference between the number of
''' detected up and down ascenders, assuming that the text
''' is either rightside-up or upside-down and not rotated
''' at a 90 degree angle.
''' (3) The typical mode of operation is %npixels == 0.
''' If %npixels GT 0, this removes HMT matches at the
''' beginning and ending of "words."  This is useful for
''' pages that may have mostly digits, because if npixels == 0,
''' leading "1" and "3" digits can register as having
''' ascenders or descenders, and "7" digits can match descenders.
''' Consequently, a page image of only digits may register
''' as being upside-down.
''' (4) We want to count the number of instances found using the HMT.
''' An expensive way to do this would be to count the
''' number of connected components.  A cheap way is to do a rank
''' reduction cascade that reduces each component to a single
''' pixel, and results (after two or three 2x reductions)
''' in one pixel for each of the original components.
''' After the reduction, you have a much smaller pix over
''' which to count pixels.  We do only 2 reductions, because
''' this function is designed to work for input pix between
''' 150 and 300 ppi, and an 8x reduction on a 150 ppi image
''' is going too far -- components will get merged.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, deskewed, English text, 150 - 300 ppi</param>
'''  <param name="pconf">[out] - confidence that text is rightside-up</param>
'''  <param name="mincount">[in] - min number of up + down; use 0 for default</param>
'''  <param name="npixels">[in] - number of pixels removed from each side of word box</param>
'''  <param name="debug">[in] - 1 for debug output; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixUpDownDetectGeneral(
				ByVal pixs as Pix, 
				ByRef pconf as Single(), 
				ByVal mincount as Integer, 
				ByVal npixels as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixUpDownDetectGeneral( pixs.Pointer, pconf, mincount, npixels, debug)

	Return _Result
End Function

' SRC\flipdetect.c (699, 1)
' pixOrientDetectDwa()
' pixOrientDetectDwa(PIX *, l_float32 *, l_float32 *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Same interface as for pixOrientDetect().  See notes
''' there for usage.
''' (2) Uses auto-gen'd code for the Sels defined at the
''' top of this file, with some renaming of functions.
''' The auto-gen'd code is in fliphmtgen.c, and can
''' be generated by a simple executable; see prog/flipselgen.c.
''' (3) This runs about 2.5 times faster than the pixOrientDetect().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, deskewed, English text</param>
'''  <param name="pupconf">[out][optional] - ; may be NULL</param>
'''  <param name="pleftconf">[out][optional] - ; may be NULL</param>
'''  <param name="mincount">[in] - min number of up + down; use 0 for default</param>
'''  <param name="debug">[in] - 1 for debug output; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixOrientDetectDwa(
				ByVal pixs as Pix, 
				ByRef pupconf as Single(), 
				ByRef pleftconf as Single(), 
				ByVal mincount as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixOrientDetectDwa( pixs.Pointer, pupconf, pleftconf, mincount, debug)

	Return _Result
End Function

' SRC\flipdetect.c (752, 1)
' pixUpDownDetectDwa()
' pixUpDownDetectDwa(PIX *, l_float32 *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Faster (DWA) version of pixUpDownDetect().
''' (2) This is a special case (but typical and slightly faster) of
''' pixUpDownDetectGeneralDwa(), where the pixels identified
''' through the HMT (hit-miss transform) are not clipped by
''' a truncated word mask pixm.  See pixUpDownDetectGeneral()
''' for usage and other details.
''' (3) The returned confidence is the normalized difference
''' between the number of detected up and down ascenders,
''' assuming that the text is either rightside-up or upside-down
''' and not rotated at a 90 degree angle.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, deskewed, English text, 150 - 300 ppi</param>
'''  <param name="pconf">[out] - confidence that text is rightside-up</param>
'''  <param name="mincount">[in] - min number of up + down; use 0 for default</param>
'''  <param name="debug">[in] - 1 for debug output; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixUpDownDetectDwa(
				ByVal pixs as Pix, 
				ByRef pconf as Single(), 
				ByVal mincount as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixUpDownDetectDwa( pixs.Pointer, pconf, mincount, debug)

	Return _Result
End Function

' SRC\flipdetect.c (777, 1)
' pixUpDownDetectGeneralDwa()
' pixUpDownDetectGeneralDwa(PIX *, l_float32 *, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) See the notes in pixUpDownDetectGeneral() for usage.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, deskewed, English text</param>
'''  <param name="pconf">[out] - confidence that text is rightside-up</param>
'''  <param name="mincount">[in] - min number of up + down; use 0 for default</param>
'''  <param name="npixels">[in] - number of pixels removed from each side of word box</param>
'''  <param name="debug">[in] - 1 for debug output; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixUpDownDetectGeneralDwa(
				ByVal pixs as Pix, 
				ByRef pconf as Single(), 
				ByVal mincount as Integer, 
				ByVal npixels as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixUpDownDetectGeneralDwa( pixs.Pointer, pconf, mincount, npixels, debug)

	Return _Result
End Function

' SRC\flipdetect.c (934, 1)
' pixMirrorDetect()
' pixMirrorDetect(PIX *, l_float32 *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) For this test, it is necessary that the text is horizontally
''' oriented, with ascenders going up.
''' (2) conf is the normalized difference between the number of
''' right and left facing characters with ascenders.
''' Left-facing are {d}; right-facing are {b, h, k}.
''' At least that was the expectation.  In practice, we can
''' really just say that it is the normalized difference in
''' hits using two specific hit-miss filters, textsel1 and textsel2,
''' after the image has been suitably pre-filtered so that
''' these filters are effective.  See (4) for what's really happening.
''' (3) A large positive conf value indicates normal text, whereas
''' a large negative conf value means the page is mirror reversed.
''' (4) The implementation is a bit tricky.  The general idea is
''' to fill the x-height part of characters, but not the space
''' between them, before doing the HMT.  This is done by
''' finding pixels added using two different operations -- a
''' horizontal close and a vertical dilation -- and adding
''' the intersection of these sets to the original.  It turns
''' out that the original intuition about the signal was largely
''' in error much of the signal for right-facing characters
''' comes from the lower part of common x-height characters, like
''' the e and c, that remain open after these operations.
''' So it's important that the operations to close the x-height
''' parts of the characters are purposely weakened sufficiently
''' to allow these characters to remain open.  The wonders
''' of morphology!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, deskewed, English text</param>
'''  <param name="pconf">[out] - confidence that text is not LR mirror reversed</param>
'''  <param name="mincount">[in] - min number of left + right; use 0 for default</param>
'''  <param name="debug">[in] - 1 for debug output; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixMirrorDetect(
				ByVal pixs as Pix, 
				ByRef pconf as Single(), 
				ByVal mincount as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixMirrorDetect( pixs.Pointer, pconf, mincount, debug)

	Return _Result
End Function

' SRC\flipdetect.c (1025, 1)
' pixMirrorDetectDwa()
' pixMirrorDetectDwa(PIX *, l_float32 *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) We assume the text is horizontally oriented, with
''' ascenders going up.
''' (2) See notes in pixMirrorDetect().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, deskewed, English text</param>
'''  <param name="pconf">[out] - confidence that text is not LR mirror reversed</param>
'''  <param name="mincount">[in] - min number of left + right; use 0 for default</param>
'''  <param name="debug">[in] - 1 for debug output; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixMirrorDetectDwa(
				ByVal pixs as Pix, 
				ByRef pconf as Single(), 
				ByVal mincount as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixMirrorDetectDwa( pixs.Pointer, pconf, mincount, debug)

	Return _Result
End Function

#End Region
#Region "SRC\fliphmtgen.c"
' SRC\fliphmtgen.c (77, 1)
' 
' pixFlipFHMTGen(PIX *, PIX *, const char *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixFlipFHMTGen(
				ByRef pixd as Pix, 
				ByRef pixs as Pix, 
				ByRef selname as String) as Pix

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (selname) then Throw New ArgumentNullException  ("selname cannot be Nothing")

Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer
Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFlipFHMTGen( pixd.Pointer, pixs.Pointer, selname)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\fmorphauto.c"
' SRC\fmorphauto.c (243, 1)
' fmorphautogen()
' fmorphautogen(SELA *, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This function generates all the code for implementing
''' dwa morphological operations using all the sels in the sela.
''' (2) See fmorphautogen1() and fmorphautogen2() for details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in] - </param>
'''  <param name="fileindex">[in] - </param>
'''  <param name="filename">[in][optional] - ; can be null</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function fmorphautogen(
				ByVal sela as Sela, 
				ByVal fileindex as Integer, 
				ByVal filename as String) as Integer

	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fmorphautogen( sela.Pointer, fileindex, filename)

	Return _Result
End Function

' SRC\fmorphauto.c (283, 1)
' fmorphautogen1()
' fmorphautogen1(SELA *, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This function uses morphtemplate1.txt to create a
''' top-level file that contains two functions.  These
''' functions will carry out dilation, erosion,
''' opening or closing for any of the sels in the input sela.
''' (2) The fileindex parameter is inserted into the output
''' filename, as described below.
''' (3) If filename == NULL, the output file is fmorphgen.[n].c,
''' where [n] is equal to the %fileindex parameter.
''' (4) If filename != NULL, the output file is [%filename].[n].c.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in] - </param>
'''  <param name="fileindex">[in] - </param>
'''  <param name="filename">[in][optional] - ; can be null</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function fmorphautogen1(
				ByVal sela as Sela, 
				ByVal fileindex as Integer, 
				ByVal filename as String) as Integer

	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fmorphautogen1( sela.Pointer, fileindex, filename)

	Return _Result
End Function

' SRC\fmorphauto.c (490, 1)
' 
' fmorphautogen2(SELA *, l_int32, const char *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function fmorphautogen2(
				ByRef sela as Sela, 
				ByRef fileindex as Integer, 
				ByRef filename as String) as Integer

	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")
	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")

Dim selaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sela) Then selaPTR = sela.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.fmorphautogen2( sela.Pointer, fileindex, filename)

	Return _Result
End Function

#End Region
#Region "SRC\fmorphgen.1.c"
' SRC\fmorphgen.1.c (37, 6)
' pixMorphDwa_1()
' pixMorphDwa_1(PIX *, PIX *, l_int32, char *) as PIX *
'''  <summary>
''' Notes
''' (1) This simply adds a border, calls the appropriate
''' pixFMorphopGen_(), and removes the border.
''' See the notes for that function.
''' (2) The size of the border depends on the operation
''' and the boundary conditions.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - usual 3 choices null, == pixs, != pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="operation">[in] - L_MORPH_DILATE, L_MORPH_ERODE, L_MORPH_OPEN, L_MORPH_CLOSE</param>
'''   <returns>pixd</returns>
Public Shared Function pixMorphDwa_1(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal operation as Enumerations.L_MORPH, 
				ByRef selname as String) as Pix

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (selname) then Throw New ArgumentNullException  ("selname cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMorphDwa_1( pixd.Pointer, pixs.Pointer, operation, selname)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\fmorphgen.1.c (38, 6)
' pixFMorphopGen_1()
' pixFMorphopGen_1(PIX *, PIX *, l_int32, char *) as PIX *
'''  <summary>
''' Notes
''' (1) This is a dwa operation, and the Sels must be limited in
''' size to not more than 31 pixels about the origin.
''' (2) A border of appropriate size (32 pixels, or 64 pixels
''' for safe closing with asymmetric b.c.) must be added before
''' this function is called.
''' (3) This handles all required setting of the border pixels
''' before erosion and dilation.
''' (4) The closing operation is safe; no pixels can be removed
''' near the boundary.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - usual 3 choices null, == pixs, != pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="operation">[in] - L_MORPH_DILATE, L_MORPH_ERODE, L_MORPH_OPEN, L_MORPH_CLOSE</param>
'''   <returns>pixd</returns>
Public Shared Function pixFMorphopGen_1(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal operation as Enumerations.L_MORPH, 
				ByRef selname as String) as Pix

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (selname) then Throw New ArgumentNullException  ("selname cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFMorphopGen_1( pixd.Pointer, pixs.Pointer, operation, selname)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\fmorphgen.1.c (39, 9)
' 
' fmorphopgen_low_1(l_uint32 *, l_int32, l_int32, l_int32, l_uint32 *, l_int32, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function fmorphopgen_low_1(
				ByRef datad as Object, 
				ByRef w as Integer, 
				ByRef h as Integer, 
				ByRef wpld as Integer, 
				ByRef datas as Object, 
				ByRef wpls as Integer, 
				ByRef index as Integer) as Integer

	If IsNothing (datad) then Throw New ArgumentNullException  ("datad cannot be Nothing")
	If IsNothing (datas) then Throw New ArgumentNullException  ("datas cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fmorphopgen_low_1( datad, w, h, wpld, datas, wpls, index)

	Return _Result
End Function

#End Region
#Region "SRC\fpix1.c"
' SRC\fpix1.c (149, 1)
' fpixCreate()
' fpixCreate(l_int32, l_int32) as FPIX *
'''  <summary>
''' Notes
''' (1) Makes a FPix of specified size, with the data array
''' allocated and initialized to 0.
''' (2) The number of pixels must be less than 2^29.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="width">[in] - </param>
'''  <param name="height">[in] - </param>
'''   <returns>fpixd   with data allocated and initialized to 0, or NULL on error</returns>
Public Shared Function fpixCreate(
				ByVal width as Integer, 
				ByVal height as Integer) as FPix



	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixCreate( width, height)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix1.c (199, 1)
' fpixCreateTemplate()
' fpixCreateTemplate(FPIX *) as FPIX *
'''  <summary>
''' Notes
''' (1) Makes a FPix of the same size as the input FPix, with the
''' data array allocated and initialized to 0.
''' (2) Copies the resolution.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - </param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixCreateTemplate(
				ByVal fpixs as FPix) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixCreateTemplate( fpixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix1.c (229, 1)
' fpixClone()
' fpixClone(FPIX *) as FPIX *
'''  <summary>
''' Notes
''' (1) See pixClone() for definition and usage.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''   <returns>same fpix ptr, or NULL on error</returns>
Public Shared Function fpixClone(
				ByVal fpix as FPix) as FPix

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixClone( fpix.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix1.c (272, 1)
' fpixCopy()
' fpixCopy(FPIX *, FPIX *) as FPIX *
'''  <summary>
''' Notes
''' (1) There are three cases
''' (a) fpixd == null  (makes a new fpix; refcount = 1)
''' (b) fpixd == fpixs  (no-op)
''' (c) fpixd != fpixs  (data copy; no change in refcount)
''' If the refcount of fpixd GT 1, case (c) will side-effect
''' these handles.
''' (2) The general pattern of use is
''' fpixd = fpixCopy(fpixd, fpixs);
''' This will work for all three cases.
''' For clarity when the case is known, you can use
''' (a) fpixd = fpixCopy(NULL, fpixs);
''' (c) fpixCopy(fpixd, fpixs);
''' (3) For case (c), we check if fpixs and fpixd are the same size.
''' If so, the data is copied directly.
''' Otherwise, the data is reallocated to the correct size
''' and the copy proceeds.  The refcount of fpixd is unchanged.
''' (4) This operation, like all others that may involve a pre-existing
''' fpixd, will side-effect any existing clones of fpixd.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixd">[in][optional] - ; can be null, or equal to fpixs, or different from fpixs</param>
'''  <param name="fpixs">[in] - </param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixCopy(
				ByVal fpixd as FPix, 
				ByVal fpixs as FPix) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")

	Dim fpixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fpixd) Then fpixdPTR = fpixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixCopy( fpixdPTR, fpixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix1.c (326, 1)
' fpixResizeImageData()
' fpixResizeImageData(FPIX *, FPIX *) as l_ok
'''  <summary>
''' Notes
''' (1) If the data sizes differ, this destroys the existing
''' data in fpixd and allocates a new, uninitialized, data array
''' of the same size as the data in fpixs.  Otherwise, this
''' doesn't do anything.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixd">[in] - </param>
'''  <param name="fpixs">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixResizeImageData(
				ByVal fpixd as FPix, 
				ByVal fpixs as FPix) as Integer

	If IsNothing (fpixd) then Throw New ArgumentNullException  ("fpixd cannot be Nothing")
	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixResizeImageData( fpixd.Pointer, fpixs.Pointer)

	Return _Result
End Function

' SRC\fpix1.c (369, 1)
' fpixDestroy()
' fpixDestroy(FPIX **) as void
'''  <summary>
''' Notes
''' (1) Decrements the ref count and, if 0, destroys the fpix.
''' (2) Always nulls the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pfpix">[in,out] - will be nulled</param>
Public Shared Sub fpixDestroy(
				ByRef pfpix as FPix)


	Dim pfpixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pfpix) Then pfpixPTR = pfpix.Pointer

	LeptonicaSharp.Natives.fpixDestroy( pfpixPTR)
	if pfpixPTR <> IntPtr.Zero then pfpix = new FPix(pfpixPTR)

End Sub

' SRC\fpix1.c (408, 1)
' fpixGetDimensions()
' fpixGetDimensions(FPIX *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''  <param name="pw">[out][optional] - each can be null</param>
'''  <param name="ph">[out][optional] - each can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixGetDimensions(
				ByVal fpix as FPix, 
				ByRef pw as Integer, 
				ByRef ph as Integer) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixGetDimensions( fpix.Pointer, pw, ph)

	Return _Result
End Function

' SRC\fpix1.c (434, 1)
' fpixSetDimensions()
' fpixSetDimensions(FPIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''  <param name="w">[in] - </param>
'''  <param name="h">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixSetDimensions(
				ByVal fpix as FPix, 
				ByVal w as Integer, 
				ByVal h as Integer) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixSetDimensions( fpix.Pointer, w, h)

	Return _Result
End Function

' SRC\fpix1.c (455, 1)
' fpixGetWpl()
' fpixGetWpl(FPIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''   <returns>wpl, or UNDEF on error</returns>
Public Shared Function fpixGetWpl(
				ByVal fpix as FPix) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixGetWpl( fpix.Pointer)

	Return _Result
End Function

' SRC\fpix1.c (473, 1)
' fpixSetWpl()
' fpixSetWpl(FPIX *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''  <param name="wpl">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixSetWpl(
				ByVal fpix as FPix, 
				ByVal wpl as Integer) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixSetWpl( fpix.Pointer, wpl)

	Return _Result
End Function

' SRC\fpix1.c (493, 1)
' fpixGetRefcount()
' fpixGetRefcount(FPIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''   <returns>refcount, or UNDEF on error</returns>
Public Shared Function fpixGetRefcount(
				ByVal fpix as FPix) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixGetRefcount( fpix.Pointer)

	Return _Result
End Function

' SRC\fpix1.c (511, 1)
' fpixChangeRefcount()
' fpixChangeRefcount(FPIX *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''  <param name="delta">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixChangeRefcount(
				ByVal fpix as FPix, 
				ByVal delta as Integer) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixChangeRefcount( fpix.Pointer, delta)

	Return _Result
End Function

' SRC\fpix1.c (532, 1)
' fpixGetResolution()
' fpixGetResolution(FPIX *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''  <param name="pxres">[out][optional] - x and y resolution</param>
'''  <param name="pyres">[out][optional] - x and y resolution</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixGetResolution(
				ByVal fpix as FPix, 
				ByRef pxres as Integer, 
				ByRef pyres as Integer) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixGetResolution( fpix.Pointer, pxres, pyres)

	Return _Result
End Function

' SRC\fpix1.c (554, 1)
' fpixSetResolution()
' fpixSetResolution(FPIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''  <param name="xres">[in] - x and y resolution</param>
'''  <param name="yres">[in] - x and y resolution</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixSetResolution(
				ByVal fpix as FPix, 
				ByVal xres as Integer, 
				ByVal yres as Integer) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixSetResolution( fpix.Pointer, xres, yres)

	Return _Result
End Function

' SRC\fpix1.c (576, 1)
' fpixCopyResolution()
' fpixCopyResolution(FPIX *, FPIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixd">[in] - </param>
'''  <param name="fpixs">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixCopyResolution(
				ByVal fpixd as FPix, 
				ByVal fpixs as FPix) as Integer

	If IsNothing (fpixd) then Throw New ArgumentNullException  ("fpixd cannot be Nothing")
	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixCopyResolution( fpixd.Pointer, fpixs.Pointer)

	Return _Result
End Function

' SRC\fpix1.c (598, 1)
' fpixGetData()
' fpixGetData(FPIX *) as l_float32 *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''   <returns>ptr FPixdata, or NULL on error</returns>
Public Shared Function fpixGetData(
				ByVal fpix as FPix) as Single()

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as Single() = LeptonicaSharp.Natives.fpixGetData( fpix.Pointer)

	Return _Result
End Function

' SRC\fpix1.c (616, 1)
' fpixSetData()
' fpixSetData(FPIX *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''  <param name="data">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixSetData(
				ByVal fpix as FPix, 
				ByVal data as Single()) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")
	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixSetData( fpix.Pointer, data)

	Return _Result
End Function

' SRC\fpix1.c (638, 1)
' fpixGetPixel()
' fpixGetPixel(FPIX *, l_int32, l_int32, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''  <param name="x">[in] - ,y pixel coords</param>
'''  <param name="pval">[out] - pixel value</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function fpixGetPixel(
				ByVal fpix as FPix, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByRef pval as Single()) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixGetPixel( fpix.Pointer, x, y, pval)

	Return _Result
End Function

' SRC\fpix1.c (673, 1)
' fpixSetPixel()
' fpixSetPixel(FPIX *, l_int32, l_int32, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''  <param name="x">[in] - ,y pixel coords</param>
'''  <param name="val">[in] - pixel value</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function fpixSetPixel(
				ByVal fpix as FPix, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByVal val as Single) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixSetPixel( fpix.Pointer, x, y, val)

	Return _Result
End Function

' SRC\fpix1.c (706, 1)
' fpixaCreate()
' fpixaCreate(l_int32) as FPIXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - initial number of ptrs</param>
'''   <returns>fpixa, or NULL on error</returns>
Public Shared Function fpixaCreate(
				ByVal n as Integer) as FPixa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixaCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPixa(_Result)
End Function

' SRC\fpix1.c (746, 1)
' fpixaCopy()
' fpixaCopy(FPIXA *, l_int32) as FPIXA *
'''  <summary>
''' Notes
''' copyflag may be one of
''' ~ L_COPY makes a new fpixa and copies each fpix
''' ~ L_CLONE gives a new ref-counted handle to the input fpixa
''' ~ L_COPY_CLONE makes a new fpixa with clones of all fpix
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixa">[in] - </param>
'''  <param name="copyflag">[in] - L_COPY, L_CLODE or L_COPY_CLONE</param>
'''   <returns>new fpixa, or NULL on error</returns>
Public Shared Function fpixaCopy(
				ByVal fpixa as FPixa, 
				ByVal copyflag as Integer) as FPixa

	If IsNothing (fpixa) then Throw New ArgumentNullException  ("fpixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixaCopy( fpixa.Pointer, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPixa(_Result)
End Function

' SRC\fpix1.c (793, 1)
' fpixaDestroy()
' fpixaDestroy(FPIXA **) as void
'''  <summary>
''' Notes
''' (1) Decrements the ref count and, if 0, destroys the fpixa.
''' (2) Always nulls the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pfpixa">[in,out] - to be nulled</param>
Public Shared Sub fpixaDestroy(
				ByRef pfpixa as FPixa)


	Dim pfpixaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pfpixa) Then pfpixaPTR = pfpixa.Pointer

	LeptonicaSharp.Natives.fpixaDestroy( pfpixaPTR)
	if pfpixaPTR <> IntPtr.Zero then pfpixa = new FPixa(pfpixaPTR)

End Sub

' SRC\fpix1.c (834, 1)
' fpixaAddFPix()
' fpixaAddFPix(FPIXA *, FPIX *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixa">[in] - </param>
'''  <param name="fpix">[in] - to be added</param>
'''  <param name="copyflag">[in] - L_INSERT, L_COPY, L_CLONE</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function fpixaAddFPix(
				ByVal fpixa as FPixa, 
				ByVal fpix as FPix, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (fpixa) then Throw New ArgumentNullException  ("fpixa cannot be Nothing")
	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixaAddFPix( fpixa.Pointer, fpix.Pointer, copyflag)

	Return _Result
End Function

' SRC\fpix1.c (934, 1)
' fpixaGetCount()
' fpixaGetCount(FPIXA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixa">[in] - </param>
'''   <returns>count, or 0 if no pixa</returns>
Public Shared Function fpixaGetCount(
				ByVal fpixa as FPixa) as Integer

	If IsNothing (fpixa) then Throw New ArgumentNullException  ("fpixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixaGetCount( fpixa.Pointer)

	Return _Result
End Function

' SRC\fpix1.c (953, 1)
' fpixaChangeRefcount()
' fpixaChangeRefcount(FPIXA *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixa">[in] - </param>
'''  <param name="delta">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixaChangeRefcount(
				ByVal fpixa as FPixa, 
				ByVal delta as Integer) as Integer

	If IsNothing (fpixa) then Throw New ArgumentNullException  ("fpixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixaChangeRefcount( fpixa.Pointer, delta)

	Return _Result
End Function

' SRC\fpix1.c (975, 1)
' fpixaGetFPix()
' fpixaGetFPix(FPIXA *, l_int32, l_int32) as FPIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixa">[in] - </param>
'''  <param name="index">[in] - to the index-th fpix</param>
'''  <param name="accesstype">[in] - L_COPY or L_CLONE</param>
'''   <returns>fpix, or NULL on error</returns>
Public Shared Function fpixaGetFPix(
				ByVal fpixa as FPixa, 
				ByVal index as Integer, 
				ByVal accesstype as Enumerations.L_access_storage) as FPix

	If IsNothing (fpixa) then Throw New ArgumentNullException  ("fpixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixaGetFPix( fpixa.Pointer, index, accesstype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix1.c (1004, 1)
' fpixaGetFPixDimensions()
' fpixaGetFPixDimensions(FPIXA *, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixa">[in] - </param>
'''  <param name="index">[in] - to the index-th box</param>
'''  <param name="pw">[out][optional] - each can be null</param>
'''  <param name="ph">[out][optional] - each can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixaGetFPixDimensions(
				ByVal fpixa as FPixa, 
				ByVal index as Integer, 
				ByRef pw as Integer, 
				ByRef ph as Integer) as Integer

	If IsNothing (fpixa) then Throw New ArgumentNullException  ("fpixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixaGetFPixDimensions( fpixa.Pointer, index, pw, ph)

	Return _Result
End Function

' SRC\fpix1.c (1038, 1)
' fpixaGetData()
' fpixaGetData(FPIXA *, l_int32) as l_float32 *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixa">[in] - </param>
'''  <param name="index">[in] - into fpixa array</param>
'''   <returns>data not a copy, or NULL on error</returns>
Public Shared Function fpixaGetData(
				ByVal fpixa as FPixa, 
				ByVal index as Integer) as Single()

	If IsNothing (fpixa) then Throw New ArgumentNullException  ("fpixa cannot be Nothing")


	Dim _Result as Single() = LeptonicaSharp.Natives.fpixaGetData( fpixa.Pointer, index)

	Return _Result
End Function

' SRC\fpix1.c (1070, 1)
' fpixaGetPixel()
' fpixaGetPixel(FPIXA *, l_int32, l_int32, l_int32, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixa">[in] - </param>
'''  <param name="index">[in] - into fpixa array</param>
'''  <param name="x">[in] - ,y pixel coords</param>
'''  <param name="pval">[out] - pixel value</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function fpixaGetPixel(
				ByVal fpixa as FPixa, 
				ByVal index as Integer, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByRef pval as Single()) as Integer

	If IsNothing (fpixa) then Throw New ArgumentNullException  ("fpixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixaGetPixel( fpixa.Pointer, index, x, y, pval)

	Return _Result
End Function

' SRC\fpix1.c (1107, 1)
' fpixaSetPixel()
' fpixaSetPixel(FPIXA *, l_int32, l_int32, l_int32, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixa">[in] - </param>
'''  <param name="index">[in] - into fpixa array</param>
'''  <param name="x">[in] - ,y pixel coords</param>
'''  <param name="val">[in] - pixel value</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function fpixaSetPixel(
				ByVal fpixa as FPixa, 
				ByVal index as Integer, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByVal val as Single) as Integer

	If IsNothing (fpixa) then Throw New ArgumentNullException  ("fpixa cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixaSetPixel( fpixa.Pointer, index, x, y, val)

	Return _Result
End Function

' SRC\fpix1.c (1148, 1)
' dpixCreate()
' dpixCreate(l_int32, l_int32) as DPIX *
'''  <summary>
''' Notes
''' (1) Makes a DPix of specified size, with the data array
''' allocated and initialized to 0.
''' (2) The number of pixels must be less than 2^28.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="width">[in] - </param>
'''  <param name="height">[in] - </param>
'''   <returns>dpix  with data allocated and initialized to 0, or NULL on error</returns>
Public Shared Function dpixCreate(
				ByVal width as Integer, 
				ByVal height as Integer) as DPix



	Dim _Result as IntPtr = LeptonicaSharp.Natives.dpixCreate( width, height)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new DPix(_Result)
End Function

' SRC\fpix1.c (1198, 1)
' dpixCreateTemplate()
' dpixCreateTemplate(DPIX *) as DPIX *
'''  <summary>
''' Notes
''' (1) Makes a DPix of the same size as the input DPix, with the
''' data array allocated and initialized to 0.
''' (2) Copies the resolution.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpixs">[in] - </param>
'''   <returns>dpixd, or NULL on error</returns>
Public Shared Function dpixCreateTemplate(
				ByVal dpixs as DPix) as DPix

	If IsNothing (dpixs) then Throw New ArgumentNullException  ("dpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dpixCreateTemplate( dpixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new DPix(_Result)
End Function

' SRC\fpix1.c (1227, 1)
' dpixClone()
' dpixClone(DPIX *) as DPIX *
'''  <summary>
''' Notes
''' (1) See pixClone() for definition and usage.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''   <returns>same dpix ptr, or NULL on error</returns>
Public Shared Function dpixClone(
				ByVal dpix as DPix) as DPix

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dpixClone( dpix.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new DPix(_Result)
End Function

' SRC\fpix1.c (1270, 1)
' dpixCopy()
' dpixCopy(DPIX *, DPIX *) as DPIX *
'''  <summary>
''' Notes
''' (1) There are three cases
''' (a) dpixd == null  (makes a new dpix; refcount = 1)
''' (b) dpixd == dpixs  (no-op)
''' (c) dpixd != dpixs  (data copy; no change in refcount)
''' If the refcount of dpixd GT 1, case (c) will side-effect
''' these handles.
''' (2) The general pattern of use is
''' dpixd = dpixCopy(dpixd, dpixs);
''' This will work for all three cases.
''' For clarity when the case is known, you can use
''' (a) dpixd = dpixCopy(NULL, dpixs);
''' (c) dpixCopy(dpixd, dpixs);
''' (3) For case (c), we check if dpixs and dpixd are the same size.
''' If so, the data is copied directly.
''' Otherwise, the data is reallocated to the correct size
''' and the copy proceeds.  The refcount of dpixd is unchanged.
''' (4) This operation, like all others that may involve a pre-existing
''' dpixd, will side-effect any existing clones of dpixd.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpixd">[in][optional] - ; can be null, or equal to dpixs, or different from dpixs</param>
'''  <param name="dpixs">[in] - </param>
'''   <returns>dpixd, or NULL on error</returns>
Public Shared Function dpixCopy(
				ByVal dpixd as DPix, 
				ByVal dpixs as DPix) as DPix

	If IsNothing (dpixs) then Throw New ArgumentNullException  ("dpixs cannot be Nothing")

	Dim dpixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(dpixd) Then dpixdPTR = dpixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.dpixCopy( dpixdPTR, dpixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new DPix(_Result)
End Function

' SRC\fpix1.c (1316, 1)
' dpixResizeImageData()
' dpixResizeImageData(DPIX *, DPIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpixd">[in] - </param>
'''  <param name="dpixs">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dpixResizeImageData(
				ByVal dpixd as DPix, 
				ByVal dpixs as DPix) as Integer

	If IsNothing (dpixd) then Throw New ArgumentNullException  ("dpixd cannot be Nothing")
	If IsNothing (dpixs) then Throw New ArgumentNullException  ("dpixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixResizeImageData( dpixd.Pointer, dpixs.Pointer)

	Return _Result
End Function

' SRC\fpix1.c (1359, 1)
' dpixDestroy()
' dpixDestroy(DPIX **) as void
'''  <summary>
''' Notes
''' (1) Decrements the ref count and, if 0, destroys the dpix.
''' (2) Always nulls the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdpix">[in,out] - will be nulled</param>
Public Shared Sub dpixDestroy(
				ByRef pdpix as DPix)


	Dim pdpixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pdpix) Then pdpixPTR = pdpix.Pointer

	LeptonicaSharp.Natives.dpixDestroy( pdpixPTR)
	if pdpixPTR <> IntPtr.Zero then pdpix = new DPix(pdpixPTR)

End Sub

' SRC\fpix1.c (1398, 1)
' dpixGetDimensions()
' dpixGetDimensions(DPIX *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''  <param name="pw">[out][optional] - each can be null</param>
'''  <param name="ph">[out][optional] - each can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dpixGetDimensions(
				ByVal dpix as DPix, 
				ByRef pw as Integer, 
				ByRef ph as Integer) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixGetDimensions( dpix.Pointer, pw, ph)

	Return _Result
End Function

' SRC\fpix1.c (1424, 1)
' dpixSetDimensions()
' dpixSetDimensions(DPIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''  <param name="w">[in] - </param>
'''  <param name="h">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dpixSetDimensions(
				ByVal dpix as DPix, 
				ByVal w as Integer, 
				ByVal h as Integer) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixSetDimensions( dpix.Pointer, w, h)

	Return _Result
End Function

' SRC\fpix1.c (1445, 1)
' dpixGetWpl()
' dpixGetWpl(DPIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''   <returns>wpl, or UNDEF on error</returns>
Public Shared Function dpixGetWpl(
				ByVal dpix as DPix) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixGetWpl( dpix.Pointer)

	Return _Result
End Function

' SRC\fpix1.c (1463, 1)
' dpixSetWpl()
' dpixSetWpl(DPIX *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''  <param name="wpl">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dpixSetWpl(
				ByVal dpix as DPix, 
				ByVal wpl as Integer) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixSetWpl( dpix.Pointer, wpl)

	Return _Result
End Function

' SRC\fpix1.c (1483, 1)
' dpixGetRefcount()
' dpixGetRefcount(DPIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''   <returns>refcount, or UNDEF on error</returns>
Public Shared Function dpixGetRefcount(
				ByVal dpix as DPix) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixGetRefcount( dpix.Pointer)

	Return _Result
End Function

' SRC\fpix1.c (1501, 1)
' dpixChangeRefcount()
' dpixChangeRefcount(DPIX *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''  <param name="delta">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dpixChangeRefcount(
				ByVal dpix as DPix, 
				ByVal delta as Integer) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixChangeRefcount( dpix.Pointer, delta)

	Return _Result
End Function

' SRC\fpix1.c (1522, 1)
' dpixGetResolution()
' dpixGetResolution(DPIX *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''  <param name="pxres">[out][optional] - x and y resolution</param>
'''  <param name="pyres">[out][optional] - x and y resolution</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dpixGetResolution(
				ByVal dpix as DPix, 
				ByRef pxres as Integer, 
				ByRef pyres as Integer) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixGetResolution( dpix.Pointer, pxres, pyres)

	Return _Result
End Function

' SRC\fpix1.c (1544, 1)
' dpixSetResolution()
' dpixSetResolution(DPIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''  <param name="xres">[in] - x and y resolution</param>
'''  <param name="yres">[in] - x and y resolution</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dpixSetResolution(
				ByVal dpix as DPix, 
				ByVal xres as Integer, 
				ByVal yres as Integer) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixSetResolution( dpix.Pointer, xres, yres)

	Return _Result
End Function

' SRC\fpix1.c (1566, 1)
' dpixCopyResolution()
' dpixCopyResolution(DPIX *, DPIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpixd">[in] - </param>
'''  <param name="dpixs">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dpixCopyResolution(
				ByVal dpixd as DPix, 
				ByVal dpixs as DPix) as Integer

	If IsNothing (dpixd) then Throw New ArgumentNullException  ("dpixd cannot be Nothing")
	If IsNothing (dpixs) then Throw New ArgumentNullException  ("dpixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixCopyResolution( dpixd.Pointer, dpixs.Pointer)

	Return _Result
End Function

' SRC\fpix1.c (1588, 1)
' dpixGetData()
' dpixGetData(DPIX *) as l_float64 *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''   <returns>ptr DPixdata, or NULL on error</returns>
Public Shared Function dpixGetData(
				ByVal dpix as DPix) as Double()

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")


	Dim _Result as Double() = LeptonicaSharp.Natives.dpixGetData( dpix.Pointer)

	Return _Result
End Function

' SRC\fpix1.c (1606, 1)
' dpixSetData()
' dpixSetData(DPIX *, l_float64 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''  <param name="data">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dpixSetData(
				ByVal dpix as DPix, 
				ByVal data as Double()) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")
	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixSetData( dpix.Pointer, data)

	Return _Result
End Function

' SRC\fpix1.c (1628, 1)
' dpixGetPixel()
' dpixGetPixel(DPIX *, l_int32, l_int32, l_float64 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''  <param name="x">[in] - ,y pixel coords</param>
'''  <param name="pval">[out] - pixel value</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function dpixGetPixel(
				ByVal dpix as DPix, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByRef pval as Double()) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixGetPixel( dpix.Pointer, x, y, pval)

	Return _Result
End Function

' SRC\fpix1.c (1663, 1)
' dpixSetPixel()
' dpixSetPixel(DPIX *, l_int32, l_int32, l_float64) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''  <param name="x">[in] - ,y pixel coords</param>
'''  <param name="val">[in] - pixel value</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function dpixSetPixel(
				ByVal dpix as DPix, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByVal val as Double) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixSetPixel( dpix.Pointer, x, y, val)

	Return _Result
End Function

' SRC\fpix1.c (1696, 1)
' fpixRead()
' fpixRead(const char *) as FPIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>fpix, or NULL on error</returns>
Public Shared Function fpixRead(
				ByVal filename as String) as FPix

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix1.c (1723, 1)
' fpixReadStream()
' fpixReadStream(FILE *) as FPIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>fpix, or NULL on error</returns>
Public Shared Function fpixReadStream(
				ByVal fp as FILE) as FPix

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix1.c (1776, 1)
' fpixReadMem()
' fpixReadMem(const l_uint8 *, size_t) as FPIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - of serialized fpix</param>
'''  <param name="size">[in] - of data in bytes</param>
'''   <returns>fpix, or NULL on error</returns>
Public Shared Function fpixReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as FPix

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix1.c (1804, 1)
' fpixWrite()
' fpixWrite(const char *, FPIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="fpix">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixWrite(
				ByVal filename as String, 
				ByVal fpix as FPix) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixWrite( filename, fpix.Pointer)

	Return _Result
End Function

' SRC\fpix1.c (1835, 1)
' fpixWriteStream()
' fpixWriteStream(FILE *, FPIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for "wb"</param>
'''  <param name="fpix">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixWriteStream(
				ByVal fp as FILE, 
				ByVal fpix as FPix) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixWriteStream( fp.Pointer, fpix.Pointer)

	Return _Result
End Function

' SRC\fpix1.c (1881, 1)
' fpixWriteMem()
' fpixWriteMem(l_uint8 **, size_t *, FPIX *) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a fpix in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized fpix</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="fpix">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal fpix as FPix) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.fpixWriteMem( pdataPTR, psize, fpix.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\fpix1.c (1941, 1)
' fpixEndianByteSwap()
' fpixEndianByteSwap(FPIX *, FPIX *) as FPIX *
'''  <summary>
''' Notes
''' (1) On big-endian hardware, this does byte-swapping on each of
''' the 4-byte floats in the fpix data.  On little-endians,
''' the data is unchanged.  This is used for serialization
''' of fpix; the data is serialized in little-endian byte
''' order because most hardware is little-endian.
''' (2) The operation can be either in-place or, if fpixd == NULL,
''' a new fpix is made.  If not in-place, caller must catch
''' the returned pointer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixd">[in] - can be equal to fpixs or NULL</param>
'''  <param name="fpixs">[in] - </param>
'''   <returns>fpixd always</returns>
Public Shared Function fpixEndianByteSwap(
				ByVal fpixd as FPix, 
				ByVal fpixs as FPix) as FPix

	If IsNothing (fpixd) then Throw New ArgumentNullException  ("fpixd cannot be Nothing")
	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixEndianByteSwap( fpixd.Pointer, fpixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix1.c (1993, 1)
' dpixRead()
' dpixRead(const char *) as DPIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>dpix, or NULL on error</returns>
Public Shared Function dpixRead(
				ByVal filename as String) as DPix

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dpixRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new DPix(_Result)
End Function

' SRC\fpix1.c (2020, 1)
' dpixReadStream()
' dpixReadStream(FILE *) as DPIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>dpix, or NULL on error</returns>
Public Shared Function dpixReadStream(
				ByVal fp as FILE) as DPix

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dpixReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new DPix(_Result)
End Function

' SRC\fpix1.c (2073, 1)
' dpixReadMem()
' dpixReadMem(const l_uint8 *, size_t) as DPIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - of serialized dpix</param>
'''  <param name="size">[in] - of data in bytes</param>
'''   <returns>dpix, or NULL on error</returns>
Public Shared Function dpixReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as DPix

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dpixReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new DPix(_Result)
End Function

' SRC\fpix1.c (2101, 1)
' dpixWrite()
' dpixWrite(const char *, DPIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="dpix">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dpixWrite(
				ByVal filename as String, 
				ByVal dpix as DPix) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixWrite( filename, dpix.Pointer)

	Return _Result
End Function

' SRC\fpix1.c (2132, 1)
' dpixWriteStream()
' dpixWriteStream(FILE *, DPIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for "wb"</param>
'''  <param name="dpix">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dpixWriteStream(
				ByVal fp as FILE, 
				ByVal dpix as DPix) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixWriteStream( fp.Pointer, dpix.Pointer)

	Return _Result
End Function

' SRC\fpix1.c (2178, 1)
' dpixWriteMem()
' dpixWriteMem(l_uint8 **, size_t *, DPIX *) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a dpix in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized dpix</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="dpix">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dpixWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal dpix as DPix) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.dpixWriteMem( pdataPTR, psize, dpix.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\fpix1.c (2238, 1)
' dpixEndianByteSwap()
' dpixEndianByteSwap(DPIX *, DPIX *) as DPIX *
'''  <summary>
''' Notes
''' (1) On big-endian hardware, this does byte-swapping on each of
''' the 4-byte words in the dpix data.  On little-endians,
''' the data is unchanged.  This is used for serialization
''' of dpix; the data is serialized in little-endian byte
''' order because most hardware is little-endian.
''' (2) The operation can be either in-place or, if dpixd == NULL,
''' a new dpix is made.  If not in-place, caller must catch
''' the returned pointer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpixd">[in] - can be equal to dpixs or NULL</param>
'''  <param name="dpixs">[in] - </param>
'''   <returns>dpixd always</returns>
Public Shared Function dpixEndianByteSwap(
				ByVal dpixd as DPix, 
				ByVal dpixs as DPix) as DPix

	If IsNothing (dpixd) then Throw New ArgumentNullException  ("dpixd cannot be Nothing")
	If IsNothing (dpixs) then Throw New ArgumentNullException  ("dpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dpixEndianByteSwap( dpixd.Pointer, dpixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new DPix(_Result)
End Function

' SRC\fpix1.c (2297, 1)
' fpixPrintStream()
' fpixPrintStream(FILE *, FPIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Subsampled printout of fpix for debugging.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="fpix">[in] - </param>
'''  <param name="factor">[in] - subsampled</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixPrintStream(
				ByVal fp as FILE, 
				ByVal fpix as FPix, 
				ByVal factor as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixPrintStream( fp.Pointer, fpix.Pointer, factor)

	Return _Result
End Function

#End Region
#Region "SRC\fpix2.c"
' SRC\fpix2.c (124, 1)
' pixConvertToFPix()
' pixConvertToFPix(PIX *, l_int32) as FPIX *
'''  <summary>
''' Notes
''' (1) If colormapped, remove to grayscale.
''' (2) If 32 bpp and %ncomps == 3, this is RGB; convert to luminance.
''' In all other cases the src image is treated as having a single
''' component of pixel values.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 or 32 bpp</param>
'''  <param name="ncomps">[in] - number of components 3 for RGB, 1 otherwise</param>
'''   <returns>fpix, or NULL on error</returns>
Public Shared Function pixConvertToFPix(
				ByVal pixs as Pix, 
				ByVal ncomps as Integer) as FPix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8,16,24,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16 or 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertToFPix( pixs.Pointer, ncomps)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (217, 1)
' pixConvertToDPix()
' pixConvertToDPix(PIX *, l_int32) as DPIX *
'''  <summary>
''' Notes
''' (1) If colormapped, remove to grayscale.
''' (2) If 32 bpp and %ncomps == 3, this is RGB; convert to luminance.
''' In all other cases the src image is treated as having a single
''' component of pixel values.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 or 32 bpp</param>
'''  <param name="ncomps">[in] - number of components 3 for RGB, 1 otherwise</param>
'''   <returns>dpix, or NULL on error</returns>
Public Shared Function pixConvertToDPix(
				ByVal pixs as Pix, 
				ByVal ncomps as Integer) as DPix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8,16,24,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16 or 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertToDPix( pixs.Pointer, ncomps)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new DPix(_Result)
End Function

' SRC\fpix2.c (318, 1)
' fpixConvertToPix()
' fpixConvertToPix(FPIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Use %outdepth = 0 to programmatically determine the
''' output depth.  If no values are greater than 255,
''' it will set outdepth = 8; otherwise to 16 or 32.
''' (2) Because we are converting a float to an unsigned int
''' with a specified dynamic range (8, 16 or 32 bits), errors
''' can occur.  If errorflag == TRUE, output the number
''' of values out of range, both negative and positive.
''' (3) If a pixel value is positive and out of range, clip to
''' the maximum value represented at the outdepth of 8, 16
''' or 32 bits.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - </param>
'''  <param name="outdepth">[in] - 0, 8, 16 or 32 bpp</param>
'''  <param name="negvals">[in] - L_CLIP_TO_ZERO, L_TAKE_ABSVAL</param>
'''  <param name="errorflag">[in] - 1 to output error stats; 0 otherwise</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function fpixConvertToPix(
				ByVal fpixs as FPix, 
				ByVal outdepth as Integer, 
				ByVal negvals as Enumerations.L_hling_negative_values_in_conversion_to_unsigned_int, 
				ByVal errorflag as Integer) as Pix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixConvertToPix( fpixs.Pointer, outdepth, negvals, errorflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\fpix2.c (422, 1)
' fpixDisplayMaxDynamicRange()
' fpixDisplayMaxDynamicRange(FPIX *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - </param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function fpixDisplayMaxDynamicRange(
				ByVal fpixs as FPix) as Pix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixDisplayMaxDynamicRange( fpixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\fpix2.c (479, 1)
' fpixConvertToDPix()
' fpixConvertToDPix(FPIX *) as DPIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''   <returns>dpix, or NULL on error</returns>
Public Shared Function fpixConvertToDPix(
				ByVal fpix as FPix) as DPix

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixConvertToDPix( fpix.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new DPix(_Result)
End Function

' SRC\fpix2.c (537, 1)
' dpixConvertToPix()
' dpixConvertToPix(DPIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Use %outdepth = 0 to programmatically determine the
''' output depth.  If no values are greater than 255,
''' it will set outdepth = 8; otherwise to 16 or 32.
''' (2) Because we are converting a float to an unsigned int
''' with a specified dynamic range (8, 16 or 32 bits), errors
''' can occur.  If errorflag == TRUE, output the number
''' of values out of range, both negative and positive.
''' (3) If a pixel value is positive and out of range, clip to
''' the maximum value represented at the outdepth of 8, 16
''' or 32 bits.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpixs">[in] - </param>
'''  <param name="outdepth">[in] - 0, 8, 16 or 32 bpp</param>
'''  <param name="negvals">[in] - L_CLIP_TO_ZERO, L_TAKE_ABSVAL</param>
'''  <param name="errorflag">[in] - 1 to output error stats; 0 otherwise</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function dpixConvertToPix(
				ByVal dpixs as DPix, 
				ByVal outdepth as Integer, 
				ByVal negvals as Enumerations.L_hling_negative_values_in_conversion_to_unsigned_int, 
				ByVal errorflag as Integer) as Pix

	If IsNothing (dpixs) then Throw New ArgumentNullException  ("dpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dpixConvertToPix( dpixs.Pointer, outdepth, negvals, errorflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\fpix2.c (641, 1)
' dpixConvertToFPix()
' dpixConvertToFPix(DPIX *) as FPIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''   <returns>fpix, or NULL on error</returns>
Public Shared Function dpixConvertToFPix(
				ByVal dpix as DPix) as FPix

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dpixConvertToFPix( dpix.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (689, 1)
' fpixGetMin()
' fpixGetMin(FPIX *, l_float32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''  <param name="pminval">[out][optional] - min value</param>
'''  <param name="pxminloc">[out][optional] - x location of min</param>
'''  <param name="pyminloc">[out][optional] - y location of min</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function fpixGetMin(
				ByVal fpix as FPix, 
				ByRef pminval as Single(), 
				ByRef pxminloc as Integer, 
				ByRef pyminloc as Integer) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixGetMin( fpix.Pointer, pminval, pxminloc, pyminloc)

	Return _Result
End Function

' SRC\fpix2.c (742, 1)
' fpixGetMax()
' fpixGetMax(FPIX *, l_float32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''  <param name="pmaxval">[out][optional] - max value</param>
'''  <param name="pxmaxloc">[out][optional] - x location of max</param>
'''  <param name="pymaxloc">[out][optional] - y location of max</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function fpixGetMax(
				ByVal fpix as FPix, 
				ByRef pmaxval as Single(), 
				ByRef pxmaxloc as Integer, 
				ByRef pymaxloc as Integer) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixGetMax( fpix.Pointer, pmaxval, pxmaxloc, pymaxloc)

	Return _Result
End Function

' SRC\fpix2.c (795, 1)
' dpixGetMin()
' dpixGetMin(DPIX *, l_float64 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''  <param name="pminval">[out][optional] - min value</param>
'''  <param name="pxminloc">[out][optional] - x location of min</param>
'''  <param name="pyminloc">[out][optional] - y location of min</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function dpixGetMin(
				ByVal dpix as DPix, 
				ByRef pminval as Double(), 
				ByRef pxminloc as Integer, 
				ByRef pyminloc as Integer) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixGetMin( dpix.Pointer, pminval, pxminloc, pyminloc)

	Return _Result
End Function

' SRC\fpix2.c (848, 1)
' dpixGetMax()
' dpixGetMax(DPIX *, l_float64 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''  <param name="pmaxval">[out][optional] - max value</param>
'''  <param name="pxmaxloc">[out][optional] - x location of max</param>
'''  <param name="pymaxloc">[out][optional] - y location of max</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function dpixGetMax(
				ByVal dpix as DPix, 
				ByRef pmaxval as Double(), 
				ByRef pxmaxloc as Integer, 
				ByRef pymaxloc as Integer) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixGetMax( dpix.Pointer, pmaxval, pxmaxloc, pymaxloc)

	Return _Result
End Function

' SRC\fpix2.c (915, 1)
' fpixScaleByInteger()
' fpixScaleByInteger(FPIX *, l_int32) as FPIX *
'''  <summary>
''' Notes
''' (1) The width wd of fpixd is related to ws of fpixs by
''' wd = factor  (ws - 1) + 1   (and ditto for the height)
''' We avoid special-casing boundary pixels in the interpolation
''' by constructing fpixd by inserting (factor - 1) interpolated
''' pixels between each pixel in fpixs.  Then
''' wd = ws + (ws - 1)  (factor - 1) (same as above)
''' This also has the advantage that if we subsample by %factor,
''' throwing out all the interpolated pixels, we regain the
''' original low resolution fpix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - low resolution, subsampled</param>
'''  <param name="factor">[in] - scaling factor</param>
'''   <returns>fpixd interpolated result, or NULL on error</returns>
Public Shared Function fpixScaleByInteger(
				ByVal fpixs as FPix, 
				ByVal factor as Integer) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixScaleByInteger( fpixs.Pointer, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (1007, 1)
' dpixScaleByInteger()
' dpixScaleByInteger(DPIX *, l_int32) as DPIX *
'''  <summary>
''' Notes
''' (1) The width wd of dpixd is related to ws of dpixs by
''' wd = factor  (ws - 1) + 1   (and ditto for the height)
''' We avoid special-casing boundary pixels in the interpolation
''' by constructing fpixd by inserting (factor - 1) interpolated
''' pixels between each pixel in fpixs.  Then
''' wd = ws + (ws - 1)  (factor - 1) (same as above)
''' This also has the advantage that if we subsample by %factor,
''' throwing out all the interpolated pixels, we regain the
''' original low resolution dpix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpixs">[in] - low resolution, subsampled</param>
'''  <param name="factor">[in] - scaling factor</param>
'''   <returns>dpixd interpolated result, or NULL on error</returns>
Public Shared Function dpixScaleByInteger(
				ByVal dpixs as DPix, 
				ByVal factor as Integer) as DPix

	If IsNothing (dpixs) then Throw New ArgumentNullException  ("dpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.dpixScaleByInteger( dpixs.Pointer, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new DPix(_Result)
End Function

' SRC\fpix2.c (1104, 1)
' fpixLinearCombination()
' fpixLinearCombination(FPIX *, FPIX *, FPIX *, l_float32, l_float32) as FPIX *
'''  <summary>
''' Notes
''' (1) Computes pixelwise linear combination a  src1 + b  src2
''' (2) Alignment is to UL corner.
''' (3) There are 3 cases.  The result can go to a new dest,
''' in-place to fpixs1, or to an existing input dest
''' fpixd == null   (src1 + src2) --GT new fpixd
''' fpixd == fpixs1  (src1 + src2) --GT src1  (in-place)
''' fpixd != fpixs1 (src1 + src2) --GT input fpixd
''' (4) fpixs2 must be different from both fpixd and fpixs1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixd">[in][optional] - ; this can be null, equal to fpixs1, or different from fpixs1</param>
'''  <param name="fpixs1">[in] - can be == to fpixd</param>
'''  <param name="fpixs2">[in] - </param>
'''  <param name="a">[in] - multiplication factors on fpixs1 and fpixs2, rsp.</param>
'''  <param name="b">[in] - multiplication factors on fpixs1 and fpixs2, rsp.</param>
'''   <returns>fpixd always</returns>
Public Shared Function fpixLinearCombination(
				ByVal fpixd as FPix, 
				ByVal fpixs1 as FPix, 
				ByVal fpixs2 as FPix, 
				ByVal a as Single, 
				ByVal b as Single) as FPix

	If IsNothing (fpixs1) then Throw New ArgumentNullException  ("fpixs1 cannot be Nothing")
	If IsNothing (fpixs2) then Throw New ArgumentNullException  ("fpixs2 cannot be Nothing")
	If IsNothing (a) then Throw New ArgumentNullException  ("a cannot be Nothing")
	If IsNothing (b) then Throw New ArgumentNullException  ("b cannot be Nothing")

	Dim fpixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fpixd) Then fpixdPTR = fpixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixLinearCombination( fpixdPTR, fpixs1.Pointer, fpixs2.Pointer, a, b)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (1163, 1)
' fpixAddMultConstant()
' fpixAddMultConstant(FPIX *, l_float32, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place operation.
''' (2) It can be used to multiply each pixel by a constant,
''' and also to add a constant to each pixel.  Multiplication
''' is done first.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''  <param name="addc">[in] - use 0.0 to skip the operation</param>
'''  <param name="multc">[in] - use 1.0 to skip the operation</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixAddMultConstant(
				ByVal fpix as FPix, 
				ByVal addc as Single, 
				ByVal multc as Single) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")
	If IsNothing (addc) then Throw New ArgumentNullException  ("addc cannot be Nothing")
	If IsNothing (multc) then Throw New ArgumentNullException  ("multc cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixAddMultConstant( fpix.Pointer, addc, multc)

	Return _Result
End Function

' SRC\fpix2.c (1223, 1)
' dpixLinearCombination()
' dpixLinearCombination(DPIX *, DPIX *, DPIX *, l_float32, l_float32) as DPIX *
'''  <summary>
''' Notes
''' (1) Computes pixelwise linear combination a  src1 + b  src2
''' (2) Alignment is to UL corner.
''' (3) There are 3 cases.  The result can go to a new dest,
''' in-place to dpixs1, or to an existing input dest
''' dpixd == null   (src1 + src2) --GT new dpixd
''' dpixd == dpixs1  (src1 + src2) --GT src1  (in-place)
''' dpixd != dpixs1 (src1 + src2) --GT input dpixd
''' (4) dpixs2 must be different from both dpixd and dpixs1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpixd">[in][optional] - ; this can be null, equal to dpixs1, or different from dpixs1</param>
'''  <param name="dpixs1">[in] - can be == to dpixd</param>
'''  <param name="dpixs2">[in] - </param>
'''  <param name="a">[in] - multiplication factors on dpixs1 and dpixs2, rsp.</param>
'''  <param name="b">[in] - multiplication factors on dpixs1 and dpixs2, rsp.</param>
'''   <returns>dpixd always</returns>
Public Shared Function dpixLinearCombination(
				ByVal dpixd as DPix, 
				ByVal dpixs1 as DPix, 
				ByVal dpixs2 as DPix, 
				ByVal a as Single, 
				ByVal b as Single) as DPix

	If IsNothing (dpixs1) then Throw New ArgumentNullException  ("dpixs1 cannot be Nothing")
	If IsNothing (dpixs2) then Throw New ArgumentNullException  ("dpixs2 cannot be Nothing")
	If IsNothing (a) then Throw New ArgumentNullException  ("a cannot be Nothing")
	If IsNothing (b) then Throw New ArgumentNullException  ("b cannot be Nothing")

	Dim dpixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(dpixd) Then dpixdPTR = dpixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.dpixLinearCombination( dpixdPTR, dpixs1.Pointer, dpixs2.Pointer, a, b)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new DPix(_Result)
End Function

' SRC\fpix2.c (1282, 1)
' dpixAddMultConstant()
' dpixAddMultConstant(DPIX *, l_float64, l_float64) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place operation.
''' (2) It can be used to multiply each pixel by a constant,
''' and also to add a constant to each pixel.  Multiplication
''' is done first.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''  <param name="addc">[in] - use 0.0 to skip the operation</param>
'''  <param name="multc">[in] - use 1.0 to skip the operation</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dpixAddMultConstant(
				ByVal dpix as DPix, 
				ByVal addc as Double, 
				ByVal multc as Double) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")
	If IsNothing (addc) then Throw New ArgumentNullException  ("addc cannot be Nothing")
	If IsNothing (multc) then Throw New ArgumentNullException  ("multc cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixAddMultConstant( dpix.Pointer, addc, multc)

	Return _Result
End Function

' SRC\fpix2.c (1329, 1)
' fpixSetAllArbitrary()
' fpixSetAllArbitrary(FPIX *, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''  <param name="inval">[in] - to set at each pixel</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fpixSetAllArbitrary(
				ByVal fpix as FPix, 
				ByVal inval as Single) as Integer

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")
	If IsNothing (inval) then Throw New ArgumentNullException  ("inval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixSetAllArbitrary( fpix.Pointer, inval)

	Return _Result
End Function

' SRC\fpix2.c (1360, 1)
' dpixSetAllArbitrary()
' dpixSetAllArbitrary(DPIX *, l_float64) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dpix">[in] - </param>
'''  <param name="inval">[in] - to set at each pixel</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function dpixSetAllArbitrary(
				ByVal dpix as DPix, 
				ByVal inval as Double) as Integer

	If IsNothing (dpix) then Throw New ArgumentNullException  ("dpix cannot be Nothing")
	If IsNothing (inval) then Throw New ArgumentNullException  ("inval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.dpixSetAllArbitrary( dpix.Pointer, inval)

	Return _Result
End Function

' SRC\fpix2.c (1399, 1)
' fpixAddBorder()
' fpixAddBorder(FPIX *, l_int32, l_int32, l_int32, l_int32) as FPIX *
'''  <summary>
''' Notes
''' (1) Adds border of '0' 32-bit pixels
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - </param>
'''  <param name="left">[in] - pixels on each side to be added</param>
'''  <param name="right">[in] - pixels on each side to be added</param>
'''  <param name="top">[in] - pixels on each side to be added</param>
'''  <param name="bot">[in] - pixels on each side to be added</param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixAddBorder(
				ByVal fpixs as FPix, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixAddBorder( fpixs.Pointer, left, right, top, bot)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (1435, 1)
' fpixRemoveBorder()
' fpixRemoveBorder(FPIX *, l_int32, l_int32, l_int32, l_int32) as FPIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - </param>
'''  <param name="left">[in] - pixels on each side to be removed</param>
'''  <param name="right">[in] - pixels on each side to be removed</param>
'''  <param name="top">[in] - pixels on each side to be removed</param>
'''  <param name="bot">[in] - pixels on each side to be removed</param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixRemoveBorder(
				ByVal fpixs as FPix, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixRemoveBorder( fpixs.Pointer, left, right, top, bot)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (1479, 1)
' fpixAddMirroredBorder()
' fpixAddMirroredBorder(FPIX *, l_int32, l_int32, l_int32, l_int32) as FPIX *
'''  <summary>
''' Notes
''' (1) See pixAddMirroredBorder() for situations of usage.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - </param>
'''  <param name="left">[in] - pixels on each side to be added</param>
'''  <param name="right">[in] - pixels on each side to be added</param>
'''  <param name="top">[in] - pixels on each side to be added</param>
'''  <param name="bot">[in] - pixels on each side to be added</param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixAddMirroredBorder(
				ByVal fpixs as FPix, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixAddMirroredBorder( fpixs.Pointer, left, right, top, bot)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (1526, 1)
' fpixAddContinuedBorder()
' fpixAddContinuedBorder(FPIX *, l_int32, l_int32, l_int32, l_int32) as FPIX *
'''  <summary>
''' Notes
''' (1) This adds pixels on each side whose values are equal to
''' the value on the closest boundary pixel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - </param>
'''  <param name="left">[in] - pixels on each side to be added</param>
'''  <param name="right">[in] - pixels on each side to be added</param>
'''  <param name="top">[in] - pixels on each side to be added</param>
'''  <param name="bot">[in] - pixels on each side to be added</param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixAddContinuedBorder(
				ByVal fpixs as FPix, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixAddContinuedBorder( fpixs.Pointer, left, right, top, bot)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (1571, 1)
' fpixAddSlopeBorder()
' fpixAddSlopeBorder(FPIX *, l_int32, l_int32, l_int32, l_int32) as FPIX *
'''  <summary>
''' Notes
''' (1) This adds pixels on each side whose values have a normal
''' derivative equal to the normal derivative at the boundary
''' of fpixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - </param>
'''  <param name="left">[in] - pixels on each side to be added</param>
'''  <param name="right">[in] - pixels on each side to be added</param>
'''  <param name="top">[in] - pixels on each side to be added</param>
'''  <param name="bot">[in] - pixels on each side to be added</param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixAddSlopeBorder(
				ByVal fpixs as FPix, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixAddSlopeBorder( fpixs.Pointer, left, right, top, bot)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (1660, 1)
' fpixRasterop()
' fpixRasterop(FPIX *, l_int32, l_int32, l_int32, l_int32, FPIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is similar in structure to pixRasterop(), except
''' it only allows copying from the source into the destination.
''' For that reason, no op code is necessary.  Additionally,
''' all pixels are 32 bit words (float values), which makes
''' the copy very simple.
''' (2) Clipping of both src and dest fpix are done automatically.
''' (3) This allows in-place copying, without checking to see if
''' the result is valid  use for in-place with caution!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixd">[in] - dest fpix</param>
'''  <param name="dx">[in] - x val of UL corner of dest rectangle</param>
'''  <param name="dy">[in] - y val of UL corner of dest rectangle</param>
'''  <param name="dw">[in] - width of dest rectangle</param>
'''  <param name="dh">[in] - height of dest rectangle</param>
'''  <param name="fpixs">[in] - src fpix</param>
'''  <param name="sx">[in] - x val of UL corner of src rectangle</param>
'''  <param name="sy">[in] - y val of UL corner of src rectangle</param>
'''   <returns>0 if OK; 1 on error.</returns>
Public Shared Function fpixRasterop(
				ByVal fpixd as FPix, 
				ByVal dx as Integer, 
				ByVal dy as Integer, 
				ByVal dw as Integer, 
				ByVal dh as Integer, 
				ByVal fpixs as FPix, 
				ByVal sx as Integer, 
				ByVal sy as Integer) as Integer

	If IsNothing (fpixd) then Throw New ArgumentNullException  ("fpixd cannot be Nothing")
	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fpixRasterop( fpixd.Pointer, dx, dy, dw, dh, fpixs.Pointer, sx, sy)

	Return _Result
End Function

' SRC\fpix2.c (1760, 1)
' fpixRotateOrth()
' fpixRotateOrth(FPIX *, l_int32) as FPIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - </param>
'''  <param name="quads">[in] - 0-3; number of 90 degree cw rotations</param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixRotateOrth(
				ByVal fpixs as FPix, 
				ByVal quads as Integer) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixRotateOrth( fpixs.Pointer, quads)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (1806, 1)
' fpixRotate180()
' fpixRotate180(FPIX *, FPIX *) as FPIX *
'''  <summary>
''' Notes
''' (1) This does a 180 rotation of the image about the center,
''' which is equivalent to a left-right flip about a vertical
''' line through the image center, followed by a top-bottom
''' flip about a horizontal line through the image center.
''' (2) There are 3 cases for input
''' (a) fpixd == null (creates a new fpixd)
''' (b) fpixd == fpixs (in-place operation)
''' (c) fpixd != fpixs (existing fpixd)
''' (3) For clarity, use these three patterns, respectively
''' (a) fpixd = fpixRotate180(NULL, fpixs);
''' (b) fpixRotate180(fpixs, fpixs);
''' (c) fpixRotate180(fpixd, fpixs);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixd">[in][optional] - ; can be null, equal to fpixs, or different from fpixs</param>
'''  <param name="fpixs">[in] - </param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixRotate180(
				ByVal fpixd as FPix, 
				ByVal fpixs as FPix) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")

	Dim fpixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fpixd) Then fpixdPTR = fpixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixRotate180( fpixdPTR, fpixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (1839, 1)
' fpixRotate90()
' fpixRotate90(FPIX *, l_int32) as FPIX *
'''  <summary>
''' Notes
''' (1) This does a 90 degree rotation of the image about the center,
''' either cw or ccw, returning a new pix.
''' (2) The direction must be either 1 (cw) or -1 (ccw).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - </param>
'''  <param name="direction">[in] - 1 = clockwise,  -1 = counter-clockwise</param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixRotate90(
				ByVal fpixs as FPix, 
				ByVal direction as Integer) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixRotate90( fpixs.Pointer, direction)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (1912, 1)
' pixFlipLR()
' fpixFlipLR(FPIX *, FPIX *) as FPIX *
'''  <summary>
''' Notes
''' (1) This does a left-right flip of the image, which is
''' equivalent to a rotation out of the plane about a
''' vertical line through the image center.
''' (2) There are 3 cases for input
''' (a) fpixd == null (creates a new fpixd)
''' (b) fpixd == fpixs (in-place operation)
''' (c) fpixd != fpixs (existing fpixd)
''' (3) For clarity, use these three patterns, respectively
''' (a) fpixd = fpixFlipLR(NULL, fpixs);
''' (b) fpixFlipLR(fpixs, fpixs);
''' (c) fpixFlipLR(fpixd, fpixs);
''' (4) If an existing fpixd is not the same size as fpixs, the
''' image data will be reallocated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixd">[in][optional] - ; can be null, equal to fpixs, or different from fpixs</param>
'''  <param name="fpixs">[in] - </param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixFlipLR(
				ByVal fpixd as FPix, 
				ByVal fpixs as FPix) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")

	Dim fpixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fpixd) Then fpixdPTR = fpixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixFlipLR( fpixdPTR, fpixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (1973, 1)
' fpixFlipTB()
' fpixFlipTB(FPIX *, FPIX *) as FPIX *
'''  <summary>
''' Notes
''' (1) This does a top-bottom flip of the image, which is
''' equivalent to a rotation out of the plane about a
''' horizontal line through the image center.
''' (2) There are 3 cases for input
''' (a) fpixd == null (creates a new fpixd)
''' (b) fpixd == fpixs (in-place operation)
''' (c) fpixd != fpixs (existing fpixd)
''' (3) For clarity, use these three patterns, respectively
''' (a) fpixd = fpixFlipTB(NULL, fpixs);
''' (b) fpixFlipTB(fpixs, fpixs);
''' (c) fpixFlipTB(fpixd, fpixs);
''' (4) If an existing fpixd is not the same size as fpixs, the
''' image data will be reallocated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixd">[in][optional] - ; can be null, equal to fpixs, or different from fpixs</param>
'''  <param name="fpixs">[in] - </param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixFlipTB(
				ByVal fpixd as FPix, 
				ByVal fpixs as FPix) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")

	Dim fpixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fpixd) Then fpixdPTR = fpixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixFlipTB( fpixdPTR, fpixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (2035, 1)
' fpixAffinePta()
' fpixAffinePta(FPIX *, PTA *, PTA *, l_int32, l_float32) as FPIX *
'''  <summary>
''' Notes
''' (1) If %border GT 0, all four sides are extended by that distance,
''' and removed after the transformation is finished.  Pixels
''' that would be brought in to the trimmed result from outside
''' the extended region are assigned %inval.  The purpose of
''' extending the image is to avoid such assignments.
''' (2) On the other hand, you may want to give all pixels that
''' are brought in from outside fpixs a specific value.  In that
''' case, set %border == 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - 8 bpp</param>
'''  <param name="ptad">[in] - 4 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 4 pts of initial coordinate space</param>
'''  <param name="border">[in] - size of extension with constant normal derivative</param>
'''  <param name="inval">[in] - value brought in; typ. 0</param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixAffinePta(
				ByVal fpixs as FPix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal border as Integer, 
				ByVal inval as Single) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (inval) then Throw New ArgumentNullException  ("inval cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixAffinePta( fpixs.Pointer, ptad.Pointer, ptas.Pointer, border, inval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (2092, 1)
' fpixAffine()
' fpixAffine(FPIX *, l_float32 *, l_float32) as FPIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - 8 bpp</param>
'''  <param name="vc">[in] - vector of 8 coefficients for projective transformation</param>
'''  <param name="inval">[in] - value brought in; typ. 0</param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixAffine(
				ByVal fpixs as FPix, 
				ByVal vc as Single(), 
				ByVal inval as Single) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")
	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")
	If IsNothing (inval) then Throw New ArgumentNullException  ("inval cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixAffine( fpixs.Pointer, vc, inval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (2154, 1)
' fpixProjectivePta()
' fpixProjectivePta(FPIX *, PTA *, PTA *, l_int32, l_float32) as FPIX *
'''  <summary>
''' Notes
''' (1) If %border GT 0, all four sides are extended by that distance,
''' and removed after the transformation is finished.  Pixels
''' that would be brought in to the trimmed result from outside
''' the extended region are assigned %inval.  The purpose of
''' extending the image is to avoid such assignments.
''' (2) On the other hand, you may want to give all pixels that
''' are brought in from outside fpixs a specific value.  In that
''' case, set %border == 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - 8 bpp</param>
'''  <param name="ptad">[in] - 4 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 4 pts of initial coordinate space</param>
'''  <param name="border">[in] - size of extension with constant normal derivative</param>
'''  <param name="inval">[in] - value brought in; typ. 0</param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixProjectivePta(
				ByVal fpixs as FPix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal border as Integer, 
				ByVal inval as Single) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (inval) then Throw New ArgumentNullException  ("inval cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixProjectivePta( fpixs.Pointer, ptad.Pointer, ptas.Pointer, border, inval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (2211, 1)
' fpixProjective()
' fpixProjective(FPIX *, l_float32 *, l_float32) as FPIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - 8 bpp</param>
'''  <param name="vc">[in] - vector of 8 coefficients for projective transformation</param>
'''  <param name="inval">[in] - value brought in; typ. 0</param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function fpixProjective(
				ByVal fpixs as FPix, 
				ByVal vc as Single(), 
				ByVal inval as Single) as FPix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")
	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")
	If IsNothing (inval) then Throw New ArgumentNullException  ("inval cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixProjective( fpixs.Pointer, vc, inval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

' SRC\fpix2.c (2269, 1)
' linearInterpolatePixelFloat()
' linearInterpolatePixelFloat(l_float32 *, l_int32, l_int32, l_float32, l_float32, l_float32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This is a standard linear interpolation function.  It is
''' equivalent to area weighting on each component, and
''' avoids "jaggies" when rendering sharp edges.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="datas">[in] - ptr to beginning of float image data</param>
'''  <param name="w">[in] - of image</param>
'''  <param name="h">[in] - of image</param>
'''  <param name="x">[in] - floating pt location for evaluation</param>
'''  <param name="y">[in] - floating pt location for evaluation</param>
'''  <param name="inval">[in] - float value brought in from the outside when the input x,y location is outside the image</param>
'''  <param name="pval">[out] - interpolated float value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function linearInterpolatePixelFloat(
				ByVal datas as Single(), 
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal x as Single, 
				ByVal y as Single, 
				ByVal inval as Single, 
				ByRef pval as Single()) as Integer

	If IsNothing (datas) then Throw New ArgumentNullException  ("datas cannot be Nothing")
	If IsNothing (x) then Throw New ArgumentNullException  ("x cannot be Nothing")
	If IsNothing (y) then Throw New ArgumentNullException  ("y cannot be Nothing")
	If IsNothing (inval) then Throw New ArgumentNullException  ("inval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.linearInterpolatePixelFloat( datas, w, h, x, y, inval, pval)

	Return _Result
End Function

' SRC\fpix2.c (2333, 1)
' fpixThresholdToPix()
' fpixThresholdToPix(FPIX *, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) For all values of fpix that are LT= thresh, sets the pixel
''' in pixd to 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''  <param name="thresh">[in] - </param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function fpixThresholdToPix(
				ByVal fpix as FPix, 
				ByVal thresh as Single) as Pix

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixThresholdToPix( fpix.Pointer, thresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\fpix2.c (2391, 1)
' pixComponentFunction()
' pixComponentFunction(PIX *, l_float32, l_float32, l_float32, l_float32, l_float32, l_float32) as FPIX *
'''  <summary>
''' Notes
''' (1) This stores a function of the component values of each
''' input pixel in %fpixd.
''' (2) The function is a ratio of linear combinations of component values.
''' There are two special cases for denominator coefficients
''' (a) The denominator is 1.0 input 0 for all denominator coefficients
''' (b) Only one component is used in the denominator input 1.0
''' for that denominator component and 0.0 for the other two.
''' (3) If the denominator is 0, multiply by an arbitrary number that
''' is much larger than 1.  Choose 256 "arbitrarily".
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 32 bpp rgb</param>
'''  <param name="rnum">[in] - coefficients for numerator</param>
'''  <param name="gnum">[in] - coefficients for numerator</param>
'''  <param name="bnum">[in] - coefficients for numerator</param>
'''  <param name="rdenom">[in] - coefficients for denominator</param>
'''  <param name="gdenom">[in] - coefficients for denominator</param>
'''  <param name="bdenom">[in] - coefficients for denominator</param>
'''   <returns>fpixd, or NULL on error</returns>
Public Shared Function pixComponentFunction(
				ByVal pix as Pix, 
				ByVal rnum as Single, 
				ByVal gnum as Single, 
				ByVal bnum as Single, 
				ByVal rdenom as Single, 
				ByVal gdenom as Single, 
				ByVal bdenom as Single) as FPix

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (rnum) then Throw New ArgumentNullException  ("rnum cannot be Nothing")
	If IsNothing (gnum) then Throw New ArgumentNullException  ("gnum cannot be Nothing")
	If IsNothing (bnum) then Throw New ArgumentNullException  ("bnum cannot be Nothing")
	If IsNothing (rdenom) then Throw New ArgumentNullException  ("rdenom cannot be Nothing")
	If IsNothing (gdenom) then Throw New ArgumentNullException  ("gdenom cannot be Nothing")
	If IsNothing (bdenom) then Throw New ArgumentNullException  ("bdenom cannot be Nothing")
	If {32}.contains (pix.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixComponentFunction( pix.Pointer, rnum, gnum, bnum, rdenom, gdenom, bdenom)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FPix(_Result)
End Function

#End Region
#Region "SRC\gifiostub.c"
' SRC\gifiostub.c (45, 7)
' 
' pixReadStreamGif(FILE *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixReadStreamGif(
				ByRef fp as FILE) as Pix

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")

Dim fpPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fp) Then fpPTR = fp.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadStreamGif( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\gifiostub.c (52, 7)
' 
' pixReadMemGif(const l_uint8 *, size_t) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixReadMemGif(
				ByRef cdata as Byte(), 
				ByRef size as UInteger) as Pix

	If IsNothing (cdata) then Throw New ArgumentNullException  ("cdata cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadMemGif( cdata, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\gifiostub.c (59, 6)
' 
' pixWriteStreamGif(FILE *, PIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixWriteStreamGif(
				ByRef fp as FILE, 
				ByRef pix as Pix) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim fpPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fp) Then fpPTR = fp.Pointer
Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteStreamGif( fp.Pointer, pix.Pointer)

	Return _Result
End Function

' SRC\gifiostub.c (66, 6)
' 
' pixWriteMemGif(l_uint8 **, size_t *, PIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixWriteMemGif(
				ByRef pdata as Object, 
				ByRef psize as Object, 
				ByRef pix as Pix) as Integer

	If IsNothing (pdata) then Throw New ArgumentNullException  ("pdata cannot be Nothing")
	If IsNothing (psize) then Throw New ArgumentNullException  ("psize cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteMemGif( pdata, psize, pix.Pointer)

	Return _Result
End Function

#End Region
#Region "SRC\gplot.c"
' SRC\gplot.c (138, 1)
' gplotCreate()
' gplotCreate(const char *, l_int32, const char *, const char *, const char *) as GPLOT *
'''  <summary>
''' Notes
''' (1) This initializes the plot.
''' (2) The 'title', 'xlabel' and 'ylabel' strings can have spaces,
''' double quotes and backquotes, but not single quotes.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rootname">[in] - root for all output files</param>
'''  <param name="outformat">[in] - GPLOT_PNG, GPLOT_PS, GPLOT_EPS, GPLOT_LATEX</param>
'''  <param name="title">[in][optional] - overall title</param>
'''  <param name="xlabel">[in][optional] - x axis label</param>
'''  <param name="ylabel">[in][optional] - y axis label</param>
'''   <returns>gplot, or NULL on error</returns>
Public Shared Function gplotCreate(
				ByVal rootname as String, 
				ByVal outformat as Enumerations.GPLOT_OUTPUT, 
				ByVal title as String, 
				ByVal xlabel as String, 
				ByVal ylabel as String) as GPlot

	If IsNothing (rootname) then Throw New ArgumentNullException  ("rootname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.gplotCreate( rootname, outformat, title, xlabel, ylabel)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new GPlot(_Result)
End Function

' SRC\gplot.c (197, 1)
' gplotDestroy()
' gplotDestroy(GPLOT **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pgplot">[in,out] - to be nulled</param>
Public Shared Sub gplotDestroy(
				ByRef pgplot as GPlot)


	Dim pgplotPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pgplot) Then pgplotPTR = pgplot.Pointer

	LeptonicaSharp.Natives.gplotDestroy( pgplotPTR)
	if pgplotPTR <> IntPtr.Zero then pgplot = new GPlot(pgplotPTR)

End Sub

' SRC\gplot.c (263, 1)
' gplotAddPlot()
' gplotAddPlot(GPLOT *, NUMA *, NUMA *, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) There are 2 options for (x,y) values
''' o  To plot an array vs a linear function of the
''' index, set nax = NULL.
''' o  To plot one array vs another, use both nax and nay.
''' (2) If nax is NULL, the x value corresponding to the i-th
''' value of nay is found from the startx and delx fields
''' in nay
''' x = startx + i  delx
''' These are set with numaSetParameters().  Their default
''' values are startx = 0.0, delx = 1.0.
''' (3) If nax is defined, it must be the same size as nay, and
''' must have at least one number.
''' (4) The 'plottitle' string can have spaces, double
''' quotes and backquotes, but not single quotes.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="gplot">[in] - </param>
'''  <param name="nax">[in][optional] - numa set to null for Y_VS_I; required for Y_VS_X</param>
'''  <param name="nay">[in] - numa required for both Y_VS_I and Y_VS_X</param>
'''  <param name="plotstyle">[in] - GPLOT_LINES, GPLOT_POINTS, GPLOT_IMPULSES, GPLOT_LINESPOINTS, GPLOT_DOTS</param>
'''  <param name="plottitle">[in][optional] - title for individual plot</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function gplotAddPlot(
				ByVal gplot as GPlot, 
				ByVal nax as Numa, 
				ByVal nay as Numa, 
				ByVal plotstyle as Enumerations.GPLOT_STYLE, 
				ByVal plottitle as String) as Integer

	If IsNothing (gplot) then Throw New ArgumentNullException  ("gplot cannot be Nothing")
	If IsNothing (nay) then Throw New ArgumentNullException  ("nay cannot be Nothing")

	Dim naxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nax) Then naxPTR = nax.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.gplotAddPlot( gplot.Pointer, naxPTR, nay.Pointer, plotstyle, plottitle)

	Return _Result
End Function

' SRC\gplot.c (343, 1)
' gplotSetScaling()
' gplotSetScaling(GPLOT *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) By default, the x and y axis scaling is linear.
''' (2) Call this function to set semi-log or log-log scaling.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="gplot">[in] - </param>
'''  <param name="scaling">[in] - GPLOT_LINEAR_SCALE, GPLOT_LOG_SCALE_X, GPLOT_LOG_SCALE_Y, GPLOT_LOG_SCALE_X_Y</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function gplotSetScaling(
				ByVal gplot as GPlot, 
				ByVal scaling as Enumerations.GPLOT_SCALING) as Integer

	If IsNothing (gplot) then Throw New ArgumentNullException  ("gplot cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.gplotSetScaling( gplot.Pointer, scaling)

	Return _Result
End Function

' SRC\gplot.c (379, 1)
' gplotMakeOutput()
' gplotMakeOutput(GPLOT *) as l_ok
'''  <summary>
''' Notes
''' (1) This uses gplot and the new arrays to add a plot
''' to the output, by writing a new data file and appending
''' the appropriate plot commands to the command file.
''' (2) This is the only function in this file that requires the
''' gnuplot executable, to actually generate the plot.
''' (3) The command file name for unix is canonical (i.e., directory /tmp)
''' but the temp filename paths in the command file must be correct.
''' (4) The gnuplot program for windows is wgnuplot.exe.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="gplot">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function gplotMakeOutput(
				ByVal gplot as GPlot) as Integer

	If IsNothing (gplot) then Throw New ArgumentNullException  ("gplot cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.gplotMakeOutput( gplot.Pointer)

	Return _Result
End Function

' SRC\gplot.c (422, 1)
' gplotGenCommandFile()
' gplotGenCommandFile(GPLOT *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="gplot">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function gplotGenCommandFile(
				ByVal gplot as GPlot) as Integer

	If IsNothing (gplot) then Throw New ArgumentNullException  ("gplot cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.gplotGenCommandFile( gplot.Pointer)

	Return _Result
End Function

' SRC\gplot.c (528, 1)
' gplotGenDataFiles()
' gplotGenDataFiles(GPLOT *) as l_ok
'''  <summary>
''' Notes
''' (1) The pathnames in the gplot command file are actual pathnames,
''' which can be in temp directories.  Consequently, they must not be
''' rewritten by calling fopenWriteStream(), and we use fopen().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="gplot">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function gplotGenDataFiles(
				ByVal gplot as GPlot) as Integer

	If IsNothing (gplot) then Throw New ArgumentNullException  ("gplot cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.gplotGenDataFiles( gplot.Pointer)

	Return _Result
End Function

' SRC\gplot.c (575, 1)
' gplotSimple1()
' gplotSimple1(NUMA *, l_int32, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This gives a line plot of a numa, where the array value
''' is plotted vs the array index.  The plot is generated
''' in the specified output format; the title  is optional.
''' (2) When calling these simple plot functions more than once, use
''' different %outroot to avoid overwriting the output files.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - numa; plot Y_VS_I</param>
'''  <param name="outformat">[in] - GPLOT_PNG, GPLOT_PS, GPLOT_EPS, GPLOT_LATEX</param>
'''  <param name="outroot">[in] - root of output files</param>
'''  <param name="title">[in][optional] - , can be NULL</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function gplotSimple1(
				ByVal na as Numa, 
				ByVal outformat as Enumerations.GPLOT_OUTPUT, 
				ByVal outroot as String, 
				ByVal title as String) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If IsNothing (outroot) then Throw New ArgumentNullException  ("outroot cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.gplotSimple1( na.Pointer, outformat, outroot, title)

	Return _Result
End Function

' SRC\gplot.c (604, 1)
' gplotSimple2()
' gplotSimple2(NUMA *, NUMA *, l_int32, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This gives a line plot of two numa, where the array values
''' are each plotted vs the array index.  The plot is generated
''' in the specified output format; the title  is optional.
''' (2) When calling these simple plot functions more than once, use
''' different %outroot to avoid overwriting the output files.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na1">[in] - numa; plotted with Y_VS_I</param>
'''  <param name="na2">[in] - ditto</param>
'''  <param name="outformat">[in] - GPLOT_PNG, GPLOT_PS, GPLOT_EPS, GPLOT_LATEX</param>
'''  <param name="outroot">[in] - root of output files</param>
'''  <param name="title">[in][optional] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function gplotSimple2(
				ByVal na1 as Numa, 
				ByVal na2 as Numa, 
				ByVal outformat as Enumerations.GPLOT_OUTPUT, 
				ByVal outroot as String, 
				ByVal title as String) as Integer

	If IsNothing (na1) then Throw New ArgumentNullException  ("na1 cannot be Nothing")
	If IsNothing (na2) then Throw New ArgumentNullException  ("na2 cannot be Nothing")
	If IsNothing (outroot) then Throw New ArgumentNullException  ("outroot cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.gplotSimple2( na1.Pointer, na2.Pointer, outformat, outroot, title)

	Return _Result
End Function

' SRC\gplot.c (635, 1)
' gplotSimpleN()
' gplotSimpleN(NUMAA *, l_int32, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This gives a line plot of all numas in a numaa (array of numa),
''' where the array values are each plotted vs the array index.
''' The plot is generated in the specified output format;
''' the title  is optional.
''' (2) When calling these simple plot functions more than once, use
''' different %outroot to avoid overwriting the output files.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa">[in] - numaa; we plotted with Y_VS_I for each numa</param>
'''  <param name="outformat">[in] - GPLOT_PNG, GPLOT_PS, GPLOT_EPS, GPLOT_LATEX</param>
'''  <param name="outroot">[in] - root of output files</param>
'''  <param name="title">[in][optional] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function gplotSimpleN(
				ByVal naa as Numaa, 
				ByVal outformat as Enumerations.GPLOT_OUTPUT, 
				ByVal outroot as String, 
				ByVal title as String) as Integer

	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")
	If IsNothing (outroot) then Throw New ArgumentNullException  ("outroot cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.gplotSimpleN( naa.Pointer, outformat, outroot, title)

	Return _Result
End Function

' SRC\gplot.c (668, 1)
' gplotSimpleXY1()
' gplotSimpleXY1(NUMA *, NUMA *, l_int32, l_int32, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This gives a plot of a %nay vs %nax, generated in
''' the specified output format.  The title is optional.
''' (2) Use 0 for default plotstyle (lines).
''' (3) %nax is optional.  If NULL, %nay is plotted against
''' the array index.
''' (4) When calling these simple plot functions more than once, use
''' different %outroot to avoid overwriting the output files.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nax">[in][optional] - </param>
'''  <param name="nay">[in] - </param>
'''  <param name="plotstyle">[in] - GPLOT_LINES, GPLOT_POINTS, GPLOT_IMPULSES, GPLOT_LINESPOINTS, GPLOT_DOTS</param>
'''  <param name="outformat">[in] - GPLOT_PNG, GPLOT_PS, GPLOT_EPS, GPLOT_LATEX</param>
'''  <param name="outroot">[in] - root of output files</param>
'''  <param name="title">[in][optional] - , can be NULL</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function gplotSimpleXY1(
				ByVal nax as Numa, 
				ByVal nay as Numa, 
				ByVal plotstyle as Enumerations.GPLOT_STYLE, 
				ByVal outformat as Enumerations.GPLOT_OUTPUT, 
				ByVal outroot as String, 
				ByVal title as String) as Integer

	If IsNothing (nay) then Throw New ArgumentNullException  ("nay cannot be Nothing")
	If IsNothing (outroot) then Throw New ArgumentNullException  ("outroot cannot be Nothing")

	Dim naxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nax) Then naxPTR = nax.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.gplotSimpleXY1( naxPTR, nay.Pointer, plotstyle, outformat, outroot, title)

	Return _Result
End Function

' SRC\gplot.c (723, 1)
' gplotSimpleXY2()
' gplotSimpleXY2(NUMA *, NUMA *, NUMA *, l_int32, l_int32, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This gives plots of %nay1 and %nay2 against nax, generated
''' in the specified output format.  The title is optional.
''' (2) Use 0 for default plotstyle (lines).
''' (3) %nax is optional.  If NULL, %nay1 and %nay2 are plotted
''' against the array index.
''' (4) When calling these simple plot functions more than once, use
''' different %outroot to avoid overwriting the output files.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nax">[in] - LToptional; can be NULL</param>
'''  <param name="nay1">[in] - </param>
'''  <param name="nay2">[in] - </param>
'''  <param name="plotstyle">[in] - GPLOT_LINES, GPLOT_POINTS, GPLOT_IMPULSES, GPLOT_LINESPOINTS, GPLOT_DOTS</param>
'''  <param name="outformat">[in] - GPLOT_PNG, GPLOT_PS, GPLOT_EPS, GPLOT_LATEX</param>
'''  <param name="outroot">[in] - root of output files</param>
'''  <param name="title">[in][optional] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function gplotSimpleXY2(
				ByVal nax as Numa, 
				ByVal nay1 as Numa, 
				ByVal nay2 as Numa, 
				ByVal plotstyle as Enumerations.GPLOT_STYLE, 
				ByVal outformat as Enumerations.GPLOT_OUTPUT, 
				ByVal outroot as String, 
				ByVal title as String) as Integer

	If IsNothing (nax) then Throw New ArgumentNullException  ("nax cannot be Nothing")
	If IsNothing (nay1) then Throw New ArgumentNullException  ("nay1 cannot be Nothing")
	If IsNothing (nay2) then Throw New ArgumentNullException  ("nay2 cannot be Nothing")
	If IsNothing (outroot) then Throw New ArgumentNullException  ("outroot cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.gplotSimpleXY2( nax.Pointer, nay1.Pointer, nay2.Pointer, plotstyle, outformat, outroot, title)

	Return _Result
End Function

' SRC\gplot.c (779, 1)
' gplotSimpleXYN()
' gplotSimpleXYN(NUMA *, NUMAA *, l_int32, l_int32, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This gives plots of each Numa in %naa against nax,
''' generated in the specified output format.  The title is optional.
''' (2) Use 0 for default plotstyle (lines).
''' (3) %nax is optional.  If NULL, each Numa array is plotted against
''' the array index.
''' (4) When calling these simple plot functions more than once, use
''' different %outroot to avoid overwriting the output files.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nax">[in][optional] - ; can be NULL</param>
'''  <param name="naay">[in] - numaa of arrays to plot against %nax</param>
'''  <param name="plotstyle">[in] - GPLOT_LINES, GPLOT_POINTS, GPLOT_IMPULSES, GPLOT_LINESPOINTS, GPLOT_DOTS</param>
'''  <param name="outformat">[in] - GPLOT_PNG, GPLOT_PS, GPLOT_EPS, GPLOT_LATEX</param>
'''  <param name="outroot">[in] - root of output files</param>
'''  <param name="title">[in][optional] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function gplotSimpleXYN(
				ByVal nax as Numa, 
				ByVal naay as Numaa, 
				ByVal plotstyle as Enumerations.GPLOT_STYLE, 
				ByVal outformat as Enumerations.GPLOT_OUTPUT, 
				ByVal outroot as String, 
				ByVal title as String) as Integer

	If IsNothing (naay) then Throw New ArgumentNullException  ("naay cannot be Nothing")
	If IsNothing (outroot) then Throw New ArgumentNullException  ("outroot cannot be Nothing")

	Dim naxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nax) Then naxPTR = nax.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.gplotSimpleXYN( naxPTR, naay.Pointer, plotstyle, outformat, outroot, title)

	Return _Result
End Function

' SRC\gplot.c (827, 1)
' gplotRead()
' gplotRead(const char *) as GPLOT *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>gplot, or NULL on error</returns>
Public Shared Function gplotRead(
				ByVal filename as String) as GPlot

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.gplotRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new GPlot(_Result)
End Function

' SRC\gplot.c (912, 1)
' gplotWrite()
' gplotWrite(const char *, GPLOT *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="gplot">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function gplotWrite(
				ByVal filename as String, 
				ByVal gplot as GPlot) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (gplot) then Throw New ArgumentNullException  ("gplot cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.gplotWrite( filename, gplot.Pointer)

	Return _Result
End Function

#End Region
#Region "SRC\graphics.c"
' SRC\graphics.c (138, 1)
' generatePtaLine()
' generatePtaLine(l_int32, l_int32, l_int32, l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) Uses Bresenham line drawing, which results in an 8-connected line.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="x1">[in] - end point 1</param>
'''  <param name="y1">[in] - end point 1</param>
'''  <param name="x2">[in] - end point 2</param>
'''  <param name="y2">[in] - end point 2</param>
'''   <returns>pta, or NULL on error</returns>
Public Shared Function generatePtaLine(
				ByVal x1 as Integer, 
				ByVal y1 as Integer, 
				ByVal x2 as Integer, 
				ByVal y2 as Integer) as Pta



	Dim _Result as IntPtr = LeptonicaSharp.Natives.generatePtaLine( x1, y1, x2, y2)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\graphics.c (203, 1)
' generatePtaWideLine()
' generatePtaWideLine(l_int32, l_int32, l_int32, l_int32, l_int32) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="x1">[in] - end point 1</param>
'''  <param name="y1">[in] - end point 1</param>
'''  <param name="x2">[in] - end point 2</param>
'''  <param name="y2">[in] - end point 2</param>
'''  <param name="width">[in] - </param>
'''   <returns>ptaj, or NULL on error</returns>
Public Shared Function generatePtaWideLine(
				ByVal x1 as Integer, 
				ByVal y1 as Integer, 
				ByVal x2 as Integer, 
				ByVal y2 as Integer, 
				ByVal width as Integer) as Pta



	Dim _Result as IntPtr = LeptonicaSharp.Natives.generatePtaWideLine( x1, y1, x2, y2, width)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\graphics.c (273, 1)
' generatePtaBox()
' generatePtaBox(BOX *, l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) Because the box is constructed so that we don't have any
''' overlapping lines, there is no need to remove duplicates.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''  <param name="width">[in] - of line</param>
'''   <returns>ptad, or NULL on error</returns>
Public Shared Function generatePtaBox(
				ByVal box as Box, 
				ByVal width as Integer) as Pta

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.generatePtaBox( box.Pointer, width)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\graphics.c (350, 1)
' generatePtaBoxa()
' generatePtaBoxa(BOXA *, l_int32, l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) If the boxa has overlapping boxes, and if blending will
''' be used to give a transparent effect, transparency
''' artifacts at line intersections can be removed using
''' removedups = 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="width">[in] - </param>
'''  <param name="removedups">[in] - 1 to remove, 0 to leave</param>
'''   <returns>ptad, or NULL on error</returns>
Public Shared Function generatePtaBoxa(
				ByVal boxa as Boxa, 
				ByVal width as Integer, 
				ByVal removedups as Integer) as Pta

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.generatePtaBoxa( boxa.Pointer, width, removedups)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\graphics.c (405, 1)
' generatePtaHashBox()
' generatePtaHashBox(BOX *, l_int32, l_int32, l_int32, l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) The orientation takes on one of 4 orientations (horiz, vertical,
''' slope +1, slope -1).
''' (2) The full outline is also drawn if %outline = 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in] - </param>
'''  <param name="spacing">[in] - spacing between lines; must be GT 1</param>
'''  <param name="width">[in] - of line</param>
'''  <param name="orient">[in] - orientation of lines L_HORIZONTAL_LINE, ...</param>
'''  <param name="outline">[in] - 0 to skip drawing box outline</param>
'''   <returns>ptad, or NULL on error</returns>
Public Shared Function generatePtaHashBox(
				ByVal box as Box, 
				ByVal spacing as Integer, 
				ByVal width as Integer, 
				ByVal orient as Enumerations.L_LINE, 
				ByVal outline as Integer) as Pta

	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.generatePtaHashBox( box.Pointer, spacing, width, orient, outline)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\graphics.c (505, 1)
' generatePtaHashBoxa()
' generatePtaHashBoxa(BOXA *, l_int32, l_int32, l_int32, l_int32, l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) The orientation takes on one of 4 orientations (horiz, vertical,
''' slope +1, slope -1).
''' (2) The full outline is also drawn if %outline = 1.
''' (3) If the boxa has overlapping boxes, and if blending will
''' be used to give a transparent effect, transparency
''' artifacts at line intersections can be removed using
''' removedups = 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="spacing">[in] - spacing between lines; must be GT 1</param>
'''  <param name="width">[in] - of line</param>
'''  <param name="orient">[in] - orientation of lines L_HORIZONTAL_LINE, ...</param>
'''  <param name="outline">[in] - 0 to skip drawing box outline</param>
'''  <param name="removedups">[in] - 1 to remove, 0 to leave</param>
'''   <returns>ptad, or NULL on error</returns>
Public Shared Function generatePtaHashBoxa(
				ByVal boxa as Boxa, 
				ByVal spacing as Integer, 
				ByVal width as Integer, 
				ByVal orient as Enumerations.L_LINE, 
				ByVal outline as Integer, 
				ByVal removedups as Integer) as Pta

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.generatePtaHashBoxa( boxa.Pointer, spacing, width, orient, outline, removedups)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\graphics.c (565, 1)
' generatePtaaBoxa()
' generatePtaaBoxa(BOXA *) as PTAA *
'''  <summary>
''' Notes
''' (1) This generates a pta of the four corners for each box in
''' the boxa.
''' (2) Each of these pta can be rendered onto a pix with random colors,
''' by using pixRenderRandomCmapPtaa() with closeflag = 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''   <returns>ptaa, or NULL on error</returns>
Public Shared Function generatePtaaBoxa(
				ByVal boxa as Boxa) as Ptaa

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.generatePtaaBoxa( boxa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Ptaa(_Result)
End Function

' SRC\graphics.c (616, 1)
' generatePtaaHashBoxa()
' generatePtaaHashBoxa(BOXA *, l_int32, l_int32, l_int32, l_int32) as PTAA *
'''  <summary>
''' Notes
''' (1) The orientation takes on one of 4 orientations (horiz, vertical,
''' slope +1, slope -1).
''' (2) The full outline is also drawn if %outline = 1.
''' (3) Each of these pta can be rendered onto a pix with random colors,
''' by using pixRenderRandomCmapPtaa() with closeflag = 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - </param>
'''  <param name="spacing">[in] - spacing between hash lines; must be GT 1</param>
'''  <param name="width">[in] - hash line width</param>
'''  <param name="orient">[in] - orientation of lines L_HORIZONTAL_LINE, ...</param>
'''  <param name="outline">[in] - 0 to skip drawing box outline</param>
'''   <returns>ptaa, or NULL on error</returns>
Public Shared Function generatePtaaHashBoxa(
				ByVal boxa as Boxa, 
				ByVal spacing as Integer, 
				ByVal width as Integer, 
				ByVal orient as Enumerations.L_LINE, 
				ByVal outline as Integer) as Ptaa

	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.generatePtaaHashBoxa( boxa.Pointer, spacing, width, orient, outline)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Ptaa(_Result)
End Function

' SRC\graphics.c (664, 1)
' generatePtaPolyline()
' generatePtaPolyline(PTA *, l_int32, l_int32, l_int32) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - vertices of polyline</param>
'''  <param name="width">[in] - </param>
'''  <param name="closeflag">[in] - 1 to close the contour; 0 otherwise</param>
'''  <param name="removedups">[in] - 1 to remove, 0 to leave</param>
'''   <returns>ptad, or NULL on error</returns>
Public Shared Function generatePtaPolyline(
				ByVal ptas as Pta, 
				ByVal width as Integer, 
				ByVal closeflag as Integer, 
				ByVal removedups as Integer) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.generatePtaPolyline( ptas.Pointer, width, closeflag, removedups)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\graphics.c (722, 1)
' generatePtaGrid()
' generatePtaGrid(l_int32, l_int32, l_int32, l_int32, l_int32) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="w">[in] - of region where grid will be displayed</param>
'''  <param name="h">[in] - of region where grid will be displayed</param>
'''  <param name="nx">[in] - number of rectangles in each direction in grid</param>
'''  <param name="ny">[in] - number of rectangles in each direction in grid</param>
'''  <param name="width">[in] - of rendered lines</param>
'''   <returns>ptad, or NULL on error</returns>
Public Shared Function generatePtaGrid(
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByVal width as Integer) as Pta



	Dim _Result as IntPtr = LeptonicaSharp.Natives.generatePtaGrid( w, h, nx, ny, width)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\graphics.c (780, 1)
' convertPtaLineTo4cc()
' convertPtaLineTo4cc(PTA *) as PTA *
'''  <summary>
''' Notes
''' (1) When a polyline is generated with width = 1, the resulting
''' line is not 4-connected in general.  This function adds
''' points as necessary to convert the line to 4-cconnected.
''' It is useful when rendering 1 bpp on a pix.
''' (2) Do not use this for lines generated with width GT 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - 8-connected line of points</param>
'''   <returns>ptad 4-connected line, or NULL on error</returns>
Public Shared Function convertPtaLineTo4cc(
				ByVal ptas as Pta) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.convertPtaLineTo4cc( ptas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\graphics.c (823, 1)
' generatePtaFilledCircle()
' generatePtaFilledCircle(l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) The circle is has diameter = 2  radius + 1.
''' (2) It is located with the center of the circle at the
''' point (radius, radius).
''' (3) Consequently, it typically must be translated if
''' it is to represent a set of pixels in an image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="radius">[in] - </param>
'''   <returns>pta, or NULL on error</returns>
Public Shared Function generatePtaFilledCircle(
				ByVal radius as Integer) as Pta



	Dim _Result as IntPtr = LeptonicaSharp.Natives.generatePtaFilledCircle( radius)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\graphics.c (863, 1)
' generatePtaFilledSquare()
' generatePtaFilledSquare(l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) The center of the square can be chosen to be at
''' (side / 2, side / 2).  It must be translated by this amount
''' when used for replication.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="side">[in] - </param>
'''   <returns>pta, or NULL on error</returns>
Public Shared Function generatePtaFilledSquare(
				ByVal side as Integer) as Pta



	Dim _Result as IntPtr = LeptonicaSharp.Natives.generatePtaFilledSquare( side)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\graphics.c (897, 1)
' generatePtaLineFromPt()
' generatePtaLineFromPt(l_int32, l_int32, l_float64, l_float64) as PTA *
'''  <summary>
''' Notes
''' (1) The %length of the line is 1 greater than the distance
''' used in locatePtRadially().  Example a distance of 1
''' gives rise to a length of 2.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="x">[in] - point of origination</param>
'''  <param name="y">[in] - point of origination</param>
'''  <param name="length">[in] - of line, including starting point</param>
'''  <param name="radang">[in] - angle in radians, CW from horizontal</param>
'''   <returns>pta, or NULL on error</returns>
Public Shared Function generatePtaLineFromPt(
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal length as Double, 
				ByVal radang as Double) as Pta

	If IsNothing (length) then Throw New ArgumentNullException  ("length cannot be Nothing")
	If IsNothing (radang) then Throw New ArgumentNullException  ("radang cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.generatePtaLineFromPt( x, y, length, radang)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\graphics.c (921, 1)
' locatePtRadially()
' locatePtRadially(l_int32, l_int32, l_float64, l_float64, l_float64 *, l_float64 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="xr">[in] - reference point</param>
'''  <param name="yr">[in] - reference point</param>
'''  <param name="dist">[in] - distance of point from reference point along line given by the specified angle</param>
'''  <param name="radang">[in] - angle in radians, CW from horizontal</param>
'''  <param name="px">[out] - location of point</param>
'''  <param name="py">[out] - location of point</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function locatePtRadially(
				ByVal xr as Integer, 
				ByVal yr as Integer, 
				ByVal dist as Double, 
				ByVal radang as Double, 
				ByRef px as Double(), 
				ByRef py as Double()) as Integer

	If IsNothing (dist) then Throw New ArgumentNullException  ("dist cannot be Nothing")
	If IsNothing (radang) then Throw New ArgumentNullException  ("radang cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.locatePtRadially( xr, yr, dist, radang, px, py)

	Return _Result
End Function

' SRC\graphics.c (963, 1)
' pixRenderPlotFromNuma()
' pixRenderPlotFromNuma(PIX **, NUMA *, l_int32, l_int32, l_int32, l_uint32) as l_ok
'''  <summary>
''' Notes
''' (1) Simplified interface for plotting row or column aligned data
''' on a pix.
''' (2) This replaces %pix with a 32 bpp rgb version if it is not
''' already 32 bpp.  It then draws the plot on the pix.
''' (3) See makePlotPtaFromNumaGen() for more details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ppix">[in,out] - any type; replaced if not 32 bpp rgb</param>
'''  <param name="na">[in] - to be plotted</param>
'''  <param name="plotloc">[in] - location of plot L_PLOT_AT_TOP, etc</param>
'''  <param name="linewidth">[in] - width of "line" that is drawn; between 1 and 7</param>
'''  <param name="max">[in] - maximum excursion in pixels from baseline</param>
'''  <param name="color">[in] - plot color 0xrrggbb00</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderPlotFromNuma(
				ByRef ppix as Pix, 
				ByVal na as Numa, 
				ByVal plotloc as Enumerations.L_PLOT_AT, 
				ByVal linewidth as Integer, 
				ByVal max as Integer, 
				ByVal color as UInteger) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")

	Dim ppixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppix) Then ppixPTR = ppix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderPlotFromNuma( ppixPTR, na.Pointer, plotloc, linewidth, max, color)
	if ppixPTR <> IntPtr.Zero then ppix = new Pix(ppixPTR)

	Return _Result
End Function

' SRC\graphics.c (1021, 1)
' makePlotPtaFromNuma()
' makePlotPtaFromNuma(NUMA *, l_int32, l_int32, l_int32, l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) This generates points from %numa representing y(x) or x(y)
''' with respect to a pix.  A horizontal plot y(x) is drawn for
''' a function of column position, and a vertical plot is drawn
''' for a function x(y) of row position.  The baseline is located
''' so that all plot points will fit in the pix.
''' (2) See makePlotPtaFromNumaGen() for more details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="size">[in] - pix height for horizontal plot; width for vertical plot</param>
'''  <param name="plotloc">[in] - location of plot L_PLOT_AT_TOP, etc</param>
'''  <param name="linewidth">[in] - width of "line" that is drawn; between 1 and 7</param>
'''  <param name="max">[in] - maximum excursion in pixels from baseline</param>
'''   <returns>ptad, or NULL on error</returns>
Public Shared Function makePlotPtaFromNuma(
				ByVal na as Numa, 
				ByVal size as Integer, 
				ByVal plotloc as Enumerations.L_PLOT_AT, 
				ByVal linewidth as Integer, 
				ByVal max as Integer) as Pta

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.makePlotPtaFromNuma( na.Pointer, size, plotloc, linewidth, max)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\graphics.c (1077, 1)
' pixRenderPlotFromNumaGen()
' pixRenderPlotFromNumaGen(PIX **, NUMA *, l_int32, l_int32, l_int32, l_int32, l_int32, l_uint32) as l_ok
'''  <summary>
''' Notes
''' (1) General interface for plotting row or column aligned data
''' on a pix.
''' (2) This replaces %pix with a 32 bpp rgb version if it is not
''' already 32 bpp.  It then draws the plot on the pix.
''' (3) See makePlotPtaFromNumaGen() for other input parameters.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ppix">[in,out] - any type; replaced if not 32 bpp rgb</param>
'''  <param name="na">[in] - to be plotted</param>
'''  <param name="orient">[in] - L_HORIZONTAL_LINE, L_VERTICAL_LINE</param>
'''  <param name="linewidth">[in] - width of "line" that is drawn; between 1 and 7</param>
'''  <param name="refpos">[in] - reference position y for horizontal and x for vertical</param>
'''  <param name="max">[in] - maximum excursion in pixels from baseline</param>
'''  <param name="drawref">[in] - 1 to draw the reference line and the normal to it</param>
'''  <param name="color">[in] - plot color 0xrrggbb00</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderPlotFromNumaGen(
				ByRef ppix as Pix, 
				ByVal na as Numa, 
				ByVal orient as Enumerations.L_LINE, 
				ByVal linewidth as Integer, 
				ByVal refpos as Integer, 
				ByVal max as Integer, 
				ByVal drawref as Integer, 
				ByVal color as UInteger) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")

	Dim ppixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppix) Then ppixPTR = ppix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderPlotFromNumaGen( ppixPTR, na.Pointer, orient, linewidth, refpos, max, drawref, color)
	if ppixPTR <> IntPtr.Zero then ppix = new Pix(ppixPTR)

	Return _Result
End Function

' SRC\graphics.c (1142, 1)
' makePlotPtaFromNumaGen()
' makePlotPtaFromNumaGen(NUMA *, l_int32, l_int32, l_int32, l_int32, l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) This generates points from %numa representing y(x) or x(y)
''' with respect to a pix.  For y(x), we draw a horizontal line
''' at the reference position and a vertical line at the edge; then
''' we draw the values of %numa, scaled so that the maximum
''' excursion from the reference position is %max pixels.
''' (2) The start and delx parameters of %numa are used to refer
''' its values to the raster lines (L_VERTICAL_LINE) or columns
''' (L_HORIZONTAL_LINE).
''' (3) The linewidth is chosen in the interval [1 ... 7].
''' (4) %refpos should be chosen so the plot is entirely within the pix
''' that it will be painted onto.
''' (5) This would typically be used to plot, in place, a function
''' computed along pixel rows or columns.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="orient">[in] - L_HORIZONTAL_LINE, L_VERTICAL_LINE</param>
'''  <param name="linewidth">[in] - width of "line" that is drawn; between 1 and 7</param>
'''  <param name="refpos">[in] - reference position y for horizontal and x for vertical</param>
'''  <param name="max">[in] - maximum excursion in pixels from baseline</param>
'''  <param name="drawref">[in] - 1 to draw the reference line and the normal to it</param>
'''   <returns>ptad, or NULL on error</returns>
Public Shared Function makePlotPtaFromNumaGen(
				ByVal na as Numa, 
				ByVal orient as Enumerations.L_LINE, 
				ByVal linewidth as Integer, 
				ByVal refpos as Integer, 
				ByVal max as Integer, 
				ByVal drawref as Integer) as Pta

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.makePlotPtaFromNumaGen( na.Pointer, orient, linewidth, refpos, max, drawref)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\graphics.c (1254, 1)
' pixRenderPta()
' pixRenderPta(PIX *, PTA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) L_SET_PIXELS puts all image bits in each pixel to 1
''' (black for 1 bpp; white for depth GT 1)
''' (2) L_CLEAR_PIXELS puts all image bits in each pixel to 0
''' (white for 1 bpp; black for depth GT 1)
''' (3) L_FLIP_PIXELS reverses all image bits in each pixel
''' (4) This function clips the rendering to the pix.  It performs
''' clipping for functions such as pixRenderLine(),
''' pixRenderBox() and pixRenderBoxa(), that call pixRenderPta().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth, not cmapped</param>
'''  <param name="pta">[in] - arbitrary set of points</param>
'''  <param name="op">[in] - one of L_SET_PIXELS, L_CLEAR_PIXELS, L_FLIP_PIXELS</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderPta(
				ByVal pix as Pix, 
				ByVal pta as Pta, 
				ByVal op as Enumerations.L_PIXELS) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderPta( pix.Pointer, pta.Pointer, op)

	Return _Result
End Function

' SRC\graphics.c (1343, 1)
' pixRenderPtaArb()
' pixRenderPtaArb(PIX *, PTA *, l_uint8, l_uint8, l_uint8) as l_ok
'''  <summary>
''' Notes
''' (1) If pix is colormapped, render this color (or the nearest
''' color if the cmap is full) on each pixel.
''' (2) The rgb components have the standard dynamic range [0 ... 255]
''' (3) If pix is not colormapped, do the best job you can using
''' the input colors
''' ~ d = 1 set the pixels
''' ~ d = 2, 4, 8 average the input rgb value
''' ~ d = 32 use the input rgb value
''' (4) This function clips the rendering to the pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth, cmapped ok</param>
'''  <param name="pta">[in] - arbitrary set of points</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderPtaArb(
				ByVal pix as Pix, 
				ByVal pta as Pta, 
				ByVal rval as Byte, 
				ByVal gval as Byte, 
				ByVal bval as Byte) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")
	If IsNothing (rval) then Throw New ArgumentNullException  ("rval cannot be Nothing")
	If IsNothing (gval) then Throw New ArgumentNullException  ("gval cannot be Nothing")
	If IsNothing (bval) then Throw New ArgumentNullException  ("bval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderPtaArb( pix.Pointer, pta.Pointer, rval, gval, bval)

	Return _Result
End Function

' SRC\graphics.c (1418, 1)
' pixRenderPtaBlend()
' pixRenderPtaBlend(PIX *, PTA *, l_uint8, l_uint8, l_uint8, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This function clips the rendering to the pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 32 bpp rgb</param>
'''  <param name="pta">[in] - arbitrary set of points</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''  <param name="fract">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderPtaBlend(
				ByVal pix as Pix, 
				ByVal pta as Pta, 
				ByVal rval as Byte, 
				ByVal gval as Byte, 
				ByVal bval as Byte, 
				ByVal fract as Single) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")
	If IsNothing (rval) then Throw New ArgumentNullException  ("rval cannot be Nothing")
	If IsNothing (gval) then Throw New ArgumentNullException  ("gval cannot be Nothing")
	If IsNothing (bval) then Throw New ArgumentNullException  ("bval cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {32}.contains (pix.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderPtaBlend( pix.Pointer, pta.Pointer, rval, gval, bval, fract)

	Return _Result
End Function

' SRC\graphics.c (1483, 1)
' pixRenderLine()
' pixRenderLine(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth, not cmapped</param>
'''  <param name="x1">[in] - </param>
'''  <param name="y1">[in] - </param>
'''  <param name="x2">[in] - </param>
'''  <param name="y2">[in] - </param>
'''  <param name="width">[in] - thickness of line</param>
'''  <param name="op">[in] - one of L_SET_PIXELS, L_CLEAR_PIXELS, L_FLIP_PIXELS</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderLine(
				ByVal pix as Pix, 
				ByVal x1 as Integer, 
				ByVal y1 as Integer, 
				ByVal x2 as Integer, 
				ByVal y2 as Integer, 
				ByVal width as Integer, 
				ByVal op as Enumerations.L_PIXELS) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderLine( pix.Pointer, x1, y1, x2, y2, width, op)

	Return _Result
End Function

' SRC\graphics.c (1523, 1)
' pixRenderLineArb()
' pixRenderLineArb(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_uint8, l_uint8, l_uint8) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth, cmapped ok</param>
'''  <param name="x1">[in] - </param>
'''  <param name="y1">[in] - </param>
'''  <param name="x2">[in] - </param>
'''  <param name="y2">[in] - </param>
'''  <param name="width">[in] - thickness of line</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderLineArb(
				ByVal pix as Pix, 
				ByVal x1 as Integer, 
				ByVal y1 as Integer, 
				ByVal x2 as Integer, 
				ByVal y2 as Integer, 
				ByVal width as Integer, 
				ByVal rval as Byte, 
				ByVal gval as Byte, 
				ByVal bval as Byte) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (rval) then Throw New ArgumentNullException  ("rval cannot be Nothing")
	If IsNothing (gval) then Throw New ArgumentNullException  ("gval cannot be Nothing")
	If IsNothing (bval) then Throw New ArgumentNullException  ("bval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderLineArb( pix.Pointer, x1, y1, x2, y2, width, rval, gval, bval)

	Return _Result
End Function

' SRC\graphics.c (1564, 1)
' pixRenderLineBlend()
' pixRenderLineBlend(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_uint8, l_uint8, l_uint8, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 32 bpp rgb</param>
'''  <param name="x1">[in] - </param>
'''  <param name="y1">[in] - </param>
'''  <param name="x2">[in] - </param>
'''  <param name="y2">[in] - </param>
'''  <param name="width">[in] - thickness of line</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''  <param name="fract">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderLineBlend(
				ByVal pix as Pix, 
				ByVal x1 as Integer, 
				ByVal y1 as Integer, 
				ByVal x2 as Integer, 
				ByVal y2 as Integer, 
				ByVal width as Integer, 
				ByVal rval as Byte, 
				ByVal gval as Byte, 
				ByVal bval as Byte, 
				ByVal fract as Single) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (rval) then Throw New ArgumentNullException  ("rval cannot be Nothing")
	If IsNothing (gval) then Throw New ArgumentNullException  ("gval cannot be Nothing")
	If IsNothing (bval) then Throw New ArgumentNullException  ("bval cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {32}.contains (pix.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderLineBlend( pix.Pointer, x1, y1, x2, y2, width, rval, gval, bval, fract)

	Return _Result
End Function

' SRC\graphics.c (1604, 1)
' pixRenderBox()
' pixRenderBox(PIX *, BOX *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth, not cmapped</param>
'''  <param name="box">[in] - </param>
'''  <param name="width">[in] - thickness of box lines</param>
'''  <param name="op">[in] - one of L_SET_PIXELS, L_CLEAR_PIXELS, L_FLIP_PIXELS</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderBox(
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByVal width as Integer, 
				ByVal op as Enumerations.L_PIXELS) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderBox( pix.Pointer, box.Pointer, width, op)

	Return _Result
End Function

' SRC\graphics.c (1642, 1)
' pixRenderBoxArb()
' pixRenderBoxArb(PIX *, BOX *, l_int32, l_uint8, l_uint8, l_uint8) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth, cmapped ok</param>
'''  <param name="box">[in] - </param>
'''  <param name="width">[in] - thickness of box lines</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderBoxArb(
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByVal width as Integer, 
				ByVal rval as Byte, 
				ByVal gval as Byte, 
				ByVal bval as Byte) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If IsNothing (rval) then Throw New ArgumentNullException  ("rval cannot be Nothing")
	If IsNothing (gval) then Throw New ArgumentNullException  ("gval cannot be Nothing")
	If IsNothing (bval) then Throw New ArgumentNullException  ("bval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderBoxArb( pix.Pointer, box.Pointer, width, rval, gval, bval)

	Return _Result
End Function

' SRC\graphics.c (1682, 1)
' pixRenderBoxBlend()
' pixRenderBoxBlend(PIX *, BOX *, l_int32, l_uint8, l_uint8, l_uint8, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 32 bpp rgb</param>
'''  <param name="box">[in] - </param>
'''  <param name="width">[in] - thickness of box lines</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''  <param name="fract">[in] - in [0.0 - 1.0]; complete transparency (no effect if 0.0; no transparency if 1.0)</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderBoxBlend(
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByVal width as Integer, 
				ByVal rval as Byte, 
				ByVal gval as Byte, 
				ByVal bval as Byte, 
				ByVal fract as Single) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If IsNothing (rval) then Throw New ArgumentNullException  ("rval cannot be Nothing")
	If IsNothing (gval) then Throw New ArgumentNullException  ("gval cannot be Nothing")
	If IsNothing (bval) then Throw New ArgumentNullException  ("bval cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {32}.contains (pix.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderBoxBlend( pix.Pointer, box.Pointer, width, rval, gval, bval, fract)

	Return _Result
End Function

' SRC\graphics.c (1721, 1)
' pixRenderBoxa()
' pixRenderBoxa(PIX *, BOXA *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth, not cmapped</param>
'''  <param name="boxa">[in] - </param>
'''  <param name="width">[in] - thickness of line</param>
'''  <param name="op">[in] - one of L_SET_PIXELS, L_CLEAR_PIXELS, L_FLIP_PIXELS</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderBoxa(
				ByVal pix as Pix, 
				ByVal boxa as Boxa, 
				ByVal width as Integer, 
				ByVal op as Enumerations.L_PIXELS) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderBoxa( pix.Pointer, boxa.Pointer, width, op)

	Return _Result
End Function

' SRC\graphics.c (1759, 1)
' pixRenderBoxaArb()
' pixRenderBoxaArb(PIX *, BOXA *, l_int32, l_uint8, l_uint8, l_uint8) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth; colormapped is ok</param>
'''  <param name="boxa">[in] - </param>
'''  <param name="width">[in] - thickness of line</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderBoxaArb(
				ByVal pix as Pix, 
				ByVal boxa as Boxa, 
				ByVal width as Integer, 
				ByVal rval as Byte, 
				ByVal gval as Byte, 
				ByVal bval as Byte) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If IsNothing (rval) then Throw New ArgumentNullException  ("rval cannot be Nothing")
	If IsNothing (gval) then Throw New ArgumentNullException  ("gval cannot be Nothing")
	If IsNothing (bval) then Throw New ArgumentNullException  ("bval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderBoxaArb( pix.Pointer, boxa.Pointer, width, rval, gval, bval)

	Return _Result
End Function

' SRC\graphics.c (1800, 1)
' pixRenderBoxaBlend()
' pixRenderBoxaBlend(PIX *, BOXA *, l_int32, l_uint8, l_uint8, l_uint8, l_float32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 32 bpp rgb</param>
'''  <param name="boxa">[in] - </param>
'''  <param name="width">[in] - thickness of line</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''  <param name="fract">[in] - in [0.0 - 1.0]; complete transparency (no effect if 0.0; no transparency if 1.0)</param>
'''  <param name="removedups">[in] - 1 to remove; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderBoxaBlend(
				ByVal pix as Pix, 
				ByVal boxa as Boxa, 
				ByVal width as Integer, 
				ByVal rval as Byte, 
				ByVal gval as Byte, 
				ByVal bval as Byte, 
				ByVal fract as Single, 
				ByVal removedups as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If IsNothing (rval) then Throw New ArgumentNullException  ("rval cannot be Nothing")
	If IsNothing (gval) then Throw New ArgumentNullException  ("gval cannot be Nothing")
	If IsNothing (bval) then Throw New ArgumentNullException  ("bval cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {32}.contains (pix.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderBoxaBlend( pix.Pointer, boxa.Pointer, width, rval, gval, bval, fract, removedups)

	Return _Result
End Function

' SRC\graphics.c (1843, 1)
' pixRenderHashBox()
' pixRenderHashBox(PIX *, BOX *, l_int32, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth, not cmapped</param>
'''  <param name="box">[in] - </param>
'''  <param name="spacing">[in] - spacing between lines; must be GT 1</param>
'''  <param name="width">[in] - thickness of box and hash lines</param>
'''  <param name="orient">[in] - orientation of lines L_HORIZONTAL_LINE, ...</param>
'''  <param name="outline">[in] - 0 to skip drawing box outline</param>
'''  <param name="op">[in] - one of L_SET_PIXELS, L_CLEAR_PIXELS, L_FLIP_PIXELS</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderHashBox(
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByVal spacing as Integer, 
				ByVal width as Integer, 
				ByVal orient as Enumerations.L_LINE, 
				ByVal outline as Integer, 
				ByVal op as Enumerations.L_PIXELS) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderHashBox( pix.Pointer, box.Pointer, spacing, width, orient, outline, op)

	Return _Result
End Function

' SRC\graphics.c (1893, 1)
' pixRenderHashBoxArb()
' pixRenderHashBoxArb(PIX *, BOX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth; cmapped ok</param>
'''  <param name="box">[in] - </param>
'''  <param name="spacing">[in] - spacing between lines; must be GT 1</param>
'''  <param name="width">[in] - thickness of box and hash lines</param>
'''  <param name="orient">[in] - orientation of lines L_HORIZONTAL_LINE, ...</param>
'''  <param name="outline">[in] - 0 to skip drawing box outline</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderHashBoxArb(
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByVal spacing as Integer, 
				ByVal width as Integer, 
				ByVal orient as Enumerations.L_LINE, 
				ByVal outline as Integer, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderHashBoxArb( pix.Pointer, box.Pointer, spacing, width, orient, outline, rval, gval, bval)

	Return _Result
End Function

' SRC\graphics.c (1945, 1)
' pixRenderHashBoxBlend()
' pixRenderHashBoxBlend(PIX *, BOX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 32 bpp</param>
'''  <param name="box">[in] - </param>
'''  <param name="spacing">[in] - spacing between lines; must be GT 1</param>
'''  <param name="width">[in] - thickness of box and hash lines</param>
'''  <param name="orient">[in] - orientation of lines L_HORIZONTAL_LINE, ...</param>
'''  <param name="outline">[in] - 0 to skip drawing box outline</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''  <param name="fract">[in] - in [0.0 - 1.0]; complete transparency (no effect if 0.0; no transparency if 1.0)</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderHashBoxBlend(
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByVal spacing as Integer, 
				ByVal width as Integer, 
				ByVal orient as Enumerations.L_LINE, 
				ByVal outline as Integer, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByVal fract as Single) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderHashBoxBlend( pix.Pointer, box.Pointer, spacing, width, orient, outline, rval, gval, bval, fract)

	Return _Result
End Function

' SRC\graphics.c (2003, 1)
' pixRenderHashMaskArb()
' pixRenderHashMaskArb(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place operation that renders hash lines
''' through a mask %pixm onto %pix.  The mask origin is
''' translated by (%x,%y) relative to the origin of %pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth; cmapped ok</param>
'''  <param name="pixm">[in] - 1 bpp clipping mask for hash marks</param>
'''  <param name="x">[in] - ,y   UL corner of %pixm with respect to %pix</param>
'''  <param name="spacing">[in] - spacing between lines; must be GT 1</param>
'''  <param name="width">[in] - thickness of box and hash lines</param>
'''  <param name="orient">[in] - orientation of lines L_HORIZONTAL_LINE, ...</param>
'''  <param name="outline">[in] - 0 to skip drawing box outline</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderHashMaskArb(
				ByVal pix as Pix, 
				ByVal pixm as Pix, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByVal spacing as Integer, 
				ByVal width as Integer, 
				ByVal orient as Enumerations.L_LINE, 
				ByVal outline as Integer, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderHashMaskArb( pix.Pointer, pixm.Pointer, x, y, spacing, width, orient, outline, rval, gval, bval)

	Return _Result
End Function

' SRC\graphics.c (2071, 1)
' pixRenderHashBoxa()
' pixRenderHashBoxa(PIX *, BOXA *, l_int32, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth, not cmapped</param>
'''  <param name="boxa">[in] - </param>
'''  <param name="spacing">[in] - spacing between lines; must be GT 1</param>
'''  <param name="width">[in] - thickness of box and hash lines</param>
'''  <param name="orient">[in] - orientation of lines L_HORIZONTAL_LINE, ...</param>
'''  <param name="outline">[in] - 0 to skip drawing box outline</param>
'''  <param name="op">[in] - one of L_SET_PIXELS, L_CLEAR_PIXELS, L_FLIP_PIXELS</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderHashBoxa(
				ByVal pix as Pix, 
				ByVal boxa as Boxa, 
				ByVal spacing as Integer, 
				ByVal width as Integer, 
				ByVal orient as Enumerations.L_LINE, 
				ByVal outline as Integer, 
				ByVal op as Enumerations.L_PIXELS) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderHashBoxa( pix.Pointer, boxa.Pointer, spacing, width, orient, outline, op)

	Return _Result
End Function

' SRC\graphics.c (2121, 1)
' pixRenderHashBoxaArb()
' pixRenderHashBoxaArb(PIX *, BOXA *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth; cmapped ok</param>
'''  <param name="boxa">[in] - </param>
'''  <param name="spacing">[in] - spacing between lines; must be GT 1</param>
'''  <param name="width">[in] - thickness of box and hash lines</param>
'''  <param name="orient">[in] - orientation of lines L_HORIZONTAL_LINE, ...</param>
'''  <param name="outline">[in] - 0 to skip drawing box outline</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderHashBoxaArb(
				ByVal pix as Pix, 
				ByVal boxa as Boxa, 
				ByVal spacing as Integer, 
				ByVal width as Integer, 
				ByVal orient as Enumerations.L_LINE, 
				ByVal outline as Integer, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderHashBoxaArb( pix.Pointer, boxa.Pointer, spacing, width, orient, outline, rval, gval, bval)

	Return _Result
End Function

' SRC\graphics.c (2173, 1)
' pixRenderHashBoxaBlend()
' pixRenderHashBoxaBlend(PIX *, BOXA *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 32 bpp rgb</param>
'''  <param name="boxa">[in] - </param>
'''  <param name="spacing">[in] - spacing between lines; must be GT 1</param>
'''  <param name="width">[in] - thickness of box and hash lines</param>
'''  <param name="orient">[in] - orientation of lines L_HORIZONTAL_LINE, ...</param>
'''  <param name="outline">[in] - 0 to skip drawing box outline</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''  <param name="fract">[in] - in [0.0 - 1.0]; complete transparency (no effect if 0.0; no transparency if 1.0)</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderHashBoxaBlend(
				ByVal pix as Pix, 
				ByVal boxa as Boxa, 
				ByVal spacing as Integer, 
				ByVal width as Integer, 
				ByVal orient as Enumerations.L_LINE, 
				ByVal outline as Integer, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByVal fract as Single) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {32}.contains (pix.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderHashBoxaBlend( pix.Pointer, boxa.Pointer, spacing, width, orient, outline, rval, gval, bval, fract)

	Return _Result
End Function

' SRC\graphics.c (2227, 1)
' pixRenderPolyline()
' pixRenderPolyline(PIX *, PTA *, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' This renders a closed contour.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth, not cmapped</param>
'''  <param name="ptas">[in] - </param>
'''  <param name="width">[in] - thickness of line</param>
'''  <param name="op">[in] - one of L_SET_PIXELS, L_CLEAR_PIXELS, L_FLIP_PIXELS</param>
'''  <param name="closeflag">[in] - 1 to close the contour; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderPolyline(
				ByVal pix as Pix, 
				ByVal ptas as Pta, 
				ByVal width as Integer, 
				ByVal op as Enumerations.L_PIXELS, 
				ByVal closeflag as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderPolyline( pix.Pointer, ptas.Pointer, width, op, closeflag)

	Return _Result
End Function

' SRC\graphics.c (2272, 1)
' pixRenderPolylineArb()
' pixRenderPolylineArb(PIX *, PTA *, l_int32, l_uint8, l_uint8, l_uint8, l_int32) as l_ok
'''  <summary>
''' Notes
''' This renders a closed contour.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth; cmapped ok</param>
'''  <param name="ptas">[in] - </param>
'''  <param name="width">[in] - thickness of line</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''  <param name="closeflag">[in] - 1 to close the contour; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderPolylineArb(
				ByVal pix as Pix, 
				ByVal ptas as Pta, 
				ByVal width as Integer, 
				ByVal rval as Byte, 
				ByVal gval as Byte, 
				ByVal bval as Byte, 
				ByVal closeflag as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (rval) then Throw New ArgumentNullException  ("rval cannot be Nothing")
	If IsNothing (gval) then Throw New ArgumentNullException  ("gval cannot be Nothing")
	If IsNothing (bval) then Throw New ArgumentNullException  ("bval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderPolylineArb( pix.Pointer, ptas.Pointer, width, rval, gval, bval, closeflag)

	Return _Result
End Function

' SRC\graphics.c (2315, 1)
' pixRenderPolylineBlend()
' pixRenderPolylineBlend(PIX *, PTA *, l_int32, l_uint8, l_uint8, l_uint8, l_float32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 32 bpp rgb</param>
'''  <param name="ptas">[in] - </param>
'''  <param name="width">[in] - thickness of line</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''  <param name="fract">[in] - in [0.0 - 1.0]; complete transparency (no effect if 0.0; no transparency if 1.0)</param>
'''  <param name="closeflag">[in] - 1 to close the contour; 0 otherwise</param>
'''  <param name="removedups">[in] - 1 to remove; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderPolylineBlend(
				ByVal pix as Pix, 
				ByVal ptas as Pta, 
				ByVal width as Integer, 
				ByVal rval as Byte, 
				ByVal gval as Byte, 
				ByVal bval as Byte, 
				ByVal fract as Single, 
				ByVal closeflag as Integer, 
				ByVal removedups as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (rval) then Throw New ArgumentNullException  ("rval cannot be Nothing")
	If IsNothing (gval) then Throw New ArgumentNullException  ("gval cannot be Nothing")
	If IsNothing (bval) then Throw New ArgumentNullException  ("bval cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {32}.contains (pix.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderPolylineBlend( pix.Pointer, ptas.Pointer, width, rval, gval, bval, fract, closeflag, removedups)

	Return _Result
End Function

' SRC\graphics.c (2356, 1)
' pixRenderGridArb()
' pixRenderGridArb(PIX *, l_int32, l_int32, l_int32, l_uint8, l_uint8, l_uint8) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth, cmapped ok</param>
'''  <param name="nx">[in] - number of rectangles in each direction</param>
'''  <param name="ny">[in] - number of rectangles in each direction</param>
'''  <param name="width">[in] - thickness of grid lines</param>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRenderGridArb(
				ByVal pix as Pix, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByVal width as Integer, 
				ByVal rval as Byte, 
				ByVal gval as Byte, 
				ByVal bval as Byte) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (rval) then Throw New ArgumentNullException  ("rval cannot be Nothing")
	If IsNothing (gval) then Throw New ArgumentNullException  ("gval cannot be Nothing")
	If IsNothing (bval) then Throw New ArgumentNullException  ("bval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRenderGridArb( pix.Pointer, nx, ny, width, rval, gval, bval)

	Return _Result
End Function

' SRC\graphics.c (2416, 1)
' pixRenderRandomCmapPtaa()
' pixRenderRandomCmapPtaa(PIX *, PTAA *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a debugging routine, that displays a set of
''' pixels, selected by the set of Ptas in a Ptaa,
''' in a random color in a pix.
''' (2) If %polyflag == 1, each Pta is considered to be a polyline,
''' and is rendered using %width and %closeflag.  Each polyline
''' is rendered in a random color.
''' (3) If %polyflag == 0, all points in each Pta are rendered in a
''' random color.  The %width and %closeflag parameters are ignored.
''' (4) The output pix is 8 bpp and colormapped.  Up to 254
''' different, randomly selected colors, can be used.
''' (5) The rendered pixels replace the input pixels.  They will
''' be clipped silently to the input pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1, 2, 4, 8, 16, 32 bpp</param>
'''  <param name="ptaa">[in] - </param>
'''  <param name="polyflag">[in] - 1 to interpret each Pta as a polyline; 0 to simply render the Pta as a set of pixels</param>
'''  <param name="width">[in] - thickness of line; use only for polyline</param>
'''  <param name="closeflag">[in] - 1 to close the contour; 0 otherwise; use only for polyline mode</param>
'''   <returns>pixd cmapped, 8 bpp or NULL on error</returns>
Public Shared Function pixRenderRandomCmapPtaa(
				ByVal pix as Pix, 
				ByVal ptaa as Ptaa, 
				ByVal polyflag as Integer, 
				ByVal width as Integer, 
				ByVal closeflag as Integer) as Pix

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")
	If {1,2,4,8,16,32}.contains (pix.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16, 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRenderRandomCmapPtaa( pix.Pointer, ptaa.Pointer, polyflag, width, closeflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\graphics.c (2485, 1)
' pixRenderPolygon()
' pixRenderPolygon(PTA *, l_int32, l_int32 *, l_int32 *) as PIX *
'''  <summary>
''' Notes
''' (1) The pix is the minimum size required to contain the origin
''' and the polygon.  For example, the max x value of the input
''' points is w - 1, where w is the pix width.
''' (2) The rendered line is 4-connected, so that an interior or
''' exterior 8-c.c. flood fill operation works properly.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - of vertices, none repeated</param>
'''  <param name="width">[in] - of polygon outline</param>
'''  <param name="pxmin">[out][optional] - min x value of input pts</param>
'''  <param name="pymin">[out][optional] - min y value of input pts</param>
'''   <returns>pix 1 bpp, with outline generated, or NULL on error</returns>
Public Shared Function pixRenderPolygon(
				ByVal ptas as Pta, 
				ByVal width as Integer, 
				ByRef pxmin as Integer, 
				ByRef pymin as Integer) as Pix

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRenderPolygon( ptas.Pointer, width, pxmin, pymin)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\graphics.c (2540, 1)
' pixFillPolygon()
' pixFillPolygon(PIX *, PTA *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This fills the interior of the polygon, returning a
''' new pix.  It works for both convex and non-convex polygons.
''' (2) To generate a filled polygon from a pta
''' PIX pixt = pixRenderPolygon(pta, 1, xmin, ymin);
''' PIX pixd = pixFillPolygon(pixt, pta, xmin, ymin);
''' pixDestroy(pixt);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, with 4-connected polygon outline</param>
'''  <param name="pta">[in] - vertices of the polygon</param>
'''  <param name="xmin">[in] - min values of vertices of polygon</param>
'''  <param name="ymin">[in] - min values of vertices of polygon</param>
'''   <returns>pixd with outline filled, or NULL on error</returns>
Public Shared Function pixFillPolygon(
				ByVal pixs as Pix, 
				ByVal pta as Pta, 
				ByVal xmin as Integer, 
				ByVal ymin as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFillPolygon( pixs.Pointer, pta.Pointer, xmin, ymin)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\graphics.c (2619, 1)
' pixRenderContours()
' pixRenderContours(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The output can be either 1 bpp, showing just the contour
''' lines, or a copy of the input pixs with the contour lines
''' superposed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 or 16 bpp; no colormap</param>
'''  <param name="startval">[in] - value of lowest contour; must be in [0 ... maxval]</param>
'''  <param name="incr">[in] - increment to next contour; must be GT 0</param>
'''  <param name="outdepth">[in] - either 1 or depth of pixs</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRenderContours(
				ByVal pixs as Pix, 
				ByVal startval as Integer, 
				ByVal incr as Integer, 
				ByVal outdepth as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRenderContours( pixs.Pointer, startval, incr, outdepth)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\graphics.c (2745, 1)
' fpixAutoRenderContours()
' fpixAutoRenderContours(FPIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The increment is set to get approximately %ncontours.
''' (2) The proximity to the target value for contour display
''' is set to 0.15.
''' (3) Negative values are rendered in red; positive values as black.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpix">[in] - </param>
'''  <param name="ncontours">[in] - GT 1, LT 500, typ. about 50</param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function fpixAutoRenderContours(
				ByVal fpix as FPix, 
				ByVal ncontours as Integer) as Pix

	If IsNothing (fpix) then Throw New ArgumentNullException  ("fpix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixAutoRenderContours( fpix.Pointer, ncontours)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\graphics.c (2783, 1)
' fpixRenderContours()
' fpixRenderContours(FPIX *, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) Values are displayed when val/incr is within +-proxim
''' to an integer.  The default value is 0.15; smaller values
''' result in thinner contour lines.
''' (2) Negative values are rendered in red; positive values as black.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixs">[in] - </param>
'''  <param name="incr">[in] - increment between contours; must be GT 0.0</param>
'''  <param name="proxim">[in] - required proximity to target value; default 0.15</param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function fpixRenderContours(
				ByVal fpixs as FPix, 
				ByVal incr as Single, 
				ByVal proxim as Single) as Pix

	If IsNothing (fpixs) then Throw New ArgumentNullException  ("fpixs cannot be Nothing")
	If IsNothing (incr) then Throw New ArgumentNullException  ("incr cannot be Nothing")
	If IsNothing (proxim) then Throw New ArgumentNullException  ("proxim cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixRenderContours( fpixs.Pointer, incr, proxim)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\graphics.c (2862, 1)
' pixGeneratePtaBoundary()
' pixGeneratePtaBoundary(PIX *, l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) Similar to ptaGetBoundaryPixels(), except here
''' we only get pixels in the foreground
''' we can have a "line" width greater than 1 pixel.
''' (2) Once generated, this can be applied to a random 1 bpp image
''' to add a color boundary as follows
''' Pta pta = pixGeneratePtaBoundary(pixs, width);
''' Pix pix1 = pixConvert1To8Cmap(pixs);
''' pixRenderPtaArb(pix1, pta, rval, gval, bval);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="width">[in] - of boundary line</param>
'''   <returns>pta, or NULL on error</returns>
Public Shared Function pixGeneratePtaBoundary(
				ByVal pixs as Pix, 
				ByVal width as Integer) as Pta

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGeneratePtaBoundary( pixs.Pointer, width)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

#End Region
#Region "SRC\graymorph.c"
' SRC\graymorph.c (158, 1)
' pixErodeGray()
' pixErodeGray(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Sel is a brick with all elements being hits
''' (2) If hsize = vsize = 1, just returns a copy.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="hsize">[in] - of Sel; must be odd; origin implicitly in center</param>
'''  <param name="vsize">[in] - ditto</param>
'''   <returns>pixd</returns>
Public Shared Function pixErodeGray(
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixErodeGray( pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\graymorph.c (274, 1)
' pixDilateGray()
' pixDilateGray(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Sel is a brick with all elements being hits
''' (2) If hsize = vsize = 1, just returns a copy.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="hsize">[in] - of Sel; must be odd; origin implicitly in center</param>
'''  <param name="vsize">[in] - ditto</param>
'''   <returns>pixd</returns>
Public Shared Function pixDilateGray(
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDilateGray( pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\graymorph.c (390, 1)
' pixOpenGray()
' pixOpenGray(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Sel is a brick with all elements being hits
''' (2) If hsize = vsize = 1, just returns a copy.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="hsize">[in] - of Sel; must be odd; origin implicitly in center</param>
'''  <param name="vsize">[in] - ditto</param>
'''   <returns>pixd</returns>
Public Shared Function pixOpenGray(
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOpenGray( pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\graymorph.c (522, 1)
' pixCloseGray()
' pixCloseGray(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Sel is a brick with all elements being hits
''' (2) If hsize = vsize = 1, just returns a copy.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="hsize">[in] - of Sel; must be odd; origin implicitly in center</param>
'''  <param name="vsize">[in] - ditto</param>
'''   <returns>pixd</returns>
Public Shared Function pixCloseGray(
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCloseGray( pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\graymorph.c (661, 1)
' pixErodeGray3()
' pixErodeGray3(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Special case for 1x3, 3x1 or 3x3 brick sel (all hits)
''' (2) If hsize = vsize = 1, just returns a copy.
''' (3) It would be nice not to add a border, but it is required
''' if we want the same results as from the general case.
''' We add 4 bytes on the left to speed up the copying, and
''' 8 bytes at the right and bottom to allow unrolling of
''' the computation of 8 pixels.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, not cmapped</param>
'''  <param name="hsize">[in] - 1 or 3</param>
'''  <param name="vsize">[in] - 1 or 3</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixErodeGray3(
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixErodeGray3( pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\graymorph.c (847, 1)
' pixDilateGray3()
' pixDilateGray3(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Special case for 1x3, 3x1 or 3x3 brick sel (all hits)
''' (2) If hsize = vsize = 1, just returns a copy.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, not cmapped</param>
'''  <param name="hsize">[in] - 1 or 3</param>
'''  <param name="vsize">[in] - 1 or 3</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixDilateGray3(
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDilateGray3( pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\graymorph.c (1032, 1)
' pixOpenGray3()
' pixOpenGray3(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Special case for 1x3, 3x1 or 3x3 brick sel (all hits)
''' (2) If hsize = vsize = 1, just returns a copy.
''' (3) It would be nice not to add a border, but it is required
''' to get the same results as for the general case.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, not cmapped</param>
'''  <param name="hsize">[in] - 1 or 3</param>
'''  <param name="vsize">[in] - 1 or 3</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixOpenGray3(
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOpenGray3( pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\graymorph.c (1098, 1)
' pixCloseGray3()
' pixCloseGray3(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Special case for 1x3, 3x1 or 3x3 brick sel (all hits)
''' (2) If hsize = vsize = 1, just returns a copy.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, not cmapped</param>
'''  <param name="hsize">[in] - 1 or 3</param>
'''  <param name="vsize">[in] - 1 or 3</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixCloseGray3(
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCloseGray3( pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\grayquant.c"
' SRC\grayquant.c (171, 1)
' pixDitherToBinary()
' pixDitherToBinary(PIX *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''   <returns>pixd dithered binary, or NULL on error The Floyd-Steinberg error diffusion dithering algorithm binarizes an 8 bpp grayscale image to a threshold of 128. If a pixel has a value above 127, it is binarized to white and the excess below 255 is subtracted from three neighboring pixels in the fractions 3/8 to i, j+1, 3/8 to i+1, j) and 1/4 to (i+1,j+1, truncating to 0 if necessary.  Likewise, if it the pixel has a value below 128, it is binarized to black and the excess above 0 is added to the neighboring pixels, truncating to 255 if necessary. This function differs from straight dithering in that it allows clipping of grayscale to 0 or 255 if the values are sufficiently close, without distribution of the excess. This uses default values to specify the range of lower and upper values near 0 and 255, rsp that are clipped to black and white without propagating the excess. Not propagating the excess has the effect of reducing the snake patterns in parts of the image that are nearly black or white; however, it also prevents the attempt to reproduce gray for those values. The implementation is straightforward.  It uses a pair of line buffers to avoid changing pixs.  It is about the same speed as pixDitherToBinaryLUT(), which uses three LUTs.</returns>
Public Shared Function pixDitherToBinary(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDitherToBinary( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (203, 1)
' pixDitherToBinarySpec()
' pixDitherToBinarySpec(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See comments above in pixDitherToBinary() for details.
''' (2) The input parameters lowerclip and upperclip specify the range
''' of lower and upper values (near 0 and 255, rsp) that are
''' clipped to black and white without propagating the excess.
''' For that reason, lowerclip and upperclip should be small numbers.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="lowerclip">[in] - lower clip distance to black; use 0 for default</param>
'''  <param name="upperclip">[in] - upper clip distance to white; use 0 for default</param>
'''   <returns>pixd dithered binary, or NULL on error</returns>
Public Shared Function pixDitherToBinarySpec(
				ByVal pixs as Pix, 
				ByVal lowerclip as Integer, 
				ByVal upperclip as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDitherToBinarySpec( pixs.Pointer, lowerclip, upperclip)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (322, 1)
' ditherToBinaryLineLow()
' ditherToBinaryLineLow(l_uint32 *, l_int32, l_uint32 *, l_uint32 *, l_int32, l_int32, l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="lined">[in] - ptr to beginning of dest line</param>
'''  <param name="w">[in] - width of image in pixels</param>
'''  <param name="bufs1">[in] - buffer of current source line</param>
'''  <param name="bufs2">[in] - buffer of next source line</param>
'''  <param name="lowerclip">[in] - lower clip distance to black</param>
'''  <param name="upperclip">[in] - upper clip distance to white</param>
'''  <param name="lastlineflag">[in] - 0 if not last dest line, 1 if last dest line</param>
Public Shared Sub ditherToBinaryLineLow(
				ByVal lined as Byte(), 
				ByVal w as Integer, 
				ByVal bufs1 as Byte(), 
				ByVal bufs2 as Byte(), 
				ByVal lowerclip as Integer, 
				ByVal upperclip as Integer, 
				ByVal lastlineflag as Integer)

	If IsNothing (lined) then Throw New ArgumentNullException  ("lined cannot be Nothing")
	If IsNothing (bufs1) then Throw New ArgumentNullException  ("bufs1 cannot be Nothing")
	If IsNothing (bufs2) then Throw New ArgumentNullException  ("bufs2 cannot be Nothing")

	Dim linedPTR As IntPtr = Marshal.AllocHGlobal(lined.Count) : Marshal.Copy(lined, 0, linedPTR, lined.Length)
	Dim bufs1PTR As IntPtr = Marshal.AllocHGlobal(bufs1.Count) : Marshal.Copy(bufs1, 0, bufs1PTR, bufs1.Length)
	Dim bufs2PTR As IntPtr = Marshal.AllocHGlobal(bufs2.Count) : Marshal.Copy(bufs2, 0, bufs2PTR, bufs2.Length)

	LeptonicaSharp.Natives.ditherToBinaryLineLow( linedPTR, w, bufs1PTR, bufs2PTR, lowerclip, upperclip, lastlineflag)

End Sub

' SRC\grayquant.c (443, 1)
' pixThresholdToBinary()
' pixThresholdToBinary(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If the source pixel is less than the threshold value,
''' the dest will be 1; otherwise, it will be 0.
''' (2) For example, for 8 bpp src pix, if %thresh == 256, the dest
''' 1 bpp pix is all ones (fg), and if %thresh == 0, the dest
''' pix is all zeros (bg).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 4 or 8 bpp</param>
'''  <param name="thresh">[in] - threshold value</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixThresholdToBinary(
				ByVal pixs as Pix, 
				ByVal thresh as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {4,8}.contains (pixs.d) = false then Throw New ArgumentException ("4 or 8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixThresholdToBinary( pixs.Pointer, thresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (519, 1)
' 
' thresholdToBinaryLineLow(l_uint32 *, l_int32, l_uint32 *, l_int32, l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
Public Shared Sub thresholdToBinaryLineLow(
				ByRef lined as Object, 
				ByRef w as Integer, 
				ByRef lines as Object, 
				ByRef d as Integer, 
				ByRef thresh as Integer)

	If IsNothing (lined) then Throw New ArgumentNullException  ("lined cannot be Nothing")
	If IsNothing (lines) then Throw New ArgumentNullException  ("lines cannot be Nothing")


	LeptonicaSharp.Natives.thresholdToBinaryLineLow( lined, w, lines, d, thresh)

End Sub

' SRC\grayquant.c (650, 1)
' pixVarThresholdToBinary()
' pixVarThresholdToBinary(PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) If the pixel in pixs is less than the corresponding pixel
''' in pixg, the dest will be 1; otherwise it will be 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="pixg">[in] - 8 bpp; contains threshold values for each pixel</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixVarThresholdToBinary(
				ByVal pixs as Pix, 
				ByVal pixg as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixg) then Throw New ArgumentNullException  ("pixg cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixVarThresholdToBinary( pixs.Pointer, pixg.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (725, 1)
' pixAdaptThresholdToBinary()
' pixAdaptThresholdToBinary(PIX *, PIX *, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a simple convenience function for doing adaptive
''' thresholding on a grayscale image with variable background.
''' It uses default parameters appropriate for typical text images.
''' (2) %pixm is a 1 bpp mask over "image" regions, which are not
''' expected to have a white background.  The mask inhibits
''' background finding under the fg pixels of the mask.  For
''' images with both text and image, the image regions would
''' be binarized (or quantized) by a different set of operations.
''' (3) As %gamma is increased, the foreground pixels are reduced.
''' (4) Under the covers  The default background value for normalization
''' is 200, so we choose 170 for 'maxval' in pixGammaTRC.  Likewise,
''' the default foreground threshold for normalization is 60,
''' so we choose 50 for 'minval' in pixGammaTRC.  Because
''' 170 was mapped to 255, choosing 200 for the threshold is
''' quite safe for avoiding speckle noise from the background.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="pixm">[in][optional] - 1 bpp image mask; can be null</param>
'''  <param name="gamma">[in] - gamma correction; must be GT 0.0; typically ~1.0</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixAdaptThresholdToBinary(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal gamma as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (gamma) then Throw New ArgumentNullException  ("gamma cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAdaptThresholdToBinary( pixs.Pointer, pixmPTR, gamma)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (765, 1)
' pixAdaptThresholdToBinaryGen()
' pixAdaptThresholdToBinaryGen(PIX *, PIX *, l_float32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a convenience function for doing adaptive thresholding
''' on a grayscale image with variable background.  Also see notes
''' in pixAdaptThresholdToBinary().
''' (2) Reducing %gamma increases the foreground (text) pixels.
''' Use a low value (e.g., 0.5) for images with light text.
''' (3) For normal images, see default args in pixAdaptThresholdToBinary().
''' For images with very light text, these values are appropriate
''' gamma  ~0.5
''' blackval  ~70
''' whiteval  ~190
''' thresh ~200
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="pixm">[in][optional] - 1 bpp image mask; can be null</param>
'''  <param name="gamma">[in] - gamma correction; must be GT 0.0; typically ~1.0</param>
'''  <param name="blackval">[in] - dark value to set to black (0)</param>
'''  <param name="whiteval">[in] - light value to set to white (255)</param>
'''  <param name="thresh">[in] - final threshold for binarization</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixAdaptThresholdToBinaryGen(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal gamma as Single, 
				ByVal blackval as Integer, 
				ByVal whiteval as Integer, 
				ByVal thresh as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (gamma) then Throw New ArgumentNullException  ("gamma cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAdaptThresholdToBinaryGen( pixs.Pointer, pixmPTR, gamma, blackval, whiteval, thresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (810, 1)
' pixGenerateMaskByValue()
' pixGenerateMaskByValue(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) %val is the pixel value that we are selecting.  It can be
''' either a gray value or a colormap index.
''' (2) If pixs is colormapped, %usecmap determines if the colormap
''' index values are used, or if the colormap is removed to gray and
''' the gray values are used.  For the latter, it generates
''' an approximate grayscale value for each pixel, and then looks
''' for gray pixels with the value %val.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2, 4 or 8 bpp, or colormapped</param>
'''  <param name="val">[in] - of pixels for which we set 1 in dest</param>
'''  <param name="usecmap">[in] - 1 to retain cmap values; 0 to convert to gray</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixGenerateMaskByValue(
				ByVal pixs as Pix, 
				ByVal val as Integer, 
				ByVal usecmap as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGenerateMaskByValue( pixs.Pointer, val, usecmap)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (900, 1)
' pixGenerateMaskByBand()
' pixGenerateMaskByBand(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Generates a 1 bpp mask pixd, the same size as pixs, where
''' the fg pixels in the mask are those either within the specified
''' band (for inband == 1) or outside the specified band
''' (for inband == 0).
''' (2) If pixs is colormapped, %usecmap determines if the colormap
''' values are used, or if the colormap is removed to gray and
''' the gray values are used.  For the latter, it generates
''' an approximate grayscale value for each pixel, and then looks
''' for gray pixels with the value %val.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2, 4 or 8 bpp, or colormapped</param>
'''  <param name="lower">[in] - two pixel values from which a range, either between (inband) or outside of (!inband), determines which pixels in pixs cause us to set a 1 in the dest mask</param>
'''  <param name="upper">[in] - two pixel values from which a range, either between (inband) or outside of (!inband), determines which pixels in pixs cause us to set a 1 in the dest mask</param>
'''  <param name="inband">[in] - 1 for finding pixels in [lower, upper]; 0 for finding pixels in [0, lower) union (upper, 255]</param>
'''  <param name="usecmap">[in] - 1 to retain cmap values; 0 to convert to gray</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixGenerateMaskByBand(
				ByVal pixs as Pix, 
				ByVal lower as Integer, 
				ByVal upper as Integer, 
				ByVal inband as Integer, 
				ByVal usecmap as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGenerateMaskByBand( pixs.Pointer, lower, upper, inband, usecmap)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (1013, 1)
' pixDitherTo2bpp()
' pixDitherTo2bpp(PIX *, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="cmapflag">[in] - 1 to generate a colormap</param>
'''   <returns>pixd dithered 2 bpp, or NULL on error An analog of the Floyd-Steinberg error diffusion dithering algorithm is used to "dibitize" an 8 bpp grayscale image to 2 bpp, using equally spaced gray values of 0, 85, 170, and 255, which are served by thresholds of 43, 128 and 213. If cmapflag == 1, the colormap values are set to 0, 85, 170 and 255. If a pixel has a value between 0 and 42, it is dibitized to 0, and the excess above 0 is added to the three neighboring pixels, in the fractions 3/8 to i, j+1, 3/8 to i+1, j) and 1/4 to (i+1, j+1, truncating to 255 if necessary.  If a pixel has a value between 43 and 127, it is dibitized to 1, and the excess above 85 is added to the three neighboring pixels as before.  If the value is below 85, the excess is subtracted.  With a value between 128 and 212, it is dibitized to 2, with the excess on either side of 170 distributed as before.  Finally, with a value between 213 and 255, it is dibitized to 3, with the excess below 255 subtracted from the neighbors.  We always truncate to 0 or 255. The details can be seen in the lookup table generation. This function differs from straight dithering in that it allows clipping of grayscale to 0 or 255 if the values are sufficiently close, without distribution of the excess. This uses default values from pix.h to specify the range of lower and upper values near 0 and 255, rsp that are clipped to black and white without propagating the excess. Not propagating the excess has the effect of reducing the snake patterns in parts of the image that are nearly black or white; however, it also prevents any attempt to reproduce gray for those values. The implementation uses 3 lookup tables for simplicity, and a pair of line buffers to avoid modifying pixs.</returns>
Public Shared Function pixDitherTo2bpp(
				ByVal pixs as Pix, 
				ByVal cmapflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDitherTo2bpp( pixs.Pointer, cmapflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (1047, 1)
' pixDitherTo2bppSpec()
' pixDitherTo2bppSpec(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See comments above in pixDitherTo2bpp() for details.
''' (2) The input parameters lowerclip and upperclip specify the range
''' of lower and upper values (near 0 and 255, rsp) that are
''' clipped to black and white without propagating the excess.
''' For that reason, lowerclip and upperclip should be small numbers.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="lowerclip">[in] - lower clip distance to black; use 0 for default</param>
'''  <param name="upperclip">[in] - upper clip distance to white; use 0 for default</param>
'''  <param name="cmapflag">[in] - 1 to generate a colormap</param>
'''   <returns>pixd dithered 2 bpp, or NULL on error</returns>
Public Shared Function pixDitherTo2bppSpec(
				ByVal pixs as Pix, 
				ByVal lowerclip as Integer, 
				ByVal upperclip as Integer, 
				ByVal cmapflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDitherTo2bppSpec( pixs.Pointer, lowerclip, upperclip, cmapflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (1373, 1)
' pixThresholdTo2bpp()
' pixThresholdTo2bpp(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Valid values for nlevels is the set {2, 3, 4}.
''' (2) Any colormap on the input pixs is removed to 8 bpp grayscale.
''' (3) This function is typically invoked with cmapflag == 1.
''' In the situation where no colormap is desired, nlevels is
''' ignored and pixs is thresholded to 4 levels.
''' (4) The target output colors are equally spaced, with the
''' darkest at 0 and the lightest at 255.  The thresholds are
''' chosen halfway between adjacent output values.  A table
''' is built that specifies the mapping from src to dest.
''' (5) If cmapflag == 1, a colormap of size 'nlevels' is made,
''' and the pixel values in pixs are replaced by their
''' appropriate color indices.  The number of holdouts,
''' 4 - nlevels, will be between 0 and 2.
''' (6) If you don't want the thresholding to be equally spaced,
''' either first transform the 8 bpp src using pixGammaTRC().
''' or, if cmapflag == 1, after calling this function you can use
''' pixcmapResetColor() to change any individual colors.
''' (7) If a colormap is generated, it will specify (to display
''' programs) exactly how each level is to be represented in RGB
''' space.  When representing text, 3 levels is far better than
''' 2 because of the antialiasing of the single gray level,
''' and 4 levels (black, white and 2 gray levels) is getting
''' close to the perceptual quality of a (nearly continuous)
''' grayscale image.  With 2 bpp, you can set up a colormap
''' and allocate from 2 to 4 levels to represent antialiased text.
''' Any left over colormap entries can be used for coloring regions.
''' For the same number of levels, the file size of a 2 bpp image
''' is about 10% smaller than that of a 4 bpp result for the same
''' number of levels.  For both 2 bpp and 4 bpp, using 4 levels you
''' get compression far better than that of jpeg, because the
''' quantization to 4 levels will remove the jpeg ringing in the
''' background near character edges.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="nlevels">[in] - equally spaced; must be between 2 and 4</param>
'''  <param name="cmapflag">[in] - 1 to build colormap; 0 otherwise</param>
'''   <returns>pixd 2 bpp, optionally with colormap, or NULL on error</returns>
Public Shared Function pixThresholdTo2bpp(
				ByVal pixs as Pix, 
				ByVal nlevels as Integer, 
				ByVal cmapflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixThresholdTo2bpp( pixs.Pointer, nlevels, cmapflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (1515, 1)
' pixThresholdTo4bpp()
' pixThresholdTo4bpp(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Valid values for nlevels is the set {2, ... 16}.
''' (2) Any colormap on the input pixs is removed to 8 bpp grayscale.
''' (3) This function is typically invoked with cmapflag == 1.
''' In the situation where no colormap is desired, nlevels is
''' ignored and pixs is thresholded to 16 levels.
''' (4) The target output colors are equally spaced, with the
''' darkest at 0 and the lightest at 255.  The thresholds are
''' chosen halfway between adjacent output values.  A table
''' is built that specifies the mapping from src to dest.
''' (5) If cmapflag == 1, a colormap of size 'nlevels' is made,
''' and the pixel values in pixs are replaced by their
''' appropriate color indices.  The number of holdouts,
''' 16 - nlevels, will be between 0 and 14.
''' (6) If you don't want the thresholding to be equally spaced,
''' either first transform the 8 bpp src using pixGammaTRC().
''' or, if cmapflag == 1, after calling this function you can use
''' pixcmapResetColor() to change any individual colors.
''' (7) If a colormap is generated, it will specify, to display
''' programs, exactly how each level is to be represented in RGB
''' space.  When representing text, 3 levels is far better than
''' 2 because of the antialiasing of the single gray level,
''' and 4 levels (black, white and 2 gray levels) is getting
''' close to the perceptual quality of a (nearly continuous)
''' grayscale image.  Therefore, with 4 bpp, you can set up a
''' colormap, allocate a relatively small fraction of the 16
''' possible values to represent antialiased text, and use the
''' other colormap entries for other things, such as coloring
''' text or background.  Two other reasons for using a small number
''' of gray values for antialiased text are (1) PNG compression
''' gets worse as the number of levels that are used is increased,
''' and (2) using a small number of levels will filter out most of
''' the jpeg ringing that is typically introduced near sharp edges
''' of text.  This filtering is partly responsible for the improved
''' compression.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, can have colormap</param>
'''  <param name="nlevels">[in] - equally spaced; must be between 2 and 16</param>
'''  <param name="cmapflag">[in] - 1 to build colormap; 0 otherwise</param>
'''   <returns>pixd 4 bpp, optionally with colormap, or NULL on error</returns>
Public Shared Function pixThresholdTo4bpp(
				ByVal pixs as Pix, 
				ByVal nlevels as Integer, 
				ByVal cmapflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixThresholdTo4bpp( pixs.Pointer, nlevels, cmapflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (1632, 1)
' pixThresholdOn8bpp()
' pixThresholdOn8bpp(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Valid values for nlevels is the set {2,...,256}.
''' (2) Any colormap on the input pixs is removed to 8 bpp grayscale.
''' (3) If cmapflag == 1, a colormap of size 'nlevels' is made,
''' and the pixel values in pixs are replaced by their
''' appropriate color indices.  Otherwise, the pixel values
''' are the actual thresholded (i.e., quantized) grayscale values.
''' (4) If you don't want the thresholding to be equally spaced,
''' first transform the input 8 bpp src using pixGammaTRC().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, can have colormap</param>
'''  <param name="nlevels">[in] - equally spaced; must be between 2 and 256</param>
'''  <param name="cmapflag">[in] - 1 to build colormap; 0 otherwise</param>
'''   <returns>pixd 8 bpp, optionally with colormap, or NULL on error</returns>
Public Shared Function pixThresholdOn8bpp(
				ByVal pixs as Pix, 
				ByVal nlevels as Integer, 
				ByVal cmapflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixThresholdOn8bpp( pixs.Pointer, nlevels, cmapflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (1733, 1)
' pixThresholdGrayArb()
' pixThresholdGrayArb(PIX *, const char *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This function allows exact specification of the quantization bins.
''' The string %edgevals is a space-separated set of values
''' specifying the dividing points between output quantization bins.
''' These threshold values are assigned to the bin with higher
''' values, so that each of them is the smallest value in their bin.
''' (2) The output image (pixd) depth is specified by %outdepth.  The
''' number of bins is the number of edgevals + 1.  The
''' relation between outdepth and the number of bins is
''' outdepth = 2 nbins LT= 4
''' outdepth = 4 nbins LT= 16
''' outdepth = 8 nbins LT= 256
''' With %outdepth == 0, the minimum required depth for the
''' given number of bins is used.
''' The output pixd has a colormap.
''' (3) The last 3 args determine the specific values that go into
''' the colormap.
''' (4) For %use_average
''' ~ if TRUE, the average value of pixels falling in the bin is
''' chosen as the representative gray value.  Otherwise,
''' ~ if FALSE, the central value of each bin is chosen as
''' the representative value.
''' The colormap holds the representative value.
''' (5) For %setblack, if TRUE the darkest color is set to (0,0,0).
''' (6) For %setwhite, if TRUE the lightest color is set to (255,255,255).
''' (7) An alternative to using this function to quantize to
''' unequally-spaced bins is to first transform the 8 bpp pixs
''' using pixGammaTRC(), and follow this with pixThresholdTo4bpp().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale; can have colormap</param>
'''  <param name="edgevals">[in] - string giving edge value of each bin</param>
'''  <param name="outdepth">[in] - 0, 2, 4 or 8 bpp; 0 is default for min depth</param>
'''  <param name="use_average">[in] - 1 if use the average pixel value in colormap</param>
'''  <param name="setblack">[in] - 1 if darkest color is set to black</param>
'''  <param name="setwhite">[in] - 1 if lightest color is set to white</param>
'''   <returns>pixd 2, 4 or 8 bpp quantized image with colormap, or NULL on error</returns>
Public Shared Function pixThresholdGrayArb(
				ByVal pixs as Pix, 
				ByVal edgevals as String, 
				ByVal outdepth as Integer, 
				ByVal use_average as Integer, 
				ByVal setblack as Integer, 
				ByVal setwhite as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (edgevals) then Throw New ArgumentNullException  ("edgevals cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixThresholdGrayArb( pixs.Pointer, edgevals, outdepth, use_average, setblack, setwhite)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (1843, 1)
' makeGrayQuantIndexTable()
' makeGrayQuantIndexTable(l_int32) as l_int32 *
'''  <summary>
''' Notes
''' (1) 'nlevels' is some number between 2 and 256 (typically 8 or less).
''' (2) The table is typically used for quantizing 2, 4 and 8 bpp
''' grayscale src pix, and generating a colormapped dest pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nlevels">[in] - number of output levels</param>
'''   <returns>table maps input gray level to colormap index, or NULL on error</returns>
Public Shared Function makeGrayQuantIndexTable(
				ByVal nlevels as Integer) as Integer()



	Dim _Result as Integer() = LeptonicaSharp.Natives.makeGrayQuantIndexTable( nlevels)

	Return _Result
End Function

' SRC\grayquant.c (1952, 1)
' makeGrayQuantTableArb()
' makeGrayQuantTableArb(NUMA *, l_int32, l_int32 **, PIXCMAP **) as l_ok
'''  <summary>
''' Notes
''' (1) The number of bins is the count of %na + 1.
''' (2) The bin boundaries in na must be sorted in increasing order.
''' (3) The table is an inverse colormap it maps input gray level
''' to colormap index (the bin number).
''' (4) The colormap generated here has quantized values at the
''' center of each bin.  If you want to use the average gray
''' value of pixels within the bin, discard the colormap and
''' compute it using makeGrayQuantColormapArb().
''' (5) Returns an error if there are not enough levels in the
''' output colormap for the number of bins.  The number
''' of bins must not exceed 2^outdepth.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - numa of bin boundaries</param>
'''  <param name="outdepth">[in] - of colormap 1, 2, 4 or 8</param>
'''  <param name="ptab">[out] - table mapping input gray level to cmap index</param>
'''  <param name="pcmap">[out] - colormap</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function makeGrayQuantTableArb(
				ByVal na as Numa, 
				ByVal outdepth as Integer, 
				ByRef ptab as List (of Integer()), 
				ByRef pcmap as PixColormap) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")

Dim ptabPTR As IntPtr = Marshal.AllocHGlobal(0)
	Dim pcmapPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pcmap) Then pcmapPTR = pcmap.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.makeGrayQuantTableArb( na.Pointer, outdepth, ptabPTR, pcmapPTR)
	if pcmapPTR <> IntPtr.Zero then pcmap = new PixColormap(pcmapPTR)

	Return _Result
End Function

' SRC\grayquant.c (2129, 1)
' pixGenerateMaskByBand32()
' pixGenerateMaskByBand32(PIX *, l_uint32, l_int32, l_int32, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) Generates a 1 bpp mask pixd, the same size as pixs, where
''' the fg pixels in the mask within a band of rgb values
''' surrounding %refval.  The band can be chosen in two ways
''' for each component
''' (a) Use (%delm, %delp) to specify how many levels down and up
''' (b) Use (%fractm, %fractp) to specify the fractional
''' distance toward 0 and 255, respectively.
''' Note that %delm and %delp must be in [0 ... 255], whereas
''' %fractm and %fractp must be in [0.0 - 1.0].
''' (2) Either (%delm, %delp) or (%fractm, %fractp) can be used.
''' Set each value in the other pair to 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="refval">[in] - reference rgb value</param>
'''  <param name="delm">[in] - max amount below the ref value for any component</param>
'''  <param name="delp">[in] - max amount above the ref value for any component</param>
'''  <param name="fractm">[in] - fractional amount below ref value for all components</param>
'''  <param name="fractp">[in] - fractional amount above ref value for all components</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixGenerateMaskByBand32(
				ByVal pixs as Pix, 
				ByVal refval as UInteger, 
				ByVal delm as Integer, 
				ByVal delp as Integer, 
				ByVal fractm as Single, 
				ByVal fractp as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fractm) then Throw New ArgumentNullException  ("fractm cannot be Nothing")
	If IsNothing (fractp) then Throw New ArgumentNullException  ("fractp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGenerateMaskByBand32( pixs.Pointer, refval, delm, delp, fractm, fractp)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (2227, 1)
' pixGenerateMaskByDiscr32()
' pixGenerateMaskByDiscr32(PIX *, l_uint32, l_uint32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Generates a 1 bpp mask pixd, the same size as pixs, where
''' the fg pixels in the mask are those where the pixel in pixs
''' is "closer" to refval1 than to refval2.
''' (2) "Closer" can be defined in several ways, such as
''' ~ manhattan distance (L1)
''' ~ euclidean distance (L2)
''' ~ majority vote of the individual components
''' Here, we have a choice of L1 or L2.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="refval1">[in] - reference rgb value</param>
'''  <param name="refval2">[in] - reference rgb value</param>
'''  <param name="distflag">[in] - L_MANHATTAN_DISTANCE, L_EUCLIDEAN_DISTANCE</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixGenerateMaskByDiscr32(
				ByVal pixs as Pix, 
				ByVal refval1 as UInteger, 
				ByVal refval2 as UInteger, 
				ByVal distflag as Enumerations.L_AN_DISTANCE) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGenerateMaskByDiscr32( pixs.Pointer, refval1, refval2, distflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (2341, 1)
' pixGrayQuantFromHisto()
' pixGrayQuantFromHisto(PIX *, PIX *, PIX *, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is useful for quantizing images with relatively few
''' colors, but which may have both color and gray pixels.
''' If there are color pixels, it is assumed that an input
''' rgb image has been color quantized first so that
''' ~ pixd has a colormap describing the color pixels
''' ~ pixm is a mask over the non-color pixels in pixd
''' ~ the colormap in pixd, and the color pixels in pixd,
''' have been repacked to go from 0 to n-1 (n colors)
''' If there are no color pixels, pixd and pixm are both null,
''' and all pixels in pixs are quantized to gray.
''' (2) A 256-entry histogram is built of the gray values in pixs.
''' If pixm exists, the pixels contributing to the histogram are
''' restricted to the fg of pixm.  A colormap and LUT are generated
''' from this histogram.  We break up the array into a set
''' of intervals, each one constituting a color in the colormap
''' An interval is identified by summing histogram bins until
''' either the sum equals or exceeds the %minfract of the total
''' number of pixels, or the span itself equals or exceeds %maxsize.
''' The color of each bin is always an average of the pixels
''' that constitute it.
''' (3) Note that we do not specify the number of gray colors in
''' the colormap.  Instead, we specify two parameters that
''' describe the accuracy of the color assignments; this and
''' the actual image determine the number of resulting colors.
''' (4) If a mask exists and it is not the same size as pixs, make
''' a new mask the same size as pixs, with the original mask
''' aligned at the UL corners.  Set all additional pixels
''' in the (larger) new mask set to 1, causing those pixels
''' in pixd to be set as gray.
''' (5) We estimate the total number of colors (color plus gray);
''' if it exceeds 255, return null.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - quantized pix with cmap; can be null</param>
'''  <param name="pixs">[in] - 8 bpp gray input pix; not cmapped</param>
'''  <param name="pixm">[in][optional] - mask over pixels in pixs to quantize</param>
'''  <param name="minfract">[in] - minimum fraction of pixels in a set of adjacent histo bins that causes the set to be automatically set aside as a color in the colormap; must be at least 0.01</param>
'''  <param name="maxsize">[in] - maximum number of adjacent bins allowed to represent a color, regardless of the population of pixels in the bins; must be at least 2</param>
'''   <returns>pixd 8 bpp, cmapped, or NULL on error</returns>
Public Shared Function pixGrayQuantFromHisto(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal minfract as Single, 
				ByVal maxsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (minfract) then Throw New ArgumentNullException  ("minfract cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer
	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGrayQuantFromHisto( pixdPTR, pixs.Pointer, pixmPTR, minfract, maxsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\grayquant.c (2564, 1)
' pixGrayQuantFromCmap()
' pixGrayQuantFromCmap(PIX *, PIXCMAP *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) In use, pixs is an 8 bpp grayscale image without a colormap.
''' If there is an existing colormap, a warning is issued and
''' a copy of the input pixs is returned.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale without cmap</param>
'''  <param name="cmap">[in] - to quantize to; of dest pix</param>
'''  <param name="mindepth">[in] - minimum depth of pixd can be 2, 4 or 8 bpp</param>
'''   <returns>pixd 2, 4 or 8 bpp, colormapped, or NULL on error</returns>
Public Shared Function pixGrayQuantFromCmap(
				ByVal pixs as Pix, 
				ByVal cmap as PixColormap, 
				ByVal mindepth as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGrayQuantFromCmap( pixs.Pointer, cmap.Pointer, mindepth)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\heap.c"
' SRC\heap.c (102, 1)
' lheapCreate()
' lheapCreate(l_int32, l_int32) as L_HEAP *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nalloc">[in] - size of ptr array to be alloc'd 0 for default</param>
'''  <param name="direction">[in] - L_SORT_INCREASING, L_SORT_DECREASING</param>
'''   <returns>lheap, or NULL on error</returns>
Public Shared Function lheapCreate(
				ByVal nalloc as Integer, 
				ByVal direction as Enumerations.L_SORT_CREASING) as L_Heap



	Dim _Result as IntPtr = LeptonicaSharp.Natives.lheapCreate( nalloc, direction)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Heap(_Result)
End Function

' SRC\heap.c (145, 1)
' lheapDestroy()
' lheapDestroy(L_HEAP **, l_int32) as void
'''  <summary>
''' Notes
''' (1) Use freeflag == TRUE when the items in the array can be
''' simply destroyed using free.  If those items require their
''' own destroy function, they must be destroyed before
''' calling this function, and then this function is called
''' with freeflag == FALSE.
''' (2) To destroy the lheap, we destroy the ptr array, then
''' the lheap, and then null the contents of the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="plh">[in,out] - to be nulled</param>
'''  <param name="freeflag">[in] - TRUE to free each remaining struct in the array</param>
Public Shared Sub lheapDestroy(
				ByRef plh as L_Heap, 
				ByVal freeflag as Integer)


	Dim plhPTR As IntPtr = IntPtr.Zero : If Not IsNothing(plh) Then plhPTR = plh.Pointer

	LeptonicaSharp.Natives.lheapDestroy( plhPTR, freeflag)
	if plhPTR <> IntPtr.Zero then plh = new L_Heap(plhPTR)

End Sub

' SRC\heap.c (186, 1)
' lheapAdd()
' lheapAdd(L_HEAP *, void *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="lh">[in] - heap</param>
'''  <param name="item">[in] - to be added to the tail of the heap</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function lheapAdd(
				ByVal lh as L_Heap, 
				ByVal item as Object) as Integer

	If IsNothing (lh) then Throw New ArgumentNullException  ("lh cannot be Nothing")
	If IsNothing (item) then Throw New ArgumentNullException  ("item cannot be Nothing")

Dim itemPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.lheapAdd( lh.Pointer, itemPTR)

	Return _Result
End Function

' SRC\heap.c (242, 1)
' lheapRemove()
' lheapRemove(L_HEAP *) as void *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="lh">[in] - heap</param>
'''   <returns>ptr to item popped from the root of the heap, or NULL if the heap is empty or on error</returns>
Public Shared Function lheapRemove(
				ByVal lh as L_Heap) as Object

	If IsNothing (lh) then Throw New ArgumentNullException  ("lh cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.lheapRemove( lh.Pointer)

	Return _Result
End Function

' SRC\heap.c (271, 1)
' lheapGetCount()
' lheapGetCount(L_HEAP *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="lh">[in] - heap</param>
'''   <returns>count, or 0 on error</returns>
Public Shared Function lheapGetCount(
				ByVal lh as L_Heap) as Integer

	If IsNothing (lh) then Throw New ArgumentNullException  ("lh cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lheapGetCount( lh.Pointer)

	Return _Result
End Function

' SRC\heap.c (304, 1)
' lheapSwapUp()
' lheapSwapUp(L_HEAP *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is called after a new item is put on the heap, at the
''' bottom of a complete tree.
''' (2) To regain the heap order, we let it bubble up,
''' iteratively swapping with its parent, until it either
''' reaches the root of the heap or it finds a parent that
''' is in the correct position already vis-a-vis the child.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="lh">[in] - heap</param>
'''  <param name="index">[in] - of array corresponding to node to be swapped up</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function lheapSwapUp(
				ByVal lh as L_Heap, 
				ByVal index as Integer) as Integer

	If IsNothing (lh) then Throw New ArgumentNullException  ("lh cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lheapSwapUp( lh.Pointer, index)

	Return _Result
End Function

' SRC\heap.c (370, 1)
' lheapSwapDown()
' lheapSwapDown(L_HEAP *) as l_ok
'''  <summary>
''' Notes
''' (1) This is called after an item has been popped off the
''' root of the heap, and the last item in the heap has
''' been placed at the root.
''' (2) To regain the heap order, we let it bubble down,
''' iteratively swapping with one of its children.  For a
''' decreasing sort, it swaps with the largest child; for
''' an increasing sort, the smallest.  This continues until
''' it either reaches the lowest level in the heap, or the
''' parent finds that neither child should swap with it
''' (e.g., for a decreasing heap, the parent is larger
''' than or equal to both children).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="lh">[in] - heap</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function lheapSwapDown(
				ByVal lh as L_Heap) as Integer

	If IsNothing (lh) then Throw New ArgumentNullException  ("lh cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lheapSwapDown( lh.Pointer)

	Return _Result
End Function

' SRC\heap.c (453, 1)
' lheapSort()
' lheapSort(L_HEAP *) as l_ok
'''  <summary>
''' Notes
''' (1) This sorts an array into heap order.  If the heap is already
''' in heap order for the direction given, this has no effect.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="lh">[in] - heap, with internal array</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function lheapSort(
				ByVal lh as L_Heap) as Integer

	If IsNothing (lh) then Throw New ArgumentNullException  ("lh cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lheapSort( lh.Pointer)

	Return _Result
End Function

' SRC\heap.c (487, 1)
' lheapSortStrictOrder()
' lheapSortStrictOrder(L_HEAP *) as l_ok
'''  <summary>
''' Notes
''' (1) This sorts a heap into strict order.
''' (2) For each element, starting at the end of the array and
''' working forward, the element is swapped with the head
''' element and then allowed to swap down onto a heap of
''' size reduced by one.  The result is that the heap is
''' reversed but in strict order.  The array elements are
''' then reversed to put it in the original order.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="lh">[in] - heap, with internal array</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function lheapSortStrictOrder(
				ByVal lh as L_Heap) as Integer

	If IsNothing (lh) then Throw New ArgumentNullException  ("lh cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lheapSortStrictOrder( lh.Pointer)

	Return _Result
End Function

' SRC\heap.c (524, 1)
' lheapPrint()
' lheapPrint(FILE *, L_HEAP *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="lh">[in] - heap</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function lheapPrint(
				ByVal fp as FILE, 
				ByVal lh as L_Heap) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (lh) then Throw New ArgumentNullException  ("lh cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lheapPrint( fp.Pointer, lh.Pointer)

	Return _Result
End Function

#End Region
#Region "SRC\jbclass.c"
' SRC\jbclass.c (283, 1)
' jbRankHausInit()
' jbRankHausInit(l_int32, l_int32, l_int32, l_int32, l_float32) as JBCLASSER *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="components">[in] - JB_CONN_COMPS, JB_CHARACTERS, JB_WORDS</param>
'''  <param name="maxwidth">[in] - of component; use 0 for default</param>
'''  <param name="maxheight">[in] - of component; use 0 for default</param>
'''  <param name="size">[in] - of square structuring element; 2, representing 2x2 sel, is necessary for reasonable accuracy of small components; combine this with rank ~ 0.97 to avoid undue class expansion</param>
'''  <param name="rank">[in] - rank val of match, each way; in [0.5 - 1.0]; when using size = 2, 0.97 is a reasonable value</param>
'''   <returns>jbclasser if OK; NULL on error</returns>
Public Shared Function jbRankHausInit(
				ByVal components as Enumerations.JB_S, 
				ByVal maxwidth as Integer, 
				ByVal maxheight as Integer, 
				ByVal size as Integer, 
				ByVal rank as Single) as JbClasser

	If IsNothing (rank) then Throw New ArgumentNullException  ("rank cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.jbRankHausInit( components, maxwidth, maxheight, size, rank)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new JbClasser(_Result)
End Function

' SRC\jbclass.c (344, 1)
' jbCorrelationInit()
' jbCorrelationInit(l_int32, l_int32, l_int32, l_float32, l_float32) as JBCLASSER *
'''  <summary>
''' Notes
''' (1) For scanned text, suggested input values are
''' thresh ~ [0.8 - 0.85]
''' weightfactor ~ [0.5 - 0.6]
''' (2) For electronically generated fonts (e.g., rasterized pdf),
''' a very high thresh (e.g., 0.95) will not cause a significant
''' increase in the number of classes.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="components">[in] - JB_CONN_COMPS, JB_CHARACTERS, JB_WORDS</param>
'''  <param name="maxwidth">[in] - of component; use 0 for default</param>
'''  <param name="maxheight">[in] - of component; use 0 for default</param>
'''  <param name="thresh">[in] - value for correlation score in [0.4 - 0.98]</param>
'''  <param name="weightfactor">[in] - corrects thresh for thick characters [0.0 - 1.0]</param>
'''   <returns>jbclasser if OK; NULL on error</returns>
Public Shared Function jbCorrelationInit(
				ByVal components as Enumerations.JB_S, 
				ByVal maxwidth as Integer, 
				ByVal maxheight as Integer, 
				ByVal thresh as Single, 
				ByVal weightfactor as Single) as JbClasser

	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")
	If IsNothing (weightfactor) then Throw New ArgumentNullException  ("weightfactor cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.jbCorrelationInit( components, maxwidth, maxheight, thresh, weightfactor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new JbClasser(_Result)
End Function

' SRC\jbclass.c (371, 1)
' jbCorrelationInitWithoutComponents()
' jbCorrelationInitWithoutComponents(l_int32, l_int32, l_int32, l_float32, l_float32) as JBCLASSER *
'''  <summary>
''' Notes
''' Acts the same as jbCorrelationInit(), but the resulting
''' object doesn't keep a list of all the components.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="components">[in] - JB_CONN_COMPS, JB_CHARACTERS, JB_WORDS</param>
'''  <param name="maxwidth">[in] - of component; use 0 for default</param>
'''  <param name="maxheight">[in] - of component; use 0 for default</param>
'''  <param name="thresh">[in] - value  for correlation score in [0.4 - 0.98]</param>
'''  <param name="weightfactor">[in] - corrects thresh for thick characters [0.0 - 1.0]</param>
'''   <returns>jbclasser if OK; NULL on error</returns>
Public Shared Function jbCorrelationInitWithoutComponents(
				ByVal components as Enumerations.JB_S, 
				ByVal maxwidth as Integer, 
				ByVal maxheight as Integer, 
				ByVal thresh as Single, 
				ByVal weightfactor as Single) as JbClasser

	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")
	If IsNothing (weightfactor) then Throw New ArgumentNullException  ("weightfactor cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.jbCorrelationInitWithoutComponents( components, maxwidth, maxheight, thresh, weightfactor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new JbClasser(_Result)
End Function

' SRC\jbclass.c (444, 1)
' jbAddPages()
' jbAddPages(JBCLASSER *, SARRAY *) as l_ok
'''  <summary>
''' Notes
''' (1) jbclasser makes a copy of the array of file names.
''' (2) The caller is still responsible for destroying the input array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="safiles">[in] - of page image file names</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function jbAddPages(
				ByRef classer as JbClasser, 
				ByVal safiles as Sarray) as Integer

	If IsNothing (classer) then Throw New ArgumentNullException  ("classer cannot be Nothing")
	If IsNothing (safiles) then Throw New ArgumentNullException  ("safiles cannot be Nothing")

Dim classerPTR As IntPtr = IntPtr.Zero : If Not IsNothing(classer) Then classerPTR = classer.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.jbAddPages( classer.Pointer, safiles.Pointer)

	Return _Result
End Function

' SRC\jbclass.c (486, 1)
' jbAddPage()
' jbAddPage(JBCLASSER *, PIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - input page</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function jbAddPage(
				ByRef classer as JbClasser, 
				ByVal pixs as Pix) as Integer

	If IsNothing (classer) then Throw New ArgumentNullException  ("classer cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim classerPTR As IntPtr = IntPtr.Zero : If Not IsNothing(classer) Then classerPTR = classer.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.jbAddPage( classer.Pointer, pixs.Pointer)

	Return _Result
End Function

' SRC\jbclass.c (531, 1)
' jbAddPageComponents()
' jbAddPageComponents(JBCLASSER *, PIX *, BOXA *, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) If there are no components on the page, we don't require input
''' of empty boxas or pixas, although that's the typical situation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - input page</param>
'''  <param name="boxas">[in] - b.b. of components for this page</param>
'''  <param name="pixas">[in] - components for this page</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function jbAddPageComponents(
				ByRef classer as JbClasser, 
				ByVal pixs as Pix, 
				ByVal boxas as Boxa, 
				ByVal pixas as Pixa) as Integer

	If IsNothing (classer) then Throw New ArgumentNullException  ("classer cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")

Dim classerPTR As IntPtr = IntPtr.Zero : If Not IsNothing(classer) Then classerPTR = classer.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.jbAddPageComponents( classer.Pointer, pixs.Pointer, boxas.Pointer, pixas.Pointer)

	Return _Result
End Function

' SRC\jbclass.c (591, 1)
' jbClassifyRankHaus()
' jbClassifyRankHaus(JBCLASSER *, BOXA *, PIXA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - new components for classification</param>
'''  <param name="pixas">[in] - new components for classification</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function jbClassifyRankHaus(
				ByRef classer as JbClasser, 
				ByVal boxa as Boxa, 
				ByVal pixas as Pixa) as Integer

	If IsNothing (classer) then Throw New ArgumentNullException  ("classer cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")

Dim classerPTR As IntPtr = IntPtr.Zero : If Not IsNothing(classer) Then classerPTR = classer.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.jbClassifyRankHaus( classer.Pointer, boxa.Pointer, pixas.Pointer)

	Return _Result
End Function

' SRC\jbclass.c (845, 1)
' pixHaustest()
' pixHaustest(PIX *, PIX *, PIX *, PIX *, l_float32, l_float32, l_int32, l_int32) as l_int32
'''  <summary>
''' Notes
''' We check first that the two pix are roughly
''' the same size.  Only if they meet that criterion do
''' we compare the bitmaps.  The Hausdorff is a 2-way
''' check.  The centroid difference is used to align the two
''' images to the nearest integer for each of the checks.
''' These check that the dilated image of one contains
''' ALL the pixels of the undilated image of the other.
''' Checks are done in both direction.  A single pixel not
''' contained in either direction results in failure of the test.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - new pix, not dilated</param>
'''  <param name="pix2">[in] - new pix, dilated</param>
'''  <param name="pix3">[in] - exemplar pix, not dilated</param>
'''  <param name="pix4">[in] - exemplar pix, dilated</param>
'''  <param name="delx">[in] - x comp of centroid difference</param>
'''  <param name="dely">[in] - y comp of centroid difference</param>
'''  <param name="maxdiffw">[in] - max width difference of pix1 and pix2</param>
'''  <param name="maxdiffh">[in] - max height difference of pix1 and pix2</param>
'''   <returns>0 FALSE) if no match, 1 (TRUE if the new pix is in the same class as the exemplar.</returns>
Public Shared Function pixHaustest(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal pix3 as Pix, 
				ByVal pix4 as Pix, 
				ByVal delx as Single, 
				ByVal dely as Single, 
				ByVal maxdiffw as Integer, 
				ByVal maxdiffh as Integer) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If IsNothing (pix3) then Throw New ArgumentNullException  ("pix3 cannot be Nothing")
	If IsNothing (pix4) then Throw New ArgumentNullException  ("pix4 cannot be Nothing")
	If IsNothing (delx) then Throw New ArgumentNullException  ("delx cannot be Nothing")
	If IsNothing (dely) then Throw New ArgumentNullException  ("dely cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixHaustest( pix1.Pointer, pix2.Pointer, pix3.Pointer, pix4.Pointer, delx, dely, maxdiffw, maxdiffh)

	Return _Result
End Function

' SRC\jbclass.c (943, 1)
' pixRankHaustest()
' pixRankHaustest(PIX *, PIX *, PIX *, PIX *, l_float32, l_float32, l_int32, l_int32, l_int32, l_int32, l_float32, l_int32 *) as l_int32
'''  <summary>
''' Notes
''' We check first that the two pix are roughly
''' the same size.  Only if they meet that criterion do
''' we compare the bitmaps.  We convert the rank value to
''' a number of pixels by multiplying the rank fraction by the number
''' of pixels in the undilated image.  The Hausdorff is a 2-way
''' check.  The centroid difference is used to align the two
''' images to the nearest integer for each of the checks.
''' The rank hausdorff checks that the dilated image of one
''' contains the rank fraction of the pixels of the undilated
''' image of the other.   Checks are done in both direction.
''' Failure of the test in either direction results in failure
''' of the test.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - new pix, not dilated</param>
'''  <param name="pix2">[in] - new pix, dilated</param>
'''  <param name="pix3">[in] - exemplar pix, not dilated</param>
'''  <param name="pix4">[in] - exemplar pix, dilated</param>
'''  <param name="delx">[in] - x comp of centroid difference</param>
'''  <param name="dely">[in] - y comp of centroid difference</param>
'''  <param name="maxdiffw">[in] - max width difference of pix1 and pix2</param>
'''  <param name="maxdiffh">[in] - max height difference of pix1 and pix2</param>
'''  <param name="area1">[in] - fg pixels in pix1</param>
'''  <param name="area3">[in] - fg pixels in pix3</param>
'''  <param name="rank">[in] - rank value of test, each way</param>
'''  <param name="tab8">[in] - table of pixel sums for byte</param>
'''   <returns>0 FALSE) if no match, 1 (TRUE if the new pix is in the same class as the exemplar.</returns>
Public Shared Function pixRankHaustest(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal pix3 as Pix, 
				ByVal pix4 as Pix, 
				ByVal delx as Single, 
				ByVal dely as Single, 
				ByVal maxdiffw as Integer, 
				ByVal maxdiffh as Integer, 
				ByVal area1 as Integer, 
				ByVal area3 as Integer, 
				ByVal rank as Single, 
				ByVal tab8 as Integer()) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If IsNothing (pix3) then Throw New ArgumentNullException  ("pix3 cannot be Nothing")
	If IsNothing (pix4) then Throw New ArgumentNullException  ("pix4 cannot be Nothing")
	If IsNothing (delx) then Throw New ArgumentNullException  ("delx cannot be Nothing")
	If IsNothing (dely) then Throw New ArgumentNullException  ("dely cannot be Nothing")
	If IsNothing (rank) then Throw New ArgumentNullException  ("rank cannot be Nothing")
	If IsNothing (tab8) then Throw New ArgumentNullException  ("tab8 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRankHaustest( pix1.Pointer, pix2.Pointer, pix3.Pointer, pix4.Pointer, delx, dely, maxdiffw, maxdiffh, area1, area3, rank, tab8)

	Return _Result
End Function

' SRC\jbclass.c (1030, 1)
' jbClassifyCorrelation()
' jbClassifyCorrelation(JBCLASSER *, BOXA *, PIXA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxa">[in] - new components for classification</param>
'''  <param name="pixas">[in] - new components for classification</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function jbClassifyCorrelation(
				ByRef classer as JbClasser, 
				ByVal boxa as Boxa, 
				ByVal pixas as Pixa) as Integer

	If IsNothing (classer) then Throw New ArgumentNullException  ("classer cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")
	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")

Dim classerPTR As IntPtr = IntPtr.Zero : If Not IsNothing(classer) Then classerPTR = classer.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.jbClassifyCorrelation( classer.Pointer, boxa.Pointer, pixas.Pointer)

	Return _Result
End Function

' SRC\jbclass.c (1312, 1)
' jbGetComponents()
' jbGetComponents(PIX *, l_int32, l_int32, l_int32, BOXA **, PIXA **) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="components">[in] - JB_CONN_COMPS, JB_CHARACTERS, JB_WORDS</param>
'''  <param name="maxwidth">[in] - of saved components; larger are discarded</param>
'''  <param name="maxheight">[in] - of saved components; larger are discarded</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function jbGetComponents(
				ByVal pixs as Pix, 
				ByVal components as Enumerations.JB_S, 
				ByVal maxwidth as Integer, 
				ByVal maxheight as Integer, 
				ByRef pboxad as Boxa, 
				ByRef ppixad as Pixa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pboxad) then Throw New ArgumentNullException  ("pboxad cannot be Nothing")
	If IsNothing (ppixad) then Throw New ArgumentNullException  ("ppixad cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pboxadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxad) Then pboxadPTR = pboxad.Pointer
	Dim ppixadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixad) Then ppixadPTR = ppixad.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.jbGetComponents( pixs.Pointer, components, maxwidth, maxheight, pboxadPTR, ppixadPTR)

	Return _Result
End Function

' SRC\jbclass.c (1454, 1)
' pixWordMaskByDilation()
' pixWordMaskByDilation(PIX *, PIX **, l_int32 *, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) This gives an estimate of the word masks.  See
''' pixWordBoxesByDilation() for further filtering of the word boxes.
''' (2) The resolution should be between 75 and 150 ppi, and the optimal
''' dilation will be between 3 and 10.
''' (3) A good size for dilating to get word masks is optionally returned.
''' (4) Typically, the number of c.c. reduced with each successive
''' dilation (stored in nadiff) decreases quickly to a minimum
''' (where the characters in a word are joined), and then
''' increases again as the smaller number of words are joined.
''' For the typical case, you can then look for this minimum
''' and dilate to get the word mask.  However, there are many
''' cases where the function is not so simple. For example, if the
''' pix has been upscaled 2x, the nadiff function oscillates, with
''' every other value being zero!  And for some images it tails
''' off without a clear minimum to indicate where to break.
''' So a more simple and robust method is to find the dilation
''' where the initial number of c.c. has been reduced by some
''' fraction (we use a 70% reduction).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp; typ. at 75 to 150 ppi</param>
'''  <param name="psize">[out][optional] - size of good horizontal dilation</param>
'''  <param name="pixadb">[out][optional] - debug pixa of intermediate steps</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWordMaskByDilation(
				ByVal pixs as Pix, 
				ByRef ppixm as Pix, 
				ByRef psize as Integer, 
				ByRef pixadb as Pixa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ppixm) then Throw New ArgumentNullException  ("ppixm cannot be Nothing")

	Dim ppixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixm) Then ppixmPTR = ppixm.Pointer
	Dim pixadbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixadb) Then pixadbPTR = pixadb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWordMaskByDilation( pixs.Pointer, ppixmPTR, psize, pixadbPTR)
	if pixadbPTR <> IntPtr.Zero then pixadb = new Pixa(pixadbPTR)

	Return _Result
End Function

' SRC\jbclass.c (1597, 1)
' pixWordBoxesByDilation()
' pixWordBoxesByDilation(PIX *, l_int32, l_int32, l_int32, l_int32, BOXA **, l_int32 *, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) Returns a pruned set of word boxes.
''' (2) See pixWordMaskByDilation().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp; typ. 75 - 200 ppi</param>
'''  <param name="minwidth">[in] - saved components; smaller are discarded</param>
'''  <param name="minheight">[in] - saved components; smaller are discarded</param>
'''  <param name="maxwidth">[in] - saved components; larger are discarded</param>
'''  <param name="maxheight">[in] - saved components; larger are discarded</param>
'''  <param name="pboxa">[out] - of dilated word mask</param>
'''  <param name="psize">[out][optional] - size of good horizontal dilation</param>
'''  <param name="pixadb">[out][optional] - debug pixa of intermediate steps</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWordBoxesByDilation(
				ByVal pixs as Pix, 
				ByVal minwidth as Integer, 
				ByVal minheight as Integer, 
				ByVal maxwidth as Integer, 
				ByVal maxheight as Integer, 
				ByRef pboxa as Boxa, 
				ByRef psize as Integer, 
				ByRef pixadb as Pixa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer
	Dim pixadbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixadb) Then pixadbPTR = pixadb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWordBoxesByDilation( pixs.Pointer, minwidth, minheight, maxwidth, maxheight, pboxaPTR, psize, pixadbPTR)
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)
	if pixadbPTR <> IntPtr.Zero then pixadb = new Pixa(pixadbPTR)

	Return _Result
End Function

' SRC\jbclass.c (1659, 1)
' jbAccumulateComposites()
' jbAccumulateComposites(PIXAA *, NUMA **, PTA **) as PIXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixaa">[in] - one pixa for each class</param>
'''  <param name="pptat">[out] - centroids of bordered composites</param>
'''   <returns>pixad accumulated sum of samples in each class, or NULL on error</returns>
Public Shared Function jbAccumulateComposites(
				ByVal pixaa as Pixaa, 
				ByRef pna as Numa, 
				ByRef pptat as Pta) as Pixa

	If IsNothing (pixaa) then Throw New ArgumentNullException  ("pixaa cannot be Nothing")
	If IsNothing (pna) then Throw New ArgumentNullException  ("pna cannot be Nothing")

	Dim pnaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pna) Then pnaPTR = pna.Pointer
	Dim pptatPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pptat) Then pptatPTR = pptat.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.jbAccumulateComposites( pixaa.Pointer, pnaPTR, pptatPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pptatPTR <> IntPtr.Zero then pptat = new Pta(pptatPTR)

	Return  new Pixa(_Result)
End Function

' SRC\jbclass.c (1749, 1)
' jbTemplatesFromComposites()
' jbTemplatesFromComposites(PIXA *, NUMA *) as PIXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - one pix of composites for each class</param>
'''  <param name="na">[in] - number of samples used for each class composite</param>
'''   <returns>pixad 8 bpp templates for each class, or NULL on error</returns>
Public Shared Function jbTemplatesFromComposites(
				ByVal pixac as Pixa, 
				ByVal na as Numa) as Pixa

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")
	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.jbTemplatesFromComposites( pixac.Pointer, na.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\jbclass.c (1794, 1)
' jbClasserCreate()
' jbClasserCreate(l_int32, l_int32) as JBCLASSER *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="method">[in] - JB_RANKHAUS, JB_CORRELATION</param>
'''  <param name="components">[in] - JB_CONN_COMPS, JB_CHARACTERS, JB_WORDS</param>
'''   <returns>jbclasser, or NULL on error</returns>
Public Shared Function jbClasserCreate(
				ByVal method as Enumerations.JB, 
				ByVal components as Enumerations.JB_S) as JbClasser



	Dim _Result as IntPtr = LeptonicaSharp.Natives.jbClasserCreate( method, components)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new JbClasser(_Result)
End Function

' SRC\jbclass.c (1832, 1)
' 
' jbClasserDestroy(JBCLASSER **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
Public Shared Sub jbClasserDestroy(
				ByRef pclasser as JbClasser)

	If IsNothing (pclasser) then Throw New ArgumentNullException  ("pclasser cannot be Nothing")

	Dim pclasserPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pclasser) Then pclasserPTR = pclasser.Pointer

	LeptonicaSharp.Natives.jbClasserDestroy( pclasserPTR)

End Sub

' SRC\jbclass.c (1882, 1)
' jbDataSave()
' jbDataSave(JBCLASSER *) as JBDATA *
'''  <summary>
''' Notes
''' (1) This routine stores the jbig2-type data required for
''' generating a lossy jbig2 version of the image.
''' It can be losslessly written to (and read from) two files.
''' (2) It generates and stores the mosaic of templates.
''' (3) It clones the Numa and Pta arrays, so these must all
''' be destroyed by the caller.
''' (4) Input 0 to use the default values for latticew and/or latticeh,
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns>jbdata, or NULL on error</returns>
Public Shared Function jbDataSave(
				ByRef classer as JbClasser) as JbData

	If IsNothing (classer) then Throw New ArgumentNullException  ("classer cannot be Nothing")

Dim classerPTR As IntPtr = IntPtr.Zero : If Not IsNothing(classer) Then classerPTR = classer.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.jbDataSave( classer.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new JbData(_Result)
End Function

' SRC\jbclass.c (1922, 1)
' 
' jbDataDestroy(JBDATA **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
Public Shared Sub jbDataDestroy(
				ByRef pdata as JbData)

	If IsNothing (pdata) then Throw New ArgumentNullException  ("pdata cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pdata) Then pdataPTR = pdata.Pointer

	LeptonicaSharp.Natives.jbDataDestroy( pdataPTR)

End Sub

' SRC\jbclass.c (1954, 1)
' jbDataWrite()
' jbDataWrite(const char *, JBDATA *) as l_ok
'''  <summary>
''' Notes
''' (1) Serialization function that writes data in jbdata to file.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="jbdata">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function jbDataWrite(
				ByRef rootout as String, 
				ByVal jbdata as JbData) as Integer

	If IsNothing (rootout) then Throw New ArgumentNullException  ("rootout cannot be Nothing")
	If IsNothing (jbdata) then Throw New ArgumentNullException  ("jbdata cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.jbDataWrite( rootout, jbdata.Pointer)

	Return _Result
End Function

' SRC\jbclass.c (2014, 1)
' jbDataRead()
' jbDataRead(const char *) as JBDATA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rootname">[in] - for template and data files</param>
'''   <returns>jbdata, or NULL on error</returns>
Public Shared Function jbDataRead(
				ByVal rootname as String) as JbData

	If IsNothing (rootname) then Throw New ArgumentNullException  ("rootname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.jbDataRead( rootname)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new JbData(_Result)
End Function

' SRC\jbclass.c (2119, 1)
' jbDataRender()
' jbDataRender(JBDATA *, l_int32) as PIXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="debugflag">[in] - if TRUE, writes into 2 bpp pix and adds component outlines in color</param>
'''   <returns>pixa reconstruction of original images, using templates or NULL on error</returns>
Public Shared Function jbDataRender(
				ByRef data as JbData, 
				ByVal debugflag as Integer) as Pixa

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")

Dim dataPTR As IntPtr = IntPtr.Zero : If Not IsNothing(data) Then dataPTR = data.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.jbDataRender( data.Pointer, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\jbclass.c (2228, 1)
' jbGetULCorners()
' jbGetULCorners(JBCLASSER *, PIX *, BOXA *) as l_ok
'''  <summary>
''' Notes
''' (1) This computes the ptaul field, which has the global UL corners,
''' adjusted for each specific component, so that each component
''' can be replaced by the template for its class and have the
''' centroid in the template in the same position as the
''' centroid of the original connected component.  It is important
''' that this be done properly to avoid a wavy baseline in the
''' result.
''' (2) The array fields ptac and ptact give the centroids of
''' those components relative to the UL corner of each component.
''' Here, we compute the difference in each component, round to
''' nearest integer, and correct the box-GTx and box-GTy by
''' the appropriate integral difference.
''' (3) The templates and stored instances are all bordered.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - full res image</param>
'''  <param name="boxa">[in] - of c.c. bounding rectangles for this page</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function jbGetULCorners(
				ByRef classer as JbClasser, 
				ByVal pixs as Pix, 
				ByVal boxa as Boxa) as Integer

	If IsNothing (classer) then Throw New ArgumentNullException  ("classer cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")

Dim classerPTR As IntPtr = IntPtr.Zero : If Not IsNothing(classer) Then classerPTR = classer.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.jbGetULCorners( classer.Pointer, pixs.Pointer, boxa.Pointer)

	Return _Result
End Function

' SRC\jbclass.c (2320, 1)
' jbGetLLCorners()
' jbGetLLCorners(JBCLASSER *) as l_ok
'''  <summary>
''' Notes
''' (1) This computes the ptall field, which has the global LL corners,
''' adjusted for each specific component, so that each component
''' can be replaced by the template for its class and have the
''' centroid in the template in the same position as the
''' centroid of the original connected component. It is important
''' that this be done properly to avoid a wavy baseline in the result.
''' (2) It is computed here from the corresponding UL corners, where
''' the input templates and stored instances are all bordered.
''' This should be done after all pages have been processed.
''' (3) For proper substitution, the templates whose LL corners are
''' placed in these locations must be UN-bordered.
''' This is available for a realistic jbig2 encoder, which would
''' (1) encode each template without a border, and (2) encode
''' the position using the LL corner (rather than the UL
''' corner) because the difference between y-values
''' of successive instances is typically close to zero.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function jbGetLLCorners(
				ByRef classer as JbClasser) as Integer

	If IsNothing (classer) then Throw New ArgumentNullException  ("classer cannot be Nothing")

Dim classerPTR As IntPtr = IntPtr.Zero : If Not IsNothing(classer) Then classerPTR = classer.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.jbGetLLCorners( classer.Pointer)

	Return _Result
End Function

#End Region
#Region "SRC\jp2kheader.c"
' SRC\jp2kheader.c (75, 1)
' readHeaderJp2k()
' readHeaderJp2k(const char *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pw">[out][optional] - </param>
'''  <param name="ph">[out][optional] - </param>
'''  <param name="pbps">[out][optional] - bits/sample</param>
'''  <param name="pspp">[out][optional] - samples/pixel</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function readHeaderJp2k(
				ByVal filename as String, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.readHeaderJp2k( filename, pw, ph, pbps, pspp)

	Return _Result
End Function

' SRC\jp2kheader.c (112, 1)
' freadHeaderJp2k()
' freadHeaderJp2k(FILE *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for read</param>
'''  <param name="pw">[out][optional] - </param>
'''  <param name="ph">[out][optional] - </param>
'''  <param name="pbps">[out][optional] - bits/sample</param>
'''  <param name="pspp">[out][optional] - samples/pixel</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function freadHeaderJp2k(
				ByVal fp as FILE, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.freadHeaderJp2k( fp.Pointer, pw, ph, pbps, pspp)

	Return _Result
End Function

' SRC\jp2kheader.c (167, 1)
' readHeaderMemJp2k()
' readHeaderMemJp2k(const l_uint8 *, size_t, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The ISO/IEC reference for jpeg2000 is
''' http//www.jpeg.org/public/15444-1annexi.pdf
''' and the file format syntax begins at page 127.
''' (2) The Image Header Box begins with 'ihdr' = 0x69686472 in
''' big-endian order.  This typically, but not always, starts
''' byte 44, with the big-endian data fields beginning at byte 48
''' h 4 bytes
''' w 4 bytes
''' spp  2 bytes
''' bps  1 byte   (contains bps - 1)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - </param>
'''  <param name="size">[in] - at least 80</param>
'''  <param name="pw">[out][optional] - </param>
'''  <param name="ph">[out][optional] - </param>
'''  <param name="pbps">[out][optional] - bits/sample</param>
'''  <param name="pspp">[out][optional] - samples/pixel</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function readHeaderMemJp2k(
				ByVal data as Byte(), 
				ByVal size as UInteger, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer) as Integer

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.readHeaderMemJp2k( data, size, pw, ph, pbps, pspp)

	Return _Result
End Function

' SRC\jp2kheader.c (240, 1)
' 
' fgetJp2kResolution(FILE *, l_int32 *, l_int32 *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function fgetJp2kResolution(
				ByRef fp as FILE, 
				ByRef pxres as Object, 
				ByRef pyres as Object) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pxres) then Throw New ArgumentNullException  ("pxres cannot be Nothing")
	If IsNothing (pyres) then Throw New ArgumentNullException  ("pyres cannot be Nothing")

Dim fpPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fp) Then fpPTR = fp.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.fgetJp2kResolution( fp.Pointer, pxres, pyres)

	Return _Result
End Function

#End Region
#Region "SRC\jp2kiostub.c"
' SRC\jp2kiostub.c (47, 7)
' 
' pixReadJp2k(const char *, l_uint32, BOX *, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixReadJp2k(
				ByRef filename as String, 
				ByRef reduction as UInteger, 
				ByRef box as Box, 
				ByRef hint as Integer, 
				ByRef debug as Enumerations.DebugOnOff) as Pix

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("")

Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadJp2k( filename, reduction, box.Pointer, hint, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\jp2kiostub.c (55, 7)
' 
' pixReadStreamJp2k(FILE *, l_uint32, BOX *, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixReadStreamJp2k(
				ByRef fp as FILE, 
				ByRef reduction as UInteger, 
				ByRef box as Box, 
				ByRef hint as Integer, 
				ByRef debug as Enumerations.DebugOnOff) as Pix

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("")

Dim fpPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fp) Then fpPTR = fp.Pointer
Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadStreamJp2k( fp.Pointer, reduction, box.Pointer, hint, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\jp2kiostub.c (63, 6)
' 
' pixWriteJp2k(const char *, PIX *, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixWriteJp2k(
				ByRef filename as String, 
				ByRef pix as Pix, 
				ByRef quality as Integer, 
				ByRef nlevels as Integer, 
				ByRef hint as Integer, 
				ByRef debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteJp2k( filename, pix.Pointer, quality, nlevels, hint, debug)

	Return _Result
End Function

' SRC\jp2kiostub.c (71, 6)
' 
' pixWriteStreamJp2k(FILE *, PIX *, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixWriteStreamJp2k(
				ByRef fp as FILE, 
				ByRef pix as Pix, 
				ByRef quality as Integer, 
				ByRef nlevels as Integer, 
				ByRef hint as Integer, 
				ByRef debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim fpPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fp) Then fpPTR = fp.Pointer
Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteStreamJp2k( fp.Pointer, pix.Pointer, quality, nlevels, hint, debug)

	Return _Result
End Function

' SRC\jp2kiostub.c (79, 7)
' 
' pixReadMemJp2k(const l_uint8 *, size_t, l_uint32, BOX *, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixReadMemJp2k(
				ByRef data as Byte(), 
				ByRef size as UInteger, 
				ByRef reduction as UInteger, 
				ByRef box as Box, 
				ByRef hint as Integer, 
				ByRef debug as Enumerations.DebugOnOff) as Pix

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("")

Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadMemJp2k( data, size, reduction, box.Pointer, hint, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\jp2kiostub.c (87, 6)
' 
' pixWriteMemJp2k(l_uint8 **, size_t *, PIX *, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixWriteMemJp2k(
				ByRef pdata as Object, 
				ByRef psize as Object, 
				ByRef pix as Pix, 
				ByRef quality as Integer, 
				ByRef nlevels as Integer, 
				ByRef hint as Integer, 
				ByRef debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pdata) then Throw New ArgumentNullException  ("pdata cannot be Nothing")
	If IsNothing (psize) then Throw New ArgumentNullException  ("psize cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteMemJp2k( pdata, psize, pix.Pointer, quality, nlevels, hint, debug)

	Return _Result
End Function

#End Region
#Region "SRC\jpegio.c"
' SRC\jpegio.c (214, 1)
' pixReadJpeg()
' pixReadJpeg(const char *, l_int32, l_int32, l_int32 *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a special function for reading jpeg files.
''' (2) Use this if you want the jpeg library to create
''' an 8 bpp colormapped image.
''' (3) Images reduced by factors of 2, 4 or 8 can be returned
''' significantly faster than full resolution images.
''' (4) If the jpeg data is bad, the jpeg library will continue
''' silently, or return warnings, or attempt to exit.  Depending
''' on the severity of the data corruption, there are two possible
''' outcomes
''' (a) a possibly damaged pix can be generated, along with zero
''' or more warnings, or
''' (b) the library will attempt to exit (caught by our error
''' handler) and no pix will be returned.
''' If a pix is generated with at least one warning of data
''' corruption, and if L_JPEG_FAIL_ON_BAD_DATA is included in %hint,
''' no pix will be returned.
''' (5) The possible hint values are given in the enum in imageio.h
''' L_JPEG_READ_LUMINANCE
''' L_JPEG_FAIL_ON_BAD_DATA
''' Default (0) is to do neither.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="cmapflag">[in] - 0 for no colormap in returned pix; 1 to return an 8 bpp cmapped pix if spp = 3 or 4</param>
'''  <param name="reduction">[in] - scaling factor 1, 2, 4 or 8</param>
'''  <param name="pnwarn">[out][optional] - number of warnings about corrupted data</param>
'''  <param name="hint">[in] - a bitwise OR of L_JPEG_ values; 0 for default</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixReadJpeg(
				ByVal filename as String, 
				ByVal cmapflag as Integer, 
				ByVal reduction as Integer, 
				ByRef pnwarn as Integer, 
				ByVal hint as Integer) as Pix

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("scaling factor 1, 2, 4 or 8")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadJpeg( filename, cmapflag, reduction, pnwarn, hint)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\jpegio.c (270, 1)
' pixReadStreamJpeg()
' pixReadStreamJpeg(FILE *, l_int32, l_int32, l_int32 *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The jpeg comment, if it exists, is not stored in the pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="cmapflag">[in] - 0 for no colormap in returned pix; 1 to return an 8 bpp cmapped pix if spp = 3 or 4</param>
'''  <param name="reduction">[in] - scaling factor 1, 2, 4 or 8</param>
'''  <param name="pnwarn">[out][optional] - number of warnings</param>
'''  <param name="hint">[in] - a bitwise OR of L_JPEG_ values; 0 for default</param>
'''   <returns>pix, or NULL on error Usage see pixReadJpeg</returns>
Public Shared Function pixReadStreamJpeg(
				ByVal fp as FILE, 
				ByVal cmapflag as Integer, 
				ByVal reduction as Integer, 
				ByRef pnwarn as Integer, 
				ByVal hint as Integer) as Pix

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("scaling factor 1, 2, 4 or 8")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadStreamJpeg( fp.Pointer, cmapflag, reduction, pnwarn, hint)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\jpegio.c (507, 1)
' readHeaderJpeg()
' readHeaderJpeg(const char *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pw">[out][optional] - </param>
'''  <param name="ph">[out][optional] - </param>
'''  <param name="pspp">[out][optional] - samples/pixel</param>
'''  <param name="pycck">[out][optional] - 1 if ycck color space; 0 otherwise</param>
'''  <param name="pcmyk">[out][optional] - 1 if cmyk color space; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function readHeaderJpeg(
				ByVal filename as String, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pspp as Integer, 
				ByRef pycck as Integer, 
				ByRef pcmyk as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.readHeaderJpeg( filename, pw, ph, pspp, pycck, pcmyk)

	Return _Result
End Function

' SRC\jpegio.c (549, 1)
' freadHeaderJpeg()
' freadHeaderJpeg(FILE *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pw">[out][optional] - </param>
'''  <param name="ph">[out][optional] - </param>
'''  <param name="pspp">[out][optional] - samples/pixel</param>
'''  <param name="pycck">[out][optional] - 1 if ycck color space; 0 otherwise</param>
'''  <param name="pcmyk">[out][optional] - 1 if cmyk color space; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function freadHeaderJpeg(
				ByVal fp as FILE, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pspp as Integer, 
				ByRef pycck as Integer, 
				ByRef pcmyk as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.freadHeaderJpeg( fp.Pointer, pw, ph, pspp, pycck, pcmyk)

	Return _Result
End Function

' SRC\jpegio.c (618, 1)
' 
' fgetJpegResolution(FILE *, l_int32 *, l_int32 *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function fgetJpegResolution(
				ByRef fp as FILE, 
				ByRef pxres as Object, 
				ByRef pyres as Object) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pxres) then Throw New ArgumentNullException  ("pxres cannot be Nothing")
	If IsNothing (pyres) then Throw New ArgumentNullException  ("pyres cannot be Nothing")

Dim fpPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fp) Then fpPTR = fp.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.fgetJpegResolution( fp.Pointer, pxres, pyres)

	Return _Result
End Function

' SRC\jpegio.c (678, 1)
' 
' fgetJpegComment(FILE *, l_uint8 **) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function fgetJpegComment(
				ByRef fp as FILE, 
				ByRef pcomment as Object) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pcomment) then Throw New ArgumentNullException  ("pcomment cannot be Nothing")

Dim fpPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fp) Then fpPTR = fp.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.fgetJpegComment( fp.Pointer, pcomment)

	Return _Result
End Function

' SRC\jpegio.c (732, 1)
' pixWriteJpeg()
' pixWriteJpeg(const char *, PIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pix">[in] - any depth; cmap is OK</param>
'''  <param name="quality">[in] - 1 - 100; 75 is default</param>
'''  <param name="progressive">[in] - 0 for baseline sequential; 1 for progressive</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixWriteJpeg(
				ByVal filename as String, 
				ByVal pix as Pix, 
				ByVal quality as Integer, 
				ByVal progressive as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteJpeg( filename, pix.Pointer, quality, progressive)

	Return _Result
End Function

' SRC\jpegio.c (793, 1)
' pixWriteStreamJpeg()
' pixWriteStreamJpeg(FILE *, PIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Progressive encoding gives better compression, at the
''' expense of slower encoding and decoding.
''' (2) Standard chroma subsampling is 2x2 on both the U and V
''' channels.  For highest quality, use no subsampling; this
''' option is set by pixSetChromaSampling(pix, 0).
''' (3) The only valid pixel depths in leptonica are 1, 2, 4, 8, 16
''' and 32 bpp.  However, it is possible, and in some cases desirable,
''' to write out a jpeg file using an rgb pix that has 24 bpp.
''' This can be created by appending the raster data for a 24 bpp
''' image (with proper scanline padding) directly to a 24 bpp
''' pix that was created without a data array.
''' (4) There are two compression paths in this function
''' Grayscale image, no colormap compress as 8 bpp image.
''' rgb full color image copy each line into the color
''' line buffer, and compress as three 8 bpp images.
''' (5) Under the covers, the jpeg library transforms rgb to a
''' luminance-chromaticity triple, each component of which is
''' also 8 bits, and compresses that.  It uses 2 Huffman tables,
''' a higher resolution one (with more quantization levels)
''' for luminosity and a lower resolution one for the chromas.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pixs">[in] - any depth; cmap is OK</param>
'''  <param name="quality">[in] - 1 - 100; 75 is default value; 0 is also default</param>
'''  <param name="progressive">[in] - 0 for baseline sequential; 1 for progressive</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWriteStreamJpeg(
				ByVal fp as FILE, 
				ByVal pixs as Pix, 
				ByVal quality as Integer, 
				ByVal progressive as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteStreamJpeg( fp.Pointer, pixs.Pointer, quality, progressive)

	Return _Result
End Function

' SRC\jpegio.c (991, 1)
' pixReadMemJpeg()
' pixReadMemJpeg(const l_uint8 *, size_t, l_int32, l_int32, l_int32 *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The %size byte of %data must be a null character.
''' (2) The only hint flag so far is L_JPEG_READ_LUMINANCE,
''' given in the enum in imageio.h.
''' (3) See pixReadJpeg() for usage.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - const; jpeg-encoded</param>
'''  <param name="size">[in] - of data</param>
'''  <param name="cmflag">[in] - colormap flag 0 means return RGB image if color; 1 means create a colormap and return an 8 bpp colormapped image if color</param>
'''  <param name="reduction">[in] - scaling factor 1, 2, 4 or 8</param>
'''  <param name="pnwarn">[out][optional] - number of warnings</param>
'''  <param name="hint">[in] - a bitwise OR of L_JPEG_ values; 0 for default</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixReadMemJpeg(
				ByVal data as Byte(), 
				ByVal size as UInteger, 
				ByVal cmflag as Integer, 
				ByVal reduction as Integer, 
				ByRef pnwarn as Integer, 
				ByVal hint as Integer) as Pix

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("scaling factor 1, 2, 4 or 8")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadMemJpeg( data, size, cmflag, reduction, pnwarn, hint)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\jpegio.c (1038, 1)
' readHeaderMemJpeg()
' readHeaderMemJpeg(const l_uint8 *, size_t, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - const; jpeg-encoded</param>
'''  <param name="size">[in] - of data</param>
'''  <param name="pw">[out][optional] - width</param>
'''  <param name="ph">[out][optional] - height</param>
'''  <param name="pspp">[out][optional] - samples/pixel</param>
'''  <param name="pycck">[out][optional] - 1 if ycck color space; 0 otherwise</param>
'''  <param name="pcmyk">[out][optional] - 1 if cmyk color space; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function readHeaderMemJpeg(
				ByVal data as Byte(), 
				ByVal size as UInteger, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pspp as Integer, 
				ByRef pycck as Integer, 
				ByRef pcmyk as Integer) as Integer

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.readHeaderMemJpeg( data, size, pw, ph, pspp, pycck, pcmyk)

	Return _Result
End Function

' SRC\jpegio.c (1079, 1)
' readResolutionMemJpeg()
' readResolutionMemJpeg(const l_uint8 *, size_t, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - const; jpeg-encoded</param>
'''  <param name="size">[in] - of data</param>
'''  <param name="pxres">[out][optional] - </param>
'''  <param name="pyres">[out][optional] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function readResolutionMemJpeg(
				ByVal data as Byte(), 
				ByVal size as UInteger, 
				ByRef pxres as Integer, 
				ByRef pyres as Integer) as Integer

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.readResolutionMemJpeg( data, size, pxres, pyres)

	Return _Result
End Function

' SRC\jpegio.c (1121, 1)
' pixWriteMemJpeg()
' pixWriteMemJpeg(l_uint8 **, size_t *, PIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) See pixWriteStreamJpeg() for usage.  This version writes to
''' memory instead of to a file stream.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of jpeg compressed image</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="pix">[in] - any depth; cmap is OK</param>
'''  <param name="quality">[in] - 1 - 100; 75 is default value; 0 is also default</param>
'''  <param name="progressive">[in] - 0 for baseline sequential; 1 for progressive</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWriteMemJpeg(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal pix as Pix, 
				ByVal quality as Integer, 
				ByVal progressive as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteMemJpeg( pdataPTR, psize, pix.Pointer, quality, progressive)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\jpegio.c (1182, 1)
' pixSetChromaSampling()
' pixSetChromaSampling(PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) The default is for 2x2 chroma subsampling because the files are
''' considerably smaller and the appearance is typically satisfactory.
''' To get full resolution output in the chroma channels for
''' jpeg writing, call this with %sampling == 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="sampling">[in] - 1 for subsampling; 0 for no subsampling</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSetChromaSampling(
				ByVal pix as Pix, 
				ByVal sampling as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetChromaSampling( pix.Pointer, sampling)

	Return _Result
End Function

#End Region
#Region "SRC\kernel.c"
' SRC\kernel.c (106, 1)
' kernelCreate()
' kernelCreate(l_int32, l_int32) as L_KERNEL *
'''  <summary>
''' Notes
''' (1) kernelCreate() initializes all values to 0.
''' (2) After this call, (cy,cx) and nonzero data values must be
''' assigned.
''' (2) The number of kernel elements must be less than 2^29.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="height">[in] - </param>
'''  <param name="width">[in] - </param>
'''   <returns>kernel, or NULL on error</returns>
Public Shared Function kernelCreate(
				ByVal height as Integer, 
				ByVal width as Integer) as L_Kernel



	Dim _Result as IntPtr = LeptonicaSharp.Natives.kernelCreate( height, width)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Kernel(_Result)
End Function

' SRC\kernel.c (144, 1)
' kernelDestroy()
' kernelDestroy(L_KERNEL **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pkel">[in,out] - to be nulled</param>
Public Shared Sub kernelDestroy(
				ByRef pkel as L_Kernel)


	Dim pkelPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pkel) Then pkelPTR = pkel.Pointer

	LeptonicaSharp.Natives.kernelDestroy( pkelPTR)
	if pkelPTR <> IntPtr.Zero then pkel = new L_Kernel(pkelPTR)

End Sub

' SRC\kernel.c (175, 1)
' kernelCopy()
' kernelCopy(L_KERNEL *) as L_KERNEL *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="kels">[in] - source kernel</param>
'''   <returns>keld copy of kels, or NULL on error</returns>
Public Shared Function kernelCopy(
				ByVal kels as L_Kernel) as L_Kernel

	If IsNothing (kels) then Throw New ArgumentNullException  ("kels cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.kernelCopy( kels.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Kernel(_Result)
End Function

' SRC\kernel.c (211, 1)
' kernelGetElement()
' kernelGetElement(L_KERNEL *, l_int32, l_int32, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="kel">[in] - </param>
'''  <param name="row">[in] - </param>
'''  <param name="col">[in] - </param>
'''  <param name="pval">[out] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function kernelGetElement(
				ByVal kel as L_Kernel, 
				ByVal row as Integer, 
				ByVal col as Integer, 
				ByRef pval as Single()) as Integer

	If IsNothing (kel) then Throw New ArgumentNullException  ("kel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.kernelGetElement( kel.Pointer, row, col, pval)

	Return _Result
End Function

' SRC\kernel.c (243, 1)
' kernelSetElement()
' kernelSetElement(L_KERNEL *, l_int32, l_int32, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="kel">[in] - kernel</param>
'''  <param name="row">[in] - </param>
'''  <param name="col">[in] - </param>
'''  <param name="val">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function kernelSetElement(
				ByVal kel as L_Kernel, 
				ByVal row as Integer, 
				ByVal col as Integer, 
				ByVal val as Single) as Integer

	If IsNothing (kel) then Throw New ArgumentNullException  ("kel cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.kernelSetElement( kel.Pointer, row, col, val)

	Return _Result
End Function

' SRC\kernel.c (270, 1)
' kernelGetParameters()
' kernelGetParameters(L_KERNEL *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="kel">[in] - kernel</param>
'''  <param name="psy">[out][optional] - each can be null</param>
'''  <param name="psx">[out][optional] - each can be null</param>
'''  <param name="pcy">[out][optional] - each can be null</param>
'''  <param name="pcx">[out][optional] - each can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function kernelGetParameters(
				ByVal kel as L_Kernel, 
				ByRef psy as Integer, 
				ByRef psx as Integer, 
				ByRef pcy as Integer, 
				ByRef pcx as Integer) as Integer

	If IsNothing (kel) then Throw New ArgumentNullException  ("kel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.kernelGetParameters( kel.Pointer, psy, psx, pcy, pcx)

	Return _Result
End Function

' SRC\kernel.c (300, 1)
' kernelSetOrigin()
' kernelSetOrigin(L_KERNEL *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="kel">[in] - kernel</param>
'''  <param name="cy">[in] - </param>
'''  <param name="cx">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function kernelSetOrigin(
				ByVal kel as L_Kernel, 
				ByVal cy as Integer, 
				ByVal cx as Integer) as Integer

	If IsNothing (kel) then Throw New ArgumentNullException  ("kel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.kernelSetOrigin( kel.Pointer, cy, cx)

	Return _Result
End Function

' SRC\kernel.c (322, 1)
' kernelGetSum()
' kernelGetSum(L_KERNEL *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="kel">[in] - kernel</param>
'''  <param name="psum">[out] - sum of all kernel values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function kernelGetSum(
				ByVal kel as L_Kernel, 
				ByRef psum as Single()) as Integer

	If IsNothing (kel) then Throw New ArgumentNullException  ("kel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.kernelGetSum( kel.Pointer, psum)

	Return _Result
End Function

' SRC\kernel.c (354, 1)
' kernelGetMinMax()
' kernelGetMinMax(L_KERNEL *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="kel">[in] - kernel</param>
'''  <param name="pmin">[out][optional] - minimum value</param>
'''  <param name="pmax">[out][optional] - maximum value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function kernelGetMinMax(
				ByVal kel as L_Kernel, 
				ByRef pmin as Single(), 
				ByRef pmax as Single()) as Integer

	If IsNothing (kel) then Throw New ArgumentNullException  ("kel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.kernelGetMinMax( kel.Pointer, pmin, pmax)

	Return _Result
End Function

' SRC\kernel.c (410, 1)
' kernelNormalize()
' kernelNormalize(L_KERNEL *, l_float32) as L_KERNEL *
'''  <summary>
''' Notes
''' (1) If the sum of kernel elements is close to 0, do not
''' try to calculate the normalized kernel.  Instead,
''' return a copy of the input kernel, with a warning.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="kels">[in] - source kel, to be normalized</param>
'''  <param name="normsum">[in] - desired sum of elements in keld</param>
'''   <returns>keld normalized version of kels, or NULL on error or if sum of elements is very close to 0)</returns>
Public Shared Function kernelNormalize(
				ByVal kels as L_Kernel, 
				ByVal normsum as Single) as L_Kernel

	If IsNothing (kels) then Throw New ArgumentNullException  ("kels cannot be Nothing")
	If IsNothing (normsum) then Throw New ArgumentNullException  ("normsum cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.kernelNormalize( kels.Pointer, normsum)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Kernel(_Result)
End Function

' SRC\kernel.c (456, 1)
' kernelInvert()
' kernelInvert(L_KERNEL *) as L_KERNEL *
'''  <summary>
''' Notes
''' (1) For convolution, the kernel is spatially inverted before
''' a "correlation" operation is done between the kernel and the image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="kels">[in] - source kel, to be inverted</param>
'''   <returns>keld spatially inverted, about the origin, or NULL on error</returns>
Public Shared Function kernelInvert(
				ByVal kels as L_Kernel) as L_Kernel

	If IsNothing (kels) then Throw New ArgumentNullException  ("kels cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.kernelInvert( kels.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Kernel(_Result)
End Function

' SRC\kernel.c (499, 1)
' create2dFloatArray()
' create2dFloatArray(l_int32, l_int32) as l_float32 **
'''  <summary>
''' Notes
''' (1) The array[sy][sx] is indexed in standard "matrix notation",
''' with the row index first.
''' (2) The caller kernelCreate() limits the size to LT 2^29 pixels.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sy">[in] - rows == height</param>
'''  <param name="sx">[in] - columns == width</param>
'''   <returns>doubly indexed array i.e., an array of sy row pointers, each of which points to an array of sx floats</returns>
Public Shared Function create2dFloatArray(
				ByVal sy as Integer, 
				ByVal sx as Integer) as List(Of Single())



	Dim _Result as IntPtr = LeptonicaSharp.Natives.create2dFloatArray( sy, sx)
Dim PTRArr(1) As IntPtr : Marshal.Copy(_Result, PTRArr, 0, PTRArr.Length)
Dim B As New List(Of Single())
For Each eintrag In PTRArr
Dim SingleLST(1) As Single
Marshal.Copy(eintrag, SingleLST, 0, SingleLST.Count)
B.Add(SingleLST)
Next

	Return B
End Function

' SRC\kernel.c (526, 1)
' kernelRead()
' kernelRead(const char *) as L_KERNEL *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - filename</param>
'''   <returns>kernel, or NULL on error</returns>
Public Shared Function kernelRead(
				ByVal fname as String) as L_Kernel

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.kernelRead( fname)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Kernel(_Result)
End Function

' SRC\kernel.c (555, 1)
' kernelReadStream()
' kernelReadStream(FILE *) as L_KERNEL *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>kernel, or NULL on error</returns>
Public Shared Function kernelReadStream(
				ByVal fp as FILE) as L_Kernel

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.kernelReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Kernel(_Result)
End Function

' SRC\kernel.c (598, 1)
' kernelWrite()
' kernelWrite(const char *, L_KERNEL *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - output file</param>
'''  <param name="kel">[in] - kernel</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function kernelWrite(
				ByVal fname as String, 
				ByVal kel as L_Kernel) as Integer

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")
	If IsNothing (kel) then Throw New ArgumentNullException  ("kel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.kernelWrite( fname, kel.Pointer)

	Return _Result
End Function

' SRC\kernel.c (627, 1)
' kernelWriteStream()
' kernelWriteStream(FILE *, L_KERNEL *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="kel">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function kernelWriteStream(
				ByVal fp as FILE, 
				ByVal kel as L_Kernel) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (kel) then Throw New ArgumentNullException  ("kel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.kernelWriteStream( fp.Pointer, kel.Pointer)

	Return _Result
End Function

' SRC\kernel.c (679, 1)
' kernelCreateFromString()
' kernelCreateFromString(l_int32, l_int32, l_int32, l_int32, const char *) as L_KERNEL *
'''  <summary>
''' Notes
''' (1) The data is an array of chars, in row-major order, giving
''' space separated integers in the range [-255 ... 255].
''' (2) The only other formatting limitation is that you must
''' leave space between the last number in each row and
''' the double-quote.  If possible, it's also nice to have each
''' line in the string represent a line in the kernel; e.g.,
''' static const char kdata =
''' " 20   50   20 "
''' " 70  140   70 "
''' " 20   50   20 ";
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="h">[in] - height, width</param>
'''  <param name="w">[in] - height, width</param>
'''  <param name="cy">[in] - origin</param>
'''  <param name="cx">[in] - origin</param>
'''  <param name="kdata">[in] - </param>
'''   <returns>kernel of the given size, or NULL on error</returns>
Public Shared Function kernelCreateFromString(
				ByVal h as Integer, 
				ByVal w as Integer, 
				ByVal cy as Integer, 
				ByVal cx as Integer, 
				ByVal kdata as String) as L_Kernel

	If IsNothing (kdata) then Throw New ArgumentNullException  ("kdata cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.kernelCreateFromString( h, w, cy, cx, kdata)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Kernel(_Result)
End Function

' SRC\kernel.c (765, 1)
' kernelCreateFromFile()
' kernelCreateFromFile(const char *) as L_KERNEL *
'''  <summary>
''' Notes
''' (1) The file contains, in the following order
''' ~ Any number of comment lines starting with '#' are ignored
''' ~ The height and width of the kernel
''' ~ The y and x values of the kernel origin
''' ~ The kernel data, formatted as lines of numbers (integers
''' or floats) for the kernel values in row-major order,
''' and with no other punctuation.
''' (Note this differs from kernelCreateFromString(),
''' where each line must begin and end with a double-quote
''' to tell the compiler it's part of a string.)
''' ~ The kernel specification ends when a blank line,
''' a comment line, or the end of file is reached.
''' (2) All lines must be left-justified.
''' (3) See kernelCreateFromString() for a description of the string
''' format for the kernel data.  As an example, here are the lines
''' of a valid kernel description file  In the file, all lines
''' are left-justified
''' \code
''' # small 3x3 kernel
''' 3 3
''' 1 1
''' 25.5   51 24.3
''' 70.2  146.3  73.4
''' 20  50.9  18.4
''' \endcode
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>kernel, or NULL on error</returns>
Public Shared Function kernelCreateFromFile(
				ByVal filename as String) as L_Kernel

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.kernelCreateFromFile( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Kernel(_Result)
End Function

' SRC\kernel.c (865, 1)
' kernelCreateFromPix()
' kernelCreateFromPix(PIX *, l_int32, l_int32) as L_KERNEL *
'''  <summary>
''' Notes
''' (1) The origin must be positive and within the dimensions of the pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="cy">[in] - origin of kernel</param>
'''  <param name="cx">[in] - origin of kernel</param>
'''   <returns>kernel, or NULL on error</returns>
Public Shared Function kernelCreateFromPix(
				ByVal pix as Pix, 
				ByVal cy as Integer, 
				ByVal cx as Integer) as L_Kernel

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.kernelCreateFromPix( pix.Pointer, cy, cx)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Kernel(_Result)
End Function

' SRC\kernel.c (926, 1)
' kernelDisplayInPix()
' kernelDisplayInPix(L_KERNEL *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This gives a visual representation of a kernel.
''' (2) There are two modes of display
''' (a) Grid lines of minimum width 2, surrounding regions
''' representing kernel elements of minimum size 17,
''' with a "plus" mark at the kernel origin, or
''' (b) A pix without grid lines and using 1 pixel per kernel element.
''' (3) For both cases, the kernel absolute value is displayed,
''' normalized such that the maximum absolute value is 255.
''' (4) Large 2D separable kernels should be used for convolution
''' with two 1D kernels.  However, for the bilateral filter,
''' the computation time is independent of the size of the
''' 2D content kernel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="kel">[in] - kernel</param>
'''  <param name="size">[in] - of grid interiors; odd; either 1 or a minimum size of 17 is enforced</param>
'''  <param name="gthick">[in] - grid thickness; either 0 or a minimum size of 2 is enforced</param>
'''   <returns>pix display of kernel, or NULL on error</returns>
Public Shared Function kernelDisplayInPix(
				ByVal kel as L_Kernel, 
				ByVal size as Integer, 
				ByVal gthick as Integer) as Pix

	If IsNothing (kel) then Throw New ArgumentNullException  ("kel cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.kernelDisplayInPix( kel.Pointer, size, gthick)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\kernel.c (1040, 1)
' parseStringForNumbers()
' parseStringForNumbers(const char *, const char *) as NUMA *
'''  <summary>
''' Notes
''' (1) The numbers can be ints or floats.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="str">[in] - string containing numbers; not changed</param>
'''  <param name="seps">[in] - string of characters that can be used between ints</param>
'''   <returns>numa of numbers found, or NULL on error</returns>
Public Shared Function parseStringForNumbers(
				ByVal str as String, 
				ByVal seps as String) as Numa

	If IsNothing (str) then Throw New ArgumentNullException  ("str cannot be Nothing")
	If IsNothing (seps) then Throw New ArgumentNullException  ("seps cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.parseStringForNumbers( str, seps)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\kernel.c (1092, 1)
' makeFlatKernel()
' makeFlatKernel(l_int32, l_int32, l_int32, l_int32) as L_KERNEL *
'''  <summary>
''' Notes
''' (1) This is the same low-pass filtering kernel that is used
''' in the block convolution functions.
''' (2) The kernel origin (%cy, %cx) is typically placed as near
''' the center of the kernel as possible.  If height and
''' width are odd, then using cy = height / 2 and
''' cx = width / 2 places the origin at the exact center.
''' (3) This returns a normalized kernel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="height">[in] - </param>
'''  <param name="width">[in] - </param>
'''  <param name="cy">[in] - origin of kernel</param>
'''  <param name="cx">[in] - origin of kernel</param>
'''   <returns>kernel, or NULL on error</returns>
Public Shared Function makeFlatKernel(
				ByVal height as Integer, 
				ByVal width as Integer, 
				ByVal cy as Integer, 
				ByVal cx as Integer) as L_Kernel



	Dim _Result as IntPtr = LeptonicaSharp.Natives.makeFlatKernel( height, width, cy, cx)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Kernel(_Result)
End Function

' SRC\kernel.c (1137, 1)
' makeGaussianKernel()
' makeGaussianKernel(l_int32, l_int32, l_float32, l_float32) as L_KERNEL *
'''  <summary>
''' Notes
''' (1) The kernel size (sx, sy) = (2  halfwidth + 1, 2  halfheight + 1).
''' (2) The kernel center (cx, cy) = (halfwidth, halfheight).
''' (3) The halfwidth and halfheight are typically equal, and
''' are typically several times larger than the standard deviation.
''' (4) If pixConvolve() is invoked with normalization (the sum of
''' kernel elements = 1.0), use 1.0 for max (or any number that's
''' not too small or too large).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="halfheight">[in] - sx = 2  halfwidth + 1, etc</param>
'''  <param name="halfwidth">[in] - sx = 2  halfwidth + 1, etc</param>
'''  <param name="stdev">[in] - standard deviation</param>
'''  <param name="max">[in] - value at (cx,cy)</param>
'''   <returns>kernel, or NULL on error</returns>
Public Shared Function makeGaussianKernel(
				ByVal halfheight as Integer, 
				ByVal halfwidth as Integer, 
				ByVal stdev as Single, 
				ByVal max as Single) as L_Kernel

	If IsNothing (stdev) then Throw New ArgumentNullException  ("stdev cannot be Nothing")
	If IsNothing (max) then Throw New ArgumentNullException  ("max cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.makeGaussianKernel( halfheight, halfwidth, stdev, max)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Kernel(_Result)
End Function

' SRC\kernel.c (1191, 1)
' makeGaussianKernelSep()
' makeGaussianKernelSep(l_int32, l_int32, l_float32, l_float32, L_KERNEL **, L_KERNEL **) as l_ok
'''  <summary>
''' Notes
''' (1) See makeGaussianKernel() for description of input parameters.
''' (2) These kernels are constructed so that the result of both
''' normalized and un-normalized convolution will be the same
''' as when convolving with pixConvolve() using the full kernel.
''' (3) The trick for the un-normalized convolution is to have the
''' product of the two kernel elemets at (cx,cy) be equal to max,
''' not max2.  That's why the max for kely is 1.0.  If instead
''' we use sqrt(max) for both, the results are slightly less
''' accurate, when compared to using the full kernel in
''' makeGaussianKernel().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="halfheight">[in] - sx = 2  halfwidth + 1, etc</param>
'''  <param name="halfwidth">[in] - sx = 2  halfwidth + 1, etc</param>
'''  <param name="stdev">[in] - standard deviation</param>
'''  <param name="max">[in] - value at (cx,cy)</param>
'''  <param name="pkelx">[out] - x part of kernel</param>
'''  <param name="pkely">[out] - y part of kernel</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function makeGaussianKernelSep(
				ByVal halfheight as Integer, 
				ByVal halfwidth as Integer, 
				ByVal stdev as Single, 
				ByVal max as Single, 
				ByRef pkelx as L_Kernel, 
				ByRef pkely as L_Kernel) as Integer

	If IsNothing (stdev) then Throw New ArgumentNullException  ("stdev cannot be Nothing")
	If IsNothing (max) then Throw New ArgumentNullException  ("max cannot be Nothing")

	Dim pkelxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pkelx) Then pkelxPTR = pkelx.Pointer
	Dim pkelyPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pkely) Then pkelyPTR = pkely.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.makeGaussianKernelSep( halfheight, halfwidth, stdev, max, pkelxPTR, pkelyPTR)
	if pkelxPTR <> IntPtr.Zero then pkelx = new L_Kernel(pkelxPTR)
	if pkelyPTR <> IntPtr.Zero then pkely = new L_Kernel(pkelyPTR)

	Return _Result
End Function

' SRC\kernel.c (1236, 1)
' makeDoGKernel()
' makeDoGKernel(l_int32, l_int32, l_float32, l_float32) as L_KERNEL *
'''  <summary>
''' Notes
''' (1) The DoG (difference of gaussians) is a wavelet mother
''' function with null total sum.  By subtracting two blurred
''' versions of the image, it acts as a bandpass filter for
''' frequencies passed by the narrow gaussian but stopped
''' by the wide one.See
''' http//en.wikipedia.org/wiki/Difference_of_Gaussians
''' (2) The kernel size (sx, sy) = (2  halfwidth + 1, 2  halfheight + 1).
''' (3) The kernel center (cx, cy) = (halfwidth, halfheight).
''' (4) The halfwidth and halfheight are typically equal, and
''' are typically several times larger than the standard deviation.
''' (5) The ratio is the ratio of standard deviations of the wide
''' to narrow gaussian.  It must be GT= 1.0; 1.0 is a no-op.
''' (6) Because the kernel is a null sum, it must be invoked without
''' normalization in pixConvolve().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="halfheight">[in] - sx = 2  halfwidth + 1, etc</param>
'''  <param name="halfwidth">[in] - sx = 2  halfwidth + 1, etc</param>
'''  <param name="stdev">[in] - standard deviation of narrower gaussian</param>
'''  <param name="ratio">[in] - of stdev for wide filter to stdev for narrow one</param>
'''   <returns>kernel, or NULL on error</returns>
Public Shared Function makeDoGKernel(
				ByVal halfheight as Integer, 
				ByVal halfwidth as Integer, 
				ByVal stdev as Single, 
				ByVal ratio as Single) as L_Kernel

	If IsNothing (stdev) then Throw New ArgumentNullException  ("stdev cannot be Nothing")
	If IsNothing (ratio) then Throw New ArgumentNullException  ("ratio cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.makeDoGKernel( halfheight, halfwidth, stdev, ratio)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Kernel(_Result)
End Function

#End Region
#Region "SRC\leptwin.c"
' SRC\leptwin.c (303, 1)
' pixGetWindowsHBITMAP()
' pixGetWindowsHBITMAP(PIX *) as HBITMAP
'''  <summary>
''' Notes
''' (1) It's the responsibility of the caller to destroy the
''' returned hBitmap with a call to DeleteObject (or with
''' something that eventually calls DeleteObject).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''   <returns>Windows hBitmap, or NULL on error</returns>
Public Shared Function pixGetWindowsHBITMAP(
				ByVal pix as Pix) as IntPtr

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetWindowsHBITMAP( pix.Pointer)

	Return _Result
End Function

#End Region
#Region "SRC\libversions.c"
' SRC\libversions.c (101, 1)
' getImagelibVersions() Return string of version numbers; e.g., libgif 5.0.3 libjpeg 8b (libjpeg-turbo 1.3.0) libpng 1.4.3 libtiff 3.9.5 zlib 1.2.5 libwebp 0.3.0 libopenjp2 2.1.0 Notes (1) The caller must free the memory.
' getImagelibVersions() as char *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function getImagelibVersions() as String



	Dim _Result as String = LeptonicaSharp.Natives.getImagelibVersions( )

	Return _Result
End Function

#End Region
#Region "SRC\list.c"
' SRC\list.c (236, 1)
' listDestroy()
' listDestroy(DLLIST **) as void
'''  <summary>
''' Notes
''' (1) This only destroys the cons cells.  Before destroying
''' the list, it is necessary to remove all data and set the
''' data pointers in each cons cell to NULL.
''' (2) listDestroy() will give a warning message for each data
''' ptr that is not NULL.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="phead">[in,out] - to be nulled; head of list</param>
Public Shared Sub listDestroy(
				ByRef phead as DoubleLinkedList)


	Dim pheadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(phead) Then pheadPTR = phead.Pointer

	LeptonicaSharp.Natives.listDestroy( pheadPTR)
	if pheadPTR <> IntPtr.Zero then phead = new DoubleLinkedList(pheadPTR)

End Sub

' SRC\list.c (277, 1)
' listAddToHead()
' listAddToHead(DLLIST **, void *) as l_ok
'''  <summary>
''' Notes
''' (1) This makes a new cell, attaches the data, and adds the
''' cell to the head of the list.
''' (2) When consing from NULL, be sure to initialize head to NULL
''' before calling this function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="phead">[in,out][optional] - input head</param>
'''  <param name="data">[in] - void ptr, to be added</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function listAddToHead(
				ByRef phead as DoubleLinkedList, 
				ByVal data as Object) as Integer

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")

Dim pheadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(phead) Then pheadPTR = phead.Pointer
Dim dataPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.listAddToHead( pheadPTR, dataPTR)
	if pheadPTR <> IntPtr.Zero then phead = new DoubleLinkedList(pheadPTR)

	Return _Result
End Function

' SRC\list.c (331, 1)
' listAddToTail()
' listAddToTail(DLLIST **, DLLIST **, void *) as l_ok
'''  <summary>
''' Notes
''' (1) This makes a new cell, attaches the data, and adds the
''' cell to the tail of the list.
''' (2) head is input to allow the list to be "cons'd" up from NULL.
''' (3) tail is input to allow the tail to be updated
''' for efficient sequential operation with this function.
''' (4) We assume that if phead and/or ptail are not NULL,
''' then they are valid addresses.  Therefore
''' (a) when consing from NULL, be sure to initialize both
''' head and tail to NULL.
''' (b) when tail == NULL for an existing list, the tail
''' will be found and updated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="phead">[in,out] - [may be updated], can be NULL</param>
'''  <param name="ptail">[in,out] - [updated], can be NULL</param>
'''  <param name="data">[in] - void ptr, to be hung on tail cons cell</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function listAddToTail(
				ByRef phead as DoubleLinkedList, 
				ByRef ptail as DoubleLinkedList, 
				ByVal data as Object) as Integer

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")

	Dim pheadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(phead) Then pheadPTR = phead.Pointer
	Dim ptailPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ptail) Then ptailPTR = ptail.Pointer
Dim dataPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.listAddToTail( pheadPTR, ptailPTR, dataPTR)
	if pheadPTR <> IntPtr.Zero then phead = new DoubleLinkedList(pheadPTR)
	if ptailPTR <> IntPtr.Zero then ptail = new DoubleLinkedList(ptailPTR)

	Return _Result
End Function

' SRC\list.c (394, 1)
' listInsertBefore()
' listInsertBefore(DLLIST **, DLLIST *, void *) as l_ok
'''  <summary>
''' Notes
''' (1) This can be called on a null list, in which case both
''' head and elem must be null.
''' (2) If you are searching through a list, looking for a condition
''' to add an element, you can do something like this
''' \code
''' L_BEGIN_LIST_FORWARD(head, elem)
''' LTidentify an elem to insert beforeGT
''' listInsertBefore(head, elem, data);
''' L_END_LIST
''' \endcode
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="phead">[in,out][optional] - input head</param>
'''  <param name="elem">[in] - list element to be inserted in front of; must be NULL if head is NULL</param>
'''  <param name="data">[in] - void  address, to be added</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function listInsertBefore(
				ByRef phead as DoubleLinkedList, 
				ByVal elem as DoubleLinkedList, 
				ByVal data as Object) as Integer

	If IsNothing (elem) then Throw New ArgumentNullException  ("elem cannot be Nothing")
	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")

Dim pheadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(phead) Then pheadPTR = phead.Pointer
Dim dataPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.listInsertBefore( pheadPTR, elem.Pointer, dataPTR)
	if pheadPTR <> IntPtr.Zero then phead = new DoubleLinkedList(pheadPTR)

	Return _Result
End Function

' SRC\list.c (459, 1)
' listInsertAfter()
' listInsertAfter(DLLIST **, DLLIST *, void *) as l_ok
'''  <summary>
''' Notes
''' (1) This can be called on a null list, in which case both
''' head and elem must be null.  The head is included
''' in the call to allow "consing" up from NULL.
''' (2) If you are searching through a list, looking for a condition
''' to add an element, you can do something like this
''' \code
''' L_BEGIN_LIST_FORWARD(head, elem)
''' LTidentify an elem to insert afterGT
''' listInsertAfter(head, elem, data);
''' L_END_LIST
''' \endcode
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="phead">[in,out][optional] - input head</param>
'''  <param name="elem">[in] - list element to be inserted after; must be NULL if head is NULL</param>
'''  <param name="data">[in] - void  ptr, to be added</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function listInsertAfter(
				ByRef phead as DoubleLinkedList, 
				ByVal elem as DoubleLinkedList, 
				ByVal data as Object) as Integer

	If IsNothing (elem) then Throw New ArgumentNullException  ("elem cannot be Nothing")
	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")

Dim pheadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(phead) Then pheadPTR = phead.Pointer
Dim dataPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.listInsertAfter( pheadPTR, elem.Pointer, dataPTR)
	if pheadPTR <> IntPtr.Zero then phead = new DoubleLinkedList(pheadPTR)

	Return _Result
End Function

' SRC\list.c (514, 1)
' listRemoveElement()
' listRemoveElement(DLLIST **, DLLIST *) as void *
'''  <summary>
''' Notes
''' (1) in ANSI C, it is not necessary to cast return to actual type; e.g.,
''' pix = listRemoveElement(head, elem);
''' but in ANSI C++, it is necessary to do the cast
''' pix = (Pix )listRemoveElement(head, elem);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="phead">[in,out] - [can be changed] input head</param>
'''  <param name="elem">[in] - list element to be removed</param>
'''   <returns>data  void struct on cell</returns>
Public Shared Function listRemoveElement(
				ByRef phead as DoubleLinkedList, 
				ByVal elem as DoubleLinkedList) as Object

	If IsNothing (elem) then Throw New ArgumentNullException  ("elem cannot be Nothing")

	Dim pheadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(phead) Then pheadPTR = phead.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.listRemoveElement( pheadPTR, elem.Pointer)
	if pheadPTR <> IntPtr.Zero then phead = new DoubleLinkedList(pheadPTR)

	Return _Result
End Function

' SRC\list.c (566, 1)
' listRemoveFromHead()
' listRemoveFromHead(DLLIST **) as void *
'''  <summary>
''' Notes
''' (1) in ANSI C, it is not necessary to cast return to actual type; e.g.,
''' pix = listRemoveFromHead(head);
''' but in ANSI C++, it is necessary to do the cast; e.g.,
''' pix = (Pix )listRemoveFromHead(head);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="phead">[in,out] - head of list [to be updated]</param>
'''   <returns>data  void struct on cell, or NULL on error</returns>
Public Shared Function listRemoveFromHead(
				ByRef phead as DoubleLinkedList) as Object


	Dim pheadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(phead) Then pheadPTR = phead.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.listRemoveFromHead( pheadPTR)
	if pheadPTR <> IntPtr.Zero then phead = new DoubleLinkedList(pheadPTR)

	Return _Result
End Function

' SRC\list.c (614, 1)
' listRemoveFromTail()
' listRemoveFromTail(DLLIST **, DLLIST **) as void *
'''  <summary>
''' Notes
''' (1) We include head so that it can be set to NULL if
''' if the only element in the list is removed.
''' (2) The function is relying on the fact that if tail is
''' not NULL, then is is a valid address.  You can use
''' this function with tail == NULL for an existing list, in
''' which case  the tail is found and updated, and the
''' removed element is returned.
''' (3) In ANSI C, it is not necessary to cast return to actual type; e.g.,
''' pix = listRemoveFromTail(head, tail);
''' but in ANSI C++, it is necessary to do the cast; e.g.,
''' pix = (Pix )listRemoveFromTail(head, tail);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="phead">[in,out] - [may be changed], head must NOT be NULL</param>
'''  <param name="ptail">[in,out] - [always updated], tail may be NULL</param>
'''   <returns>data  void struct on cell or NULL on error</returns>
Public Shared Function listRemoveFromTail(
				ByRef phead as DoubleLinkedList, 
				ByRef ptail as DoubleLinkedList) as Object


	Dim pheadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(phead) Then pheadPTR = phead.Pointer
	Dim ptailPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ptail) Then ptailPTR = ptail.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.listRemoveFromTail( pheadPTR, ptailPTR)
	if pheadPTR <> IntPtr.Zero then phead = new DoubleLinkedList(pheadPTR)
	if ptailPTR <> IntPtr.Zero then ptail = new DoubleLinkedList(ptailPTR)

	Return _Result
End Function

' SRC\list.c (668, 1)
' listFindElement()
' listFindElement(DLLIST *, void *) as DLLIST *
'''  <summary>
''' Notes
''' (1) This returns a ptr to the cell, which is still embedded in
''' the list.
''' (2) This handle and the attached data have not been copied or
''' reference counted, so they must not be destroyed.  This
''' violates our basic rule that every handle returned from a
''' function is owned by that function and must be destroyed,
''' but if rules aren't there to be broken, why have them?
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="head">[in] - list head</param>
'''  <param name="data">[in] - void  address, to be searched for</param>
'''   <returns>cell  the containing cell, or NULL if not found or on error</returns>
Public Shared Function listFindElement(
				ByVal head as DoubleLinkedList, 
				ByVal data as Object) as DoubleLinkedList

	If IsNothing (head) then Throw New ArgumentNullException  ("head cannot be Nothing")
	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")

Dim dataPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as IntPtr = LeptonicaSharp.Natives.listFindElement( head.Pointer, dataPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new DoubleLinkedList(_Result)
End Function

' SRC\list.c (696, 1)
' listFindTail()
' listFindTail(DLLIST *) as DLLIST *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="head">[in] - </param>
'''   <returns>tail, or NULL on error</returns>
Public Shared Function listFindTail(
				ByVal head as DoubleLinkedList) as DoubleLinkedList

	If IsNothing (head) then Throw New ArgumentNullException  ("head cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.listFindTail( head.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new DoubleLinkedList(_Result)
End Function

' SRC\list.c (721, 1)
' listGetCount()
' listGetCount(DLLIST *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="head">[in] - of list</param>
'''   <returns>number of elements; 0 if no list or on error</returns>
Public Shared Function listGetCount(
				ByVal head as DoubleLinkedList) as Integer

	If IsNothing (head) then Throw New ArgumentNullException  ("head cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.listGetCount( head.Pointer)

	Return _Result
End Function

' SRC\list.c (751, 1)
' listReverse()
' listReverse(DLLIST **) as l_ok
'''  <summary>
''' Notes
''' (1) This reverses the list in-place.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="phead">[in,out] - [may be changed] list head</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function listReverse(
				ByRef phead as DoubleLinkedList) as Integer


	Dim pheadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(phead) Then pheadPTR = phead.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.listReverse( pheadPTR)
	if pheadPTR <> IntPtr.Zero then phead = new DoubleLinkedList(pheadPTR)

	Return _Result
End Function

' SRC\list.c (788, 1)
' listJoin()
' listJoin(DLLIST **, DLLIST **) as l_ok
'''  <summary>
''' Notes
''' (1) The concatenated list is returned with head1 as the new head.
''' (2) Both input ptrs must exist, though either can have the value NULL.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="phead1">[in,out] - [may be changed] head of first list</param>
'''  <param name="phead2">[in,out] - to be nulled; head of second list</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function listJoin(
				ByRef phead1 as DoubleLinkedList, 
				ByRef phead2 as DoubleLinkedList) as Integer


	Dim phead1PTR As IntPtr = IntPtr.Zero : If Not IsNothing(phead1) Then phead1PTR = phead1.Pointer
	Dim phead2PTR As IntPtr = IntPtr.Zero : If Not IsNothing(phead2) Then phead2PTR = phead2.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.listJoin( phead1PTR, phead2PTR)
	if phead1PTR <> IntPtr.Zero then phead1 = new DoubleLinkedList(phead1PTR)
	if phead2PTR <> IntPtr.Zero then phead2 = new DoubleLinkedList(phead2PTR)

	Return _Result
End Function

#End Region
#Region "SRC\map.c"
' SRC\map.c (107, 1)
' 
' l_amapCreate(l_int32) as L_AMAP *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function l_amapCreate(
				ByRef keytype as Integer) as L_Rbtree



	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_amapCreate( keytype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree(_Result)
End Function

' SRC\map.c (121, 1)
' 
' l_amapFind(L_AMAP *, RB_TYPE) as RB_TYPE *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function l_amapFind(
				ByRef m as L_Rbtree, 
				ByRef key as Rb_Type) as RB_TYPE

	If IsNothing (m) then Throw New ArgumentNullException  ("m cannot be Nothing")
	If IsNothing (key) then Throw New ArgumentNullException  ("key cannot be Nothing")

Dim mPTR As IntPtr = IntPtr.Zero : If Not IsNothing(m) Then mPTR = m.Pointer
Dim keyPTR As IntPtr = IntPtr.Zero : If Not IsNothing(key) Then keyPTR = key.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_amapFind( m.Pointer, key.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new RB_TYPE(_Result)
End Function

' SRC\map.c (128, 1)
' 
' l_amapInsert(L_AMAP *, RB_TYPE, RB_TYPE) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
Public Shared Sub l_amapInsert(
				ByRef m as L_Rbtree, 
				ByRef key as Rb_Type, 
				ByRef value as Rb_Type)

	If IsNothing (m) then Throw New ArgumentNullException  ("m cannot be Nothing")
	If IsNothing (key) then Throw New ArgumentNullException  ("key cannot be Nothing")
	If IsNothing (value) then Throw New ArgumentNullException  ("value cannot be Nothing")

Dim mPTR As IntPtr = IntPtr.Zero : If Not IsNothing(m) Then mPTR = m.Pointer
Dim keyPTR As IntPtr = IntPtr.Zero : If Not IsNothing(key) Then keyPTR = key.Pointer
Dim valuePTR As IntPtr = IntPtr.Zero : If Not IsNothing(value) Then valuePTR = value.Pointer

	LeptonicaSharp.Natives.l_amapInsert( m.Pointer, key.Pointer, value.Pointer)

End Sub

' SRC\map.c (136, 1)
' 
' l_amapDelete(L_AMAP *, RB_TYPE) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
Public Shared Sub l_amapDelete(
				ByRef m as L_Rbtree, 
				ByRef key as Rb_Type)

	If IsNothing (m) then Throw New ArgumentNullException  ("m cannot be Nothing")
	If IsNothing (key) then Throw New ArgumentNullException  ("key cannot be Nothing")

Dim mPTR As IntPtr = IntPtr.Zero : If Not IsNothing(m) Then mPTR = m.Pointer
Dim keyPTR As IntPtr = IntPtr.Zero : If Not IsNothing(key) Then keyPTR = key.Pointer

	LeptonicaSharp.Natives.l_amapDelete( m.Pointer, key.Pointer)

End Sub

' SRC\map.c (143, 1)
' 
' l_amapDestroy(L_AMAP **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
Public Shared Sub l_amapDestroy(
				ByRef pm as L_Rbtree)

	If IsNothing (pm) then Throw New ArgumentNullException  ("pm cannot be Nothing")

	Dim pmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pm) Then pmPTR = pm.Pointer

	LeptonicaSharp.Natives.l_amapDestroy( pmPTR)

End Sub

' SRC\map.c (149, 1)
' 
' l_amapGetFirst(L_AMAP *) as L_AMAP_NODE *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function l_amapGetFirst(
				ByRef m as L_Rbtree) as L_Rbtree_Node

	If IsNothing (m) then Throw New ArgumentNullException  ("m cannot be Nothing")

Dim mPTR As IntPtr = IntPtr.Zero : If Not IsNothing(m) Then mPTR = m.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_amapGetFirst( m.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree_Node(_Result)
End Function

' SRC\map.c (155, 1)
' 
' l_amapGetNext(L_AMAP_NODE *) as L_AMAP_NODE *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function l_amapGetNext(
				ByRef n as L_Rbtree_Node) as L_Rbtree_Node

	If IsNothing (n) then Throw New ArgumentNullException  ("n cannot be Nothing")

Dim nPTR As IntPtr = IntPtr.Zero : If Not IsNothing(n) Then nPTR = n.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_amapGetNext( n.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree_Node(_Result)
End Function

' SRC\map.c (161, 1)
' 
' l_amapGetLast(L_AMAP *) as L_AMAP_NODE *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function l_amapGetLast(
				ByRef m as L_Rbtree) as L_Rbtree_Node

	If IsNothing (m) then Throw New ArgumentNullException  ("m cannot be Nothing")

Dim mPTR As IntPtr = IntPtr.Zero : If Not IsNothing(m) Then mPTR = m.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_amapGetLast( m.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree_Node(_Result)
End Function

' SRC\map.c (167, 1)
' 
' l_amapGetPrev(L_AMAP_NODE *) as L_AMAP_NODE *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function l_amapGetPrev(
				ByRef n as L_Rbtree_Node) as L_Rbtree_Node

	If IsNothing (n) then Throw New ArgumentNullException  ("n cannot be Nothing")

Dim nPTR As IntPtr = IntPtr.Zero : If Not IsNothing(n) Then nPTR = n.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_amapGetPrev( n.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree_Node(_Result)
End Function

' SRC\map.c (173, 1)
' 
' l_amapSize(L_AMAP *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function l_amapSize(
				ByRef m as L_Rbtree) as Integer

	If IsNothing (m) then Throw New ArgumentNullException  ("m cannot be Nothing")

Dim mPTR As IntPtr = IntPtr.Zero : If Not IsNothing(m) Then mPTR = m.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.l_amapSize( m.Pointer)

	Return _Result
End Function

' SRC\map.c (183, 1)
' 
' l_asetCreate(l_int32) as L_ASET *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function l_asetCreate(
				ByRef keytype as Integer) as L_Rbtree



	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_asetCreate( keytype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree(_Result)
End Function

' SRC\map.c (203, 1)
' 
' l_asetFind(L_ASET *, RB_TYPE) as RB_TYPE *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function l_asetFind(
				ByRef s as L_Rbtree, 
				ByRef key as Rb_Type) as RB_TYPE

	If IsNothing (s) then Throw New ArgumentNullException  ("s cannot be Nothing")
	If IsNothing (key) then Throw New ArgumentNullException  ("key cannot be Nothing")

Dim sPTR As IntPtr = IntPtr.Zero : If Not IsNothing(s) Then sPTR = s.Pointer
Dim keyPTR As IntPtr = IntPtr.Zero : If Not IsNothing(key) Then keyPTR = key.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_asetFind( s.Pointer, key.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new RB_TYPE(_Result)
End Function

' SRC\map.c (210, 1)
' 
' l_asetInsert(L_ASET *, RB_TYPE) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
Public Shared Sub l_asetInsert(
				ByRef s as L_Rbtree, 
				ByRef key as Rb_Type)

	If IsNothing (s) then Throw New ArgumentNullException  ("s cannot be Nothing")
	If IsNothing (key) then Throw New ArgumentNullException  ("key cannot be Nothing")

Dim sPTR As IntPtr = IntPtr.Zero : If Not IsNothing(s) Then sPTR = s.Pointer
Dim keyPTR As IntPtr = IntPtr.Zero : If Not IsNothing(key) Then keyPTR = key.Pointer

	LeptonicaSharp.Natives.l_asetInsert( s.Pointer, key.Pointer)

End Sub

' SRC\map.c (220, 1)
' 
' l_asetDelete(L_ASET *, RB_TYPE) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
Public Shared Sub l_asetDelete(
				ByRef s as L_Rbtree, 
				ByRef key as Rb_Type)

	If IsNothing (s) then Throw New ArgumentNullException  ("s cannot be Nothing")
	If IsNothing (key) then Throw New ArgumentNullException  ("key cannot be Nothing")

Dim sPTR As IntPtr = IntPtr.Zero : If Not IsNothing(s) Then sPTR = s.Pointer
Dim keyPTR As IntPtr = IntPtr.Zero : If Not IsNothing(key) Then keyPTR = key.Pointer

	LeptonicaSharp.Natives.l_asetDelete( s.Pointer, key.Pointer)

End Sub

' SRC\map.c (227, 1)
' 
' l_asetDestroy(L_ASET **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
Public Shared Sub l_asetDestroy(
				ByRef ps as L_Rbtree)

	If IsNothing (ps) then Throw New ArgumentNullException  ("ps cannot be Nothing")

	Dim psPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ps) Then psPTR = ps.Pointer

	LeptonicaSharp.Natives.l_asetDestroy( psPTR)

End Sub

' SRC\map.c (233, 1)
' 
' l_asetGetFirst(L_ASET *) as L_ASET_NODE *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function l_asetGetFirst(
				ByRef s as L_Rbtree) as L_Rbtree_Node

	If IsNothing (s) then Throw New ArgumentNullException  ("s cannot be Nothing")

Dim sPTR As IntPtr = IntPtr.Zero : If Not IsNothing(s) Then sPTR = s.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_asetGetFirst( s.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree_Node(_Result)
End Function

' SRC\map.c (239, 1)
' 
' l_asetGetNext(L_ASET_NODE *) as L_ASET_NODE *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function l_asetGetNext(
				ByRef n as L_Rbtree_Node) as L_Rbtree_Node

	If IsNothing (n) then Throw New ArgumentNullException  ("n cannot be Nothing")

Dim nPTR As IntPtr = IntPtr.Zero : If Not IsNothing(n) Then nPTR = n.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_asetGetNext( n.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree_Node(_Result)
End Function

' SRC\map.c (245, 1)
' 
' l_asetGetLast(L_ASET *) as L_ASET_NODE *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function l_asetGetLast(
				ByRef s as L_Rbtree) as L_Rbtree_Node

	If IsNothing (s) then Throw New ArgumentNullException  ("s cannot be Nothing")

Dim sPTR As IntPtr = IntPtr.Zero : If Not IsNothing(s) Then sPTR = s.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_asetGetLast( s.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree_Node(_Result)
End Function

' SRC\map.c (251, 1)
' 
' l_asetGetPrev(L_ASET_NODE *) as L_ASET_NODE *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function l_asetGetPrev(
				ByRef n as L_Rbtree_Node) as L_Rbtree_Node

	If IsNothing (n) then Throw New ArgumentNullException  ("n cannot be Nothing")

Dim nPTR As IntPtr = IntPtr.Zero : If Not IsNothing(n) Then nPTR = n.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_asetGetPrev( n.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree_Node(_Result)
End Function

' SRC\map.c (257, 1)
' 
' l_asetSize(L_ASET *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function l_asetSize(
				ByRef s as L_Rbtree) as Integer

	If IsNothing (s) then Throw New ArgumentNullException  ("s cannot be Nothing")

Dim sPTR As IntPtr = IntPtr.Zero : If Not IsNothing(s) Then sPTR = s.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.l_asetSize( s.Pointer)

	Return _Result
End Function

#End Region
#Region "SRC\maze.c"
' SRC\maze.c (142, 1)
' generateBinaryMaze()
' generateBinaryMaze(l_int32, l_int32, l_int32, l_int32, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) We have two input probability factors that determine the
''' density of walls and average length of straight passages.
''' When ranis LT 1.0, you are more likely to generate a wall
''' to the side than going forward.  Enter 0.0 for either if
''' you want to use the default values.
''' (2) This is a type of percolation problem, and exhibits
''' different phases for different parameters wallps and ranis.
''' For larger values of these parameters, regions in the maze
''' are not explored because the maze generator walls them
''' off and cannot get through.  The boundary between the
''' two phases in this two-dimensional parameter space goes
''' near these values
''' wallps ranis
''' 0.35   1.00
''' 0.40   0.85
''' 0.45   0.70
''' 0.50   0.50
''' 0.55   0.40
''' 0.60   0.30
''' 0.65   0.25
''' 0.70   0.19
''' 0.75   0.15
''' 0.80   0.11
''' (3) Because there is a considerable amount of overhead in calling
''' pixGetPixel() and pixSetPixel(), this function can be sped
''' up with little effort using raster line pointers and the
''' GET_DATA and SET_DATA macros.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="w">[in] - size of maze</param>
'''  <param name="h">[in] - size of maze</param>
'''  <param name="xi">[in] - initial location</param>
'''  <param name="yi">[in] - initial location</param>
'''  <param name="wallps">[in] - probability that a pixel to the side is ON</param>
'''  <param name="ranis">[in] - ratio of prob that pixel in forward direction is a wall to the probability that pixel in side directions is a wall</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function generateBinaryMaze(
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal xi as Integer, 
				ByVal yi as Integer, 
				ByVal wallps as Single, 
				ByVal ranis as Single) as Pix

	If IsNothing (wallps) then Throw New ArgumentNullException  ("wallps cannot be Nothing")
	If IsNothing (ranis) then Throw New ArgumentNullException  ("ranis cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.generateBinaryMaze( w, h, xi, yi, wallps, ranis)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\maze.c (339, 1)
' pixSearchBinaryMaze()
' pixSearchBinaryMaze(PIX *, l_int32, l_int32, l_int32, l_int32, PIX **) as PTA *
'''  <summary>
''' Notes
''' (1) Because of the overhead in calling pixGetPixel() and
''' pixSetPixel(), we have used raster line pointers and the
''' GET_DATA and SET_DATA macros for many of the pix accesses.
''' (2) Commentary
''' The goal is to find the shortest path between beginning and
''' end points, without going through walls, and there are many
''' ways to solve this problem.
''' We use a queue to implement a breadth-first search.  Two auxiliary
''' "image" data structures can be used one to mark the visited
''' pixels and one to give the direction to the parent for each
''' visited pixel.  The first structure is used to avoid putting
''' pixels on the queue more than once, and the second is used
''' for retracing back to the origin, like the breadcrumbs in
''' Hansel and Gretel.  Each pixel taken off the queue is destroyed
''' after it is used to locate the allowed neighbors.  In fact,
''' only one distance image is required, if you initialize it
''' to some value that signifies "not yet visited."  (We use
''' a binary image for marking visited pixels because it is clearer.)
''' This method for a simple search of a binary maze is implemented in
''' pixSearchBinaryMaze().
''' An alternative method would store the (manhattan) distance
''' from the start point with each pixel on the queue.  The children
''' of each pixel get a distance one larger than the parent.  These
''' values can be stored in an auxiliary distance map image
''' that is constructed simultaneously with the search.  Once the
''' end point is reached, the distance map is used to backtrack
''' along a minimum path.  There may be several equal length
''' minimum paths, any one of which can be chosen this way.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, maze</param>
'''  <param name="xi">[in] - beginning point; use same initial point that was used to generate the maze</param>
'''  <param name="yi">[in] - beginning point; use same initial point that was used to generate the maze</param>
'''  <param name="xf">[in] - end point, or close to it</param>
'''  <param name="yf">[in] - end point, or close to it</param>
'''  <param name="ppixd">[out][optional] - maze with path illustrated, or if no path possible, the part of the maze that was searched</param>
'''   <returns>pta shortest path, or NULL if either no path exists or on error</returns>
Public Shared Function pixSearchBinaryMaze(
				ByVal pixs as Pix, 
				ByVal xi as Integer, 
				ByVal yi as Integer, 
				ByVal xf as Integer, 
				ByVal yf as Integer, 
				ByRef ppixd as Pix) as Pta

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSearchBinaryMaze( pixs.Pointer, xi, yi, xf, yf, ppixdPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return  new Pta(_Result)
End Function

' SRC\maze.c (723, 1)
' pixSearchGrayMaze()
' pixSearchGrayMaze(PIX *, l_int32, l_int32, l_int32, l_int32, PIX **) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, maze</param>
'''  <param name="xi">[in] - beginning point; use same initial point that was used to generate the maze</param>
'''  <param name="yi">[in] - beginning point; use same initial point that was used to generate the maze</param>
'''  <param name="xf">[in] - end point, or close to it</param>
'''  <param name="yf">[in] - end point, or close to it</param>
'''  <param name="ppixd">[out][optional] - maze with path illustrated, or if no path possible, the part of the maze that was searched</param>
'''   <returns>pta shortest path, or NULL if either no path exists or on error Commentary Consider first a slight generalization of the binary maze search problem.  Suppose that you can go through walls, but the cost is higher say, an increment of 3 to go into a wall pixel rather than 1?  You're still trying to find the shortest path.  One way to do this is with an ordered queue, and a simple way to visualize an ordered queue is as a set of stacks, each stack being marked with the distance of each pixel in the stack from the start.  We place the start pixel in stack 0, pop it, and process its 4 children. Each pixel is given a distance that is incremented from that of its parent 0 in this case, depending on if it is a wall pixel or not.  That value may be recorded on a distance map, according to the algorithm below.  For children of the first pixel, those not on a wall go in stack 1, and wall children go in stack 3.  Stack 0 being emptied, the process then continues with pixels being popped from stack 1. Here is the algorithm for each child pixel.  The pixel's distance value, were it to be placed on a stack, is compared with the value for it that is on the distance map.  There are three possible cases 1 If the pixel has not yet been registered, it is pushed on its stack and the distance is written to the map. 2 If it has previously been registered with a higher distance, the distance on the map is relaxed to that of the current pixel, which is then placed on its stack. 3 If it has previously been registered with an equal or lower value, the pixel is discarded. The pixels are popped and processed successively from stack 1, and when stack 1 is empty, popping starts on stack 2. This continues until the destination pixel is popped off a stack.   The minimum path is then derived from the distance map, going back from the end point as before.  This is just Dijkstra's algorithm for a directed graph; here, the underlying graph consisting of the pixels and four edges connecting each pixel to its 4-neighbor is a special case of a directed graph, where each edge is bi-directional.  The implementation of this generalized maze search is left as an exercise to the reader. Let's generalize a bit further.  Suppose the "maze" is just a grayscale image -- think of it as an elevation map.  The cost of moving on this surface depends on the height, or the gradient, or whatever you want.  All that is required is that the cost is specified and non-negative on each link between adjacent pixels.  Now the problem becomes find the least cost path moving on this surface between two specified end points. For example, if the cost across an edge between two pixels depends on the "gradient", you can use cost = 1 + L_ABSdeltaV where deltaV is the difference in value between two adjacent pixels.  If the costs are all integers, we can still use an array of stacks to avoid ordering the queue e.g., by using a heap sort. This is a neat problem, because you don't even have to build a maze -- you can can use it on any grayscale image! Rather than using an array of stacks, a more practical approach is to implement with a priority queue, which is a queue that is sorted so that the elements with the largest or smallest key values always come off first.  The priority queue is efficiently implemented as a heap, and this is how we do it.  Suppose you run the algorithm using a priority queue, doing the bookkeeping with an auxiliary image data structure that saves the distance of each pixel put on the queue as before, according to the method described above.  We implement it as a 2-way choice by initializing the distance array to a large value and putting a pixel on the queue if its distance is less than the value found on the array.  When you finally pop the end pixel from the queue, you're done, and you can trace the path backward, either always going downhill or using an auxiliary image to give you the direction to go at each step.  This is implemented here in searchGrayMaze. Do we really have to use a sorted queue?  Can we solve this generalized maze with an unsorted queue of pixels?  Or even an unsorted stack, doing a depth-first search (DFS)? Consider a different algorithm for this generalized maze, where we travel again breadth first, but this time use a single, unsorted queue.  An auxiliary image is used as before to store the distances and to determine if pixels get pushed on the stack or dropped.  As before, we must allow pixels to be revisited, with relaxation of the distance if a shorter path arrives later.  As a result, we will in general have multiple instances of the same pixel on the stack with different distances.  However, because the queue is not ordered, some of these pixels will be popped when another instance with a lower distance is still on the stack.  Here, we're just popping them in the order they go on, rather than setting up a priority based on minimum distance.  Thus, unlike the priority queue, when a pixel is popped we have to check the distance map to see if a pixel with a lower distance has been put on the queue, and, if so, we discard the pixel we just popped.  So the "while" loop looks like this ~ pop a pixel from the queue ~ check its distance against the distance stored in the distance map; if larger, discard ~ otherwise, for each of its neighbors ~ compute its distance from the start pixel ~ compare this distance with that on the distance map ~ if the distance map value higher, relax the distance and push the pixel on the queue ~ if the distance map value is lower, discard the pixel How does this loop terminate?  Before, with an ordered queue, it terminates when you pop the end pixel.  But with an unordered queue or stack, the first time you hit the end pixel, the distance is not guaranteed to be correct, because the pixels along the shortest path may not have yet been visited and relaxed. Because the shortest path can theoretically go anywhere, we must keep going.  How do we know when to stop?   Dijkstra uses an ordered queue to systematically remove nodes from further consideration.  Each time a pixel is popped, we're done with it; it's "finalized" in the Dijkstra sense because we know the shortest path to it.  However, with an unordered queue, the brute force answer is stop when the queue or stack is empty, because then every pixel in the image has been assigned its minimum "distance" from the start pixel. This is similar to the situation when you use a stack for the simpler uniform-step problem with breadth-first search BFS the pixels on the queue are automatically ordered, so you are done when you locate the end pixel as a neighbor of a popped pixel; whereas depth-first search DFS, using a stack, requires, in general, a search of every accessible pixel.  Further, if a pixel is revisited with a smaller distance, that distance is recorded and the pixel is put on the stack again. But surely, you ask, can't we stop sooner?  What if the start and end pixels are very close to each other? OK, suppose they are, and you have very high walls and a long snaking level path that is actually the minimum cost. That long path can wind back and forth across the entire maze many times before ending up at the end point, which could be just over a wall from the start.  With the unordered queue, you very quickly get a high distance for the end pixel, which will be relaxed to the minimum distance only after all the pixels of the path have been visited and placed on the queue, multiple times for many of them.  So that's the price for not ordering the queue!</returns>
Public Shared Function pixSearchGrayMaze(
				ByVal pixs as Pix, 
				ByVal xi as Integer, 
				ByVal yi as Integer, 
				ByVal xf as Integer, 
				ByVal yf as Integer, 
				ByRef ppixd as Pix) as Pta

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSearchGrayMaze( pixs.Pointer, xi, yi, xf, yf, ppixdPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return  new Pta(_Result)
End Function

#End Region
#Region "SRC\morph.c"
' SRC\morph.c (209, 1)
' pixDilate()
' pixDilate(PIX *, PIX *, SEL *) as PIX *
'''  <summary>
''' Notes
''' (1) This dilates src using hits in Sel.
''' (2) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (3) For clarity, if the case is known, use these patterns
''' (a) pixd = pixDilate(NULL, pixs, ...);
''' (b) pixDilate(pixs, pixs, ...);
''' (c) pixDilate(pixd, pixs, ...);
''' (4) The size of the result is determined by pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="sel">[in] - </param>
'''   <returns>pixd</returns>
Public Shared Function pixDilate(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal sel as Sel) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDilate( pixdPTR, pixs.Pointer, sel.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (263, 1)
' pixErode()
' pixErode(PIX *, PIX *, SEL *) as PIX *
'''  <summary>
''' Notes
''' (1) This erodes src using hits in Sel.
''' (2) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (3) For clarity, if the case is known, use these patterns
''' (a) pixd = pixErode(NULL, pixs, ...);
''' (b) pixErode(pixs, pixs, ...);
''' (c) pixErode(pixd, pixs, ...);
''' (4) The size of the result is determined by pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="sel">[in] - </param>
'''   <returns>pixd</returns>
Public Shared Function pixErode(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal sel as Sel) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixErode( pixdPTR, pixs.Pointer, sel.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (338, 1)
' pixHMT()
' pixHMT(PIX *, PIX *, SEL *) as PIX *
'''  <summary>
''' Notes
''' (1) The hit-miss transform erodes the src, using both hits
''' and misses in the Sel.  It ANDs the shifted src for hits
''' and ANDs the inverted shifted src for misses.
''' (2) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (3) For clarity, if the case is known, use these patterns
''' (a) pixd = pixHMT(NULL, pixs, ...);
''' (b) pixHMT(pixs, pixs, ...);
''' (c) pixHMT(pixd, pixs, ...);
''' (4) The size of the result is determined by pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="sel">[in] - </param>
'''   <returns>pixd</returns>
Public Shared Function pixHMT(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal sel as Sel) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixHMT( pixdPTR, pixs.Pointer, sel.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (422, 1)
' pixOpen()
' pixOpen(PIX *, PIX *, SEL *) as PIX *
'''  <summary>
''' Notes
''' (1) Generic morphological opening, using hits in the Sel.
''' (2) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (3) For clarity, if the case is known, use these patterns
''' (a) pixd = pixOpen(NULL, pixs, ...);
''' (b) pixOpen(pixs, pixs, ...);
''' (c) pixOpen(pixd, pixs, ...);
''' (4) The size of the result is determined by pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="sel">[in] - </param>
'''   <returns>pixd</returns>
Public Shared Function pixOpen(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal sel as Sel) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOpen( pixdPTR, pixs.Pointer, sel.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (469, 1)
' pixClose()
' pixClose(PIX *, PIX *, SEL *) as PIX *
'''  <summary>
''' Notes
''' (1) Generic morphological closing, using hits in the Sel.
''' (2) This implementation is a strict dual of the opening if
''' symmetric boundary conditions are used (see notes at top
''' of this file).
''' (3) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (4) For clarity, if the case is known, use these patterns
''' (a) pixd = pixClose(NULL, pixs, ...);
''' (b) pixClose(pixs, pixs, ...);
''' (c) pixClose(pixd, pixs, ...);
''' (5) The size of the result is determined by pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="sel">[in] - </param>
'''   <returns>pixd</returns>
Public Shared Function pixClose(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal sel as Sel) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixClose( pixdPTR, pixs.Pointer, sel.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (520, 1)
' pixCloseSafe()
' pixCloseSafe(PIX *, PIX *, SEL *) as PIX *
'''  <summary>
''' Notes
''' (1) Generic morphological closing, using hits in the Sel.
''' (2) If non-symmetric boundary conditions are used, this
''' function adds a border of OFF pixels that is of
''' sufficient size to avoid losing pixels from the dilation,
''' and it removes the border after the operation is finished.
''' It thus enforces a correct extensive result for closing.
''' (3) If symmetric b.c. are used, it is not necessary to add
''' and remove this border.
''' (4) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (5) For clarity, if the case is known, use these patterns
''' (a) pixd = pixCloseSafe(NULL, pixs, ...);
''' (b) pixCloseSafe(pixs, pixs, ...);
''' (c) pixCloseSafe(pixd, pixs, ...);
''' (6) The size of the result is determined by pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="sel">[in] - </param>
'''   <returns>pixd</returns>
Public Shared Function pixCloseSafe(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal sel as Sel) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCloseSafe( pixdPTR, pixs.Pointer, sel.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (587, 1)
' pixOpenGeneralized()
' pixOpenGeneralized(PIX *, PIX *, SEL *) as PIX *
'''  <summary>
''' Notes
''' (1) Generalized morphological opening, using both hits and
''' misses in the Sel.
''' (2) This does a hit-miss transform, followed by a dilation
''' using the hits.
''' (3) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (4) For clarity, if the case is known, use these patterns
''' (a) pixd = pixOpenGeneralized(NULL, pixs, ...);
''' (b) pixOpenGeneralized(pixs, pixs, ...);
''' (c) pixOpenGeneralized(pixd, pixs, ...);
''' (5) The size of the result is determined by pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="sel">[in] - </param>
'''   <returns>pixd</returns>
Public Shared Function pixOpenGeneralized(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal sel as Sel) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOpenGeneralized( pixdPTR, pixs.Pointer, sel.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (634, 1)
' pixCloseGeneralized()
' pixCloseGeneralized(PIX *, PIX *, SEL *) as PIX *
'''  <summary>
''' Notes
''' (1) Generalized morphological closing, using both hits and
''' misses in the Sel.
''' (2) This does a dilation using the hits, followed by a
''' hit-miss transform.
''' (3) This operation is a dual of the generalized opening.
''' (4) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (5) For clarity, if the case is known, use these patterns
''' (a) pixd = pixCloseGeneralized(NULL, pixs, ...);
''' (b) pixCloseGeneralized(pixs, pixs, ...);
''' (c) pixCloseGeneralized(pixd, pixs, ...);
''' (6) The size of the result is determined by pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="sel">[in] - </param>
'''   <returns>pixd</returns>
Public Shared Function pixCloseGeneralized(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal sel as Sel) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCloseGeneralized( pixdPTR, pixs.Pointer, sel.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (684, 1)
' pixDilateBrick()
' pixDilateBrick(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Sel is a brick with all elements being hits
''' (2) The origin is at (x, y) = (hsize/2, vsize/2)
''' (3) Do separably if both hsize and vsize are GT 1.
''' (4) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (5) For clarity, if the case is known, use these patterns
''' (a) pixd = pixDilateBrick(NULL, pixs, ...);
''' (b) pixDilateBrick(pixs, pixs, ...);
''' (c) pixDilateBrick(pixd, pixs, ...);
''' (6) The size of the result is determined by pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd</returns>
Public Shared Function pixDilateBrick(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDilateBrick( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (748, 1)
' pixErodeBrick()
' pixErodeBrick(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Sel is a brick with all elements being hits
''' (2) The origin is at (x, y) = (hsize/2, vsize/2)
''' (3) Do separably if both hsize and vsize are GT 1.
''' (4) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (5) For clarity, if the case is known, use these patterns
''' (a) pixd = pixErodeBrick(NULL, pixs, ...);
''' (b) pixErodeBrick(pixs, pixs, ...);
''' (c) pixErodeBrick(pixd, pixs, ...);
''' (6) The size of the result is determined by pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd</returns>
Public Shared Function pixErodeBrick(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixErodeBrick( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (812, 1)
' pixOpenBrick()
' pixOpenBrick(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Sel is a brick with all elements being hits
''' (2) The origin is at (x, y) = (hsize/2, vsize/2)
''' (3) Do separably if both hsize and vsize are GT 1.
''' (4) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (5) For clarity, if the case is known, use these patterns
''' (a) pixd = pixOpenBrick(NULL, pixs, ...);
''' (b) pixOpenBrick(pixs, pixs, ...);
''' (c) pixOpenBrick(pixd, pixs, ...);
''' (6) The size of the result is determined by pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixOpenBrick(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOpenBrick( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (878, 1)
' pixCloseBrick()
' pixCloseBrick(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Sel is a brick with all elements being hits
''' (2) The origin is at (x, y) = (hsize/2, vsize/2)
''' (3) Do separably if both hsize and vsize are GT 1.
''' (4) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (5) For clarity, if the case is known, use these patterns
''' (a) pixd = pixCloseBrick(NULL, pixs, ...);
''' (b) pixCloseBrick(pixs, pixs, ...);
''' (c) pixCloseBrick(pixd, pixs, ...);
''' (6) The size of the result is determined by pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixCloseBrick(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCloseBrick( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (949, 1)
' pixCloseSafeBrick()
' pixCloseSafeBrick(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Sel is a brick with all elements being hits
''' (2) The origin is at (x, y) = (hsize/2, vsize/2)
''' (3) Do separably if both hsize and vsize are GT 1.
''' (4) Safe closing adds a border of 0 pixels, of sufficient size so
''' that all pixels in input image are processed within
''' 32-bit words in the expanded image.  As a result, there is
''' no special processing for pixels near the boundary, and there
''' are no boundary effects.  The border is removed at the end.
''' (5) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (6) For clarity, if the case is known, use these patterns
''' (a) pixd = pixCloseBrick(NULL, pixs, ...);
''' (b) pixCloseBrick(pixs, pixs, ...);
''' (c) pixCloseBrick(pixd, pixs, ...);
''' (7) The size of the result is determined by pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixCloseSafeBrick(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCloseSafeBrick( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (1037, 1)
' 
' selectComposableSels(l_int32, l_int32, SEL **, SEL **) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function selectComposableSels(
				ByRef size as Integer, 
				ByRef direction as Integer, 
				ByRef psel1 as Sel, 
				ByRef psel2 as Sel) as Integer

	If IsNothing (psel1) then Throw New ArgumentNullException  ("psel1 cannot be Nothing")
	If IsNothing (psel2) then Throw New ArgumentNullException  ("psel2 cannot be Nothing")

	Dim psel1PTR As IntPtr = IntPtr.Zero : If Not IsNothing(psel1) Then psel1PTR = psel1.Pointer
	Dim psel2PTR As IntPtr = IntPtr.Zero : If Not IsNothing(psel2) Then psel2PTR = psel2.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.selectComposableSels( size, direction, psel1PTR, psel2PTR)

	Return _Result
End Function

' SRC\morph.c (1092, 1)
' selectComposableSizes()
' selectComposableSizes(l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This works for Sel sizes up to 62500, which seems sufficient.
''' (2) The composable sel size is typically within +- 1 of
''' the requested size.  Up to size = 300, the maximum difference
''' is +- 2.
''' (3) We choose an overall cost function where the penalty for
''' the size difference between input and actual is 4 times
''' the penalty for additional rasterops.
''' (4) Returned values factor1 GT= factor2
''' If size GT 1, then factor1 GT 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="size">[in] - of sel to be decomposed</param>
'''  <param name="pfactor1">[out] - larger factor</param>
'''  <param name="pfactor2">[out] - smaller factor</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function selectComposableSizes(
				ByVal size as Integer, 
				ByRef pfactor1 as Integer, 
				ByRef pfactor2 as Integer) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.selectComposableSizes( size, pfactor1, pfactor2)

	Return _Result
End Function

' SRC\morph.c (1204, 1)
' pixDilateCompBrick()
' pixDilateCompBrick(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Sel is a brick with all elements being hits
''' (2) The origin is at (x, y) = (hsize/2, vsize/2)
''' (3) Do compositely for each dimension GT 1.
''' (4) Do separably if both hsize and vsize are GT 1.
''' (5) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (6) For clarity, if the case is known, use these patterns
''' (a) pixd = pixDilateCompBrick(NULL, pixs, ...);
''' (b) pixDilateCompBrick(pixs, pixs, ...);
''' (c) pixDilateCompBrick(pixd, pixs, ...);
''' (7) The dimensions of the resulting image are determined by pixs.
''' (8) CAUTION both hsize and vsize are being decomposed.
''' The decomposer chooses a product of sizes (call them
''' 'terms') for each that is close to the input size,
''' but not necessarily equal to it.  It attempts to optimize
''' (a) for consistency with the input values the product
''' of terms is close to the input size
''' (b) for efficiency of the operation the sum of the
''' terms is small; ideally about twice the square
''' root of the input size.
''' So, for example, if the input hsize = 37, which is
''' a prime number, the decomposer will break this into two
''' terms, 6 and 6, so that the net result is a dilation
''' with hsize = 36.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixDilateCompBrick(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDilateCompBrick( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (1304, 1)
' pixErodeCompBrick()
' pixErodeCompBrick(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Sel is a brick with all elements being hits
''' (2) The origin is at (x, y) = (hsize/2, vsize/2)
''' (3) Do compositely for each dimension GT 1.
''' (4) Do separably if both hsize and vsize are GT 1.
''' (5) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (6) For clarity, if the case is known, use these patterns
''' (a) pixd = pixErodeCompBrick(NULL, pixs, ...);
''' (b) pixErodeCompBrick(pixs, pixs, ...);
''' (c) pixErodeCompBrick(pixd, pixs, ...);
''' (7) The dimensions of the resulting image are determined by pixs.
''' (8) CAUTION both hsize and vsize are being decomposed.
''' The decomposer chooses a product of sizes (call them
''' 'terms') for each that is close to the input size,
''' but not necessarily equal to it.  It attempts to optimize
''' (a) for consistency with the input values the product
''' of terms is close to the input size
''' (b) for efficiency of the operation the sum of the
''' terms is small; ideally about twice the square
''' root of the input size.
''' So, for example, if the input hsize = 37, which is
''' a prime number, the decomposer will break this into two
''' terms, 6 and 6, so that the net result is a dilation
''' with hsize = 36.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixErodeCompBrick(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixErodeCompBrick( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (1395, 1)
' pixOpenCompBrick()
' pixOpenCompBrick(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Sel is a brick with all elements being hits
''' (2) The origin is at (x, y) = (hsize/2, vsize/2)
''' (3) Do compositely for each dimension GT 1.
''' (4) Do separably if both hsize and vsize are GT 1.
''' (5) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (6) For clarity, if the case is known, use these patterns
''' (a) pixd = pixOpenCompBrick(NULL, pixs, ...);
''' (b) pixOpenCompBrick(pixs, pixs, ...);
''' (c) pixOpenCompBrick(pixd, pixs, ...);
''' (7) The dimensions of the resulting image are determined by pixs.
''' (8) CAUTION both hsize and vsize are being decomposed.
''' The decomposer chooses a product of sizes (call them
''' 'terms') for each that is close to the input size,
''' but not necessarily equal to it.  It attempts to optimize
''' (a) for consistency with the input values the product
''' of terms is close to the input size
''' (b) for efficiency of the operation the sum of the
''' terms is small; ideally about twice the square
''' root of the input size.
''' So, for example, if the input hsize = 37, which is
''' a prime number, the decomposer will break this into two
''' terms, 6 and 6, so that the net result is a dilation
''' with hsize = 36.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixOpenCompBrick(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOpenCompBrick( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (1494, 1)
' pixCloseCompBrick()
' pixCloseCompBrick(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Sel is a brick with all elements being hits
''' (2) The origin is at (x, y) = (hsize/2, vsize/2)
''' (3) Do compositely for each dimension GT 1.
''' (4) Do separably if both hsize and vsize are GT 1.
''' (5) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (6) For clarity, if the case is known, use these patterns
''' (a) pixd = pixCloseCompBrick(NULL, pixs, ...);
''' (b) pixCloseCompBrick(pixs, pixs, ...);
''' (c) pixCloseCompBrick(pixd, pixs, ...);
''' (7) The dimensions of the resulting image are determined by pixs.
''' (8) CAUTION both hsize and vsize are being decomposed.
''' The decomposer chooses a product of sizes (call them
''' 'terms') for each that is close to the input size,
''' but not necessarily equal to it.  It attempts to optimize
''' (a) for consistency with the input values the product
''' of terms is close to the input size
''' (b) for efficiency of the operation the sum of the
''' terms is small; ideally about twice the square
''' root of the input size.
''' So, for example, if the input hsize = 37, which is
''' a prime number, the decomposer will break this into two
''' terms, 6 and 6, so that the net result is a dilation
''' with hsize = 36.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixCloseCompBrick(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCloseCompBrick( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (1598, 1)
' pixCloseSafeCompBrick()
' pixCloseSafeCompBrick(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Sel is a brick with all elements being hits
''' (2) The origin is at (x, y) = (hsize/2, vsize/2)
''' (3) Do compositely for each dimension GT 1.
''' (4) Do separably if both hsize and vsize are GT 1.
''' (5) Safe closing adds a border of 0 pixels, of sufficient size so
''' that all pixels in input image are processed within
''' 32-bit words in the expanded image.  As a result, there is
''' no special processing for pixels near the boundary, and there
''' are no boundary effects.  The border is removed at the end.
''' (6) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (7) For clarity, if the case is known, use these patterns
''' (a) pixd = pixCloseSafeCompBrick(NULL, pixs, ...);
''' (b) pixCloseSafeCompBrick(pixs, pixs, ...);
''' (c) pixCloseSafeCompBrick(pixd, pixs, ...);
''' (8) The dimensions of the resulting image are determined by pixs.
''' (9) CAUTION both hsize and vsize are being decomposed.
''' The decomposer chooses a product of sizes (call them
''' 'terms') for each that is close to the input size,
''' but not necessarily equal to it.  It attempts to optimize
''' (a) for consistency with the input values the product
''' of terms is close to the input size
''' (b) for efficiency of the operation the sum of the
''' terms is small; ideally about twice the square
''' root of the input size.
''' So, for example, if the input hsize = 37, which is
''' a prime number, the decomposer will break this into two
''' terms, 6 and 6, so that the net result is a dilation
''' with hsize = 36.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixCloseSafeCompBrick(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCloseSafeCompBrick( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morph.c (1687, 1)
' resetMorphBoundaryCondition()
' resetMorphBoundaryCondition(l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="bc">[in] - SYMMETRIC_MORPH_BC, ASYMMETRIC_MORPH_BC</param>
Public Shared Sub resetMorphBoundaryCondition(
				ByVal bc as Enumerations.MMETRIC_MORPH_BC)



	LeptonicaSharp.Natives.resetMorphBoundaryCondition( bc)

End Sub

' SRC\morph.c (1708, 1)
' getMorphBorderPixelColor()
' getMorphBorderPixelColor(l_int32, l_int32) as l_uint32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="type">[in] - L_MORPH_DILATE, L_MORPH_ERODE</param>
'''  <param name="depth">[in] - of pix</param>
'''   <returns>color of border pixels for this operation</returns>
Public Shared Function getMorphBorderPixelColor(
				ByVal type as Enumerations.L_MORPH, 
				ByVal depth as Integer) as UInteger



	Dim _Result as UInteger = LeptonicaSharp.Natives.getMorphBorderPixelColor( type, depth)

	Return _Result
End Function

#End Region
#Region "SRC\morphapp.c"
' SRC\morphapp.c (108, 1)
' pixExtractBoundary()
' pixExtractBoundary(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Extracts the fg or bg boundary pixels for each component.
''' Components are assumed to end at the boundary of pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="type">[in] - 0 for background pixels; 1 for foreground pixels</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixExtractBoundary(
				ByVal pixs as Pix, 
				ByVal type as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixExtractBoundary( pixs.Pointer, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphapp.c (148, 1)
' pixMorphSequenceMasked()
' pixMorphSequenceMasked(PIX *, PIX *, const char *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This applies the morph sequence to the image, but only allows
''' changes in pixs for pixels under the background of pixm.
''' (5) If pixm is NULL, this is just pixMorphSequence().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask</param>
'''  <param name="sequence">[in] - string specifying sequence of operations</param>
'''  <param name="dispsep">[in] - horizontal separation in pixels between successive displays; use zero to suppress display</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixMorphSequenceMasked(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal sequence as String, 
				ByVal dispsep as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sequence) then Throw New ArgumentNullException  ("sequence cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMorphSequenceMasked( pixs.Pointer, pixmPTR, sequence, dispsep)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphapp.c (195, 1)
' pixMorphSequenceByComponent()
' pixMorphSequenceByComponent(PIX *, const char *, l_int32, l_int32, l_int32, BOXA **) as PIX *
'''  <summary>
''' Notes
''' (1) See pixMorphSequence() for composing operation sequences.
''' (2) This operates separately on each c.c. in the input pix.
''' (3) The dilation does NOT increase the c.c. size; it is clipped
''' to the size of the original c.c.   This is necessary to
''' keep the c.c. independent after the operation.
''' (4) You can specify that the width and/or height must equal
''' or exceed a minimum size for the operation to take place.
''' (5) Use NULL for boxa to avoid returning the boxa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="sequence">[in] - string specifying sequence</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="minw">[in] - minimum width to consider; use 0 or 1 for any width</param>
'''  <param name="minh">[in] - minimum height to consider; use 0 or 1 for any height</param>
'''  <param name="pboxa">[out][optional] - return boxa of c.c. in pixs</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixMorphSequenceByComponent(
				ByVal pixs as Pix, 
				ByVal sequence as String, 
				ByVal connectivity as Integer, 
				ByVal minw as Integer, 
				ByVal minh as Integer, 
				ByRef pboxa as Boxa) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sequence) then Throw New ArgumentNullException  ("sequence cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMorphSequenceByComponent( pixs.Pointer, sequence, connectivity, minw, minh, pboxaPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)

	Return  new Pix(_Result)
End Function

' SRC\morphapp.c (265, 1)
' pixaMorphSequenceByComponent()
' pixaMorphSequenceByComponent(PIXA *, const char *, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) See pixMorphSequence() for composing operation sequences.
''' (2) This operates separately on each c.c. in the input pixa.
''' (3) You can specify that the width and/or height must equal
''' or exceed a minimum size for the operation to take place.
''' (4) The input pixa should have a boxa giving the locations
''' of the pix components.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - of 1 bpp pix</param>
'''  <param name="sequence">[in] - string specifying sequence</param>
'''  <param name="minw">[in] - minimum width to consider; use 0 or 1 for any width</param>
'''  <param name="minh">[in] - minimum height to consider; use 0 or 1 for any height</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaMorphSequenceByComponent(
				ByVal pixas as Pixa, 
				ByVal sequence as String, 
				ByVal minw as Integer, 
				ByVal minh as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (sequence) then Throw New ArgumentNullException  ("sequence cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaMorphSequenceByComponent( pixas.Pointer, sequence, minw, minh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\morphapp.c (348, 1)
' pixMorphSequenceByRegion()
' pixMorphSequenceByRegion(PIX *, PIX *, const char *, l_int32, l_int32, l_int32, BOXA **) as PIX *
'''  <summary>
''' Notes
''' (1) See pixMorphCompSequence() for composing operation sequences.
''' (2) This operates separately on the region in pixs corresponding
''' to each c.c. in the mask pixm.  It differs from
''' pixMorphSequenceByComponent() in that the latter does not have
''' a pixm (mask), but instead operates independently on each
''' component in pixs.
''' (3) Dilation will NOT increase the region size; the result
''' is clipped to the size of the mask region.  This is necessary
''' to make regions independent after the operation.
''' (4) You can specify that the width and/or height of a region must
''' equal or exceed a minimum size for the operation to take place.
''' (5) Use NULL for %pboxa to avoid returning the boxa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="pixm">[in] - mask specifying regions</param>
'''  <param name="sequence">[in] - string specifying sequence</param>
'''  <param name="connectivity">[in] - 4 or 8, used on mask</param>
'''  <param name="minw">[in] - minimum width to consider; use 0 or 1 for any width</param>
'''  <param name="minh">[in] - minimum height to consider; use 0 or 1 for any height</param>
'''  <param name="pboxa">[out][optional] - return boxa of c.c. in pixm</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixMorphSequenceByRegion(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal sequence as String, 
				ByVal connectivity as Integer, 
				ByVal minw as Integer, 
				ByVal minh as Integer, 
				ByRef pboxa as Boxa) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")
	If IsNothing (sequence) then Throw New ArgumentNullException  ("sequence cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMorphSequenceByRegion( pixs.Pointer, pixm.Pointer, sequence, connectivity, minw, minh, pboxaPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)

	Return  new Pix(_Result)
End Function

' SRC\morphapp.c (427, 1)
' pixaMorphSequenceByRegion()
' pixaMorphSequenceByRegion(PIX *, PIXA *, const char *, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) See pixMorphSequence() for composing operation sequences.
''' (2) This operates separately on each region in the input pixs
''' defined by the components in pixam.
''' (3) You can specify that the width and/or height of a mask
''' component must equal or exceed a minimum size for the
''' operation to take place.
''' (4) The input pixam should have a boxa giving the locations
''' of the regions in pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="pixam">[in] - of 1 bpp mask elements</param>
'''  <param name="sequence">[in] - string specifying sequence</param>
'''  <param name="minw">[in] - minimum width to consider; use 0 or 1 for any width</param>
'''  <param name="minh">[in] - minimum height to consider; use 0 or 1 for any height</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaMorphSequenceByRegion(
				ByVal pixs as Pix, 
				ByVal pixam as Pixa, 
				ByVal sequence as String, 
				ByVal minw as Integer, 
				ByVal minh as Integer) as Pixa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixam) then Throw New ArgumentNullException  ("pixam cannot be Nothing")
	If IsNothing (sequence) then Throw New ArgumentNullException  ("sequence cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaMorphSequenceByRegion( pixs.Pointer, pixam.Pointer, sequence, minw, minh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\morphapp.c (502, 1)
' pixUnionOfMorphOps()
' pixUnionOfMorphOps(PIX *, SELA *, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - binary</param>
'''  <param name="sela">[in] - </param>
'''  <param name="type">[in] - L_MORPH_DILATE, etc.</param>
'''   <returns>pixd union of the specified morphological operation on pixs for each Sel in the Sela, or NULL on error</returns>
Public Shared Function pixUnionOfMorphOps(
				ByVal pixs as Pix, 
				ByVal sela as Sela, 
				ByVal type as Enumerations.L_MORPH) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixUnionOfMorphOps( pixs.Pointer, sela.Pointer, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphapp.c (555, 1)
' pixIntersectionOfMorphOps()
' pixIntersectionOfMorphOps(PIX *, SELA *, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - binary</param>
'''  <param name="sela">[in] - </param>
'''  <param name="type">[in] - L_MORPH_DILATE, etc.</param>
'''   <returns>pixd intersection of the specified morphological operation on pixs for each Sel in the Sela, or NULL on error</returns>
Public Shared Function pixIntersectionOfMorphOps(
				ByVal pixs as Pix, 
				ByVal sela as Sela, 
				ByVal type as Enumerations.L_MORPH) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixIntersectionOfMorphOps( pixs.Pointer, sela.Pointer, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphapp.c (613, 1)
' pixSelectiveConnCompFill()
' pixSelectiveConnCompFill(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - binary</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="minw">[in] - minimum width to consider; use 0 or 1 for any width</param>
'''  <param name="minh">[in] - minimum height to consider; use 0 or 1 for any height</param>
'''   <returns>pix with holes filled in selected c.c., or NULL on error</returns>
Public Shared Function pixSelectiveConnCompFill(
				ByVal pixs as Pix, 
				ByVal connectivity as Integer, 
				ByVal minw as Integer, 
				ByVal minh as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSelectiveConnCompFill( pixs.Pointer, connectivity, minw, minh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphapp.c (684, 1)
' pixRemoveMatchedPattern()
' pixRemoveMatchedPattern(PIX *, PIX *, PIX *, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is in-place.
''' (2) You can use various functions in selgen to create a Sel
''' that is used to generate pixe from pixs.
''' (3) This function is applied after pixe has been computed.
''' It finds the centroid of each c.c., and subtracts
''' (the appropriately dilated version of) pixp, with the center
''' of the Sel used to align pixp with pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - input image, 1 bpp</param>
'''  <param name="pixp">[in] - pattern to be removed from image, 1 bpp</param>
'''  <param name="pixe">[in] - image after erosion by Sel that approximates pixp, 1 bpp</param>
'''  <param name="x0">[in] - center of Sel</param>
'''  <param name="y0">[in] - center of Sel</param>
'''  <param name="dsize">[in] - number of pixels on each side by which pixp is dilated before being subtracted from pixs; valid values are {0, 1, 2, 3, 4}</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRemoveMatchedPattern(
				ByVal pixs as Pix, 
				ByVal pixp as Pix, 
				ByVal pixe as Pix, 
				ByVal x0 as Integer, 
				ByVal y0 as Integer, 
				ByVal dsize as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixp) then Throw New ArgumentNullException  ("pixp cannot be Nothing")
	If IsNothing (pixe) then Throw New ArgumentNullException  ("pixe cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRemoveMatchedPattern( pixs.Pointer, pixp.Pointer, pixe.Pointer, x0, y0, dsize)

	Return _Result
End Function

' SRC\morphapp.c (789, 1)
' pixDisplayMatchedPattern()
' pixDisplayMatchedPattern(PIX *, PIX *, PIX *, l_int32, l_int32, l_uint32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) A 4 bpp colormapped image is generated.
''' (2) If scale LT= 1.0, do scale to gray for the output, and threshold
''' to nlevels of gray.
''' (3) You can use various functions in selgen to create a Sel
''' that will generate pixe from pixs.
''' (4) This function is applied after pixe has been computed.
''' It finds the centroid of each c.c., and colors the output
''' pixels using pixp (appropriately aligned) as a stencil.
''' Alignment is done using the origin of the Sel and the
''' centroid of the eroded image to place the stencil pixp.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - input image, 1 bpp</param>
'''  <param name="pixp">[in] - pattern to be removed from image, 1 bpp</param>
'''  <param name="pixe">[in] - image after erosion by Sel that approximates pixp, 1 bpp</param>
'''  <param name="x0">[in] - center of Sel</param>
'''  <param name="y0">[in] - center of Sel</param>
'''  <param name="color">[in] - to paint the matched patterns; 0xrrggbb00</param>
'''  <param name="scale">[in] - reduction factor for output pixd</param>
'''  <param name="nlevels">[in] - if scale LT 1.0, threshold to this number of levels</param>
'''   <returns>pixd 8 bpp, colormapped, or NULL on error</returns>
Public Shared Function pixDisplayMatchedPattern(
				ByVal pixs as Pix, 
				ByVal pixp as Pix, 
				ByVal pixe as Pix, 
				ByVal x0 as Integer, 
				ByVal y0 as Integer, 
				ByVal color as UInteger, 
				ByVal scale as Single, 
				ByVal nlevels as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixp) then Throw New ArgumentNullException  ("pixp cannot be Nothing")
	If IsNothing (pixe) then Throw New ArgumentNullException  ("pixe cannot be Nothing")
	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDisplayMatchedPattern( pixs.Pointer, pixp.Pointer, pixe.Pointer, x0, y0, color, scale, nlevels)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphapp.c (901, 1)
' pixaExtendByMorph()
' pixaExtendByMorph(PIXA *, l_int32, l_int32, SEL *, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) This dilates or erodes every pix in %pixas, iteratively,
''' using the input Sel (or, if null, a 2x2 Sel by default),
''' and puts the results in %pixad.
''' (2) If %niters LT= 0, this is a no-op; it returns a clone of pixas.
''' (3) If %include == 1, the output %pixad contains all the pix
''' in %pixas.  Otherwise, it doesn't, but pixaJoin() can be
''' used later to join pixas with pixad.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="type">[in] - L_MORPH_DILATE, L_MORPH_ERODE</param>
'''  <param name="niters">[in] - </param>
'''  <param name="sel">[in] - used for dilation, erosion; uses 2x2 if null</param>
'''  <param name="include">[in] - 1 to include a copy of the input pixas in pixad; 0 to omit</param>
'''   <returns>pixad   with derived pix, using all iterations, or NULL on error</returns>
Public Shared Function pixaExtendByMorph(
				ByVal pixas as Pixa, 
				ByVal type as Enumerations.L_MORPH, 
				ByVal niters as Integer, 
				ByVal sel as Sel, 
				ByVal include as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaExtendByMorph( pixas.Pointer, type, niters, sel.Pointer, include)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\morphapp.c (973, 1)
' pixaExtendByScaling()
' pixaExtendByScaling(PIXA *, NUMA *, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) This scales every pix in %pixas by each factor in %nasc.
''' and puts the results in %pixad.
''' (2) If %include == 1, the output %pixad contains all the pix
''' in %pixas.  Otherwise, it doesn't, but pixaJoin() can be
''' used later to join pixas with pixad.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="nasc">[in] - numa of scaling factors</param>
'''  <param name="type">[in] - L_HORIZ, L_VERT, L_BOTH_DIRECTIONS</param>
'''  <param name="include">[in] - 1 to include a copy of the input pixas in pixad; 0 to omit</param>
'''   <returns>pixad   with derived pix, using all scalings, or NULL on error</returns>
Public Shared Function pixaExtendByScaling(
				ByVal pixas as Pixa, 
				ByVal nasc as Numa, 
				ByVal type as Enumerations.L_direction, 
				ByVal include as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (nasc) then Throw New ArgumentNullException  ("nasc cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaExtendByScaling( pixas.Pointer, nasc.Pointer, type, include)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\morphapp.c (1041, 1)
' pixSeedfillMorph()
' pixSeedfillMorph(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is in general a very inefficient method for filling
''' from a seed into a mask.  Use it for a small number of iterations,
''' but if you expect more than a few iterations, use
''' pixSeedfillBinary().
''' (2) We use a 3x3 brick SEL for 8-cc filling and a 3x3 plus SEL for 4-cc.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - seed</param>
'''  <param name="pixm">[in] - mask</param>
'''  <param name="maxiters">[in] - use 0 to go to completion</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>pixd after filling into the mask or NULL on error</returns>
Public Shared Function pixSeedfillMorph(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal maxiters as Integer, 
				ByVal connectivity as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSeedfillMorph( pixs.Pointer, pixm.Pointer, maxiters, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphapp.c (1103, 1)
' pixRunHistogramMorph()
' pixRunHistogramMorph(PIX *, l_int32, l_int32, l_int32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="runtype">[in] - L_RUN_OFF, L_RUN_ON</param>
'''  <param name="direction">[in] - L_HORIZ, L_VERT</param>
'''  <param name="maxsize">[in] - size of largest runlength counted</param>
'''   <returns>numa of run-lengths</returns>
Public Shared Function pixRunHistogramMorph(
				ByVal pixs as Pix, 
				ByVal runtype as Enumerations.L_RUN_O, 
				ByVal direction as Enumerations.L_direction, 
				ByVal maxsize as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRunHistogramMorph( pixs.Pointer, runtype, direction, maxsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\morphapp.c (1203, 1)
' pixTophat()
' pixTophat(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Sel is a brick with all elements being hits
''' (2) If hsize = vsize = 1, returns an image with all 0 data.
''' (3) The L_TOPHAT_WHITE flag emphasizes small bright regions,
''' whereas the L_TOPHAT_BLACK flag emphasizes small dark regions.
''' The L_TOPHAT_WHITE tophat can be accomplished by doing a
''' L_TOPHAT_BLACK tophat on the inverse, or v.v.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="hsize">[in] - of Sel; must be odd; origin implicitly in center</param>
'''  <param name="vsize">[in] - ditto</param>
'''  <param name="type">[in] - L_TOPHAT_WHITE image - opening L_TOPHAT_BLACK closing - image</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixTophat(
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer, 
				ByVal type as Enumerations.L_TOPHAT) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixTophat( pixs.Pointer, hsize, vsize, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphapp.c (1303, 1)
' pixHDome()
' pixHDome(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) It is more efficient to use a connectivity of 4 for the fill.
''' (2) This fills bumps to some level, and extracts the unfilled
''' part of the bump.  To extract the troughs of basins, first
''' invert pixs and then apply pixHDome().
''' (3) It is useful to compare the HDome operation with the TopHat.
''' The latter extracts peaks or valleys that have a width
''' not exceeding the size of the structuring element used
''' in the opening or closing, rsp.  The height of the peak is
''' irrelevant.  By contrast, for the HDome, the gray seedfill
''' is used to extract all peaks that have a height not exceeding
''' a given value, regardless of their width!
''' (4) Slightly more precisely, suppose you set 'height' = 40.
''' Then all bumps in pixs with a height greater than or equal
''' to 40 become, in pixd, bumps with a max value of exactly 40.
''' All shorter bumps have a max value in pixd equal to the height
''' of the bump.
''' (5) The method the filling mask, pixs, is the image whose peaks
''' are to be extracted.  The height of a peak is the distance
''' between the top of the peak and the highest "leak" to the
''' outside -- think of a sombrero, where the leak occurs
''' at the highest point on the rim.
''' (a) Generate a seed, pixd, by subtracting some value, p, from
''' each pixel in the filling mask, pixs.  The value p is
''' the 'height' input to this function.
''' (b) Fill in pixd starting with this seed, clipping by pixs,
''' in the way described in seedfillGrayLow().  The filling
''' stops before the peaks in pixs are filled.
''' For peaks that have a height GT p, pixd is filled to
''' the level equal to the (top-of-the-peak - p).
''' For peaks of height LT p, the peak is left unfilled
''' from its highest saddle point (the leak to the outside).
''' (c) Subtract the filled seed (pixd) from the filling mask (pixs).
''' Note that in this procedure, everything is done starting
''' with the filling mask, pixs.
''' (6) For segmentation, the resulting image, pixd, can be thresholded
''' and used as a seed for another filling operation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, filling mask</param>
'''  <param name="height">[in] - of seed below the filling maskhdome; must be GT= 0</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function pixHDome(
				ByVal pixs as Pix, 
				ByVal height as Integer, 
				ByVal connectivity as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixHDome( pixs.Pointer, height, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphapp.c (1359, 1)
' pixFastTophat()
' pixFastTophat(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Don't be fooled. This is NOT a tophat.  It is a tophat-like
''' operation, where the result is similar to what you'd get
''' if you used an erosion instead of an opening, or a dilation
''' instead of a closing.
''' (2) Instead of opening or closing at full resolution, it does
''' a fast downscale/minmax operation, then a quick small smoothing
''' at low res, a replicative expansion of the "background"
''' to full res, and finally a removal of the background level
''' from the input image.  The smoothing step may not be important.
''' (3) It does not remove noise as well as a tophat, but it is
''' 5 to 10 times faster.
''' If you need the preciseness of the tophat, don't use this.
''' (4) The L_TOPHAT_WHITE flag emphasizes small bright regions,
''' whereas the L_TOPHAT_BLACK flag emphasizes small dark regions.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="xsize">[in] - width of max/min op, smoothing; any integer GT= 1</param>
'''  <param name="ysize">[in] - height of max/min op, smoothing; any integer GT= 1</param>
'''  <param name="type">[in] - L_TOPHAT_WHITE image - min L_TOPHAT_BLACK max - image</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixFastTophat(
				ByVal pixs as Pix, 
				ByVal xsize as Integer, 
				ByVal ysize as Integer, 
				ByVal type as Enumerations.L_TOPHAT) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFastTophat( pixs.Pointer, xsize, ysize, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphapp.c (1421, 1)
' pixMorphGradient()
' pixMorphGradient(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="hsize">[in] - of Sel; must be odd; origin implicitly in center</param>
'''  <param name="vsize">[in] - ditto</param>
'''  <param name="smoothing">[in] - half-width of convolution smoothing filter. The width is (2  smoothing + 1, so 0 is no-op.</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixMorphGradient(
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer, 
				ByVal smoothing as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMorphGradient( pixs.Pointer, hsize, vsize, smoothing)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphapp.c (1475, 1)
' pixaCentroids()
' pixaCentroids(PIXA *) as PTA *
'''  <summary>
''' Notes
''' (1) An error message is returned if any pix has something other
''' than 1 bpp or 8 bpp depth, and the centroid from that pix
''' is saved as (0, 0).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - of components 1 or 8 bpp</param>
'''   <returns>pta of centroids relative to the UL corner of each pix, or NULL on error</returns>
Public Shared Function pixaCentroids(
				ByVal pixa as Pixa) as Pta

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaCentroids( pixa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\morphapp.c (1527, 1)
' pixCentroid()
' pixCentroid(PIX *, l_int32 *, l_int32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Any table not passed in will be made internally and destroyed
''' after use.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1 or 8 bpp</param>
'''  <param name="centtab">[in][optional] - table for finding centroids; can be null</param>
'''  <param name="sumtab">[in][optional] - table for finding pixel sums; can be null</param>
'''  <param name="pxave">[out] - coordinates of centroid, relative to the UL corner of the pix</param>
'''  <param name="pyave">[out] - coordinates of centroid, relative to the UL corner of the pix</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixCentroid(
				ByVal pix as Pix, 
				ByVal centtab as Integer(), 
				ByVal sumtab as Integer(), 
				ByRef pxave as Single(), 
				ByRef pyave as Single()) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCentroid( pix.Pointer, centtab, sumtab, pxave, pyave)

	Return _Result
End Function

#End Region
#Region "SRC\morphdwa.c"
' SRC\morphdwa.c (175, 1)
' pixDilateBrickDwa()
' pixDilateBrickDwa(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) These implement 2D brick Sels, using linear Sels generated
''' with selaAddBasic().
''' (2) A brick Sel has hits for all elements.
''' (3) The origin of the Sel is at (x, y) = (hsize/2, vsize/2)
''' (4) Do separably if both hsize and vsize are GT 1.
''' (5) It is necessary that both horizontal and vertical Sels
''' of the input size are defined in the basic sela.
''' (6) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (7) For clarity, if the case is known, use these patterns
''' (a) pixd = pixDilateBrickDwa(NULL, pixs, ...);
''' (b) pixDilateBrickDwa(pixs, pixs, ...);
''' (c) pixDilateBrickDwa(pixd, pixs, ...);
''' (8) The size of pixd is determined by pixs.
''' (9) If either linear Sel is not found, this calls
''' the appropriate decomposible function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd</returns>
Public Shared Function pixDilateBrickDwa(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDilateBrickDwa( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphdwa.c (277, 1)
' pixErodeBrickDwa()
' pixErodeBrickDwa(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) These implement 2D brick Sels, using linear Sels generated
''' with selaAddBasic().
''' (2) A brick Sel has hits for all elements.
''' (3) The origin of the Sel is at (x, y) = (hsize/2, vsize/2)
''' (4) Do separably if both hsize and vsize are GT 1.
''' (5) It is necessary that both horizontal and vertical Sels
''' of the input size are defined in the basic sela.
''' (6) Note that we must always set or clear the border pixels
''' before each operation, depending on the the b.c.
''' (symmetric or asymmetric).
''' (7) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (8) For clarity, if the case is known, use these patterns
''' (a) pixd = pixErodeBrickDwa(NULL, pixs, ...);
''' (b) pixErodeBrickDwa(pixs, pixs, ...);
''' (c) pixErodeBrickDwa(pixd, pixs, ...);
''' (9) The size of the result is determined by pixs.
''' (10) If either linear Sel is not found, this calls
''' the appropriate decomposible function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd</returns>
Public Shared Function pixErodeBrickDwa(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixErodeBrickDwa( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphdwa.c (379, 1)
' pixOpenBrickDwa()
' pixOpenBrickDwa(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) These implement 2D brick Sels, using linear Sels generated
''' with selaAddBasic().
''' (2) A brick Sel has hits for all elements.
''' (3) The origin of the Sel is at (x, y) = (hsize/2, vsize/2)
''' (4) Do separably if both hsize and vsize are GT 1.
''' (5) It is necessary that both horizontal and vertical Sels
''' of the input size are defined in the basic sela.
''' (6) Note that we must always set or clear the border pixels
''' before each operation, depending on the the b.c.
''' (symmetric or asymmetric).
''' (7) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (8) For clarity, if the case is known, use these patterns
''' (a) pixd = pixOpenBrickDwa(NULL, pixs, ...);
''' (b) pixOpenBrickDwa(pixs, pixs, ...);
''' (c) pixOpenBrickDwa(pixd, pixs, ...);
''' (9) The size of the result is determined by pixs.
''' (10) If either linear Sel is not found, this calls
''' the appropriate decomposible function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd</returns>
Public Shared Function pixOpenBrickDwa(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOpenBrickDwa( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphdwa.c (486, 1)
' pixCloseBrickDwa()
' pixCloseBrickDwa(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a 'safe' closing; we add an extra border of 32 OFF
''' pixels for the standard asymmetric b.c.
''' (2) These implement 2D brick Sels, using linear Sels generated
''' with selaAddBasic().
''' (3) A brick Sel has hits for all elements.
''' (4) The origin of the Sel is at (x, y) = (hsize/2, vsize/2)
''' (5) Do separably if both hsize and vsize are GT 1.
''' (6) It is necessary that both horizontal and vertical Sels
''' of the input size are defined in the basic sela.
''' (7) Note that we must always set or clear the border pixels
''' before each operation, depending on the the b.c.
''' (symmetric or asymmetric).
''' (8) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (9) For clarity, if the case is known, use these patterns
''' (a) pixd = pixCloseBrickDwa(NULL, pixs, ...);
''' (b) pixCloseBrickDwa(pixs, pixs, ...);
''' (c) pixCloseBrickDwa(pixd, pixs, ...);
''' (10) The size of the result is determined by pixs.
''' (11) If either linear Sel is not found, this calls
''' the appropriate decomposible function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd</returns>
Public Shared Function pixCloseBrickDwa(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCloseBrickDwa( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphdwa.c (613, 1)
' pixDilateCompBrickDwa()
' pixDilateCompBrickDwa(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) These implement a separable composite dilation with 2D brick Sels.
''' (2) For efficiency, it may decompose each linear morphological
''' operation into two (brick + comb).
''' (3) A brick Sel has hits for all elements.
''' (4) The origin of the Sel is at (x, y) = (hsize/2, vsize/2)
''' (5) Do separably if both hsize and vsize are GT 1.
''' (6) It is necessary that both horizontal and vertical Sels
''' of the input size are defined in the basic sela.
''' (7) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (8) For clarity, if the case is known, use these patterns
''' (a) pixd = pixDilateCompBrickDwa(NULL, pixs, ...);
''' (b) pixDilateCompBrickDwa(pixs, pixs, ...);
''' (c) pixDilateCompBrickDwa(pixd, pixs, ...);
''' (9) The size of pixd is determined by pixs.
''' (10) CAUTION both hsize and vsize are being decomposed.
''' The decomposer chooses a product of sizes (call them
''' 'terms') for each that is close to the input size,
''' but not necessarily equal to it.  It attempts to optimize
''' (a) for consistency with the input values the product
''' of terms is close to the input size
''' (b) for efficiency of the operation the sum of the
''' terms is small; ideally about twice the square
''' root of the input size.
''' So, for example, if the input hsize = 37, which is
''' a prime number, the decomposer will break this into two
''' terms, 6 and 6, so that the net result is a dilation
''' with hsize = 36.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd</returns>
Public Shared Function pixDilateCompBrickDwa(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDilateCompBrickDwa( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphdwa.c (746, 1)
' pixErodeCompBrickDwa()
' pixErodeCompBrickDwa(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) These implement a separable composite erosion with 2D brick Sels.
''' (2) For efficiency, it may decompose each linear morphological
''' operation into two (brick + comb).
''' (3) A brick Sel has hits for all elements.
''' (4) The origin of the Sel is at (x, y) = (hsize/2, vsize/2)
''' (5) Do separably if both hsize and vsize are GT 1.
''' (6) It is necessary that both horizontal and vertical Sels
''' of the input size are defined in the basic sela.
''' (7) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (8) For clarity, if the case is known, use these patterns
''' (a) pixd = pixErodeCompBrickDwa(NULL, pixs, ...);
''' (b) pixErodeCompBrickDwa(pixs, pixs, ...);
''' (c) pixErodeCompBrickDwa(pixd, pixs, ...);
''' (9) The size of pixd is determined by pixs.
''' (10) CAUTION both hsize and vsize are being decomposed.
''' The decomposer chooses a product of sizes (call them
''' 'terms') for each that is close to the input size,
''' but not necessarily equal to it.  It attempts to optimize
''' (a) for consistency with the input values the product
''' of terms is close to the input size
''' (b) for efficiency of the operation the sum of the
''' terms is small; ideally about twice the square
''' root of the input size.
''' So, for example, if the input hsize = 37, which is
''' a prime number, the decomposer will break this into two
''' terms, 6 and 6, so that the net result is a dilation
''' with hsize = 36.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd</returns>
Public Shared Function pixErodeCompBrickDwa(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixErodeCompBrickDwa( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphdwa.c (875, 1)
' pixOpenCompBrickDwa()
' pixOpenCompBrickDwa(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) These implement a separable composite opening with 2D brick Sels.
''' (2) For efficiency, it may decompose each linear morphological
''' operation into two (brick + comb).
''' (3) A brick Sel has hits for all elements.
''' (4) The origin of the Sel is at (x, y) = (hsize/2, vsize/2)
''' (5) Do separably if both hsize and vsize are GT 1.
''' (6) It is necessary that both horizontal and vertical Sels
''' of the input size are defined in the basic sela.
''' (7) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (8) For clarity, if the case is known, use these patterns
''' (a) pixd = pixOpenCompBrickDwa(NULL, pixs, ...);
''' (b) pixOpenCompBrickDwa(pixs, pixs, ...);
''' (c) pixOpenCompBrickDwa(pixd, pixs, ...);
''' (9) The size of pixd is determined by pixs.
''' (10) CAUTION both hsize and vsize are being decomposed.
''' The decomposer chooses a product of sizes (call them
''' 'terms') for each that is close to the input size,
''' but not necessarily equal to it.  It attempts to optimize
''' (a) for consistency with the input values the product
''' of terms is close to the input size
''' (b) for efficiency of the operation the sum of the
''' terms is small; ideally about twice the square
''' root of the input size.
''' So, for example, if the input hsize = 37, which is
''' a prime number, the decomposer will break this into two
''' terms, 6 and 6, so that the net result is a dilation
''' with hsize = 36.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd</returns>
Public Shared Function pixOpenCompBrickDwa(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOpenCompBrickDwa( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphdwa.c (1042, 1)
' pixCloseCompBrickDwa()
' pixCloseCompBrickDwa(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This implements a separable composite safe closing with 2D
''' brick Sels.
''' (2) For efficiency, it may decompose each linear morphological
''' operation into two (brick + comb).
''' (3) A brick Sel has hits for all elements.
''' (4) The origin of the Sel is at (x, y) = (hsize/2, vsize/2)
''' (5) Do separably if both hsize and vsize are GT 1.
''' (6) It is necessary that both horizontal and vertical Sels
''' of the input size are defined in the basic sela.
''' (7) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (8) For clarity, if the case is known, use these patterns
''' (a) pixd = pixCloseCompBrickDwa(NULL, pixs, ...);
''' (b) pixCloseCompBrickDwa(pixs, pixs, ...);
''' (c) pixCloseCompBrickDwa(pixd, pixs, ...);
''' (9) The size of pixd is determined by pixs.
''' (10) CAUTION both hsize and vsize are being decomposed.
''' The decomposer chooses a product of sizes (call them
''' 'terms') for each that is close to the input size,
''' but not necessarily equal to it.  It attempts to optimize
''' (a) for consistency with the input values the product
''' of terms is close to the input size
''' (b) for efficiency of the operation the sum of the
''' terms is small; ideally about twice the square
''' root of the input size.
''' So, for example, if the input hsize = 37, which is
''' a prime number, the decomposer will break this into two
''' terms, 6 and 6, so that the net result is a dilation
''' with hsize = 36.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd</returns>
Public Shared Function pixCloseCompBrickDwa(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCloseCompBrickDwa( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphdwa.c (1192, 1)
' pixDilateCompBrickExtendDwa()
' pixDilateCompBrickExtendDwa(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Ankur Jain suggested and implemented extending the composite
''' DWA operations beyond the 63 pixel limit.  This is a
''' simplified and approximate implementation of the extension.
''' This allows arbitrary Dwa morph operations using brick Sels,
''' by decomposing the horizontal and vertical dilations into
''' a sequence of 63-element dilations plus a dilation of size
''' between 3 and 62.
''' (2) The 63-element dilations are exact, whereas the extra dilation
''' is approximate, because the underlying decomposition is
''' in pixDilateCompBrickDwa().  See there for further details.
''' (3) There are three cases
''' (a) pixd == null   (result into new pixd)
''' (b) pixd == pixs   (in-place; writes result back to pixs)
''' (c) pixd != pixs   (puts result into existing pixd)
''' (4) There is no need to call this directly  pixDilateCompBrickDwa()
''' calls this function if either brick dimension exceeds 63.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd</returns>
Public Shared Function pixDilateCompBrickExtendDwa(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDilateCompBrickExtendDwa( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphdwa.c (1312, 1)
' pixErodeCompBrickExtendDwa()
' pixErodeCompBrickExtendDwa(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See pixDilateCompBrickExtendDwa() for usage.
''' (2) There is no need to call this directly  pixErodeCompBrickDwa()
''' calls this function if either brick dimension exceeds 63.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd</returns>
Public Shared Function pixErodeCompBrickExtendDwa(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixErodeCompBrickExtendDwa( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphdwa.c (1432, 1)
' pixOpenCompBrickExtendDwa()
' pixOpenCompBrickExtendDwa(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd 1 There are three cases a) pixd == null   (result into new pixd b) pixd == pixs   (in-place; writes result back to pixs c) pixd != pixs   (puts result into existing pixd 2) There is no need to call this directly  pixOpenCompBrickDwa( calls this function if either brick dimension exceeds 63.</returns>
Public Shared Function pixOpenCompBrickExtendDwa(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOpenCompBrickExtendDwa( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphdwa.c (1473, 1)
' pixCloseCompBrickExtendDwa()
' pixCloseCompBrickExtendDwa(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="hsize">[in] - width of brick Sel</param>
'''  <param name="vsize">[in] - height of brick Sel</param>
'''   <returns>pixd 1 There are three cases a) pixd == null   (result into new pixd b) pixd == pixs   (in-place; writes result back to pixs c) pixd != pixs   (puts result into existing pixd 2) There is no need to call this directly  pixCloseCompBrickDwa( calls this function if either brick dimension exceeds 63.</returns>
Public Shared Function pixCloseCompBrickExtendDwa(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCloseCompBrickExtendDwa( pixdPTR, pixs.Pointer, hsize, vsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphdwa.c (1562, 1)
' getExtendedCompositeParameters()
' getExtendedCompositeParameters(l_int32, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The DWA implementation allows Sels to be used with hits
''' up to 31 pixels from the origin, either horizontally or
''' vertically.  Larger Sels can be used if decomposed into
''' a set of operations with Sels not exceeding 63 pixels
''' in either width or height (and with the origin as close
''' to the center of the Sel as possible).
''' (2) This returns the decomposition of a linear Sel of length
''' %size into a set of %n Sels of length 63 plus an extra
''' Sel of length %extra.
''' (3) For notation, let w == %size, n == %n, and e == %extra.
''' We have 1 LT e LT 63.
''' Then if w LT 64, we have n = 0 and e = w.
''' The general formula for w GT 63 is
''' w = 63 + (n - 1)  62 + (e - 1)
''' Where did this come from?  Each successive convolution with
''' a Sel of length L adds a total length (L - 1) to w.
''' This accounts for using 62 for each additional Sel of size 63,
''' and using (e - 1) for the additional Sel of size e.
''' Solving for n and e for w GT 63
''' n = 1 + Int((w - 63) / 62)
''' e = w - 63 - (n - 1)  62 + 1
''' The extra part is decomposed into two factors f1 and f2,
''' and the actual size of the extra part is
''' e' = f1  f2
''' Then the actual width is
''' w' = 63 + (n - 1)  62 + f1  f2 - 1
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="size">[in] - of linear Sel</param>
'''  <param name="pn">[out] - number of 63 wide convolutions</param>
'''  <param name="pextra">[out] - size of extra Sel</param>
'''  <param name="pactualsize">[out][optional] - actual size used in operation</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function getExtendedCompositeParameters(
				ByVal size as Integer, 
				ByRef pn as Integer, 
				ByRef pextra as Integer, 
				ByRef pactualsize as Integer) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.getExtendedCompositeParameters( size, pn, pextra, pactualsize)

	Return _Result
End Function

#End Region
#Region "SRC\morphseq.c"
' SRC\morphseq.c (133, 1)
' pixMorphSequence()
' pixMorphSequence(PIX *, const char *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This does rasterop morphology on binary images.
''' (2) This runs a pipeline of operations; no branching is allowed.
''' (3) This only uses brick Sels, which are created on the fly.
''' In the future this will be generalized to extract Sels from
''' a Sela by name.
''' (4) A new image is always produced; the input image is not changed.
''' (5) This contains an interpreter, allowing sequences to be
''' generated and run.
''' (6) The format of the sequence string is defined below.
''' (7) In addition to morphological operations, rank order reduction
''' and replicated expansion allow operations to take place
''' downscaled by a power of 2.
''' (8) Intermediate results can optionally be displayed.
''' (9) Thanks to Dar-Shyang Lee, who had the idea for this and
''' built the first implementation.
''' (10) The sequence string is formatted as follows
''' ~ An arbitrary number of operations,  each separated
''' by a '+' character.  White space is ignored.
''' ~ Each operation begins with a case-independent character
''' specifying the operation
''' d or D  (dilation)
''' e or E  (erosion)
''' o or O  (opening)
''' c or C  (closing)
''' r or R  (rank binary reduction)
''' x or X  (replicative binary expansion)
''' b or B  (add a border of 0 pixels of this size)
''' ~ The args to the morphological operations are bricks of hits,
''' and are formatted as a.b, where a and b are horizontal and
''' vertical dimensions, rsp.
''' ~ The args to the reduction are a sequence of up to 4 integers,
''' each from 1 to 4.
''' ~ The arg to the expansion is a power of two, in the set
''' {2, 4, 8, 16}.
''' (11) An example valid sequence is
''' "b32 + o1.3 + C3.1 + r23 + e2.2 + D3.2 + X4"
''' In this example, the following operation sequence is carried out
''' b32 Add a 32 pixel border around the input image
''' o1.3 Opening with vert sel of length 3 (e.g., 1 x 3)
''' C3.1 Closing with horiz sel of length 3  (e.g., 3 x 1)
''' r23 Two successive 2x2 reductions with rank 2 in the first
''' and rank 3 in the second.  The result is a 4x reduced pix.
''' e2.2 Erosion with a 2x2 sel (origin will be at x,y 0,0)
''' d3.2 Dilation with a 3x2 sel (origin will be at x,y 1,0)
''' X4 4x replicative expansion, back to original resolution
''' (12) The safe closing is used.  However, if you implement a
''' closing as separable dilations followed by separable erosions,
''' it will not be safe.  For that situation, you need to add
''' a sufficiently large border as the first operation in
''' the sequence.  This will be removed automatically at the
''' end.  There are two cautions
''' ~ When computing what is sufficient, remember that if
''' reductions are carried out, the border is also reduced.
''' ~ The border is removed at the end, so if a border is
''' added at the beginning, the result must be at the
''' same resolution as the input!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="sequence">[in] - string specifying sequence</param>
'''  <param name="dispsep">[in] - controls debug display of each result in the sequence 0 no output GT 0 gives horizontal separation in pixels between successive displays LT 0 pdf output; abs(dispsep) is used for naming</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixMorphSequence(
				ByVal pixs as Pix, 
				ByVal sequence as String, 
				ByVal dispsep as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sequence) then Throw New ArgumentNullException  ("sequence cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMorphSequence( pixs.Pointer, sequence, dispsep)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphseq.c (300, 1)
' pixMorphCompSequence()
' pixMorphCompSequence(PIX *, const char *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This does rasterop morphology on binary images, using composite
''' operations for extra speed on large Sels.
''' (2) Safe closing is used atomically.  However, if you implement a
''' closing as a sequence with a dilation followed by an
''' erosion, it will not be safe, and to ensure that you have
''' no boundary effects you must add a border in advance and
''' remove it at the end.
''' (3) For other usage details, see the notes for pixMorphSequence().
''' (4) The sequence string is formatted as follows
''' ~ An arbitrary number of operations,  each separated
''' by a '+' character.  White space is ignored.
''' ~ Each operation begins with a case-independent character
''' specifying the operation
''' d or D  (dilation)
''' e or E  (erosion)
''' o or O  (opening)
''' c or C  (closing)
''' r or R  (rank binary reduction)
''' x or X  (replicative binary expansion)
''' b or B  (add a border of 0 pixels of this size)
''' ~ The args to the morphological operations are bricks of hits,
''' and are formatted as a.b, where a and b are horizontal and
''' vertical dimensions, rsp.
''' ~ The args to the reduction are a sequence of up to 4 integers,
''' each from 1 to 4.
''' ~ The arg to the expansion is a power of two, in the set
''' {2, 4, 8, 16}.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="sequence">[in] - string specifying sequence</param>
'''  <param name="dispsep">[in] - controls debug display of each result in the sequence 0 no output GT 0 gives horizontal separation in pixels between successive displays LT 0 pdf output; abs(dispsep) is used for naming</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixMorphCompSequence(
				ByVal pixs as Pix, 
				ByVal sequence as String, 
				ByVal dispsep as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sequence) then Throw New ArgumentNullException  ("sequence cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMorphCompSequence( pixs.Pointer, sequence, dispsep)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphseq.c (449, 1)
' pixMorphSequenceDwa()
' pixMorphSequenceDwa(PIX *, const char *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This does dwa morphology on binary images.
''' (2) This runs a pipeline of operations; no branching is allowed.
''' (3) This only uses brick Sels that have been pre-compiled with
''' dwa code.
''' (4) A new image is always produced; the input image is not changed.
''' (5) This contains an interpreter, allowing sequences to be
''' generated and run.
''' (6) See pixMorphSequence() for further information about usage.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="sequence">[in] - string specifying sequence</param>
'''  <param name="dispsep">[in] - controls debug display of each result in the sequence 0 no output GT 0 gives horizontal separation in pixels between successive displays LT 0 pdf output; abs(dispsep) is used for naming</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixMorphSequenceDwa(
				ByVal pixs as Pix, 
				ByVal sequence as String, 
				ByVal dispsep as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sequence) then Throw New ArgumentNullException  ("sequence cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMorphSequenceDwa( pixs.Pointer, sequence, dispsep)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphseq.c (598, 1)
' pixMorphCompSequenceDwa()
' pixMorphCompSequenceDwa(PIX *, const char *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This does dwa morphology on binary images, using brick Sels.
''' (2) This runs a pipeline of operations; no branching is allowed.
''' (3) It implements all brick Sels that have dimensions up to 63
''' on each side, using a composite (linear + comb) when useful.
''' (4) A new image is always produced; the input image is not changed.
''' (5) This contains an interpreter, allowing sequences to be
''' generated and run.
''' (6) See pixMorphSequence() for further information about usage.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="sequence">[in] - string specifying sequence</param>
'''  <param name="dispsep">[in] - controls debug display of each result in the sequence 0 no output GT 0 gives horizontal separation in pixels between successive displays LT 0 pdf output; abs(dispsep) is used for naming</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixMorphCompSequenceDwa(
				ByVal pixs as Pix, 
				ByVal sequence as String, 
				ByVal dispsep as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sequence) then Throw New ArgumentNullException  ("sequence cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMorphCompSequenceDwa( pixs.Pointer, sequence, dispsep)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphseq.c (737, 1)
' morphSequenceVerify()
' morphSequenceVerify(SARRAY *) as l_int32
'''  <summary>
''' Notes
''' (1) This does verification of valid binary morphological
''' operation sequences.
''' (2) See pixMorphSequence() for notes on valid operations
''' in the sequence.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array of operation sequence</param>
'''   <returns>TRUE if valid; FALSE otherwise or on error</returns>
Public Shared Function morphSequenceVerify(
				ByVal sa as Sarray) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.morphSequenceVerify( sa.Pointer)

	Return _Result
End Function

' SRC\morphseq.c (912, 1)
' pixGrayMorphSequence()
' pixGrayMorphSequence(PIX *, const char *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This works on 8 bpp grayscale images.
''' (2) This runs a pipeline of operations; no branching is allowed.
''' (3) This only uses brick SELs.
''' (4) A new image is always produced; the input image is not changed.
''' (5) This contains an interpreter, allowing sequences to be
''' generated and run.
''' (6) The format of the sequence string is defined below.
''' (7) In addition to morphological operations, the composite
''' morph/subtract tophat can be performed.
''' (8) Sel sizes (width, height) must each be odd numbers.
''' (9) Intermediate results can optionally be displayed
''' (10) The sequence string is formatted as follows
''' ~ An arbitrary number of operations,  each separated
''' by a '+' character.  White space is ignored.
''' ~ Each operation begins with a case-independent character
''' specifying the operation
''' d or D  (dilation)
''' e or E  (erosion)
''' o or O  (opening)
''' c or C  (closing)
''' t or T  (tophat)
''' ~ The args to the morphological operations are bricks of hits,
''' and are formatted as a.b, where a and b are horizontal and
''' vertical dimensions, rsp. (each must be an odd number)
''' ~ The args to the tophat are w or W (for white tophat)
''' or b or B (for black tophat), followed by a.b as for
''' the dilation, erosion, opening and closing.
''' Example valid sequences are
''' "c5.3 + o7.5"
''' "c9.9 + tw9.9"
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="sequence">[in] - string specifying sequence</param>
'''  <param name="dispsep">[in] - controls debug display of each result in the sequence 0 no output GT 0 gives horizontal separation in pixels between successive displays LT 0 pdf output; abs(dispsep) is used for naming</param>
'''  <param name="dispy">[in] - if dispsep GT 0, this gives the y-value of the UL corner for display; otherwise it is ignored</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixGrayMorphSequence(
				ByVal pixs as Pix, 
				ByVal sequence as String, 
				ByVal dispsep as Integer, 
				ByVal dispy as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sequence) then Throw New ArgumentNullException  ("sequence cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGrayMorphSequence( pixs.Pointer, sequence, dispsep, dispy)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\morphseq.c (1117, 1)
' pixColorMorphSequence()
' pixColorMorphSequence(PIX *, const char *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This works on 32 bpp rgb images.
''' (2) Each component is processed separately.
''' (3) This runs a pipeline of operations; no branching is allowed.
''' (4) This only uses brick SELs.
''' (5) A new image is always produced; the input image is not changed.
''' (6) This contains an interpreter, allowing sequences to be
''' generated and run.
''' (7) Sel sizes (width, height) must each be odd numbers.
''' (8) The format of the sequence string is defined below.
''' (9) Intermediate results can optionally be displayed.
''' (10) The sequence string is formatted as follows
''' ~ An arbitrary number of operations,  each separated
''' by a '+' character.  White space is ignored.
''' ~ Each operation begins with a case-independent character
''' specifying the operation
''' d or D  (dilation)
''' e or E  (erosion)
''' o or O  (opening)
''' c or C  (closing)
''' ~ The args to the morphological operations are bricks of hits,
''' and are formatted as a.b, where a and b are horizontal and
''' vertical dimensions, rsp. (each must be an odd number)
''' Example valid sequences are
''' "c5.3 + o7.5"
''' "D9.1"
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="sequence">[in] - string specifying sequence</param>
'''  <param name="dispsep">[in] - controls debug display of each result in the sequence 0 no output GT 0 gives horizontal separation in pixels between successive displays LT 0 pdf output; abs(dispsep) is used for naming</param>
'''  <param name="dispy">[in] - if dispsep GT 0, this gives the y-value of the UL corner for display; otherwise it is ignored</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixColorMorphSequence(
				ByVal pixs as Pix, 
				ByVal sequence as String, 
				ByVal dispsep as Integer, 
				ByVal dispy as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sequence) then Throw New ArgumentNullException  ("sequence cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixColorMorphSequence( pixs.Pointer, sequence, dispsep, dispy)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\numabasic.c"
' SRC\numabasic.c (187, 1)
' numaCreate()
' numaCreate(l_int32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - size of number array to be alloc'd 0 for default</param>
'''   <returns>na, or NULL on error</returns>
Public Shared Function numaCreate(
				ByVal n as Integer) as Numa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numabasic.c (228, 1)
' numaCreateFromIArray()
' numaCreateFromIArray(l_int32 *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) We can't insert this int array into the numa, because a numa
''' takes a float array.  So this just copies the data from the
''' input array into the numa.  The input array continues to be
''' owned by the caller.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="iarray">[in] - integer</param>
'''  <param name="size">[in] - of the array</param>
'''   <returns>na, or NULL on error</returns>
Public Shared Function numaCreateFromIArray(
				ByVal iarray as Integer(), 
				ByVal size as Integer) as Numa

	If IsNothing (iarray) then Throw New ArgumentNullException  ("iarray cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaCreateFromIArray( iarray, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numabasic.c (265, 1)
' numaCreateFromFArray()
' numaCreateFromFArray(l_float32 *, l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) With L_INSERT, ownership of the input array is transferred
''' to the returned numa, and all %size elements are considered
''' to be valid.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="farray">[in] - float</param>
'''  <param name="size">[in] - of the array</param>
'''  <param name="copyflag">[in] - L_INSERT or L_COPY</param>
'''   <returns>na, or NULL on error</returns>
Public Shared Function numaCreateFromFArray(
				ByVal farray as Single(), 
				ByVal size as Integer, 
				ByVal copyflag as Enumerations.L_access_storage) as Numa

	If IsNothing (farray) then Throw New ArgumentNullException  ("farray cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaCreateFromFArray( farray, size, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numabasic.c (309, 1)
' numaCreateFromString()
' numaCreateFromString(const char *) as NUMA *
'''  <summary>
''' Notes
''' (1) The numbers can be ints or floats; they will be interpreted
''' and stored as floats.  To use them as integers (e.g., for
''' indexing into arrays), use numaGetIValue(...).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="str">[in] - string of comma-separated numbers</param>
'''   <returns>na, or NULL on error</returns>
Public Shared Function numaCreateFromString(
				ByVal str as String) as Numa

	If IsNothing (str) then Throw New ArgumentNullException  ("str cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaCreateFromString( str)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numabasic.c (360, 1)
' numaDestroy()
' numaDestroy(NUMA **) as void
'''  <summary>
''' Notes
''' (1) Decrements the ref count and, if 0, destroys the numa.
''' (2) Always nulls the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pna">[in,out] - to be nulled if it exists</param>
Public Shared Sub numaDestroy(
				ByRef pna as Numa)


	Dim pnaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pna) Then pnaPTR = pna.Pointer

	LeptonicaSharp.Natives.numaDestroy( pnaPTR)
	if pnaPTR <> IntPtr.Zero then pna = new Numa(pnaPTR)

End Sub

' SRC\numabasic.c (394, 1)
' numaCopy()
' numaCopy(NUMA *) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''   <returns>copy of numa, or NULL on error</returns>
Public Shared Function numaCopy(
				ByVal na as Numa) as Numa

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaCopy( na.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numabasic.c (423, 1)
' numaClone()
' numaClone(NUMA *) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''   <returns>ptr to same numa, or NULL on error</returns>
Public Shared Function numaClone(
				ByVal na as Numa) as Numa

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaClone( na.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numabasic.c (449, 1)
' numaEmpty()
' numaEmpty(NUMA *) as l_ok
'''  <summary>
''' Notes
''' (1) This does not change the allocation of the array.
''' It just clears the number of stored numbers, so that
''' the array appears to be empty.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function numaEmpty(
				ByVal na as Numa) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaEmpty( na.Pointer)

	Return _Result
End Function

' SRC\numabasic.c (473, 1)
' numaAddNumber()
' numaAddNumber(NUMA *, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="val">[in] - float or int to be added; stored as a float</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaAddNumber(
				ByVal na as Numa, 
				ByVal val as Single) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaAddNumber( na.Pointer, val)

	Return _Result
End Function

' SRC\numabasic.c (534, 1)
' numaInsertNumber()
' numaInsertNumber(NUMA *, l_int32, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This shifts na[i] --GT na[i + 1] for all i GT= index,
''' and then inserts val as na[index].
''' (2) It should not be used repeatedly on large arrays,
''' because the function is O(n).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="index">[in] - location in na to insert new value</param>
'''  <param name="val">[in] - float32 or integer to be added</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaInsertNumber(
				ByVal na as Numa, 
				ByVal index as Integer, 
				ByVal val as Single) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaInsertNumber( na.Pointer, index, val)

	Return _Result
End Function

' SRC\numabasic.c (573, 1)
' numaRemoveNumber()
' numaRemoveNumber(NUMA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This shifts na[i] --GT na[i - 1] for all i GT index.
''' (2) It should not be used repeatedly on large arrays,
''' because the function is O(n).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="index">[in] - element to be removed</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaRemoveNumber(
				ByVal na as Numa, 
				ByVal index as Integer) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaRemoveNumber( na.Pointer, index)

	Return _Result
End Function

' SRC\numabasic.c (602, 1)
' numaReplaceNumber()
' numaReplaceNumber(NUMA *, l_int32, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="index">[in] - element to be replaced</param>
'''  <param name="val">[in] - new value to replace old one</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaReplaceNumber(
				ByVal na as Numa, 
				ByVal index as Integer, 
				ByVal val as Single) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaReplaceNumber( na.Pointer, index, val)

	Return _Result
End Function

' SRC\numabasic.c (631, 1)
' numaGetCount()
' numaGetCount(NUMA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''   <returns>count, or 0 if no numbers or on error</returns>
Public Shared Function numaGetCount(
				ByVal na as Numa) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetCount( na.Pointer)

	Return _Result
End Function

' SRC\numabasic.c (658, 1)
' numaSetCount()
' numaSetCount(NUMA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) If newcount LT= na-GTnalloc, this resets na-GTn.
''' Using newcount = 0 is equivalent to numaEmpty().
''' (2) If newcount GT na-GTnalloc, this causes a realloc
''' to a size na-GTnalloc = newcount.
''' (3) All the previously unused values in na are set to 0.0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="newcount">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaSetCount(
				ByVal na as Numa, 
				ByVal newcount as Integer) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaSetCount( na.Pointer, newcount)

	Return _Result
End Function

' SRC\numabasic.c (692, 1)
' numaGetFValue()
' numaGetFValue(NUMA *, l_int32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Caller may need to check the function return value to
''' decide if a 0.0 in the returned ival is valid.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="index">[in] - into numa</param>
'''  <param name="pval">[out] - float value; 0.0 on error</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function numaGetFValue(
				ByVal na as Numa, 
				ByVal index as Integer, 
				ByRef pval as Single()) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetFValue( na.Pointer, index, pval)

	Return _Result
End Function

' SRC\numabasic.c (727, 1)
' numaGetIValue()
' numaGetIValue(NUMA *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Caller may need to check the function return value to
''' decide if a 0 in the returned ival is valid.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="index">[in] - into numa</param>
'''  <param name="pival">[out] - integer value; 0 on error</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function numaGetIValue(
				ByVal na as Numa, 
				ByVal index as Integer, 
				ByRef pival as Integer) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetIValue( na.Pointer, index, pival)

	Return _Result
End Function

' SRC\numabasic.c (759, 1)
' numaSetValue()
' numaSetValue(NUMA *, l_int32, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="index">[in] - to element to be set</param>
'''  <param name="val">[in] - to set element</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function numaSetValue(
				ByVal na as Numa, 
				ByVal index as Integer, 
				ByVal val as Single) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaSetValue( na.Pointer, index, val)

	Return _Result
End Function

' SRC\numabasic.c (784, 1)
' numaShiftValue()
' numaShiftValue(NUMA *, l_int32, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="index">[in] - to element to change relative to the current value</param>
'''  <param name="diff">[in] - increment if diff GT 0 or decrement if diff LT 0</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function numaShiftValue(
				ByVal na as Numa, 
				ByVal index as Integer, 
				ByVal diff as Single) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If IsNothing (diff) then Throw New ArgumentNullException  ("diff cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaShiftValue( na.Pointer, index, diff)

	Return _Result
End Function

' SRC\numabasic.c (820, 1)
' numaGetIArray()
' numaGetIArray(NUMA *) as l_int32 *
'''  <summary>
''' Notes
''' (1) A copy of the array is always made, because we need to
''' generate an integer array from the bare float array.
''' The caller is responsible for freeing the array.
''' (2) The array size is determined by the number of stored numbers,
''' not by the size of the allocated array in the Numa.
''' (3) This function is provided to simplify calculations
''' using the bare internal array, rather than continually
''' calling accessors on the numa.  It is typically used
''' on an array of size 256.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''   <returns>a copy of the bare internal array, integerized by rounding, or NULL on error</returns>
Public Shared Function numaGetIArray(
				ByVal na as Numa) as Integer()

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer() = LeptonicaSharp.Natives.numaGetIArray( na.Pointer)

	Return _Result
End Function

' SRC\numabasic.c (865, 1)
' numaGetFArray()
' numaGetFArray(NUMA *, l_int32) as l_float32 *
'''  <summary>
''' Notes
''' (1) If copyflag == L_COPY, it makes a copy which the caller
''' is responsible for freeing.  Otherwise, it operates
''' directly on the bare array of the numa.
''' (2) Very important for L_NOCOPY, any writes to the array
''' will be in the numa.  Do not write beyond the size of
''' the count field, because it will not be accessible
''' from the numa!  If necessary, be sure to set the count
''' field to a larger number (such as the alloc size)
''' BEFORE calling this function.  Creating with numaMakeConstant()
''' is another way to insure full initialization.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="copyflag">[in] - L_NOCOPY or L_COPY</param>
'''   <returns>either the bare internal array or a copy of it, or NULL on error</returns>
Public Shared Function numaGetFArray(
				ByVal na as Numa, 
				ByVal copyflag as Enumerations.L_access_storage) as Single()

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Single() = LeptonicaSharp.Natives.numaGetFArray( na.Pointer, copyflag)

	Return _Result
End Function

' SRC\numabasic.c (897, 1)
' numaGetRefCount()
' numaGetRefcount(NUMA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''   <returns>refcount, or UNDEF on error</returns>
Public Shared Function numaGetRefcount(
				ByVal na as Numa) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetRefcount( na.Pointer)

	Return _Result
End Function

' SRC\numabasic.c (915, 1)
' numaChangeRefCount()
' numaChangeRefcount(NUMA *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="delta">[in] - change to be applied</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaChangeRefcount(
				ByVal na as Numa, 
				ByVal delta as Integer) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaChangeRefcount( na.Pointer, delta)

	Return _Result
End Function

' SRC\numabasic.c (936, 1)
' numaGetParameters()
' numaGetParameters(NUMA *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="pstartx">[out][optional] - startx</param>
'''  <param name="pdelx">[out][optional] - delx</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaGetParameters(
				ByVal na as Numa, 
				ByRef pstartx as Single(), 
				ByRef pdelx as Single()) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetParameters( na.Pointer, pstartx, pdelx)

	Return _Result
End Function

' SRC\numabasic.c (966, 1)
' numaSetParameters()
' numaSetParameters(NUMA *, l_float32, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="startx">[in] - x value corresponding to na[0]</param>
'''  <param name="delx">[in] - difference in x values for the situation where the elements of na correspond to the evaulation of a function at equal intervals of size %delx</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaSetParameters(
				ByVal na as Numa, 
				ByVal startx as Single, 
				ByVal delx as Single) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If IsNothing (startx) then Throw New ArgumentNullException  ("startx cannot be Nothing")
	If IsNothing (delx) then Throw New ArgumentNullException  ("delx cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaSetParameters( na.Pointer, startx, delx)

	Return _Result
End Function

' SRC\numabasic.c (989, 1)
' numaCopyParameters()
' numaCopyParameters(NUMA *, NUMA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nad">[in] - destination Numa</param>
'''  <param name="nas">[in] - source Numa</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaCopyParameters(
				ByVal nad as Numa, 
				ByVal nas as Numa) as Integer

	If IsNothing (nad) then Throw New ArgumentNullException  ("nad cannot be Nothing")
	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaCopyParameters( nad.Pointer, nas.Pointer)

	Return _Result
End Function

' SRC\numabasic.c (1027, 1)
' numaConvertToSarray()
' numaConvertToSarray(NUMA *, l_int32, l_int32, l_int32, l_int32) as SARRAY *
'''  <summary>
''' Notes
''' (1) For integer conversion, size2 is ignored.
''' For float conversion, addzeroes is ignored.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="size1">[in] - size of conversion field</param>
'''  <param name="size2">[in] - for float conversion size of field to the right of the decimal point</param>
'''  <param name="addzeros">[in] - for integer conversion to add lead zeros</param>
'''  <param name="type">[in] - L_INTEGER_VALUE, L_FLOAT_VALUE</param>
'''   <returns>a sarray of the float values converted to strings representing either integer or float values; or NULL on error.</returns>
Public Shared Function numaConvertToSarray(
				ByVal na as Numa, 
				ByVal size1 as Integer, 
				ByVal size2 as Integer, 
				ByVal addzeros as Integer, 
				ByVal type as Enumerations.L_VALUE) as Sarray

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaConvertToSarray( na.Pointer, size1, size2, addzeros, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\numabasic.c (1083, 1)
' numaRead()
' numaRead(const char *) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>na, or NULL on error</returns>
Public Shared Function numaRead(
				ByVal filename as String) as Numa

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numabasic.c (1110, 1)
' numaReadStream()
' numaReadStream(FILE *) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>numa, or NULL on error</returns>
Public Shared Function numaReadStream(
				ByVal fp as FILE) as Numa

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numabasic.c (1156, 1)
' numaReadMem()
' numaReadMem(const l_uint8 *, size_t) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - numa serialization; in ascii</param>
'''  <param name="size">[in] - of data; can use strlen to get it</param>
'''   <returns>na, or NULL on error</returns>
Public Shared Function numaReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as Numa

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numabasic.c (1193, 1)
' numaWriteDebug()
' numaWriteDebug(const char *, NUMA *) as l_ok
'''  <summary>
''' Notes
''' (1) Debug version, intended for use in the library when writing
''' to files in a temp directory with names that are compiled in.
''' This is used instead of numaWrite() for all such library calls.
''' (2) The global variable LeptDebugOK defaults to 0, and can be set
''' or cleared by the function setLeptDebugOK().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="na">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function numaWriteDebug(
				ByVal filename as String, 
				ByVal na as Numa) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaWriteDebug( filename, na.Pointer)

	Return _Result
End Function

' SRC\numabasic.c (1214, 1)
' numaWrite()
' numaWrite(const char *, NUMA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="na">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaWrite(
				ByVal filename as String, 
				ByVal na as Numa) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaWrite( filename, na.Pointer)

	Return _Result
End Function

' SRC\numabasic.c (1245, 1)
' numaWriteStream()
' numaWriteStream(FILE *, NUMA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="na">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaWriteStream(
				ByVal fp as FILE, 
				ByVal na as Numa) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaWriteStream( fp.Pointer, na.Pointer)

	Return _Result
End Function

' SRC\numabasic.c (1288, 1)
' numaWriteMem()
' numaWriteMem(l_uint8 **, size_t *, NUMA *) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a numa in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized numa; ascii</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="na">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal na as Numa) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.numaWriteMem( pdataPTR, psize, na.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\numabasic.c (1339, 1)
' numaaCreate()
' numaaCreate(l_int32) as NUMAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - size of numa ptr array to be alloc'd 0 for default</param>
'''   <returns>naa, or NULL on error</returns>
Public Shared Function numaaCreate(
				ByVal n as Integer) as Numaa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaaCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numaa(_Result)
End Function

' SRC\numabasic.c (1377, 1)
' numaaCreateFull()
' numaaCreateFull(l_int32, l_int32) as NUMAA *
'''  <summary>
''' Notes
''' (1) This allocates numaa and fills the array with allocated numas.
''' In use, after calling this function, use
''' numaaAddNumber(naa, index, val);
''' to add val to the index-th numa in naa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nptr">[in] - size of numa ptr array to be alloc'd</param>
'''  <param name="n">[in] - size of individual numa arrays to be alloc'd 0 for default</param>
'''   <returns>naa, or NULL on error</returns>
Public Shared Function numaaCreateFull(
				ByVal nptr as Integer, 
				ByVal n as Integer) as Numaa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaaCreateFull( nptr, n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numaa(_Result)
End Function

' SRC\numabasic.c (1408, 1)
' numaaTruncate()
' numaaTruncate(NUMAA *) as l_ok
'''  <summary>
''' Notes
''' (1) This identifies the largest index containing a numa that
''' has any numbers within it, destroys all numa beyond that
''' index, and resets the count.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaaTruncate(
				ByVal naa as Numaa) as Integer

	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaaTruncate( naa.Pointer)

	Return _Result
End Function

' SRC\numabasic.c (1442, 1)
' numaaDestroy()
' numaaDestroy(NUMAA **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pnaa">[in,out] - to be nulled if it exists</param>
Public Shared Sub numaaDestroy(
				ByRef pnaa as Numaa)


	Dim pnaaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaa) Then pnaaPTR = pnaa.Pointer

	LeptonicaSharp.Natives.numaaDestroy( pnaaPTR)
	if pnaaPTR <> IntPtr.Zero then pnaa = new Numaa(pnaaPTR)

End Sub

' SRC\numabasic.c (1480, 1)
' numaaAddNuma()
' numaaAddNuma(NUMAA *, NUMA *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa">[in] - </param>
'''  <param name="na">[in] - to be added</param>
'''  <param name="copyflag">[in] - L_INSERT, L_COPY, L_CLONE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaaAddNuma(
				ByVal naa as Numaa, 
				ByVal na as Numa, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")
	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaaAddNuma( naa.Pointer, na.Pointer, copyflag)

	Return _Result
End Function

' SRC\numabasic.c (1548, 1)
' numaaGetCount()
' numaaGetCount(NUMAA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa">[in] - </param>
'''   <returns>count number of numa, or 0 if no numa or on error</returns>
Public Shared Function numaaGetCount(
				ByVal naa as Numaa) as Integer

	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaaGetCount( naa.Pointer)

	Return _Result
End Function

' SRC\numabasic.c (1566, 1)
' numaaGetNumaCount()
' numaaGetNumaCount(NUMAA *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa">[in] - </param>
'''  <param name="index">[in] - of numa in naa</param>
'''   <returns>count of numbers in the referenced numa, or 0 on error.</returns>
Public Shared Function numaaGetNumaCount(
				ByVal naa as Numaa, 
				ByVal index as Integer) as Integer

	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaaGetNumaCount( naa.Pointer, index)

	Return _Result
End Function

' SRC\numabasic.c (1587, 1)
' numaaGetNumberCount()
' numaaGetNumberCount(NUMAA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa">[in] - </param>
'''   <returns>count total number of numbers in the numaa, or 0 if no numbers or on error</returns>
Public Shared Function numaaGetNumberCount(
				ByVal naa as Numaa) as Integer

	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaaGetNumberCount( naa.Pointer)

	Return _Result
End Function

' SRC\numabasic.c (1636, 1)
' numaaGetPtrArray()
' numaaGetPtrArray(NUMAA *) as NUMA **
'''  <summary>
''' Notes
''' (1) This function is convenient for doing direct manipulation on
''' a fixed size array of Numas.  To do this, it sets the count
''' to the full size of the allocated array of Numa ptrs.
''' The originating Numaa owns this array DO NOT free it!
''' (2) Intended usage
''' Numaa naa = numaaCreate(n);
''' Numa array = numaaGetPtrArray(naa);
''' ...  [manipulate Numas directly on the array]
''' numaaDestroy(naa);
''' (3) Cautions
''' ~ Do not free this array; it is owned by tne Numaa.
''' ~ Do not call any functions on the Numaa, other than
''' numaaDestroy() when you're finished with the array.
''' Adding a Numa will force a resize, destroying the ptr array.
''' ~ Do not address the array outside its allocated size.
''' With the bare array, there are no protections.  If the
''' allocated size is n, array[n] is an error.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa">[in] - </param>
'''   <returns>the internal array of ptrs to Numa, or NULL on error</returns>
Public Shared Function numaaGetPtrArray(
				ByVal naa as Numaa) as Numa

	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaaGetPtrArray( naa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing
Dim B as new Numa(_Result)

	Return B
End Function

' SRC\numabasic.c (1657, 1)
' numaaGetNuma()
' numaaGetNuma(NUMAA *, l_int32, l_int32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa">[in] - </param>
'''  <param name="index">[in] - to the index-th numa</param>
'''  <param name="accessflag">[in] - L_COPY or L_CLONE</param>
'''   <returns>numa, or NULL on error</returns>
Public Shared Function numaaGetNuma(
				ByVal naa as Numaa, 
				ByVal index as Integer, 
				ByVal accessflag as Enumerations.L_access_storage) as Numa

	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaaGetNuma( naa.Pointer, index, accessflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numabasic.c (1693, 1)
' numaaReplaceNuma()
' numaaReplaceNuma(NUMAA *, l_int32, NUMA *) as l_ok
'''  <summary>
''' Notes
''' (1) Any existing numa is destroyed, and the input one
''' is inserted in its place.
''' (2) If the index is invalid, return 1 (error)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa">[in] - </param>
'''  <param name="index">[in] - to the index-th numa</param>
'''  <param name="na">[in] - insert and replace any existing one</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaaReplaceNuma(
				ByVal naa as Numaa, 
				ByVal index as Integer, 
				ByVal na as Numa) as Integer

	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")
	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaaReplaceNuma( naa.Pointer, index, na.Pointer)

	Return _Result
End Function

' SRC\numabasic.c (1726, 1)
' numaaGetValue()
' numaaGetValue(NUMAA *, l_int32, l_int32, l_float32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa">[in] - </param>
'''  <param name="i">[in] - index of numa within numaa</param>
'''  <param name="j">[in] - index into numa</param>
'''  <param name="pfval">[out][optional] - float value</param>
'''  <param name="pival">[out][optional] - int value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaaGetValue(
				ByVal naa as Numaa, 
				ByVal i as Integer, 
				ByVal j as Integer, 
				ByRef pfval as Single(), 
				ByRef pival as Integer) as Integer

	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaaGetValue( naa.Pointer, i, j, pfval, pival)

	Return _Result
End Function

' SRC\numabasic.c (1769, 1)
' numaaAddNumber()
' numaaAddNumber(NUMAA *, l_int32, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) Adds to an existing numa only.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa">[in] - </param>
'''  <param name="index">[in] - of numa within numaa</param>
'''  <param name="val">[in] - float or int to be added; stored as a float</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaaAddNumber(
				ByVal naa as Numaa, 
				ByVal index as Integer, 
				ByVal val as Single) as Integer

	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaaAddNumber( naa.Pointer, index, val)

	Return _Result
End Function

' SRC\numabasic.c (1801, 1)
' numaaRead()
' numaaRead(const char *) as NUMAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>naa, or NULL on error</returns>
Public Shared Function numaaRead(
				ByVal filename as String) as Numaa

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaaRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numaa(_Result)
End Function

' SRC\numabasic.c (1828, 1)
' numaaReadStream()
' numaaReadStream(FILE *) as NUMAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>naa, or NULL on error</returns>
Public Shared Function numaaReadStream(
				ByVal fp as FILE) as Numaa

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaaReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numaa(_Result)
End Function

' SRC\numabasic.c (1873, 1)
' numaaReadMem()
' numaaReadMem(const l_uint8 *, size_t) as NUMAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - numaa serialization; in ascii</param>
'''  <param name="size">[in] - of data; can use strlen to get it</param>
'''   <returns>naa, or NULL on error</returns>
Public Shared Function numaaReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as Numaa

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaaReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numaa(_Result)
End Function

' SRC\numabasic.c (1900, 1)
' numaaWrite()
' numaaWrite(const char *, NUMAA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="naa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaaWrite(
				ByVal filename as String, 
				ByVal naa as Numaa) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaaWrite( filename, naa.Pointer)

	Return _Result
End Function

' SRC\numabasic.c (1931, 1)
' numaaWriteStream()
' numaaWriteStream(FILE *, NUMAA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="naa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaaWriteStream(
				ByVal fp as FILE, 
				ByVal naa as Numaa) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaaWriteStream( fp.Pointer, naa.Pointer)

	Return _Result
End Function

' SRC\numabasic.c (1973, 1)
' numaaWriteMem()
' numaaWriteMem(l_uint8 **, size_t *, NUMAA *) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a numaa in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized numaa; ascii</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="naa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaaWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal naa as Numaa) as Integer

	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.numaaWriteMem( pdataPTR, psize, naa.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

#End Region
#Region "SRC\numafunc1.c"
' SRC\numafunc1.c (153, 1)
' numaArithOp()
' numaArithOp(NUMA *, NUMA *, NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The sizes of na1 and na2 must be equal.
''' (2) nad can only null or equal to na1.
''' (3) To add a constant to a numa, or to multipy a numa by
''' a constant, use numaTransform().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nad">[in][optional] - can be null or equal to na1 (in-place</param>
'''  <param name="na1">[in] - </param>
'''  <param name="na2">[in] - </param>
'''  <param name="op">[in] - L_ARITH_ADD, L_ARITH_SUBTRACT, L_ARITH_MULTIPLY, L_ARITH_DIVIDE</param>
'''   <returns>nad always operation applied to na1 and na2</returns>
Public Shared Function numaArithOp(
				ByVal nad as Numa, 
				ByVal na1 as Numa, 
				ByVal na2 as Numa, 
				ByVal op as Enumerations.L_arithmetic_logical_operator) as Numa

	If IsNothing (na1) then Throw New ArgumentNullException  ("na1 cannot be Nothing")
	If IsNothing (na2) then Throw New ArgumentNullException  ("na2 cannot be Nothing")

	Dim nadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nad) Then nadPTR = nad.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaArithOp( nadPTR, na1.Pointer, na2.Pointer, op)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (233, 1)
' numaLogicalOp()
' numaLogicalOp(NUMA *, NUMA *, NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The sizes of na1 and na2 must be equal.
''' (2) nad can only be null or equal to na1.
''' (3) This is intended for use with indicator arrays (0s and 1s).
''' Input data is extracted as integers (0 == false, anything
''' else == true); output results are 0 and 1.
''' (4) L_SUBTRACTION is subtraction of val2 from val1.  For bit logical
''' arithmetic this is (val1  ~val2), but because these values
''' are integers, we use (val1  !val2).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nad">[in][optional] - can be null or equal to na1 (in-place</param>
'''  <param name="na1">[in] - </param>
'''  <param name="na2">[in] - </param>
'''  <param name="op">[in] - L_UNION, L_INTERSECTION, L_SUBTRACTION, L_EXCLUSIVE_OR</param>
'''   <returns>nad always operation applied to na1 and na2</returns>
Public Shared Function numaLogicalOp(
				ByVal nad as Numa, 
				ByVal na1 as Numa, 
				ByVal na2 as Numa, 
				ByVal op as Enumerations.L_arithmetic_logical_operator) as Numa

	If IsNothing (na1) then Throw New ArgumentNullException  ("na1 cannot be Nothing")
	If IsNothing (na2) then Throw New ArgumentNullException  ("na2 cannot be Nothing")

	Dim nadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nad) Then nadPTR = nad.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaLogicalOp( nadPTR, na1.Pointer, na2.Pointer, op)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (306, 1)
' numaInvert()
' numaInvert(NUMA *, NUMA *) as NUMA *
'''  <summary>
''' Notes
''' (1) This is intended for use with indicator arrays (0s and 1s).
''' It gives a boolean-type output, taking the input as
''' an integer and inverting it
''' 0  --GT  1
''' anything else  --GT   0
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nad">[in][optional] - can be null or equal to nas (in-place</param>
'''  <param name="nas">[in] - </param>
'''   <returns>nad always 'inverts' nas</returns>
Public Shared Function numaInvert(
				ByVal nad as Numa, 
				ByVal nas as Numa) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")

	Dim nadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nad) Then nadPTR = nad.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaInvert( nadPTR, nas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (351, 1)
' numaSimilar()
' numaSimilar(NUMA *, NUMA *, l_float32, l_int32 *) as l_int32
'''  <summary>
''' Notes
''' (1) Float values can differ slightly due to roundoff and
''' accumulated errors.  Using %maxdiff GT 0.0 allows similar
''' arrays to be identified.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na1">[in] - </param>
'''  <param name="na2">[in] - </param>
'''  <param name="maxdiff">[in] - use 0.0 for exact equality</param>
'''  <param name="psimilar">[out] - 1 if similar; 0 if different</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaSimilar(
				ByVal na1 as Numa, 
				ByVal na2 as Numa, 
				ByVal maxdiff as Single, 
				ByRef psimilar as Integer) as Integer

	If IsNothing (na1) then Throw New ArgumentNullException  ("na1 cannot be Nothing")
	If IsNothing (na2) then Throw New ArgumentNullException  ("na2 cannot be Nothing")
	If IsNothing (maxdiff) then Throw New ArgumentNullException  ("maxdiff cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaSimilar( na1.Pointer, na2.Pointer, maxdiff, psimilar)

	Return _Result
End Function

' SRC\numafunc1.c (400, 1)
' numaAddToNumber()
' numaAddToNumber(NUMA *, l_int32, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This is useful for accumulating sums, regardless of the index
''' order in which the values are made available.
''' (2) Before use, the numa has to be filled up to %index.  This would
''' typically be used by creating the numa with the full sized
''' array, initialized to 0.0, using numaMakeConstant().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''  <param name="index">[in] - element to be changed</param>
'''  <param name="val">[in] - new value to be added</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaAddToNumber(
				ByVal na as Numa, 
				ByVal index as Integer, 
				ByVal val as Single) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaAddToNumber( na.Pointer, index, val)

	Return _Result
End Function

' SRC\numafunc1.c (431, 1)
' numaGetMin()
' numaGetMin(NUMA *, l_float32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''  <param name="pminval">[out][optional] - min value</param>
'''  <param name="piminloc">[out][optional] - index of min location</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function numaGetMin(
				ByVal na as Numa, 
				ByRef pminval as Single(), 
				ByRef piminloc as Integer) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetMin( na.Pointer, pminval, piminloc)

	Return _Result
End Function

' SRC\numafunc1.c (473, 1)
' numaGetMax()
' numaGetMax(NUMA *, l_float32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''  <param name="pmaxval">[out][optional] - max value</param>
'''  <param name="pimaxloc">[out][optional] - index of max location</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function numaGetMax(
				ByVal na as Numa, 
				ByRef pmaxval as Single(), 
				ByRef pimaxloc as Integer) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetMax( na.Pointer, pmaxval, pimaxloc)

	Return _Result
End Function

' SRC\numafunc1.c (514, 1)
' numaGetSum()
' numaGetSum(NUMA *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''  <param name="psum">[out] - sum of values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaGetSum(
				ByVal na as Numa, 
				ByRef psum as Single()) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetSum( na.Pointer, psum)

	Return _Result
End Function

' SRC\numafunc1.c (553, 1)
' numaGetPartialSums()
' numaGetPartialSums(NUMA *) as NUMA *
'''  <summary>
''' Notes
''' (1) nasum[i] is the sum for all j LT= i of na[j].
''' So nasum[0] = na[0].
''' (2) If you want to generate a rank function, where rank[0] - 0.0,
''' insert a 0.0 at the beginning of the nasum array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''   <returns>nasum, or NULL on error</returns>
Public Shared Function numaGetPartialSums(
				ByVal na as Numa) as Numa

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaGetPartialSums( na.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (586, 1)
' numaGetSumOnInterval()
' numaGetSumOnInterval(NUMA *, l_int32, l_int32, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''  <param name="first">[in] - beginning index</param>
'''  <param name="last">[in] - final index</param>
'''  <param name="psum">[out] - sum of values in the index interval range</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaGetSumOnInterval(
				ByVal na as Numa, 
				ByVal first as Integer, 
				ByVal last as Integer, 
				ByRef psum as Single()) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetSumOnInterval( na.Pointer, first, last, psum)

	Return _Result
End Function

' SRC\numafunc1.c (632, 1)
' numaHasOnlyIntegers()
' numaHasOnlyIntegers(NUMA *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Set %maxsamples == 0 to check every integer in na.  Otherwise,
''' this samples no more than %maxsamples.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''  <param name="maxsamples">[in] - maximum number of samples to check</param>
'''  <param name="pallints">[out] - 1 if all sampled values are ints; else 0</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaHasOnlyIntegers(
				ByVal na as Numa, 
				ByVal maxsamples as Integer, 
				ByRef pallints as Integer) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaHasOnlyIntegers( na.Pointer, maxsamples, pallints)

	Return _Result
End Function

' SRC\numafunc1.c (673, 1)
' numaSubsample()
' numaSubsample(NUMA *, l_int32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="subfactor">[in] - subsample factor, GT= 1</param>
'''   <returns>nad evenly sampled values from nas, or NULL on error</returns>
Public Shared Function numaSubsample(
				ByVal nas as Numa, 
				ByVal subfactor as Integer) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaSubsample( nas.Pointer, subfactor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (707, 1)
' numaMakeDelta()
' numaMakeDelta(NUMA *) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - input numa</param>
'''   <returns>numa of difference values val[i+1] - val[i], or NULL on error</returns>
Public Shared Function numaMakeDelta(
				ByVal nas as Numa) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaMakeDelta( nas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (737, 1)
' numaMakeSequence()
' numaMakeSequence(l_float32, l_float32, l_int32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="startval">[in] - </param>
'''  <param name="increment">[in] - </param>
'''  <param name="size">[in] - of sequence</param>
'''   <returns>numa of sequence of evenly spaced values, or NULL on error</returns>
Public Shared Function numaMakeSequence(
				ByVal startval as Single, 
				ByVal increment as Single, 
				ByVal size as Integer) as Numa

	If IsNothing (startval) then Throw New ArgumentNullException  ("startval cannot be Nothing")
	If IsNothing (increment) then Throw New ArgumentNullException  ("increment cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaMakeSequence( startval, increment, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (768, 1)
' numaMakeConstant()
' numaMakeConstant(l_float32, l_int32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="val">[in] - </param>
'''  <param name="size">[in] - of numa</param>
'''   <returns>numa of given size with all entries equal to 'val', or NULL on error</returns>
Public Shared Function numaMakeConstant(
				ByVal val as Single, 
				ByVal size as Integer) as Numa

	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaMakeConstant( val, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (784, 1)
' numaMakeAbsValue()
' numaMakeAbsValue(NUMA *, NUMA *) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nad">[in]can be null - for new array, or the same as nas for inplace</param>
'''  <param name="nas">[in] - input numa</param>
'''   <returns>nad with all numbers being the absval of the input, or NULL on error</returns>
Public Shared Function numaMakeAbsValue(
				ByVal nad as Numa, 
				ByVal nas as Numa) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")

	Dim nadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nad) Then nadPTR = nad.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaMakeAbsValue( nadPTR, nas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (818, 1)
' numaAddBorder()
' numaAddBorder(NUMA *, l_int32, l_int32, l_float32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="left">[in] - number of elements to add on each side</param>
'''  <param name="right">[in] - number of elements to add on each side</param>
'''  <param name="val">[in] - initialize border elements</param>
'''   <returns>nad with added elements at left and right, or NULL on error</returns>
Public Shared Function numaAddBorder(
				ByVal nas as Numa, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal val as Single) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaAddBorder( nas.Pointer, left, right, val)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (860, 1)
' numaAddSpecifiedBorder()
' numaAddSpecifiedBorder(NUMA *, l_int32, l_int32, l_int32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="left">[in] - number of elements to add on each side</param>
'''  <param name="right">[in] - number of elements to add on each side</param>
'''  <param name="type">[in] - L_CONTINUED_BORDER, L_MIRRORED_BORDER</param>
'''   <returns>nad with added elements at left and right, or NULL on error</returns>
Public Shared Function numaAddSpecifiedBorder(
				ByVal nas as Numa, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal type as Enumerations.L_BORDER) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaAddSpecifiedBorder( nas.Pointer, left, right, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (910, 1)
' numaRemoveBorder()
' numaRemoveBorder(NUMA *, l_int32, l_int32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="left">[in] - number of elements to remove from each side</param>
'''  <param name="right">[in] - number of elements to remove from each side</param>
'''   <returns>nad with removed elements at left and right, or NULL on error</returns>
Public Shared Function numaRemoveBorder(
				ByVal nas as Numa, 
				ByVal left as Integer, 
				ByVal right as Integer) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaRemoveBorder( nas.Pointer, left, right)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (951, 1)
' numaCountNonzeroRuns()
' numaCountNonzeroRuns(NUMA *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - e.g., of pixel counts in rows or columns</param>
'''  <param name="pcount">[out] - number of nonzero runs</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaCountNonzeroRuns(
				ByVal na as Numa, 
				ByRef pcount as Integer) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaCountNonzeroRuns( na.Pointer, pcount)

	Return _Result
End Function

' SRC\numafunc1.c (990, 1)
' numaGetNonzeroRange()
' numaGetNonzeroRange(NUMA *, l_float32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''  <param name="eps">[in] - largest value considered to be zero</param>
'''  <param name="pfirst">[out] - interval of array indices where values are nonzero</param>
'''  <param name="plast">[out] - interval of array indices where values are nonzero</param>
'''   <returns>0 if OK, 1 on error or if no nonzero range is found.</returns>
Public Shared Function numaGetNonzeroRange(
				ByVal na as Numa, 
				ByVal eps as Single, 
				ByRef pfirst as Integer, 
				ByRef plast as Integer) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If IsNothing (eps) then Throw New ArgumentNullException  ("eps cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetNonzeroRange( na.Pointer, eps, pfirst, plast)

	Return _Result
End Function

' SRC\numafunc1.c (1041, 1)
' numaGetCountRelativeToZero()
' numaGetCountRelativeToZero(NUMA *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''  <param name="type">[in] - L_LESS_THAN_ZERO, L_EQUAL_TO_ZERO, L_GREATER_THAN_ZERO</param>
'''  <param name="pcount">[out] - count of values of given type</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaGetCountRelativeToZero(
				ByVal na as Numa, 
				ByVal type as Enumerations.L_ZERO, 
				ByRef pcount as Integer) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetCountRelativeToZero( na.Pointer, type, pcount)

	Return _Result
End Function

' SRC\numafunc1.c (1089, 1)
' numaClipToInterval()
' numaClipToInterval(NUMA *, l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' If you want the indices of the array values to be unchanged,
''' use first = 0.
''' Usage
''' This is useful to clip a histogram that has a few nonzero
''' values to its nonzero range.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="first">[in] - clipping interval</param>
'''  <param name="last">[in] - clipping interval</param>
'''   <returns>numa with the same values as the input, but clipped to the specified interval</returns>
Public Shared Function numaClipToInterval(
				ByVal nas as Numa, 
				ByVal first as Integer, 
				ByVal last as Integer) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaClipToInterval( nas.Pointer, first, last)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (1137, 1)
' numaMakeThresholdIndicator()
' numaMakeThresholdIndicator(NUMA *, l_float32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) For each element in nas, if the constraint given by 'type'
''' correctly specifies its relation to thresh, a value of 1
''' is recorded in nad.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - input numa</param>
'''  <param name="thresh">[in] - threshold value</param>
'''  <param name="type">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''   <returns></returns>
Public Shared Function numaMakeThresholdIndicator(
				ByVal nas as Numa, 
				ByVal thresh as Single, 
				ByVal type as Enumerations.L_SELECT_IF) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaMakeThresholdIndicator( nas.Pointer, thresh, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (1193, 1)
' numaUniformSampling()
' numaUniformSampling(NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) This resamples the values in the array, using %nsamp
''' equal divisions.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - input numa</param>
'''  <param name="nsamp">[in] - number of samples</param>
'''   <returns></returns>
Public Shared Function numaUniformSampling(
				ByVal nas as Numa, 
				ByVal nsamp as Integer) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaUniformSampling( nas.Pointer, nsamp)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (1258, 1)
' numaReverse()
' numaReverse(NUMA *, NUMA *) as NUMA *
'''  <summary>
''' Notes
''' (1) Usage
''' numaReverse(nas, nas);   // in-place
''' nad = numaReverse(NULL, nas);  // makes a new one
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nad">[in][optional] - can be null or equal to nas</param>
'''  <param name="nas">[in] - input numa</param>
'''   <returns></returns>
Public Shared Function numaReverse(
				ByVal nad as Numa, 
				ByVal nas as Numa) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")

	Dim nadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nad) Then nadPTR = nad.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaReverse( nadPTR, nas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (1313, 1)
' numaLowPassIntervals()
' numaLowPassIntervals(NUMA *, l_float32, l_float32) as NUMA *
'''  <summary>
''' Notes
''' (1) For each interval where the value is less than a specified
''' fraction of the maximum, this records the left and right "x"
''' value.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - input numa</param>
'''  <param name="thresh">[in] - threshold fraction of max; in [0.0 ... 1.0]</param>
'''  <param name="maxn">[in] - for normalizing; set maxn = 0.0 to use the max in nas</param>
'''   <returns></returns>
Public Shared Function numaLowPassIntervals(
				ByVal nas as Numa, 
				ByVal thresh as Single, 
				ByVal maxn as Single) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")
	If IsNothing (maxn) then Throw New ArgumentNullException  ("maxn cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaLowPassIntervals( nas.Pointer, thresh, maxn)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (1389, 1)
' numaThresholdEdges()
' numaThresholdEdges(NUMA *, l_float32, l_float32, l_float32) as NUMA *
'''  <summary>
''' Notes
''' (1) For each edge interval, where where the value is less
''' than %thresh1 on one side, greater than %thresh2 on
''' the other, and between these thresholds throughout the
''' interval, this records a triplet of values the
''' 'left' and 'right' edges, and either +1 or -1, depending
''' on whether the edge is rising or falling.
''' (2) No assumption is made about the value outside the array,
''' so if the value at the array edge is between the threshold
''' values, it is not considered part of an edge.  We start
''' looking for edge intervals only after leaving the thresholded
''' band.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - input numa</param>
'''  <param name="thresh1">[in] - low threshold as fraction of max; in [0.0 ... 1.0]</param>
'''  <param name="thresh2">[in] - high threshold as fraction of max; in [0.0 ... 1.0]</param>
'''  <param name="maxn">[in] - for normalizing; set maxn = 0.0 to use the max in nas</param>
'''   <returns></returns>
Public Shared Function numaThresholdEdges(
				ByVal nas as Numa, 
				ByVal thresh1 as Single, 
				ByVal thresh2 as Single, 
				ByVal maxn as Single) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")
	If IsNothing (thresh1) then Throw New ArgumentNullException  ("thresh1 cannot be Nothing")
	If IsNothing (thresh2) then Throw New ArgumentNullException  ("thresh2 cannot be Nothing")
	If IsNothing (maxn) then Throw New ArgumentNullException  ("maxn cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaThresholdEdges( nas.Pointer, thresh1, thresh2, maxn)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (1509, 1)
' numaGetSpanValues()
' numaGetSpanValues(NUMA *, l_int32, l_int32 *, l_int32 *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - numa that is output of numaLowPassIntervals()</param>
'''  <param name="span">[in] - span number, zero-based</param>
'''  <param name="pstart">[out][optional] - location of start of transition</param>
'''  <param name="pend">[out][optional] - location of end of transition</param>
'''   <returns></returns>
Public Shared Function numaGetSpanValues(
				ByVal na as Numa, 
				ByVal span as Integer, 
				ByRef pstart as Integer, 
				ByRef pend as Integer) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetSpanValues( na.Pointer, span, pstart, pend)

	Return _Result
End Function

' SRC\numafunc1.c (1545, 1)
' numaGetEdgeValues()
' numaGetEdgeValues(NUMA *, l_int32, l_int32 *, l_int32 *, l_int32 *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - numa that is output of numaThresholdEdges()</param>
'''  <param name="edge">[in] - edge number, zero-based</param>
'''  <param name="pstart">[out][optional] - location of start of transition</param>
'''  <param name="pend">[out][optional] - location of end of transition</param>
'''  <param name="psign">[out][optional] - transition sign +1 is rising, -1 is falling</param>
'''   <returns></returns>
Public Shared Function numaGetEdgeValues(
				ByVal na as Numa, 
				ByVal edge as Integer, 
				ByRef pstart as Integer, 
				ByRef pend as Integer, 
				ByRef psign as Integer) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetEdgeValues( na.Pointer, edge, pstart, pend, psign)

	Return _Result
End Function

' SRC\numafunc1.c (1602, 1)
' numaInterpolateEqxVal()
' numaInterpolateEqxVal(l_float32, l_float32, NUMA *, l_int32, l_float32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Considering nay as a function of x, the x values
''' are equally spaced
''' (2) Caller should check for valid return.
''' For linear Lagrangian interpolation (through 2 data pts)
''' y(x) = y1(x-x2)/(x1-x2) + y2(x-x1)/(x2-x1)
''' For quadratic Lagrangian interpolation (through 3 data pts)
''' y(x) = y1(x-x2)(x-x3)/((x1-x2)(x1-x3)) +
''' y2(x-x1)(x-x3)/((x2-x1)(x2-x3)) +
''' y3(x-x1)(x-x2)/((x3-x1)(x3-x2))
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="startx">[in] - xval corresponding to first element in array</param>
'''  <param name="deltax">[in] - x increment between array elements</param>
'''  <param name="nay">[in] - numa of ordinate values, assumed equally spaced</param>
'''  <param name="type">[in] - L_LINEAR_INTERP, L_QUADRATIC_INTERP</param>
'''  <param name="xval">[in] - </param>
'''  <param name="pyval">[out] - interpolated value</param>
'''   <returns>0 if OK, 1 on error e.g., if xval is outside range</returns>
Public Shared Function numaInterpolateEqxVal(
				ByVal startx as Single, 
				ByVal deltax as Single, 
				ByVal nay as Numa, 
				ByVal type as Enumerations.L_INTERP, 
				ByVal xval as Single, 
				ByRef pyval as Single()) as Integer

	If IsNothing (startx) then Throw New ArgumentNullException  ("startx cannot be Nothing")
	If IsNothing (deltax) then Throw New ArgumentNullException  ("deltax cannot be Nothing")
	If IsNothing (nay) then Throw New ArgumentNullException  ("nay cannot be Nothing")
	If IsNothing (xval) then Throw New ArgumentNullException  ("xval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaInterpolateEqxVal( startx, deltax, nay.Pointer, type, xval, pyval)

	Return _Result
End Function

' SRC\numafunc1.c (1695, 1)
' numaInterpolateArbxVal()
' numaInterpolateArbxVal(NUMA *, NUMA *, l_int32, l_float32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The values in nax must be sorted in increasing order.
''' If, additionally, they are equally spaced, you can use
''' numaInterpolateEqxVal().
''' (2) Caller should check for valid return.
''' (3) Uses lagrangian interpolation.  See numaInterpolateEqxVal()
''' for formulas.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nax">[in] - numa of abscissa values</param>
'''  <param name="nay">[in] - numa of ordinate values, corresponding to nax</param>
'''  <param name="type">[in] - L_LINEAR_INTERP, L_QUADRATIC_INTERP</param>
'''  <param name="xval">[in] - </param>
'''  <param name="pyval">[out] - interpolated value</param>
'''   <returns>0 if OK, 1 on error e.g., if xval is outside range</returns>
Public Shared Function numaInterpolateArbxVal(
				ByVal nax as Numa, 
				ByVal nay as Numa, 
				ByVal type as Enumerations.L_INTERP, 
				ByVal xval as Single, 
				ByRef pyval as Single()) as Integer

	If IsNothing (nax) then Throw New ArgumentNullException  ("nax cannot be Nothing")
	If IsNothing (nay) then Throw New ArgumentNullException  ("nay cannot be Nothing")
	If IsNothing (xval) then Throw New ArgumentNullException  ("xval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaInterpolateArbxVal( nax.Pointer, nay.Pointer, type, xval, pyval)

	Return _Result
End Function

' SRC\numafunc1.c (1812, 1)
' numaInterpolateEqxInterval()
' numaInterpolateEqxInterval(l_float32, l_float32, NUMA *, l_int32, l_float32, l_float32, l_int32, NUMA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) Considering nasy as a function of x, the x values
''' are equally spaced.
''' (2) This creates nay (and optionally nax) of interpolated
''' values over the specified interval (x0, x1).
''' (3) If the interval (x0, x1) lies partially outside the array
''' nasy (as interpreted by startx and deltax), it is an
''' error and returns 1.
''' (4) Note that deltax is the intrinsic x-increment for the input
''' array nasy, whereas delx is the intrinsic x-increment for the
''' output interpolated array nay.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="startx">[in] - xval corresponding to first element in nas</param>
'''  <param name="deltax">[in] - x increment between array elements in nas</param>
'''  <param name="nasy">[in] - numa of ordinate values, assumed equally spaced</param>
'''  <param name="type">[in] - L_LINEAR_INTERP, L_QUADRATIC_INTERP</param>
'''  <param name="x0">[in] - start value of interval</param>
'''  <param name="x1">[in] - end value of interval</param>
'''  <param name="npts">[in] - number of points to evaluate function in interval</param>
'''  <param name="pnax">[out][optional] - array of x values in interval</param>
'''  <param name="pnay">[out] - array of y values in interval</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaInterpolateEqxInterval(
				ByVal startx as Single, 
				ByVal deltax as Single, 
				ByVal nasy as Numa, 
				ByVal type as Enumerations.L_INTERP, 
				ByVal x0 as Single, 
				ByVal x1 as Single, 
				ByVal npts as Integer, 
				ByRef pnax as Numa, 
				ByRef pnay as Numa) as Integer

	If IsNothing (startx) then Throw New ArgumentNullException  ("startx cannot be Nothing")
	If IsNothing (deltax) then Throw New ArgumentNullException  ("deltax cannot be Nothing")
	If IsNothing (nasy) then Throw New ArgumentNullException  ("nasy cannot be Nothing")
	If IsNothing (x0) then Throw New ArgumentNullException  ("x0 cannot be Nothing")
	If IsNothing (x1) then Throw New ArgumentNullException  ("x1 cannot be Nothing")

Dim pnaxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnax) Then pnaxPTR = pnax.Pointer
	Dim pnayPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnay) Then pnayPTR = pnay.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaInterpolateEqxInterval( startx, deltax, nasy.Pointer, type, x0, x1, npts, pnaxPTR, pnayPTR)
	if pnaxPTR <> IntPtr.Zero then pnax = new Numa(pnaxPTR)
	if pnayPTR <> IntPtr.Zero then pnay = new Numa(pnayPTR)

	Return _Result
End Function

' SRC\numafunc1.c (1900, 1)
' numaInterpolateArbxInterval()
' numaInterpolateArbxInterval(NUMA *, NUMA *, l_int32, l_float32, l_float32, l_int32, NUMA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) The values in nax must be sorted in increasing order.
''' If they are not sorted, we do it here, and complain.
''' (2) If the values in nax are equally spaced, you can use
''' numaInterpolateEqxInterval().
''' (3) Caller should check for valid return.
''' (4) We don't call numaInterpolateArbxVal() for each output
''' point, because that requires an O(n) search for
''' each point.  Instead, we do a single O(n) pass through
''' nax, saving the indices to be used for each output yval.
''' (5) Uses lagrangian interpolation.  See numaInterpolateEqxVal()
''' for formulas.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nax">[in] - numa of abscissa values</param>
'''  <param name="nay">[in] - numa of ordinate values, corresponding to nax</param>
'''  <param name="type">[in] - L_LINEAR_INTERP, L_QUADRATIC_INTERP</param>
'''  <param name="x0">[in] - start value of interval</param>
'''  <param name="x1">[in] - end value of interval</param>
'''  <param name="npts">[in] - number of points to evaluate function in interval</param>
'''  <param name="pnadx">[out][optional] - array of x values in interval</param>
'''  <param name="pnady">[out] - array of y values in interval</param>
'''   <returns>0 if OK, 1 on error e.g., if x0 or x1 is outside range</returns>
Public Shared Function numaInterpolateArbxInterval(
				ByVal nax as Numa, 
				ByVal nay as Numa, 
				ByVal type as Enumerations.L_INTERP, 
				ByVal x0 as Single, 
				ByVal x1 as Single, 
				ByVal npts as Integer, 
				ByRef pnadx as Numa, 
				ByRef pnady as Numa) as Integer

	If IsNothing (nax) then Throw New ArgumentNullException  ("nax cannot be Nothing")
	If IsNothing (nay) then Throw New ArgumentNullException  ("nay cannot be Nothing")
	If IsNothing (x0) then Throw New ArgumentNullException  ("x0 cannot be Nothing")
	If IsNothing (x1) then Throw New ArgumentNullException  ("x1 cannot be Nothing")

Dim pnadxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnadx) Then pnadxPTR = pnadx.Pointer
	Dim pnadyPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnady) Then pnadyPTR = pnady.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaInterpolateArbxInterval( nax.Pointer, nay.Pointer, type, x0, x1, npts, pnadxPTR, pnadyPTR)
	if pnadxPTR <> IntPtr.Zero then pnadx = new Numa(pnadxPTR)
	if pnadyPTR <> IntPtr.Zero then pnady = new Numa(pnadyPTR)

	Return _Result
End Function

' SRC\numafunc1.c (2061, 1)
' numaFitMax()
' numaFitMax(NUMA *, l_float32 *, NUMA *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' If %naloc is given, there is no requirement that the
''' data points are evenly spaced.  Lagrangian interpolation
''' handles that.  The only requirement is that the
''' data points are ordered so that the values in naloc
''' are either increasing or decreasing.  We test to make
''' sure that the sizes of na and naloc are equal, and it
''' is assumed that the correspondences %na[i] as a function
''' of %naloc[i] are properly arranged for all i.
''' The formula for Lagrangian interpolation through 3 data pts is
''' y(x) = y1(x-x2)(x-x3)/((x1-x2)(x1-x3)) +
''' y2(x-x1)(x-x3)/((x2-x1)(x2-x3)) +
''' y3(x-x1)(x-x2)/((x3-x1)(x3-x2))
''' Then the derivative, using the constants (c1,c2,c3) defined below,
''' is set to 0
''' y'(x) = 2x(c1+c2+c3) - c1(x2+x3) - c2(x1+x3) - c3(x1+x2) = 0
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - numa of ordinate values, to fit a max to</param>
'''  <param name="pmaxval">[out] - max value</param>
'''  <param name="naloc">[in][optional] - associated numa of abscissa values</param>
'''  <param name="pmaxloc">[out] - abscissa value that gives max value in na; if naloc == null, this is given as an interpolated index value</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function numaFitMax(
				ByVal na as Numa, 
				ByRef pmaxval as Single(), 
				ByVal naloc as Numa, 
				ByRef pmaxloc as Single()) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")

	Dim nalocPTR As IntPtr = IntPtr.Zero : If Not IsNothing(naloc) Then nalocPTR = naloc.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaFitMax( na.Pointer, pmaxval, nalocPTR, pmaxloc)

	Return _Result
End Function

' SRC\numafunc1.c (2166, 1)
' numaDifferentiateInterval()
' numaDifferentiateInterval(NUMA *, NUMA *, l_float32, l_float32, l_int32, NUMA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) The values in nax must be sorted in increasing order.
''' If they are not sorted, it is done in the interpolation
''' step, and a warning is issued.
''' (2) Caller should check for valid return.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nax">[in] - numa of abscissa values</param>
'''  <param name="nay">[in] - numa of ordinate values, corresponding to nax</param>
'''  <param name="x0">[in] - start value of interval</param>
'''  <param name="x1">[in] - end value of interval</param>
'''  <param name="npts">[in] - number of points to evaluate function in interval</param>
'''  <param name="pnadx">[out][optional] - array of x values in interval</param>
'''  <param name="pnady">[out] - array of derivatives in interval</param>
'''   <returns>0 if OK, 1 on error e.g., if x0 or x1 is outside range</returns>
Public Shared Function numaDifferentiateInterval(
				ByVal nax as Numa, 
				ByVal nay as Numa, 
				ByVal x0 as Single, 
				ByVal x1 as Single, 
				ByVal npts as Integer, 
				ByRef pnadx as Numa, 
				ByRef pnady as Numa) as Integer

	If IsNothing (nax) then Throw New ArgumentNullException  ("nax cannot be Nothing")
	If IsNothing (nay) then Throw New ArgumentNullException  ("nay cannot be Nothing")
	If IsNothing (x0) then Throw New ArgumentNullException  ("x0 cannot be Nothing")
	If IsNothing (x1) then Throw New ArgumentNullException  ("x1 cannot be Nothing")

Dim pnadxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnadx) Then pnadxPTR = pnadx.Pointer
	Dim pnadyPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnady) Then pnadyPTR = pnady.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaDifferentiateInterval( nax.Pointer, nay.Pointer, x0, x1, npts, pnadxPTR, pnadyPTR)
	if pnadxPTR <> IntPtr.Zero then pnadx = new Numa(pnadxPTR)
	if pnadyPTR <> IntPtr.Zero then pnady = new Numa(pnadyPTR)

	Return _Result
End Function

' SRC\numafunc1.c (2249, 1)
' numaIntegrateInterval()
' numaIntegrateInterval(NUMA *, NUMA *, l_float32, l_float32, l_int32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The values in nax must be sorted in increasing order.
''' If they are not sorted, it is done in the interpolation
''' step, and a warning is issued.
''' (2) Caller should check for valid return.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nax">[in] - numa of abscissa values</param>
'''  <param name="nay">[in] - numa of ordinate values, corresponding to nax</param>
'''  <param name="x0">[in] - start value of interval</param>
'''  <param name="x1">[in] - end value of interval</param>
'''  <param name="npts">[in] - number of points to evaluate function in interval</param>
'''  <param name="psum">[out] - integral of function over interval</param>
'''   <returns>0 if OK, 1 on error e.g., if x0 or x1 is outside range</returns>
Public Shared Function numaIntegrateInterval(
				ByVal nax as Numa, 
				ByVal nay as Numa, 
				ByVal x0 as Single, 
				ByVal x1 as Single, 
				ByVal npts as Integer, 
				ByRef psum as Single()) as Integer

	If IsNothing (nax) then Throw New ArgumentNullException  ("nax cannot be Nothing")
	If IsNothing (nay) then Throw New ArgumentNullException  ("nay cannot be Nothing")
	If IsNothing (x0) then Throw New ArgumentNullException  ("x0 cannot be Nothing")
	If IsNothing (x1) then Throw New ArgumentNullException  ("x1 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaIntegrateInterval( nax.Pointer, nay.Pointer, x0, x1, npts, psum)

	Return _Result
End Function

' SRC\numafunc1.c (2354, 1)
' numaSortGeneral()
' numaSortGeneral(NUMA *, NUMA **, NUMA **, NUMA **, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Sorting can be confusing.  Here's an array of five values with
''' the results shown for the 3 output arrays.
''' na   nasort   naindex   nainvert
''' -----------------------------------
''' 3   9   2   3
''' 4   6   3   2
''' 9   4   1   0
''' 6   3   0   1
''' 1   1   4   4
''' Note that naindex is a LUT into na for the sorted array values,
''' and nainvert directly gives the sorted index values for the
''' input array.  It is useful to view naindex is as a map
''' 0  --GT  2
''' 1  --GT  3
''' 2  --GT  1
''' 3  --GT  0
''' 4  --GT  4
''' and nainvert, the inverse of this map
''' 0  --GT  3
''' 1  --GT  2
''' 2  --GT  0
''' 3  --GT  1
''' 4  --GT  4
''' We can write these relations symbolically as
''' nasort[i] = na[naindex[i]]
''' na[i] = nasort[nainvert[i]]
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''  <param name="pnasort">[out][optional] - sorted numa</param>
'''  <param name="pnaindex">[out][optional] - index of elements in na associated with each element of nasort</param>
'''  <param name="pnainvert">[out][optional] - index of elements in nasort associated with each element of na</param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING or L_SORT_DECREASING</param>
'''  <param name="sorttype">[in] - L_SHELL_SORT or L_BIN_SORT</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaSortGeneral(
				ByVal na as Numa, 
				ByRef pnasort as Numa, 
				ByRef pnaindex as Numa, 
				ByRef pnainvert as Numa, 
				ByVal sortorder as Enumerations.L_SORT_CREASING, 
				ByVal sorttype as Enumerations.L_SORT) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")

Dim pnasortPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnasort) Then pnasortPTR = pnasort.Pointer
Dim pnaindexPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaindex) Then pnaindexPTR = pnaindex.Pointer
Dim pnainvertPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnainvert) Then pnainvertPTR = pnainvert.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaSortGeneral( na.Pointer, pnasortPTR, pnaindexPTR, pnainvertPTR, sortorder, sorttype)
	if pnasortPTR <> IntPtr.Zero then pnasort = new Numa(pnasortPTR)
	if pnaindexPTR <> IntPtr.Zero then pnaindex = new Numa(pnaindexPTR)
	if pnainvertPTR <> IntPtr.Zero then pnainvert = new Numa(pnainvertPTR)

	Return _Result
End Function

' SRC\numafunc1.c (2408, 1)
' numaSortAutoSelect()
' numaSortAutoSelect(NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) This does either a shell sort or a bin sort, depending on
''' the number of elements in nas and the dynamic range.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - input numa</param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING or L_SORT_DECREASING</param>
'''   <returns>naout output sorted numa, or NULL on error</returns>
Public Shared Function numaSortAutoSelect(
				ByVal nas as Numa, 
				ByVal sortorder as Enumerations.L_SORT_CREASING) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaSortAutoSelect( nas.Pointer, sortorder)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (2444, 1)
' numaSortIndexAutoSelect()
' numaSortIndexAutoSelect(NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) This does either a shell sort or a bin sort, depending on
''' the number of elements in nas and the dynamic range.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING or L_SORT_DECREASING</param>
'''   <returns>nad indices of nas, sorted by value in nas, or NULL on error</returns>
Public Shared Function numaSortIndexAutoSelect(
				ByVal nas as Numa, 
				ByVal sortorder as Enumerations.L_SORT_CREASING) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaSortIndexAutoSelect( nas.Pointer, sortorder)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (2480, 1)
' numaChooseSortType()
' numaChooseSortType(NUMA *) as l_int32
'''  <summary>
''' Notes
''' (1) This selects either a shell sort or a bin sort, depending on
''' the number of elements in nas and the dynamic range.
''' (2) If there are negative values in nas, it selects shell sort.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - to be sorted</param>
'''   <returns>sorttype L_SHELL_SORT or L_BIN_SORT, or UNDEF on error.</returns>
Public Shared Function numaChooseSortType(
				ByVal nas as Numa) as Integer

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaChooseSortType( nas.Pointer)

	Return _Result
End Function

' SRC\numafunc1.c (2531, 1)
' numaSort()
' numaSort(NUMA *, NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) Set naout = nain for in-place; otherwise, set naout = NULL.
''' (2) Source Shell sort, modified from KR, 2nd edition, p.62.
''' Slow but simple O(n logn) sort.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naout">[in] - output numa; can be NULL or equal to nain</param>
'''  <param name="nain">[in] - input numa</param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING or L_SORT_DECREASING</param>
'''   <returns>naout output sorted numa, or NULL on error</returns>
Public Shared Function numaSort(
				ByVal naout as Numa, 
				ByVal nain as Numa, 
				ByVal sortorder as Enumerations.L_SORT_CREASING) as Numa

	If IsNothing (naout) then Throw New ArgumentNullException  ("naout cannot be Nothing")
	If IsNothing (nain) then Throw New ArgumentNullException  ("nain cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaSort( naout.Pointer, nain.Pointer, sortorder)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (2593, 1)
' numaBinSort()
' numaBinSort(NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) Because this uses a bin sort with buckets of size 1, it
''' is not appropriate for sorting either small arrays or
''' arrays containing very large integer values.  For such
''' arrays, use a standard general sort function like
''' numaSort().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - of non-negative integers with a max that is typically less than 50,000</param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING or L_SORT_DECREASING</param>
'''   <returns>na sorted, or NULL on error</returns>
Public Shared Function numaBinSort(
				ByVal nas as Numa, 
				ByVal sortorder as Enumerations.L_SORT_CREASING) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaBinSort( nas.Pointer, sortorder)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (2621, 1)
' numaGetSortIndex()
' numaGetSortIndex(NUMA *, l_int32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING or L_SORT_DECREASING</param>
'''   <returns>na giving an array of indices that would sort the input array, or NULL on error</returns>
Public Shared Function numaGetSortIndex(
				ByVal na as Numa, 
				ByVal sortorder as Enumerations.L_SORT_CREASING) as Numa

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaGetSortIndex( na.Pointer, sortorder)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (2697, 1)
' numaGetBinSortIndex()
' numaGetBinSortIndex(NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) This creates an array (or lookup table) that contains
''' the sorted position of the elements in the input Numa.
''' (2) Because it uses a bin sort with buckets of size 1, it
''' is not appropriate for sorting either small arrays or
''' arrays containing very large integer values.  For such
''' arrays, use a standard general sort function like
''' numaGetSortIndex().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - of non-negative integers with a max that is typically less than 1,000,000</param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING or L_SORT_DECREASING</param>
'''   <returns>na sorted, or NULL on error</returns>
Public Shared Function numaGetBinSortIndex(
				ByVal nas as Numa, 
				ByVal sortorder as Enumerations.L_SORT_CREASING) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaGetBinSortIndex( nas.Pointer, sortorder)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (2770, 1)
' numaSortByIndex()
' numaSortByIndex(NUMA *, NUMA *) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="naindex">[in] - na that maps from the new numa to the input numa</param>
'''   <returns>nad sorted, or NULL on error</returns>
Public Shared Function numaSortByIndex(
				ByVal nas as Numa, 
				ByVal naindex as Numa) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")
	If IsNothing (naindex) then Throw New ArgumentNullException  ("naindex cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaSortByIndex( nas.Pointer, naindex.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (2812, 1)
' numaIsSorted()
' numaIsSorted(NUMA *, l_int32, l_int32 *) as l_int32
'''  <summary>
''' Notes
''' (1) This is a quick O(n) test if nas is sorted.  It is useful
''' in situations where the array is likely to be already
''' sorted, and a sort operation can be avoided.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING or L_SORT_DECREASING</param>
'''  <param name="psorted">[out] - 1 if sorted; 0 if not</param>
'''   <returns>1 if OK; 0 on error</returns>
Public Shared Function numaIsSorted(
				ByVal nas as Numa, 
				ByVal sortorder as Enumerations.L_SORT_CREASING, 
				ByRef psorted as Integer) as Integer

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaIsSorted( nas.Pointer, sortorder, psorted)

	Return _Result
End Function

' SRC\numafunc1.c (2859, 1)
' numaSortPair()
' numaSortPair(NUMA *, NUMA *, l_int32, NUMA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) This function sorts the two input arrays, nax and nay,
''' together, using nax as the key for sorting.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nax">[in] - input arrays</param>
'''  <param name="nay">[in] - input arrays</param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING or L_SORT_DECREASING</param>
'''  <param name="pnasx">[out] - sorted</param>
'''  <param name="pnasy">[out] - sorted exactly in order of nasx</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaSortPair(
				ByVal nax as Numa, 
				ByVal nay as Numa, 
				ByVal sortorder as Enumerations.L_SORT_CREASING, 
				ByRef pnasx as Numa, 
				ByRef pnasy as Numa) as Integer

	If IsNothing (nax) then Throw New ArgumentNullException  ("nax cannot be Nothing")
	If IsNothing (nay) then Throw New ArgumentNullException  ("nay cannot be Nothing")

	Dim pnasxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnasx) Then pnasxPTR = pnasx.Pointer
	Dim pnasyPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnasy) Then pnasyPTR = pnasy.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaSortPair( nax.Pointer, nay.Pointer, sortorder, pnasxPTR, pnasyPTR)
	if pnasxPTR <> IntPtr.Zero then pnasx = new Numa(pnasxPTR)
	if pnasyPTR <> IntPtr.Zero then pnasy = new Numa(pnasyPTR)

	Return _Result
End Function

' SRC\numafunc1.c (2910, 1)
' numaInvertMap()
' numaInvertMap(NUMA *) as NUMA *
'''  <summary>
''' Notes
''' (1) This requires that nas contain each integer from 0 to n-1.
''' The array is typically an index array into a sort or permutation
''' of another array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''   <returns>nad the inverted map, or NULL on error or if not invertible</returns>
Public Shared Function numaInvertMap(
				ByVal nas as Numa) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaInvertMap( nas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (2969, 1)
' numaPseudorandomSequence()
' numaPseudorandomSequence(l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) This uses the Durstenfeld shuffle.
''' See http//en.wikipedia.org/wiki/Fisherâ€“Yates_shuffle.
''' Result is a pseudorandom permutation of the sequence of integers
''' from 0 to size - 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="size">[in] - of sequence</param>
'''  <param name="seed">[in] - for random number generation</param>
'''   <returns>na pseudorandom on {0,...,size - 1}, or NULL on error</returns>
Public Shared Function numaPseudorandomSequence(
				ByVal size as Integer, 
				ByVal seed as Integer) as Numa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaPseudorandomSequence( size, seed)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (3008, 1)
' numaRandomPermutation()
' numaRandomPermutation(NUMA *, l_int32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - input array</param>
'''  <param name="seed">[in] - for random number generation</param>
'''   <returns>nas randomly shuffled array, or NULL on error</returns>
Public Shared Function numaRandomPermutation(
				ByVal nas as Numa, 
				ByVal seed as Integer) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaRandomPermutation( nas.Pointer, seed)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc1.c (3065, 1)
' numaGetRankValue()
' numaGetRankValue(NUMA *, l_float32, NUMA *, l_int32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Computes the rank value of a number in the %na, which is
''' the number that is a fraction %fract from the small
''' end of the sorted version of %na.
''' (2) If you do this multiple times for different rank values,
''' sort the array in advance and use that for %nasort;
''' if you're only calling this once, input %nasort == NULL.
''' (3) If %usebins == 1, this uses a bin sorting method.
''' Use this only where
''' the numbers are non-negative integers
''' there are over 100 numbers
''' the maximum value is less than about 50,000
''' (4) The advantage of using a bin sort is that it is O(n),
''' instead of O(nlogn) for general sort routines.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''  <param name="fract">[in] - use 0.0 for smallest, 1.0 for largest</param>
'''  <param name="nasort">[in][optional] - increasing sorted version of na</param>
'''  <param name="usebins">[in] - 0 for general sort; 1 for bin sort</param>
'''  <param name="pval">[out] - rank val</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function numaGetRankValue(
				ByVal na as Numa, 
				ByVal fract as Single, 
				ByVal nasort as Numa, 
				ByVal usebins as Integer, 
				ByRef pval as Single()) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")

	Dim nasortPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nasort) Then nasortPTR = nasort.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetRankValue( na.Pointer, fract, nasortPTR, usebins, pval)

	Return _Result
End Function

' SRC\numafunc1.c (3119, 1)
' numaGetMedian()
' numaGetMedian(NUMA *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Computes the median value of the numbers in the numa, by
''' sorting and finding the middle value in the sorted array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''  <param name="pval">[out] - median value</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function numaGetMedian(
				ByVal na as Numa, 
				ByRef pval as Single()) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetMedian( na.Pointer, pval)

	Return _Result
End Function

' SRC\numafunc1.c (3150, 1)
' numaGetBinnedMedian()
' numaGetBinnedMedian(NUMA *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Computes the median value of the numbers in the numa,
''' using bin sort and finding the middle value in the sorted array.
''' (2) See numaGetRankValue() for conditions on na for which
''' this should be used.  Otherwise, use numaGetMedian().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''  <param name="pval">[out] - integer median value</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function numaGetBinnedMedian(
				ByVal na as Numa, 
				ByRef pval as Integer) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetBinnedMedian( na.Pointer, pval)

	Return _Result
End Function

' SRC\numafunc1.c (3187, 1)
' numaGetMode()
' numaGetMode(NUMA *, l_float32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Computes the mode value of the numbers in the numa, by
''' sorting and finding the value of the number with the
''' largest count.
''' (2) Optionally, also returns that count.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''  <param name="pval">[out] - mode val</param>
'''  <param name="pcount">[out][optional] - mode count</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function numaGetMode(
				ByVal na as Numa, 
				ByRef pval as Single(), 
				ByRef pcount as Integer) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetMode( na.Pointer, pval, pcount)

	Return _Result
End Function

' SRC\numafunc1.c (3266, 1)
' numaGetMedianVariation()
' numaGetMedianVariation(NUMA *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Finds the median of the absolute value of the variation from
''' the median value in the array.  Why take the absolute value?
''' Consider the case where you have values equally distributed
''' about both sides of a median value.  Without taking the absolute
''' value of the differences, you will get 0 for the variation,
''' and this is not useful.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - source numa</param>
'''  <param name="pmedval">[out][optional] - median value</param>
'''  <param name="pmedvar">[out] - median variation from median val</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function numaGetMedianVariation(
				ByVal na as Numa, 
				ByRef pmedval as Single(), 
				ByRef pmedvar as Single()) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetMedianVariation( na.Pointer, pmedval, pmedvar)

	Return _Result
End Function

' SRC\numafunc1.c (3319, 1)
' numaJoin()
' numaJoin(NUMA *, NUMA *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) istart LT 0 is taken to mean 'read from the start' (istart = 0)
''' (2) iend LT 0 means 'read to the end'
''' (3) if nas == NULL, this is a no-op
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nad">[in] - dest numa; add to this one</param>
'''  <param name="nas">[in][optional] - source numa; add from this one</param>
'''  <param name="istart">[in] - starting index in nas</param>
'''  <param name="iend">[in] - ending index in nas; use -1 to cat all</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaJoin(
				ByVal nad as Numa, 
				ByVal nas as Numa, 
				ByVal istart as Integer, 
				ByVal iend as Integer) as Integer

	If IsNothing (nad) then Throw New ArgumentNullException  ("nad cannot be Nothing")

	Dim nasPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nas) Then nasPTR = nas.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaJoin( nad.Pointer, nasPTR, istart, iend)

	Return _Result
End Function

' SRC\numafunc1.c (3368, 1)
' numaaJoin()
' numaaJoin(NUMAA *, NUMAA *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) istart LT 0 is taken to mean 'read from the start' (istart = 0)
''' (2) iend LT 0 means 'read to the end'
''' (3) if naas == NULL, this is a no-op
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naad">[in] - dest naa; add to this one</param>
'''  <param name="naas">[in][optional] - source naa; add from this one</param>
'''  <param name="istart">[in] - starting index in nas</param>
'''  <param name="iend">[in] - ending index in naas; use -1 to cat all</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaaJoin(
				ByVal naad as Numaa, 
				ByVal naas as Numaa, 
				ByVal istart as Integer, 
				ByVal iend as Integer) as Integer

	If IsNothing (naad) then Throw New ArgumentNullException  ("naad cannot be Nothing")

	Dim naasPTR As IntPtr = IntPtr.Zero : If Not IsNothing(naas) Then naasPTR = naas.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaaJoin( naad.Pointer, naasPTR, istart, iend)

	Return _Result
End Function

' SRC\numafunc1.c (3416, 1)
' numaaFlattenToNuma()
' numaaFlattenToNuma(NUMAA *) as NUMA *
'''  <summary>
''' Notes
''' (1) This 'flattens' the Numaa to a Numa, by joining successively
''' each Numa in the Numaa.
''' (2) It doesn't make any assumptions about the location of the
''' Numas in the Numaa array, unlike most Numaa functions.
''' (3) It leaves the input Numaa unchanged.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa">[in] - </param>
'''   <returns>numa, or NULL on error</returns>
Public Shared Function numaaFlattenToNuma(
				ByVal naa as Numaa) as Numa

	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaaFlattenToNuma( naa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

#End Region
#Region "SRC\numafunc2.c"
' SRC\numafunc2.c (165, 1)
' numaErode()
' numaErode(NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The structuring element (sel) is linear, all "hits"
''' (2) If size == 1, this returns a copy
''' (3) General comment.  The morphological operations are equivalent
''' to those that would be performed on a 1-dimensional fpix.
''' However, because we have not implemented morphological
''' operations on fpix, we do this here.  Because it is only
''' 1 dimensional, there is no reason to use the more
''' complicated van Herk/Gil-Werman algorithm, and we do it
''' by brute force.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="size">[in] - of sel; greater than 0, odd; origin implicitly in center</param>
'''   <returns>nad eroded, or NULL on error</returns>
Public Shared Function numaErode(
				ByVal nas as Numa, 
				ByVal size as Integer) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaErode( nas.Pointer, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (233, 1)
' numaDilate()
' numaDilate(NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The structuring element (sel) is linear, all "hits"
''' (2) If size == 1, this returns a copy
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="size">[in] - of sel; greater than 0, odd; origin implicitly in center</param>
'''   <returns>nad dilated, or NULL on error</returns>
Public Shared Function numaDilate(
				ByVal nas as Numa, 
				ByVal size as Integer) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaDilate( nas.Pointer, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (301, 1)
' numaOpen()
' numaOpen(NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The structuring element (sel) is linear, all "hits"
''' (2) If size == 1, this returns a copy
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="size">[in] - of sel; greater than 0, odd; origin implicitly in center</param>
'''   <returns>nad opened, or NULL on error</returns>
Public Shared Function numaOpen(
				ByVal nas as Numa, 
				ByVal size as Integer) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaOpen( nas.Pointer, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (347, 1)
' numaClose()
' numaClose(NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The structuring element (sel) is linear, all "hits"
''' (2) If size == 1, this returns a copy
''' (3) We add a border before doing this operation, for the same
''' reason that we add a border to a pix before doing a safe closing.
''' Without the border, a small component near the border gets
''' clipped at the border on dilation, and can be entirely removed
''' by the following erosion, violating the basic extensivity
''' property of closing.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="size">[in] - of sel; greater than 0, odd; origin implicitly in center</param>
'''   <returns>nad opened, or NULL on error</returns>
Public Shared Function numaClose(
				ByVal nas as Numa, 
				ByVal size as Integer) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaClose( nas.Pointer, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (394, 1)
' numaTransform()
' numaTransform(NUMA *, l_float32, l_float32) as NUMA *
'''  <summary>
''' Notes
''' (1) Each number is shifted before scaling.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="shift">[in] - add this to each number</param>
'''  <param name="scale">[in] - multiply each number by this</param>
'''   <returns>nad with all values shifted and scaled, or NULL on error</returns>
Public Shared Function numaTransform(
				ByVal nas as Numa, 
				ByVal shift as Single, 
				ByVal scale as Single) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")
	If IsNothing (shift) then Throw New ArgumentNullException  ("shift cannot be Nothing")
	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaTransform( nas.Pointer, shift, scale)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (431, 1)
' numaSimpleStats()
' numaSimpleStats(NUMA *, l_int32, l_int32, l_float32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - input numa</param>
'''  <param name="first">[in] - first element to use</param>
'''  <param name="last">[in] - last element to use; 0 to go to the end</param>
'''  <param name="pmean">[out][optional] - mean value</param>
'''  <param name="pvar">[out][optional] - variance</param>
'''  <param name="prvar">[out][optional] - rms deviation from the mean</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaSimpleStats(
				ByVal na as Numa, 
				ByVal first as Integer, 
				ByVal last as Integer, 
				ByRef pmean as Single(), 
				ByRef pvar as Single(), 
				ByRef prvar as Single()) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaSimpleStats( na.Pointer, first, last, pmean, pvar, prvar)

	Return _Result
End Function

' SRC\numafunc2.c (511, 1)
' numaWindowedStats()
' numaWindowedStats(NUMA *, l_int32, NUMA **, NUMA **, NUMA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) This is a high-level convenience function for calculating
''' any or all of these derived arrays.
''' (2) These statistical measures over the values in the
''' rectangular window are
''' ~ average value [x]  (nam)
''' ~ average squared value [xx] (nams)
''' ~ variance [(x - [x])(x - [x])] = [xx] - [x][x]  (nav)
''' ~ square-root of variance (narv)
''' where the brackets [ .. ] indicate that the average value is
''' to be taken over the window.
''' (3) Note that the variance is just the mean square difference from
''' the mean value; and the square root of the variance is the
''' root mean square difference from the mean, sometimes also
''' called the 'standard deviation'.
''' (4) Internally, use mirrored borders to handle values near the
''' end of each array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - input numa</param>
'''  <param name="wc">[in] - half width of the window</param>
'''  <param name="pnam">[out][optional] - mean value in window</param>
'''  <param name="pnams">[out][optional] - mean square value in window</param>
'''  <param name="pnav">[out][optional] - variance in window</param>
'''  <param name="pnarv">[out][optional] - rms deviation from the mean</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaWindowedStats(
				ByVal nas as Numa, 
				ByVal wc as Integer, 
				ByRef pnam as Numa, 
				ByRef pnams as Numa, 
				ByRef pnav as Numa, 
				ByRef pnarv as Numa) as Integer

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")

Dim pnamPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnam) Then pnamPTR = pnam.Pointer
Dim pnamsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnams) Then pnamsPTR = pnams.Pointer
Dim pnavPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnav) Then pnavPTR = pnav.Pointer
Dim pnarvPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnarv) Then pnarvPTR = pnarv.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaWindowedStats( nas.Pointer, wc, pnamPTR, pnamsPTR, pnavPTR, pnarvPTR)
	if pnamPTR <> IntPtr.Zero then pnam = new Numa(pnamPTR)
	if pnamsPTR <> IntPtr.Zero then pnams = new Numa(pnamsPTR)
	if pnavPTR <> IntPtr.Zero then pnav = new Numa(pnavPTR)
	if pnarvPTR <> IntPtr.Zero then pnarv = new Numa(pnarvPTR)

	Return _Result
End Function

' SRC\numafunc2.c (562, 1)
' numaWindowedMean()
' numaWindowedMean(NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) This is a convolution.  The window has width = 2  %wc + 1.
''' (2) We add a mirrored border of size %wc to each end of the array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="wc">[in] - half width of the convolution window</param>
'''   <returns>nad after low-pass filtering, or NULL on error</returns>
Public Shared Function numaWindowedMean(
				ByVal nas as Numa, 
				ByVal wc as Integer) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaWindowedMean( nas.Pointer, wc)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (622, 1)
' numaWindowedMeanSquare()
' numaWindowedMeanSquare(NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The window has width = 2  %wc + 1.
''' (2) We add a mirrored border of size %wc to each end of the array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="wc">[in] - half width of the window</param>
'''   <returns>nad containing windowed mean square values, or NULL on error</returns>
Public Shared Function numaWindowedMeanSquare(
				ByVal nas as Numa, 
				ByVal wc as Integer) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaWindowedMeanSquare( nas.Pointer, wc)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (690, 1)
' numaWindowedVariance()
' numaWindowedVariance(NUMA *, NUMA *, NUMA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) The numas of windowed mean and mean square are precomputed,
''' using numaWindowedMean() and numaWindowedMeanSquare().
''' (2) Either or both of the variance and square-root of variance
''' are returned, where the variance is the average over the
''' window of the mean square difference of the pixel value
''' from the mean
''' [(x - [x])(x - [x])] = [xx] - [x][x]
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nam">[in] - windowed mean values</param>
'''  <param name="nams">[in] - windowed mean square values</param>
'''  <param name="pnav">[out][optional] - numa of variance -- the ms deviation from the mean</param>
'''  <param name="pnarv">[out][optional] - numa of rms deviation from the mean</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaWindowedVariance(
				ByVal nam as Numa, 
				ByVal nams as Numa, 
				ByRef pnav as Numa, 
				ByRef pnarv as Numa) as Integer

	If IsNothing (nam) then Throw New ArgumentNullException  ("nam cannot be Nothing")
	If IsNothing (nams) then Throw New ArgumentNullException  ("nams cannot be Nothing")

Dim pnavPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnav) Then pnavPTR = pnav.Pointer
Dim pnarvPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnarv) Then pnarvPTR = pnarv.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaWindowedVariance( nam.Pointer, nams.Pointer, pnavPTR, pnarvPTR)
	if pnavPTR <> IntPtr.Zero then pnav = new Numa(pnavPTR)
	if pnarvPTR <> IntPtr.Zero then pnarv = new Numa(pnarvPTR)

	Return _Result
End Function

' SRC\numafunc2.c (758, 1)
' numaWindowedMedian()
' numaWindowedMedian(NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The requested window has width = 2  %halfwin + 1.
''' (2) If the input nas has less then 3 elements, return a copy.
''' (3) If the filter is too small (%halfwin LT= 0), return a copy.
''' (4) If the filter is too large, it is reduced in size.
''' (5) We add a mirrored border of size %halfwin to each end of
''' the array to simplify the calculation by avoiding end-effects.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - </param>
'''  <param name="halfwin">[in] - half width of window over which the median is found</param>
'''   <returns>nad after windowed median filtering, or NULL on error</returns>
Public Shared Function numaWindowedMedian(
				ByVal nas as Numa, 
				ByVal halfwin as Integer) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaWindowedMedian( nas.Pointer, halfwin)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (807, 1)
' numaConvertToInt()
' numaConvertToInt(NUMA *) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - source numa</param>
'''   <returns>na with all values rounded to nearest integer, or NULL on error</returns>
Public Shared Function numaConvertToInt(
				ByVal nas as Numa) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaConvertToInt( nas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (859, 1)
' numaMakeHistogram()
' numaMakeHistogram(NUMA *, l_int32, l_int32 *, l_int32 *) as NUMA *
'''  <summary>
''' Notes
''' (1) This simple interface is designed for integer data.
''' The bins are of integer width and start on integer boundaries,
''' so the results on float data will not have high precision.
''' (2) Specify the max number of input bins.   Then %binsize,
''' the size of bins necessary to accommodate the input data,
''' is returned.  It is one of the sequence
''' {1, 2, 5, 10, 20, 50, ...}.
''' (3) If binstart is given, all values are accommodated,
''' and the min value of the starting bin is returned.
''' Otherwise, all negative values are discarded and
''' the histogram bins start at 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="maxbins">[in] - max number of histogram bins</param>
'''  <param name="pbinsize">[out] - size of histogram bins</param>
'''  <param name="pbinstart">[out][optional] - start val of minimum bin; input NULL to force start at 0</param>
'''   <returns>na consisiting of histogram of integerized values, or NULL on error.</returns>
Public Shared Function numaMakeHistogram(
				ByVal na as Numa, 
				ByVal maxbins as Integer, 
				ByRef pbinsize as Integer, 
				ByRef pbinstart as Integer) as Numa

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaMakeHistogram( na.Pointer, maxbins, pbinsize, pbinstart)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (971, 1)
' numaMakeHistogramAuto()
' numaMakeHistogramAuto(NUMA *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) This simple interface is designed for accurate binning
''' of both integer and float data.
''' (2) If the array data is integers, and the range of integers
''' is smaller than %maxbins, they are binned as they fall,
''' with binsize = 1.
''' (3) If the range of data, (maxval - minval), is larger than
''' %maxbins, or if the data is floats, they are binned into
''' exactly %maxbins bins.
''' (4) Unlike numaMakeHistogram(), these bins in general have
''' non-integer location and width, even for integer data.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - numa of floats; these may be integers</param>
'''  <param name="maxbins">[in] - max number of histogram bins; GT= 1</param>
'''   <returns>na consisiting of histogram of quantized float values, or NULL on error.</returns>
Public Shared Function numaMakeHistogramAuto(
				ByVal na as Numa, 
				ByVal maxbins as Integer) as Numa

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaMakeHistogramAuto( na.Pointer, maxbins)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (1055, 1)
' numaMakeHistogramClipped()
' numaMakeHistogramClipped(NUMA *, l_float32, l_float32) as NUMA *
'''  <summary>
''' Notes
''' (1) This simple function generates a histogram of values
''' from na, discarding all values LT 0.0 or greater than
''' min(%maxsize, maxval), where maxval is the maximum value in na.
''' The histogram data is put in bins of size delx = %binsize,
''' starting at x = 0.0.  We use as many bins as are
''' needed to hold the data.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - </param>
'''  <param name="binsize">[in] - typically 1.0</param>
'''  <param name="maxsize">[in] - of histogram ordinate</param>
'''   <returns>na histogram of bins of size %binsize, starting with the na[0] (x = 0.0 and going up to a maximum of x = %maxsize, by increments of %binsize), or NULL on error</returns>
Public Shared Function numaMakeHistogramClipped(
				ByVal na as Numa, 
				ByVal binsize as Single, 
				ByVal maxsize as Single) as Numa

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If IsNothing (binsize) then Throw New ArgumentNullException  ("binsize cannot be Nothing")
	If IsNothing (maxsize) then Throw New ArgumentNullException  ("maxsize cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaMakeHistogramClipped( na.Pointer, binsize, maxsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (1104, 1)
' numaRebinHistogram()
' numaRebinHistogram(NUMA *, l_int32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - input histogram</param>
'''  <param name="newsize">[in] - number of old bins contained in each new bin</param>
'''   <returns>nad more coarsely re-binned histogram, or NULL on error</returns>
Public Shared Function numaRebinHistogram(
				ByVal nas as Numa, 
				ByVal newsize as Integer) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaRebinHistogram( nas.Pointer, newsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (1153, 1)
' numaNormalizeHistogram()
' numaNormalizeHistogram(NUMA *, l_float32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - input histogram</param>
'''  <param name="tsum">[in] - target sum of all numbers in dest histogram; e.g., use %tsum= 1.0 if this represents a probability distribution</param>
'''   <returns>nad normalized histogram, or NULL on error</returns>
Public Shared Function numaNormalizeHistogram(
				ByVal nas as Numa, 
				ByVal tsum as Single) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")
	If IsNothing (tsum) then Throw New ArgumentNullException  ("tsum cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaNormalizeHistogram( nas.Pointer, tsum)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (1235, 1)
' numaGetStatsUsingHistogram()
' numaGetStatsUsingHistogram(NUMA *, l_int32, l_float32 *, l_float32 *, l_float32 *, l_float32 *, l_float32 *, l_float32, l_float32 *, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) This is a simple interface for gathering statistics
''' from a numa, where a histogram is used 'under the covers'
''' to avoid sorting if a rank value is requested.  In that case,
''' by using a histogram we are trading speed for accuracy, because
''' the values in %na are quantized to the center of a set of bins.
''' (2) If the median, other rank value, or histogram are not requested,
''' the calculation is all performed on the input Numa.
''' (3) The variance is the average of the square of the
''' difference from the mean.  The median is the value in na
''' with rank 0.5.
''' (4) There are two situations where this gives rank results with
''' accuracy comparable to computing stastics directly on the input
''' data, without binning into a histogram
''' (a) the data is integers and the range of data is less than
''' %maxbins, and
''' (b) the data is floats and the range is small compared to
''' %maxbins, so that the binsize is much less than 1.
''' (5) If a histogram is used and the numbers in the Numa extend
''' over a large range, you can limit the required storage by
''' specifying the maximum number of bins in the histogram.
''' Use %maxbins == 0 to force the bin size to be 1.
''' (6) This optionally returns the median and one arbitrary rank value.
''' If you need several rank values, return the histogram and use
''' numaHistogramGetValFromRank(nah, rank, rval)
''' multiple times.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - an arbitrary set of numbers; not ordered and not a histogram</param>
'''  <param name="maxbins">[in] - the maximum number of bins to be allowed in the histogram; use an integer larger than the largest number in %na for consecutive integer bins</param>
'''  <param name="pmin">[out][optional] - min value of set</param>
'''  <param name="pmax">[out][optional] - max value of set</param>
'''  <param name="pmean">[out][optional] - mean value of set</param>
'''  <param name="pvariance">[out][optional] - variance</param>
'''  <param name="pmedian">[out][optional] - median value of set</param>
'''  <param name="rank">[in] - in [0.0 ... 1.0]; median has a rank 0.5; ignored if rval == NULL</param>
'''  <param name="prval">[out][optional] - value in na corresponding to %rank</param>
'''  <param name="phisto">[out][optional] - Numa histogram; use NULL to prevent</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaGetStatsUsingHistogram(
				ByVal na as Numa, 
				ByVal maxbins as Integer, 
				ByRef pmin as Single(), 
				ByRef pmax as Single(), 
				ByRef pmean as Single(), 
				ByRef pvariance as Single(), 
				ByRef pmedian as Single(), 
				ByVal rank as Single, 
				ByRef prval as Single(), 
				ByRef phisto as Numa) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If IsNothing (rank) then Throw New ArgumentNullException  ("rank cannot be Nothing")

Dim phistoPTR As IntPtr = IntPtr.Zero : If Not IsNothing(phisto) Then phistoPTR = phisto.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetStatsUsingHistogram( na.Pointer, maxbins, pmin, pmax, pmean, pvariance, pmedian, rank, prval, phistoPTR)
	if phistoPTR <> IntPtr.Zero then phisto = new Numa(phistoPTR)

	Return _Result
End Function

' SRC\numafunc2.c (1326, 1)
' numaGetHistogramStats()
' numaGetHistogramStats(NUMA *, l_float32, l_float32, l_float32 *, l_float32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If the histogram represents the relation y(x), the
''' computed values that are returned are the x values.
''' These are NOT the bucket indices i; they are related to the
''' bucket indices by
''' x(i) = startx + i  deltax
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nahisto">[in] - histogram y(x(i)), i = 0 ... nbins - 1</param>
'''  <param name="startx">[in] - x value of first bin x(0)</param>
'''  <param name="deltax">[in] - x increment between bins; the bin size; x(1) - x(0)</param>
'''  <param name="pxmean">[out][optional] - mean value of histogram</param>
'''  <param name="pxmedian">[out][optional] - median value of histogram</param>
'''  <param name="pxmode">[out][optional] - mode value of histogram xmode = x(imode), where y(xmode) GT= y(x(i)) for all i != imode</param>
'''  <param name="pxvariance">[out][optional] - variance of x</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaGetHistogramStats(
				ByVal nahisto as Numa, 
				ByVal startx as Single, 
				ByVal deltax as Single, 
				ByRef pxmean as Single(), 
				ByRef pxmedian as Single(), 
				ByRef pxmode as Single(), 
				ByRef pxvariance as Single()) as Integer

	If IsNothing (nahisto) then Throw New ArgumentNullException  ("nahisto cannot be Nothing")
	If IsNothing (startx) then Throw New ArgumentNullException  ("startx cannot be Nothing")
	If IsNothing (deltax) then Throw New ArgumentNullException  ("deltax cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetHistogramStats( nahisto.Pointer, startx, deltax, pxmean, pxmedian, pxmode, pxvariance)

	Return _Result
End Function

' SRC\numafunc2.c (1375, 1)
' numaGetHistogramStatsOnInterval()
' numaGetHistogramStatsOnInterval(NUMA *, l_float32, l_float32, l_int32, l_int32, l_float32 *, l_float32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If the histogram represents the relation y(x), the
''' computed values that are returned are the x values.
''' These are NOT the bucket indices i; they are related to the
''' bucket indices by
''' x(i) = startx + i  deltax
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nahisto">[in] - histogram y(x(i)), i = 0 ... nbins - 1</param>
'''  <param name="startx">[in] - x value of first bin x(0)</param>
'''  <param name="deltax">[in] - x increment between bins; the bin size; x(1) - x(0)</param>
'''  <param name="ifirst">[in] - first bin to use for collecting stats</param>
'''  <param name="ilast">[in] - last bin for collecting stats; use 0 to go to the end</param>
'''  <param name="pxmean">[out][optional] - mean value of histogram</param>
'''  <param name="pxmedian">[out][optional] - median value of histogram</param>
'''  <param name="pxmode">[out][optional] - mode value of histogram xmode = x(imode), where y(xmode) GT= y(x(i)) for all i != imode</param>
'''  <param name="pxvariance">[out][optional] - variance of x</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaGetHistogramStatsOnInterval(
				ByVal nahisto as Numa, 
				ByVal startx as Single, 
				ByVal deltax as Single, 
				ByVal ifirst as Integer, 
				ByVal ilast as Integer, 
				ByRef pxmean as Single(), 
				ByRef pxmedian as Single(), 
				ByRef pxmode as Single(), 
				ByRef pxvariance as Single()) as Integer

	If IsNothing (nahisto) then Throw New ArgumentNullException  ("nahisto cannot be Nothing")
	If IsNothing (startx) then Throw New ArgumentNullException  ("startx cannot be Nothing")
	If IsNothing (deltax) then Throw New ArgumentNullException  ("deltax cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetHistogramStatsOnInterval( nahisto.Pointer, startx, deltax, ifirst, ilast, pxmean, pxmedian, pxmode, pxvariance)

	Return _Result
End Function

' SRC\numafunc2.c (1462, 1)
' numaMakeRankFromHistogram()
' numaMakeRankFromHistogram(l_float32, l_float32, NUMA *, l_int32, NUMA **, NUMA **) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="startx">[in] - xval corresponding to first element in nay</param>
'''  <param name="deltax">[in] - x increment between array elements in nay</param>
'''  <param name="nasy">[in] - input histogram, assumed equally spaced</param>
'''  <param name="npts">[in] - number of points to evaluate rank function</param>
'''  <param name="pnax">[out][optional] - array of x values in range</param>
'''  <param name="pnay">[out] - rank array of specified npts</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaMakeRankFromHistogram(
				ByVal startx as Single, 
				ByVal deltax as Single, 
				ByVal nasy as Numa, 
				ByVal npts as Integer, 
				ByRef pnax as Numa, 
				ByRef pnay as Numa) as Integer

	If IsNothing (startx) then Throw New ArgumentNullException  ("startx cannot be Nothing")
	If IsNothing (deltax) then Throw New ArgumentNullException  ("deltax cannot be Nothing")
	If IsNothing (nasy) then Throw New ArgumentNullException  ("nasy cannot be Nothing")

Dim pnaxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnax) Then pnaxPTR = pnax.Pointer
	Dim pnayPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnay) Then pnayPTR = pnay.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaMakeRankFromHistogram( startx, deltax, nasy.Pointer, npts, pnaxPTR, pnayPTR)
	if pnaxPTR <> IntPtr.Zero then pnax = new Numa(pnaxPTR)
	if pnayPTR <> IntPtr.Zero then pnay = new Numa(pnayPTR)

	Return _Result
End Function

' SRC\numafunc2.c (1530, 1)
' numaHistogramGetRankFromVal()
' numaHistogramGetRankFromVal(NUMA *, l_float32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If we think of the histogram as a function y(x), normalized
''' to 1, for a given input value of x, this computes the
''' rank of x, which is the integral of y(x) from the start
''' value of x to the input value.
''' (2) This function only makes sense when applied to a Numa that
''' is a histogram.  The values in the histogram can be ints and
''' floats, and are computed as floats.  The rank is returned
''' as a float between 0.0 and 1.0.
''' (3) The numa parameters startx and binsize are used to
''' compute x from the Numa index i.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - histogram</param>
'''  <param name="rval">[in] - value of input sample for which we want the rank</param>
'''  <param name="prank">[out] - fraction of total samples below rval</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaHistogramGetRankFromVal(
				ByVal na as Numa, 
				ByVal rval as Single, 
				ByRef prank as Single()) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If IsNothing (rval) then Throw New ArgumentNullException  ("rval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaHistogramGetRankFromVal( na.Pointer, rval, prank)

	Return _Result
End Function

' SRC\numafunc2.c (1601, 1)
' numaHistogramGetValFromRank()
' numaHistogramGetValFromRank(NUMA *, l_float32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If we think of the histogram as a function y(x), this returns
''' the value x such that the integral of y(x) from the start
''' value to x gives the fraction 'rank' of the integral
''' of y(x) over all bins.
''' (2) This function only makes sense when applied to a Numa that
''' is a histogram.  The values in the histogram can be ints and
''' floats, and are computed as floats.  The val is returned
''' as a float, even though the buckets are of integer width.
''' (3) The numa parameters startx and binsize are used to
''' compute x from the Numa index i.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - histogram</param>
'''  <param name="rank">[in] - fraction of total samples</param>
'''  <param name="prval">[out] - approx. to the bin value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaHistogramGetValFromRank(
				ByVal na as Numa, 
				ByVal rank as Single, 
				ByRef prval as Single()) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If IsNothing (rank) then Throw New ArgumentNullException  ("rank cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaHistogramGetValFromRank( na.Pointer, rank, prval)

	Return _Result
End Function

' SRC\numafunc2.c (1681, 1)
' numaDiscretizeRankAndIntensity()
' numaDiscretizeRankAndIntensity(NUMA *, l_int32, NUMA **, NUMA **, NUMA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) We are inverting the rank(intensity) function to get
''' the intensity(rank) function at %nbins equally spaced
''' values of rank between 0.0 and 1.0.  We save integer values
''' for the intensity.
''' (2) We are using the word "intensity" to describe the type of
''' array values, but any array of non-negative numbers will work.
''' (3) The output arrays give the following mappings, where the
''' input is a normalized histogram of array values
''' array values  --GT  rank bin number  (narbin)
''' rank bin number  --GT  median array value in bin (nam)
''' array values  --GT  cumulative norm = rank  (nar)
''' rank bin number  --GT  array value at right bin edge (nabb)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - normalized histogram of probability density vs intensity</param>
'''  <param name="nbins">[in] - number of bins at which the rank is divided</param>
'''  <param name="pnarbin">[out][optional] - rank bin value vs intensity</param>
'''  <param name="pnam">[out][optional] - median intensity in a bin vs rank bin value, with %nbins of discretized rank values</param>
'''  <param name="pnar">[out][optional] - rank vs intensity; this is a cumulative norm histogram</param>
'''  <param name="pnabb">[out][optional] - intensity at the right bin boundary vs rank bin</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaDiscretizeRankAndIntensity(
				ByVal na as Numa, 
				ByVal nbins as Integer, 
				ByRef pnarbin as Numa, 
				ByRef pnam as Numa, 
				ByRef pnar as Numa, 
				ByRef pnabb as Numa) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")

Dim pnarbinPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnarbin) Then pnarbinPTR = pnarbin.Pointer
Dim pnamPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnam) Then pnamPTR = pnam.Pointer
Dim pnarPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnar) Then pnarPTR = pnar.Pointer
Dim pnabbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnabb) Then pnabbPTR = pnabb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaDiscretizeRankAndIntensity( na.Pointer, nbins, pnarbinPTR, pnamPTR, pnarPTR, pnabbPTR)
	if pnarbinPTR <> IntPtr.Zero then pnarbin = new Numa(pnarbinPTR)
	if pnamPTR <> IntPtr.Zero then pnam = new Numa(pnamPTR)
	if pnarPTR <> IntPtr.Zero then pnar = new Numa(pnarPTR)
	if pnabbPTR <> IntPtr.Zero then pnabb = new Numa(pnabbPTR)

	Return _Result
End Function

' SRC\numafunc2.c (1829, 1)
' numaGetRankBinValues()
' numaGetRankBinValues(NUMA *, l_int32, NUMA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) Simple interface for getting a binned rank representation
''' of an input array of values.  This returns two mappings
''' array value  --GT  rank bin number  (narbin)
''' rank bin number --GT  median array value in each rank bin (nam)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - just an array of values</param>
'''  <param name="nbins">[in] - number of bins at which the rank is divided</param>
'''  <param name="pnarbin">[out][optional] - rank bin value vs array value</param>
'''  <param name="pnam">[out][optional] - median intensity in a bin vs rank bin value, with %nbins of discretized rank values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaGetRankBinValues(
				ByVal na as Numa, 
				ByVal nbins as Integer, 
				ByRef pnarbin as Numa, 
				ByRef pnam as Numa) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")

Dim pnarbinPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnarbin) Then pnarbinPTR = pnarbin.Pointer
Dim pnamPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnam) Then pnamPTR = pnam.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaGetRankBinValues( na.Pointer, nbins, pnarbinPTR, pnamPTR)
	if pnarbinPTR <> IntPtr.Zero then pnarbin = new Numa(pnarbinPTR)
	if pnamPTR <> IntPtr.Zero then pnam = new Numa(pnamPTR)

	Return _Result
End Function

' SRC\numafunc2.c (1924, 1)
' numaSplitDistribution()
' numaSplitDistribution(NUMA *, l_float32, l_int32 *, l_float32 *, l_float32 *, l_float32 *, l_float32 *, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) This function is intended to be used on a distribution of
''' values that represent two sets, such as a histogram of
''' pixel values for an image with a fg and bg, and the goal
''' is to determine the averages of the two sets and the
''' best splitting point.
''' (2) The Otsu method finds a split point that divides the distribution
''' into two parts by maximizing a score function that is the
''' product of two terms
''' (a) the square of the difference of centroids, (ave1 - ave2)^2
''' (b) fract1  (1 - fract1)
''' where fract1 is the fraction in the lower distribution.
''' (3) This works well for images where the fg and bg are
''' each relatively homogeneous and well-separated in color.
''' However, if the actual fg and bg sets are very different
''' in size, and the bg is highly varied, as can occur in some
''' scanned document images, this will bias the split point
''' into the larger "bump" (i.e., toward the point where the
''' (b) term reaches its maximum of 0.25 at fract1 = 0.5.
''' To avoid this, we define a range of values near the
''' maximum of the score function, and choose the value within
''' this range such that the histogram itself has a minimum value.
''' The range is determined by scorefract we include all abscissa
''' values to the left and right of the value that maximizes the
''' score, such that the score stays above (1 - scorefract)  maxscore.
''' The intuition behind this modification is to try to find
''' a split point that both has a high variance score and is
''' at or near a minimum in the histogram, so that the histogram
''' slope is small at the split point.
''' (4) We normalize the score so that if the two distributions
''' were of equal size and at opposite ends of the numa, the
''' score would be 1.0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - histogram</param>
'''  <param name="scorefract">[in] - fraction of the max score, used to determine the range over which the histogram min is searched</param>
'''  <param name="psplitindex">[out][optional] - index for splitting</param>
'''  <param name="pave1">[out][optional] - average of lower distribution</param>
'''  <param name="pave2">[out][optional] - average of upper distribution</param>
'''  <param name="pnum1">[out][optional] - population of lower distribution</param>
'''  <param name="pnum2">[out][optional] - population of upper distribution</param>
'''  <param name="pnascore">[out][optional] - for debugging; otherwise use NULL</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaSplitDistribution(
				ByVal na as Numa, 
				ByVal scorefract as Single, 
				ByRef psplitindex as Integer, 
				ByRef pave1 as Single(), 
				ByRef pave2 as Single(), 
				ByRef pnum1 as Single(), 
				ByRef pnum2 as Single(), 
				ByRef pnascore as Numa) as Integer

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")
	If IsNothing (scorefract) then Throw New ArgumentNullException  ("scorefract cannot be Nothing")

Dim pnascorePTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnascore) Then pnascorePTR = pnascore.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaSplitDistribution( na.Pointer, scorefract, psplitindex, pave1, pave2, pnum1, pnum2, pnascorePTR)
	if pnascorePTR <> IntPtr.Zero then pnascore = new Numa(pnascorePTR)

	Return _Result
End Function

' SRC\numafunc2.c (2086, 1)
' grayHistogramsToEMD()
' grayHistogramsToEMD(NUMAA *, NUMAA *, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) The two numaas must be the same size and have corresponding
''' 256-element histograms.  Pairs do not need to be normalized
''' to the same sum.
''' (2) This is typically used on two sets of histograms from
''' corresponding tiles of two images.  The similarity of two
''' images can be found with the scoring function used in
''' pixCompareGrayByHisto()
''' score S = 1.0 - k  D, where
''' k is a constant, say in the range 5-10
''' D = EMD
''' for each tile; for multiple tiles, take the Min(S) over
''' the set of tiles to be the final score.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa1">[in] - two numaa, each with one or more 256-element histograms</param>
'''  <param name="naa2">[in] - two numaa, each with one or more 256-element histograms</param>
'''  <param name="pnad">[out] - nad of EM distances for each histogram</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function grayHistogramsToEMD(
				ByVal naa1 as Numaa, 
				ByVal naa2 as Numaa, 
				ByRef pnad as Numa) as Integer

	If IsNothing (naa1) then Throw New ArgumentNullException  ("naa1 cannot be Nothing")
	If IsNothing (naa2) then Throw New ArgumentNullException  ("naa2 cannot be Nothing")

	Dim pnadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnad) Then pnadPTR = pnad.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.grayHistogramsToEMD( naa1.Pointer, naa2.Pointer, pnadPTR)
	if pnadPTR <> IntPtr.Zero then pnad = new Numa(pnadPTR)

	Return _Result
End Function

' SRC\numafunc2.c (2152, 1)
' numaEarthMoverDistance()
' numaEarthMoverDistance(NUMA *, NUMA *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The two numas must have the same size.  They do not need to be
''' normalized to the same sum before applying the function.
''' (2) For a 1D discrete function, the implementation of the EMD
''' is trivial.  Just keep filling or emptying buckets in one numa
''' to match the amount in the other, moving sequentially along
''' both arrays.
''' (3) We divide the sum of the absolute value of everything moved
''' (by 1 unit at a time) by the sum of the numa (amount of "earth")
''' to get the average distance that the "earth" was moved.
''' This is the value returned here.
''' (4) The caller can do a further normalization, by the number of
''' buckets (minus 1), to get the EM distance as a fraction of
''' the maximum possible distance, which is n-1.  This fraction
''' is 1.0 for the situation where all the 'earth' in the first
''' array is at one end, and all in the second array is at the
''' other end.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na1">[in] - two numas of the same size, typically histograms</param>
'''  <param name="na2">[in] - two numas of the same size, typically histograms</param>
'''  <param name="pdist">[out] - EM distance</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaEarthMoverDistance(
				ByVal na1 as Numa, 
				ByVal na2 as Numa, 
				ByRef pdist as Single()) as Integer

	If IsNothing (na1) then Throw New ArgumentNullException  ("na1 cannot be Nothing")
	If IsNothing (na2) then Throw New ArgumentNullException  ("na2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaEarthMoverDistance( na1.Pointer, na2.Pointer, pdist)

	Return _Result
End Function

' SRC\numafunc2.c (2243, 1)
' grayInterHistogramStats()
' grayInterHistogramStats(NUMAA *, l_int32, NUMA **, NUMA **, NUMA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) The %naa has two or more 256-element numa histograms, which
''' are to be compared value-wise at each of the 256 gray levels.
''' The result are stats (mean, mean square, variance, root variance)
''' aggregated across the set of histograms, and each is output
''' as a 256 entry numa.  Think of these histograms as a matrix,
''' where each histogram is one row of the array.  The stats are
''' then aggregated column-wise, between the histograms.
''' (2) These stats are
''' ~ average value LTvGT  (nam)
''' ~ average squared value LTvvGT (nams)
''' ~ variance LT(v - LTvGT)(v - LTvGT)GT = LTvvGT - LTvGTLTvGT  (nav)
''' ~ square-root of variance (narv)
''' where the brackets LT .. GT indicate that the average value is
''' to be taken over each column of the array.
''' (3) The input histograms are optionally smoothed before these
''' statistical operations.
''' (4) The input histograms are normalized to a sum of 10000.  By
''' doing this, the resulting numbers are independent of the
''' number of samples used in building the individual histograms.
''' (5) A typical application is on a set of histograms from tiles
''' of an image, to distinguish between text/tables and photo
''' regions.  If the tiles are much larger than the text line
''' spacing, text/table regions typically have smaller variance
''' across tiles than photo regions.  For this application, it
''' may be useful to ignore values near white, which are large for
''' text and would magnify the variance due to variations in
''' illumination.  However, because the variance of a drawing or
''' a light photo can be similar to that of grayscale text, this
''' function is only a discriminator between darker photos/drawings
''' and light photos/text/line-graphics.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="naa">[in] - numaa with two or more 256-element histograms</param>
'''  <param name="wc">[in] - half-width of the smoothing window</param>
'''  <param name="pnam">[out][optional] - mean values</param>
'''  <param name="pnams">[out][optional] - mean square values</param>
'''  <param name="pnav">[out][optional] - variances</param>
'''  <param name="pnarv">[out][optional] - rms deviations from the mean</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function grayInterHistogramStats(
				ByVal naa as Numaa, 
				ByVal wc as Integer, 
				ByRef pnam as Numa, 
				ByRef pnams as Numa, 
				ByRef pnav as Numa, 
				ByRef pnarv as Numa) as Integer

	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")

Dim pnamPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnam) Then pnamPTR = pnam.Pointer
Dim pnamsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnams) Then pnamsPTR = pnams.Pointer
Dim pnavPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnav) Then pnavPTR = pnav.Pointer
Dim pnarvPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnarv) Then pnarvPTR = pnarv.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.grayInterHistogramStats( naa.Pointer, wc, pnamPTR, pnamsPTR, pnavPTR, pnarvPTR)
	if pnamPTR <> IntPtr.Zero then pnam = new Numa(pnamPTR)
	if pnamsPTR <> IntPtr.Zero then pnams = new Numa(pnamsPTR)
	if pnavPTR <> IntPtr.Zero then pnav = new Numa(pnavPTR)
	if pnarvPTR <> IntPtr.Zero then pnarv = new Numa(pnarvPTR)

	Return _Result
End Function

' SRC\numafunc2.c (2333, 1)
' numaFindPeaks()
' numaFindPeaks(NUMA *, l_int32, l_float32, l_float32) as NUMA *
'''  <summary>
''' Notes
''' (1) The returned na consists of sets of four numbers representing
''' the peak, in the following order
''' left edge; peak center; right edge; normalized peak area
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - source numa</param>
'''  <param name="nmax">[in] - max number of peaks to be found</param>
'''  <param name="fract1">[in] - min fraction of peak value</param>
'''  <param name="fract2">[in] - min slope</param>
'''   <returns>peak na, or NULL on error.</returns>
Public Shared Function numaFindPeaks(
				ByVal nas as Numa, 
				ByVal nmax as Integer, 
				ByVal fract1 as Single, 
				ByVal fract2 as Single) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")
	If IsNothing (fract1) then Throw New ArgumentNullException  ("fract1 cannot be Nothing")
	If IsNothing (fract2) then Throw New ArgumentNullException  ("fract2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaFindPeaks( nas.Pointer, nmax, fract1, fract2)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (2448, 1)
' numaFindExtrema()
' numaFindExtrema(NUMA *, l_float32, NUMA **) as NUMA *
'''  <summary>
''' Notes
''' (1) This returns a sequence of extrema (peaks and valleys).
''' (2) The algorithm is analogous to that for determining
''' mountain peaks.  Suppose we have a local peak, with
''' bumps on the side.  Under what conditions can we consider
''' those 'bumps' to be actual peaks?  The answer if the
''' bump is separated from the peak by a saddle that is at
''' least 500 feet below the bump.
''' (3) Operationally, suppose we are looking for a peak.
''' We are keeping the largest value we've seen since the
''' last valley, and are looking for a value that is delta
''' BELOW our current peak.  When we find such a value,
''' we label the peak, use the current value to label the
''' valley, and then do the same operation in reverse (looking
''' for a valley).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - input values</param>
'''  <param name="delta">[in] - relative amount to resolve peaks and valleys</param>
'''  <param name="pnav">[out][optional] - values of extrema</param>
'''   <returns>nad (locations of extrema, or NULL on error</returns>
Public Shared Function numaFindExtrema(
				ByVal nas as Numa, 
				ByVal delta as Single, 
				ByRef pnav as Numa) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")
	If IsNothing (delta) then Throw New ArgumentNullException  ("delta cannot be Nothing")

Dim pnavPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnav) Then pnavPTR = pnav.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaFindExtrema( nas.Pointer, delta, pnavPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnavPTR <> IntPtr.Zero then pnav = new Numa(pnavPTR)

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (2544, 1)
' numaCountReversals()
' numaCountReversals(NUMA *, l_float32, l_int32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The input numa is can be generated from pixExtractAlongLine().
''' If so, the x parameters can be used to find the reversal
''' frequency along a line.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - input values</param>
'''  <param name="minreversal">[in] - relative amount to resolve peaks and valleys</param>
'''  <param name="pnr">[out][optional] - number of reversals</param>
'''  <param name="pnrpl">[out] - ([optional] reversal density reversals/length</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaCountReversals(
				ByVal nas as Numa, 
				ByVal minreversal as Single, 
				ByRef pnr as Integer, 
				ByRef pnrpl as Single()) as Integer

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")
	If IsNothing (minreversal) then Throw New ArgumentNullException  ("minreversal cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaCountReversals( nas.Pointer, minreversal, pnr, pnrpl)

	Return _Result
End Function

' SRC\numafunc2.c (2606, 1)
' numaSelectCrossingThreshold()
' numaSelectCrossingThreshold(NUMA *, NUMA *, l_float32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) When a valid threshold is used, the number of crossings is
''' a maximum, because none are missed.  If no threshold intersects
''' all the crossings, the crossings must be determined with
''' numaCrossingsByPeaks().
''' (2) %estthresh is an input estimate of the threshold that should
''' be used.  We compute the crossings with 41 thresholds
''' (20 below and 20 above).  There is a range in which the
''' number of crossings is a maximum.  Return a threshold
''' in the center of this stable plateau of crossings.
''' This can then be used with numaCrossingsByThreshold()
''' to get a good estimate of crossing locations.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nax">[in][optional] - numa of abscissa values; can be NULL</param>
'''  <param name="nay">[in] - signal</param>
'''  <param name="estthresh">[in] - estimated pixel threshold for crossing e.g., for images, white LT--GT black; typ. ~120</param>
'''  <param name="pbestthresh">[out] - robust estimate of threshold to use</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaSelectCrossingThreshold(
				ByVal nax as Numa, 
				ByVal nay as Numa, 
				ByVal estthresh as Single, 
				ByRef pbestthresh as Single()) as Integer

	If IsNothing (nay) then Throw New ArgumentNullException  ("nay cannot be Nothing")
	If IsNothing (estthresh) then Throw New ArgumentNullException  ("estthresh cannot be Nothing")

	Dim naxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nax) Then naxPTR = nax.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.numaSelectCrossingThreshold( naxPTR, nay.Pointer, estthresh, pbestthresh)

	Return _Result
End Function

' SRC\numafunc2.c (2713, 1)
' numaCrossingsByThreshold()
' numaCrossingsByThreshold(NUMA *, NUMA *, l_float32) as NUMA *
'''  <summary>
''' Notes
''' (1) If nax == NULL, we use startx and delx from nay to compute
''' the crossing values in nad.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nax">[in][optional] - numa of abscissa values; can be NULL</param>
'''  <param name="nay">[in] - numa of ordinate values, corresponding to nax</param>
'''  <param name="thresh">[in] - threshold value for nay</param>
'''   <returns>nad abscissa pts at threshold, or NULL on error</returns>
Public Shared Function numaCrossingsByThreshold(
				ByVal nax as Numa, 
				ByVal nay as Numa, 
				ByVal thresh as Single) as Numa

	If IsNothing (nay) then Throw New ArgumentNullException  ("nay cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")

	Dim naxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nax) Then naxPTR = nax.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaCrossingsByThreshold( naxPTR, nay.Pointer, thresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (2778, 1)
' numaCrossingsByPeaks()
' numaCrossingsByPeaks(NUMA *, NUMA *, l_float32) as NUMA *
'''  <summary>
''' Notes
''' (1) If nax == NULL, we use startx and delx from nay to compute
''' the crossing values in nad.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nax">[in][optional] - numa of abscissa values</param>
'''  <param name="nay">[in] - numa of ordinate values, corresponding to nax</param>
'''  <param name="delta">[in] - parameter used to identify when a new peak can be found</param>
'''   <returns>nad abscissa pts at threshold, or NULL on error</returns>
Public Shared Function numaCrossingsByPeaks(
				ByVal nax as Numa, 
				ByVal nay as Numa, 
				ByVal delta as Single) as Numa

	If IsNothing (nay) then Throw New ArgumentNullException  ("nay cannot be Nothing")
	If IsNothing (delta) then Throw New ArgumentNullException  ("delta cannot be Nothing")

	Dim naxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nax) Then naxPTR = nax.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaCrossingsByPeaks( naxPTR, nay.Pointer, delta)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\numafunc2.c (2890, 1)
' numaEvalBestHaarParameters()
' numaEvalBestHaarParameters(NUMA *, l_float32, l_int32, l_int32, l_float32, l_float32, l_float32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This does a linear sweep of widths, evaluating at %nshift
''' shifts for each width, computing the score from a convolution
''' with a long comb, and finding the (width, shift) pair that
''' gives the maximum score.  The best width is the "half-wavelength"
''' of the signal.
''' (2) The convolving function is a comb of alternating values
''' +1 and -1  relweight, separated by the width and phased by
''' the shift.  This is similar to a Haar transform, except
''' there the convolution is performed with a square wave.
''' (3) The function is useful for finding the line spacing
''' and strength of line signal from pixel sum projections.
''' (4) The score is normalized to the size of nas divided by
''' the number of half-widths.  For image applications, the input is
''' typically an array of pixel projections, so one should
''' normalize by dividing the score by the image width in the
''' pixel projection direction.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - numa of non-negative signal values</param>
'''  <param name="relweight">[in] - relative weight of (-1 comb) / (+1 comb) contributions to the 'convolution'.  In effect, the convolution kernel is a comb consisting of alternating +1 and -weight.</param>
'''  <param name="nwidth">[in] - number of widths to consider</param>
'''  <param name="nshift">[in] - number of shifts to consider for each width</param>
'''  <param name="minwidth">[in] - smallest width to consider</param>
'''  <param name="maxwidth">[in] - largest width to consider</param>
'''  <param name="pbestwidth">[out] - width giving largest score</param>
'''  <param name="pbestshift">[out] - shift giving largest score</param>
'''  <param name="pbestscore">[out][optional] - convolution with "Haar"-like comb</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaEvalBestHaarParameters(
				ByVal nas as Numa, 
				ByVal relweight as Single, 
				ByVal nwidth as Integer, 
				ByVal nshift as Integer, 
				ByVal minwidth as Single, 
				ByVal maxwidth as Single, 
				ByRef pbestwidth as Single(), 
				ByRef pbestshift as Single(), 
				ByRef pbestscore as Single()) as Integer

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")
	If IsNothing (relweight) then Throw New ArgumentNullException  ("relweight cannot be Nothing")
	If IsNothing (minwidth) then Throw New ArgumentNullException  ("minwidth cannot be Nothing")
	If IsNothing (maxwidth) then Throw New ArgumentNullException  ("maxwidth cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaEvalBestHaarParameters( nas.Pointer, relweight, nwidth, nshift, minwidth, maxwidth, pbestwidth, pbestshift, pbestscore)

	Return _Result
End Function

' SRC\numafunc2.c (2975, 1)
' numaEvalHaarSum()
' numaEvalHaarSum(NUMA *, l_float32, l_float32, l_float32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This does a convolution with a comb of alternating values
''' +1 and -relweight, separated by the width and phased by the shift.
''' This is similar to a Haar transform, except that for Haar,
''' (1) the convolution kernel is symmetric about 0, so the
''' relweight is 1.0, and
''' (2) the convolution is performed with a square wave.
''' (2) The score is normalized to the size of nas divided by
''' twice the "width".  For image applications, the input is
''' typically an array of pixel projections, so one should
''' normalize by dividing the score by the image width in the
''' pixel projection direction.
''' (3) To get a Haar-like result, use relweight = 1.0.  For detecting
''' signals where you expect every other sample to be close to
''' zero, as with barcodes or filtered text lines, you can
''' use relweight GT 1.0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - numa of non-negative signal values</param>
'''  <param name="width">[in] - distance between +1 and -1 in convolution comb</param>
'''  <param name="shift">[in] - phase of the comb location of first +1</param>
'''  <param name="relweight">[in] - relative weight of (-1 comb) / (+1 comb) contributions to the 'convolution'.  In effect, the convolution kernel is a comb consisting of alternating +1 and -weight.</param>
'''  <param name="pscore">[out] - convolution with "Haar"-like comb</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function numaEvalHaarSum(
				ByVal nas as Numa, 
				ByVal width as Single, 
				ByVal shift as Single, 
				ByVal relweight as Single, 
				ByRef pscore as Single()) as Integer

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")
	If IsNothing (width) then Throw New ArgumentNullException  ("width cannot be Nothing")
	If IsNothing (shift) then Throw New ArgumentNullException  ("shift cannot be Nothing")
	If IsNothing (relweight) then Throw New ArgumentNullException  ("relweight cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.numaEvalHaarSum( nas.Pointer, width, shift, relweight, pscore)

	Return _Result
End Function

' SRC\numafunc2.c (3032, 1)
' genConstrainedNumaInRange()
' genConstrainedNumaInRange(l_int32, l_int32, l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) Selection is made uniformly in the range.  This can be used
''' to select pages distributed as uniformly as possible
''' through a book, where you are constrained to
''' ~ choose between [first, ... biggest],
''' ~ choose no more than nmax numbers, and
''' and you have the option of requiring pairs of adjacent numbers.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="first">[in] - first number to choose; GT= 0</param>
'''  <param name="last">[in] - biggest possible number to reach; GT= first</param>
'''  <param name="nmax">[in] - maximum number of numbers to select; GT 0</param>
'''  <param name="use_pairs">[in] - 1 = select pairs of adjacent numbers; 0 = select individual numbers</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function genConstrainedNumaInRange(
				ByVal first as Integer, 
				ByVal last as Integer, 
				ByVal nmax as Integer, 
				ByVal use_pairs as Integer) as Numa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.genConstrainedNumaInRange( first, last, nmax, use_pairs)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

#End Region
#Region "SRC\pageseg.c"
' SRC\pageseg.c (102, 1)
' pixGetRegionsBinary()
' pixGetRegionsBinary(PIX *, PIX **, PIX **, PIX **, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) It is best to deskew the image before segmenting.
''' (2) Passing in %pixadb enables debug output.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, assumed to be 300 to 400 ppi</param>
'''  <param name="ppixhm">[out][optional] - halftone mask</param>
'''  <param name="ppixtm">[out][optional] - textline mask</param>
'''  <param name="ppixtb">[out][optional] - textblock mask</param>
'''  <param name="pixadb">[in] - input for collecting debug pix; use NULL to skip</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetRegionsBinary(
				ByVal pixs as Pix, 
				ByRef ppixhm as Pix, 
				ByRef ppixtm as Pix, 
				ByRef ppixtb as Pix, 
				ByVal pixadb as Pixa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixadb) then Throw New ArgumentNullException  ("pixadb cannot be Nothing")

Dim ppixhmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixhm) Then ppixhmPTR = ppixhm.Pointer
Dim ppixtmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixtm) Then ppixtmPTR = ppixtm.Pointer
Dim ppixtbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixtb) Then ppixtbPTR = ppixtb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetRegionsBinary( pixs.Pointer, ppixhmPTR, ppixtmPTR, ppixtbPTR, pixadb.Pointer)
	if ppixhmPTR <> IntPtr.Zero then ppixhm = new Pix(ppixhmPTR)
	if ppixtmPTR <> IntPtr.Zero then ppixtm = new Pix(ppixtmPTR)
	if ppixtbPTR <> IntPtr.Zero then ppixtb = new Pix(ppixtbPTR)

	Return _Result
End Function

' SRC\pageseg.c (264, 1)
' pixGenHalftoneMask()
' pixGenHalftoneMask(PIX *, PIX **, l_int32 *, l_int32) as PIX *
'''  <summary>
''' Deprecated
''' This wrapper avoids an ABI change with tesseract 3.0.4.
''' It should be removed when we no longer need to support 3.0.4.
''' The debug parameter is ignored (assumed 0).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixGenHalftoneMask(
				ByRef pixs as Pix, 
				ByRef ppixtext as Pix, 
				ByRef phtfound as Object, 
				ByRef debug as Enumerations.DebugOnOff) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ppixtext) then Throw New ArgumentNullException  ("ppixtext cannot be Nothing")
	If IsNothing (phtfound) then Throw New ArgumentNullException  ("phtfound cannot be Nothing")

Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer
	Dim ppixtextPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixtext) Then ppixtextPTR = ppixtext.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGenHalftoneMask( pixs.Pointer, ppixtextPTR, phtfound, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pageseg.c (289, 1)
' pixGenerateHalftoneMask()
' pixGenerateHalftoneMask(PIX *, PIX **, l_int32 *, PIXA *) as PIX *
'''  <summary>
''' Notes
''' (1) This is not intended to work on small thumbnails.  The
''' dimensions of pixs must be at least MinWidth x MinHeight.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, assumed to be 150 to 200 ppi</param>
'''  <param name="ppixtext">[out][optional] - text part of pixs</param>
'''  <param name="phtfound">[out][optional] - 1 if the mask is not empty</param>
'''  <param name="pixadb">[in] - input for collecting debug pix; use NULL to skip</param>
'''   <returns>pixd halftone mask, or NULL on error</returns>
Public Shared Function pixGenerateHalftoneMask(
				ByVal pixs as Pix, 
				ByRef ppixtext as Pix, 
				ByRef phtfound as Integer, 
				ByVal pixadb as Pixa) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixadb) then Throw New ArgumentNullException  ("pixadb cannot be Nothing")

Dim ppixtextPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixtext) Then ppixtextPTR = ppixtext.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGenerateHalftoneMask( pixs.Pointer, ppixtextPTR, phtfound, pixadb.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixtextPTR <> IntPtr.Zero then ppixtext = new Pix(ppixtextPTR)

	Return  new Pix(_Result)
End Function

' SRC\pageseg.c (372, 1)
' pixGenTextlineMask()
' pixGenTextlineMask(PIX *, PIX **, l_int32 *, PIXA *) as PIX *
'''  <summary>
''' Notes
''' (1) The input pixs should be deskewed.
''' (2) pixs should have no halftone pixels.
''' (3) This is not intended to work on small thumbnails.  The
''' dimensions of pixs must be at least MinWidth x MinHeight.
''' (4) Both the input image and the returned textline mask
''' are at the same resolution.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, assumed to be 150 to 200 ppi</param>
'''  <param name="ppixvws">[out] - vertical whitespace mask</param>
'''  <param name="ptlfound">[out][optional] - 1 if the mask is not empty</param>
'''  <param name="pixadb">[in] - input for collecting debug pix; use NULL to skip</param>
'''   <returns>pixd textline mask, or NULL on error</returns>
Public Shared Function pixGenTextlineMask(
				ByVal pixs as Pix, 
				ByRef ppixvws as Pix, 
				ByRef ptlfound as Integer, 
				ByVal pixadb as Pixa) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixadb) then Throw New ArgumentNullException  ("pixadb cannot be Nothing")

	Dim ppixvwsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixvws) Then ppixvwsPTR = ppixvws.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGenTextlineMask( pixs.Pointer, ppixvwsPTR, ptlfound, pixadb.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixvwsPTR <> IntPtr.Zero then ppixvws = new Pix(ppixvwsPTR)

	Return  new Pix(_Result)
End Function

' SRC\pageseg.c (464, 1)
' pixGenTextblockMask()
' pixGenTextblockMask(PIX *, PIX *, PIXA *) as PIX *
'''  <summary>
''' Notes
''' (1) Both the input masks (textline and vertical white space) and
''' the returned textblock mask are at the same resolution.
''' (2) This is not intended to work on small thumbnails.  The
''' dimensions of pixs must be at least MinWidth x MinHeight.
''' (3) The result is somewhat noisy, in that small "blocks" of
''' text may be included.  These can be removed by post-processing,
''' using, e.g.,
''' pixSelectBySize(pix, 60, 60, 4, L_SELECT_IF_EITHER,
''' L_SELECT_IF_GTE, NULL);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, textline mask, assumed to be 150 to 200 ppi</param>
'''  <param name="pixvws">[in] - vertical white space mask</param>
'''  <param name="pixadb">[in] - input for collecting debug pix; use NULL to skip</param>
'''   <returns>pixd textblock mask, or NULL on error</returns>
Public Shared Function pixGenTextblockMask(
				ByVal pixs as Pix, 
				ByVal pixvws as Pix, 
				ByVal pixadb as Pixa) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixvws) then Throw New ArgumentNullException  ("pixvws cannot be Nothing")
	If IsNothing (pixadb) then Throw New ArgumentNullException  ("pixadb cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGenTextblockMask( pixs.Pointer, pixvws.Pointer, pixadb.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pageseg.c (548, 1)
' pixFindPageForeground()
' pixFindPageForeground(PIX *, l_int32, l_int32, l_int32, l_int32, PIXAC *) as BOX *
'''  <summary>
''' Notes
''' (1) This doesn't simply crop to the fg.  It attempts to remove
''' pixel noise and junk at the edge of the image before cropping.
''' The input %threshold is used if pixs is not 1 bpp.
''' (2) This is not intended to work on small thumbnails.  The
''' dimensions of pixs must be at least MinWidth x MinHeight.
''' (3) Debug set showmorph to display the intermediate image in
''' the morphological operations on this page.
''' (4) Debug to get pdf output of results when called repeatedly,
''' call with an existing pixac, which will add an image of this page,
''' with the fg outlined.  If no foreground is found, there is
''' no output for this page image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - full resolution (any type or depth</param>
'''  <param name="threshold">[in] - for binarization; typically about 128</param>
'''  <param name="mindist">[in] - min distance of text from border to allow cleaning near border; at 2x reduction, this should be larger than 50; typically about 70</param>
'''  <param name="erasedist">[in] - when conditions are satisfied, erase anything within this distance of the edge; typically 20-30 at 2x reduction</param>
'''  <param name="showmorph">[in] - debug set to a negative integer to show steps in generating masks; this is typically used for debugging region extraction</param>
'''  <param name="pixac">[in] - debug allocate outside and pass this in to accumulate results of each call to this function, which can be displayed in a mosaic or a pdf.</param>
'''   <returns>box region including foreground, with some pixel noise removed, or NULL if not found</returns>
Public Shared Function pixFindPageForeground(
				ByVal pixs as Pix, 
				ByVal threshold as Integer, 
				ByVal mindist as Integer, 
				ByVal erasedist as Integer, 
				ByVal showmorph as Integer, 
				ByVal pixac as PixaComp) as Box

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFindPageForeground( pixs.Pointer, threshold, mindist, erasedist, showmorph, pixac.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\pageseg.c (679, 1)
' pixSplitIntoCharacters()
' pixSplitIntoCharacters(PIX *, l_int32, l_int32, BOXA **, PIXA **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This is a simple function that attempts to find split points
''' based on vertical pixel profiles.
''' (2) It should be given an image that has an arbitrary number
''' of text characters.
''' (3) The returned pixa includes the boxes from which the
''' (possibly split) components are extracted.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, contains only deskewed text</param>
'''  <param name="minw">[in] - min component width for initial filtering; typ. 4</param>
'''  <param name="minh">[in] - min component height for initial filtering; typ. 4</param>
'''  <param name="pboxa">[out][optional] - character bounding boxes</param>
'''  <param name="ppixa">[out][optional] - character images</param>
'''  <param name="ppixdebug">[out][optional] - showing splittings</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSplitIntoCharacters(
				ByVal pixs as Pix, 
				ByVal minw as Integer, 
				ByVal minh as Integer, 
				ByRef pboxa as Boxa, 
				ByRef ppixa as Pixa, 
				ByRef ppixdebug as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer
Dim ppixaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixa) Then ppixaPTR = ppixa.Pointer
Dim ppixdebugPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdebug) Then ppixdebugPTR = ppixdebug.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSplitIntoCharacters( pixs.Pointer, minw, minh, pboxaPTR, ppixaPTR, ppixdebugPTR)
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)
	if ppixaPTR <> IntPtr.Zero then ppixa = new Pixa(ppixaPTR)
	if ppixdebugPTR <> IntPtr.Zero then ppixdebug = new Pix(ppixdebugPTR)

	Return _Result
End Function

' SRC\pageseg.c (780, 1)
' pixSplitComponentWithProfile()
' pixSplitComponentWithProfile(PIX *, l_int32, l_int32, PIX **) as BOXA *
'''  <summary>
''' Notes
''' (1) This will split the most obvious cases of touching characters.
''' The split points it is searching for are narrow and deep
''' minimima in the vertical pixel projection profile, after a
''' large vertical closing has been applied to the component.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, exactly one connected component</param>
'''  <param name="delta">[in] - distance used in extrema finding in a numa; typ. 10</param>
'''  <param name="mindel">[in] - minimum required difference between profile minimum and profile values +2 and -2 away; typ. 7</param>
'''  <param name="ppixdebug">[out][optional] - debug image of splitting</param>
'''   <returns>boxa of c.c. after splitting, or NULL on error</returns>
Public Shared Function pixSplitComponentWithProfile(
				ByVal pixs as Pix, 
				ByVal delta as Integer, 
				ByVal mindel as Integer, 
				ByRef ppixdebug as Pix) as Boxa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim ppixdebugPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdebug) Then ppixdebugPTR = ppixdebug.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSplitComponentWithProfile( pixs.Pointer, delta, mindel, ppixdebugPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixdebugPTR <> IntPtr.Zero then ppixdebug = new Pix(ppixdebugPTR)

	Return  new Boxa(_Result)
End Function

' SRC\pageseg.c (936, 1)
' pixExtractTextlines()
' pixExtractTextlines(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, PIXA *) as PIXA *
'''  <summary>
''' Notes
''' (1) This function assumes that textline fragments have sufficient
''' vertical separation and small enough skew so that a
''' horizontal dilation sufficient to join words will not join
''' textlines.  It does not guarantee that horizontally adjacent
''' textline fragments on the same line will be joined.
''' (2) For images with multiple columns, it attempts to avoid joining
''' textlines across the space between columns.  If that is not
''' a concern, you can also use pixExtractRawTextlines(),
''' which will join them with alacrity.
''' (3) This first removes components from pixs that are either
''' wide (GT %maxw) or tall (GT %maxh).
''' (4) A final filtering operation removes small components, such
''' that width LT %minw or height LT %minh.
''' (5) For reasonable accuracy, the resolution of pixs should be
''' at least 100 ppi.  For reasonable efficiency, the resolution
''' should not exceed 600 ppi.
''' (6) This can be used to determine if some region of a scanned
''' image is horizontal text.
''' (7) As an example, for a pix with resolution 300 ppi, a reasonable
''' set of parameters is
''' pixExtractTextlines(pix, 150, 150, 36, 20, 5, 5, NULL);
''' The defaults minw and minh for 300 ppi are about 36 and 20,
''' so the same result is obtained with
''' pixExtractTextlines(pix, 150, 150, 0, 0, 5, 5, NULL);
''' (8) The output pixa is composed of subimages, one for each textline,
''' and the boxa in the pixa tells where in %pixs each textline goes.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth, assumed to have nearly horizontal text</param>
'''  <param name="maxw">[in] - initial filtering remove any components in pixs with components larger than maxw or maxh</param>
'''  <param name="maxh">[in] - initial filtering remove any components in pixs with components larger than maxw or maxh</param>
'''  <param name="minw">[in] - final filtering remove extracted 'lines' with sizes smaller than minw or minh; use 0 for default.</param>
'''  <param name="minh">[in] - final filtering remove extracted 'lines' with sizes smaller than minw or minh; use 0 for default.</param>
'''  <param name="adjw">[in] - final adjustment of boxes representing each text line.  If GT 0, these increase the box size at each edge by this amount.</param>
'''  <param name="adjh">[in] - final adjustment of boxes representing each text line.  If GT 0, these increase the box size at each edge by this amount.</param>
'''  <param name="pixadb">[in] - pixa for saving intermediate steps; NULL to omit</param>
'''   <returns>pixa of textline images, including bounding boxes, or NULL on error</returns>
Public Shared Function pixExtractTextlines(
				ByVal pixs as Pix, 
				ByVal maxw as Integer, 
				ByVal maxh as Integer, 
				ByVal minw as Integer, 
				ByVal minh as Integer, 
				ByVal adjw as Integer, 
				ByVal adjh as Integer, 
				ByVal pixadb as Pixa) as Pixa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixadb) then Throw New ArgumentNullException  ("pixadb cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixExtractTextlines( pixs.Pointer, maxw, maxh, minw, minh, adjw, adjh, pixadb.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pageseg.c (1076, 1)
' pixExtractRawTextlines()
' pixExtractRawTextlines(PIX *, l_int32, l_int32, l_int32, l_int32, PIXA *) as PIXA *
'''  <summary>
''' Notes
''' (1) This function assumes that textlines have sufficient
''' vertical separation and small enough skew so that a
''' horizontal dilation sufficient to join words will not join
''' textlines.  It aggressively joins textlines across multiple
''' columns, so if that is not desired, you must either (a) make
''' sure that %pixs is a single column of text or (b) use instead
''' pixExtractTextlines(), which is more conservative
''' about joining text fragments that have vertical overlap.
''' (2) This first removes components from pixs that are either
''' very wide (GT %maxw) or very tall (GT %maxh).
''' (3) For reasonable accuracy, the resolution of pixs should be
''' at least 100 ppi.  For reasonable efficiency, the resolution
''' should not exceed 600 ppi.
''' (4) This can be used to determine if some region of a scanned
''' image is horizontal text.
''' (5) As an example, for a pix with resolution 300 ppi, a reasonable
''' set of parameters is
''' pixExtractRawTextlines(pix, 150, 150, 0, 0, NULL);
''' (6) The output pixa is composed of subimages, one for each textline,
''' and the boxa in the pixa tells where in %pixs each textline goes.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth, assumed to have nearly horizontal text</param>
'''  <param name="maxw">[in] - initial filtering remove any components in pixs with components larger than maxw or maxh; use 0 for default values.</param>
'''  <param name="maxh">[in] - initial filtering remove any components in pixs with components larger than maxw or maxh; use 0 for default values.</param>
'''  <param name="adjw">[in] - final adjustment of boxes representing each text line.  If GT 0, these increase the box size at each edge by this amount.</param>
'''  <param name="adjh">[in] - final adjustment of boxes representing each text line.  If GT 0, these increase the box size at each edge by this amount.</param>
'''  <param name="pixadb">[in] - pixa for saving intermediate steps; NULL to omit</param>
'''   <returns>pixa of textline images, including bounding boxes, or NULL on error</returns>
Public Shared Function pixExtractRawTextlines(
				ByVal pixs as Pix, 
				ByVal maxw as Integer, 
				ByVal maxh as Integer, 
				ByVal adjw as Integer, 
				ByVal adjh as Integer, 
				ByVal pixadb as Pixa) as Pixa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixadb) then Throw New ArgumentNullException  ("pixadb cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixExtractRawTextlines( pixs.Pointer, maxw, maxh, adjw, adjh, pixadb.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pageseg.c (1204, 1)
' pixCountTextColumns()
' pixCountTextColumns(PIX *, l_float32, l_float32, l_float32, l_int32 *, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) It is assumed that pixs has the correct resolution set.
''' If the resolution is 0, we set to 300 and issue a warning.
''' (2) If necessary, the image is scaled to between 37 and 75 ppi;
''' most of the processing is done at this resolution.
''' (3) If no text is found (essentially a blank page),
''' this returns ncols = 0.
''' (4) For debug output, input a pre-allocated pixa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="deltafract">[in] - fraction of (max - min) to be used in the delta for extrema finding; typ 0.3</param>
'''  <param name="peakfract">[in] - fraction of (max - min) to be used to threshold the peak value; typ. 0.5</param>
'''  <param name="clipfract">[in] - fraction of image dimension removed on each side; typ. 0.1, which leaves w and h reduced by 0.8</param>
'''  <param name="pncols">[out] - number of columns; -1 if not determined</param>
'''  <param name="pixadb">[in][optional] - pre-allocated, for showing intermediate computation; use null to skip</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixCountTextColumns(
				ByVal pixs as Pix, 
				ByVal deltafract as Single, 
				ByVal peakfract as Single, 
				ByVal clipfract as Single, 
				ByRef pncols as Integer, 
				ByVal pixadb as Pixa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (deltafract) then Throw New ArgumentNullException  ("deltafract cannot be Nothing")
	If IsNothing (peakfract) then Throw New ArgumentNullException  ("peakfract cannot be Nothing")
	If IsNothing (clipfract) then Throw New ArgumentNullException  ("clipfract cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixadbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixadb) Then pixadbPTR = pixadb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCountTextColumns( pixs.Pointer, deltafract, peakfract, clipfract, pncols, pixadbPTR)

	Return _Result
End Function

' SRC\pageseg.c (1352, 1)
' pixDecideIfText()
' pixDecideIfText(PIX *, BOX *, l_int32 *, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) It is assumed that pixs has the correct resolution set.
''' If the resolution is 0, we set to 300 and issue a warning.
''' (2) If necessary, the image is scaled to 300 ppi; most of the
''' processing is done at this resolution.
''' (3) Text is assumed to be in horizontal lines.
''' (4) Because thin vertical lines are removed before filtering for
''' text lines, this should identify tables as text.
''' (5) If %box is null and pixs contains both text lines and line art,
''' this function might return %istext == true.
''' (6) If the input pixs is empty, or for some other reason the
''' result can not be determined, return -1.
''' (7) For debug output, input a pre-allocated pixa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth</param>
'''  <param name="box">[in][optional] - if null, use entire pixs</param>
'''  <param name="pistext">[out] - 1 if text; 0 if photo; -1 if not determined or empty</param>
'''  <param name="pixadb">[in][optional] - pre-allocated, for showing intermediate computation; use NULL to skip</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixDecideIfText(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByRef pistext as Integer, 
				ByVal pixadb as Pixa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer
	Dim pixadbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixadb) Then pixadbPTR = pixadb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixDecideIfText( pixs.Pointer, boxPTR, pistext, pixadbPTR)

	Return _Result
End Function

' SRC\pageseg.c (1518, 1)
' pixFindThreshFgExtent()
' pixFindThreshFgExtent(PIX *, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="thresh">[in] - threshold number of pixels in row</param>
'''  <param name="ptop">[out][optional] - location of top of region</param>
'''  <param name="pbot">[out][optional] - location of bottom of region</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFindThreshFgExtent(
				ByVal pixs as Pix, 
				ByVal thresh as Integer, 
				ByRef ptop as Integer, 
				ByRef pbot as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindThreshFgExtent( pixs.Pointer, thresh, ptop, pbot)

	Return _Result
End Function

' SRC\pageseg.c (1608, 1)
' pixDecideIfTable()
' pixDecideIfTable(PIX *, BOX *, l_int32, l_int32 *, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) It is assumed that pixs has the correct resolution set.
''' If the resolution is 0, we assume it is 300 ppi and issue a warning.
''' (2) If %orient == L_LANDSCAPE_MODE, the image is rotated 90 degrees
''' clockwise before being analyzed.
''' (3) The interpretation of the returned score
''' -1  undetermined
''' 0  no table
''' 1  unlikely to have a table
''' 2  likely to have a table
''' 3  even more likely to have a table
''' 4  extremely likely to have a table
''' Setting the condition for finding a table at score GT= 2 works
''' well, except for false positives on kanji and landscape text.
''' These false positives can be removed by setting the condition
''' at score GT= 3, but recall is lowered because it will not find
''' tables without either horizontal or vertical lines.
''' (4) Most of the processing takes place at 75 ppi.
''' (5) Internally, three numbers are determined, for horizontal and
''' vertical fg lines, and for vertical bg lines.  From these,
''' four tests are made to decide if there is a table occupying
''' a significant part of the image.
''' (6) Images have arbitrary content and would be likely to trigger
''' this detector, so they are checked for first, and if found,
''' return with a 0 (no table) score.
''' (7) Musical scores (tablature) are likely to trigger the detector.
''' (8) Tables of content with more than 2 columns are likely to
''' trigger the detector.
''' (9) For debug output, input a pre-allocated pixa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth, any resolution GT= 75 ppi</param>
'''  <param name="box">[in][optional] - if null, use entire pixs</param>
'''  <param name="orient">[in] - L_PORTRAIT_MODE, L_LANDSCAPE_MODE</param>
'''  <param name="pscore">[out] - 0 - 4; -1 if not determined</param>
'''  <param name="pixadb">[in][optional] - pre-allocated, for showing intermediate computation; use NULL to skip</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixDecideIfTable(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal orient as Enumerations.L_MODE, 
				ByRef pscore as Integer, 
				ByVal pixadb as Pixa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer
	Dim pixadbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixadb) Then pixadbPTR = pixadb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixDecideIfTable( pixs.Pointer, boxPTR, orient, pscore, pixadbPTR)

	Return _Result
End Function

' SRC\pageseg.c (1758, 1)
' pixPrepare1bpp()
' pixPrepare1bpp(PIX *, BOX *, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This handles some common pre-processing operations,
''' where the page segmentation algorithm takes a 1 bpp image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth</param>
'''  <param name="box">[in][optional] - if null, use entire pixs</param>
'''  <param name="cropfract">[in] - fraction to be removed from the boundary; use 0.0 to retain the entire image</param>
'''  <param name="outres">[in] - desired resolution of output image; if the input image resolution is not set, assume 300 ppi; use 0 to skip scaling.</param>
'''   <returns>pixd if OK, NULL on error</returns>
Public Shared Function pixPrepare1bpp(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal cropfract as Single, 
				ByVal outres as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (cropfract) then Throw New ArgumentNullException  ("cropfract cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixPrepare1bpp( pixs.Pointer, boxPTR, cropfract, outres)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pageseg.c (1843, 1)
' pixEstimateBackground()
' pixEstimateBackground(PIX *, l_int32, l_float32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Caller should check that return bg value is GT 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, with or without colormap</param>
'''  <param name="darkthresh">[in] - pixels below this value are never considered part of the background; typ. 70; use 0 to skip</param>
'''  <param name="edgecrop">[in] - fraction of half-width on each side, and of half-height at top and bottom, that are cropped</param>
'''  <param name="pbg">[out] - estimated background, or 0 on error</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixEstimateBackground(
				ByVal pixs as Pix, 
				ByVal darkthresh as Integer, 
				ByVal edgecrop as Single, 
				ByRef pbg as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (edgecrop) then Throw New ArgumentNullException  ("edgecrop cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixEstimateBackground( pixs.Pointer, darkthresh, edgecrop, pbg)

	Return _Result
End Function

' SRC\pageseg.c (1927, 1)
' pixFindLargeRectangles()
' pixFindLargeRectangles(PIX *, l_int32, l_int32, BOXA **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This does a greedy search to find the largest rectangles,
''' either black or white and without overlaps, in %pix.
''' (2) See pixFindLargestRectangle(), which is called multiple
''' times, for details.  On each call, the largest rectangle
''' found is painted, so that none of its pixels can be
''' used later, before calling it again.
''' (3) This function is surprisingly fast.  Although
''' pixFindLargestRectangle() runs at about 50 MPix/sec, when it
''' is run multiple times by pixFindLargeRectangles(), it processes
''' at 150 - 250 MPix/sec, and the time is approximately linear
''' in %nrect.  For example, for a 1 MPix image, searching for
''' the largest 50 boxes takes about 0.2 seconds.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="polarity">[in] - 0 within background, 1 within foreground</param>
'''  <param name="nrect">[in] - number of rectangles to be found</param>
'''  <param name="pboxa">[out] - largest rectangles, sorted by decreasing area</param>
'''  <param name="ppixdb">[in,out] - optional return output with rectangles drawn on it</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFindLargeRectangles(
				ByVal pixs as Pix, 
				ByVal polarity as Integer, 
				ByVal nrect as Integer, 
				ByRef pboxa as Boxa, 
				ByRef ppixdb as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer
	Dim ppixdbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdb) Then ppixdbPTR = ppixdb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindLargeRectangles( pixs.Pointer, polarity, nrect, pboxaPTR, ppixdbPTR)
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)
	if ppixdbPTR <> IntPtr.Zero then ppixdb = new Pix(ppixdbPTR)

	Return _Result
End Function

' SRC\pageseg.c (2030, 1)
' pixFindLargestRectangle()
' pixFindLargestRectangle(PIX *, l_int32, BOX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This is a simple and elegant solution to a problem in
''' computational geometry that at first appears to be quite
''' difficult what is the largest rectangle that can be
''' placed in the image, covering only pixels of one polarity
''' (bg or fg)?  The solution is O(n), where n is the number
''' of pixels in the image, and it requires nothing more than
''' using a simple recursion relation in a single sweep of the image.
''' (2) In a sweep from UL to LR with left-to-right being the fast
''' direction, calculate the largest white rectangle at (x, y),
''' using previously calculated values at pixels #1 and #2
''' #1 (x, y - 1)
''' #2 (x - 1, y)
''' We also need the most recent "black" pixels that were seen
''' in the current row and column.
''' Consider the largest area.  There are only two possibilities
''' (a)  Min(w(1), horizdist)  (h(1) + 1)
''' (b)  Min(h(2), vertdist)  (w(2) + 1)
''' where
''' horizdist the distance from the rightmost "black" pixel seen
''' in the current row across to the current pixel
''' vertdist the distance from the lowest "black" pixel seen
''' in the current column down to the current pixel
''' and we choose the Max of (a) and (b).
''' (3) To convince yourself that these recursion relations are correct,
''' it helps to draw the maximum rectangles at #1 and #2.
''' Then for #1, you try to extend the rectangle down one line,
''' so that the height is h(1) + 1.  Do you get the full
''' width of #1, w(1)?  It depends on where the black pixels are
''' in the current row.  You know the final width is bounded by w(1)
''' and w(2) + 1, but the actual value depends on the distribution
''' of black pixels in the current row that are at a distance
''' from the current pixel that is between these limits.
''' We call that value "horizdist", and the area is then given
''' by the expression (a) above.  Using similar reasoning for #2,
''' where you attempt to extend the rectangle to the right
''' by 1 pixel, you arrive at (b).  The largest rectangle is
''' then found by taking the Max.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="polarity">[in] - 0 within background, 1 within foreground</param>
'''  <param name="pbox">[out] - largest area rectangle</param>
'''  <param name="ppixdb">[in,out] - optional return output with rectangle drawn on it</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFindLargestRectangle(
				ByVal pixs as Pix, 
				ByVal polarity as Integer, 
				ByRef pbox as Box, 
				ByRef ppixdb as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pboxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbox) Then pboxPTR = pbox.Pointer
	Dim ppixdbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdb) Then ppixdbPTR = ppixdb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindLargestRectangle( pixs.Pointer, polarity, pboxPTR, ppixdbPTR)
	if pboxPTR <> IntPtr.Zero then pbox = new Box(pboxPTR)
	if ppixdbPTR <> IntPtr.Zero then ppixdb = new Pix(ppixdbPTR)

	Return _Result
End Function

#End Region
#Region "SRC\paintcmap.c"
' SRC\paintcmap.c (98, 1)
' pixSetSelectCmap()
' pixSetSelectCmap(PIX *, BOX *, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place operation.
''' (2) It sets all pixels in region that have the color specified
''' by the colormap index 'sindex' to the new color.
''' (3) sindex must be in the existing colormap; otherwise an
''' error is returned.
''' (4) If the new color exists in the colormap, it is used;
''' otherwise, it is added to the colormap.  If it cannot be
''' added because the colormap is full, an error is returned.
''' (5) If box is NULL, applies function to the entire image; otherwise,
''' clips the operation to the intersection of the box and pix.
''' (6) An example of use would be to set to a specific color all
''' the light (background) pixels within a certain region of
''' a 3-level 2 bpp image, while leaving light pixels outside
''' this region unchanged.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4 or 8 bpp, with colormap</param>
'''  <param name="box">[in][optional] - region to set color; can be NULL</param>
'''  <param name="sindex">[in] - colormap index of pixels to be changed</param>
'''  <param name="rval">[in] - new color to paint</param>
'''  <param name="gval">[in] - new color to paint</param>
'''  <param name="bval">[in] - new color to paint</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSetSelectCmap(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal sindex as Integer, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetSelectCmap( pixs.Pointer, boxPTR, sindex, rval, gval, bval)

	Return _Result
End Function

' SRC\paintcmap.c (219, 1)
' pixColorGrayRegionsCmap()
' pixColorGrayRegionsCmap(PIX *, BOXA *, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place operation.
''' (2) If type == L_PAINT_LIGHT, it colorizes non-black pixels,
''' preserving antialiasing.
''' If type == L_PAINT_DARK, it colorizes non-white pixels,
''' preserving antialiasing.  See pixColorGrayCmap() for details.
''' (3) This can also be called through pixColorGrayRegions().
''' (4) This increases the colormap size by the number of
''' different gray (non-black or non-white) colors in the
''' selected regions of pixs.  If there is not enough room in
''' the colormap for this expansion, it returns 1 (error),
''' and the caller should check the return value.
''' (5) Because two boxes in the boxa can overlap, pixels that
''' are colorized in the first box must be excluded in the
''' second because their value exceeds the size of the map.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, with colormap</param>
'''  <param name="boxa">[in] - of regions in which to apply color</param>
'''  <param name="type">[in] - L_PAINT_LIGHT, L_PAINT_DARK</param>
'''  <param name="rval">[in] - target color</param>
'''  <param name="gval">[in] - target color</param>
'''  <param name="bval">[in] - target color</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixColorGrayRegionsCmap(
				ByVal pixs as Pix, 
				ByVal boxa as Boxa, 
				ByVal type as Enumerations.L_PAINT, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixColorGrayRegionsCmap( pixs.Pointer, boxa.Pointer, type, rval, gval, bval)

	Return _Result
End Function

' SRC\paintcmap.c (327, 1)
' pixColorGrayCmap()
' pixColorGrayCmap(PIX *, BOX *, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place operation.
''' (2) If type == L_PAINT_LIGHT, it colorizes non-black pixels,
''' preserving antialiasing.
''' If type == L_PAINT_DARK, it colorizes non-white pixels,
''' preserving antialiasing.
''' (3) box gives the region to apply color; if NULL, this
''' colorizes the entire image.
''' (4) If the cmap is only 2 or 4 bpp, pixs is converted in-place
''' to an 8 bpp cmap.  A 1 bpp cmap is not a valid input pix.
''' (5) This can also be called through pixColorGray().
''' (6) This operation increases the colormap size by the number of
''' different gray (non-black or non-white) colors in the
''' input colormap.  If there is not enough room in the colormap
''' for this expansion, it returns 1 (error), and the caller
''' should check the return value.
''' (7) Using the darkness of each original pixel in the rect,
''' it generates a new color (based on the input rgb values).
''' If type == L_PAINT_LIGHT, the new color is a (generally)
''' darken-to-black version of the  input rgb color, where the
''' amount of darkening increases with the darkness of the
''' original pixel color.
''' If type == L_PAINT_DARK, the new color is a (generally)
''' faded-to-white version of the  input rgb color, where the
''' amount of fading increases with the brightness of the
''' original pixel color.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2, 4 or 8 bpp, with colormap</param>
'''  <param name="box">[in][optional] - region to set color; can be NULL</param>
'''  <param name="type">[in] - L_PAINT_LIGHT, L_PAINT_DARK</param>
'''  <param name="rval">[in] - target color</param>
'''  <param name="gval">[in] - target color</param>
'''  <param name="bval">[in] - target color</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixColorGrayCmap(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal type as Enumerations.L_PAINT, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixColorGrayCmap( pixs.Pointer, boxPTR, type, rval, gval, bval)

	Return _Result
End Function

' SRC\paintcmap.c (395, 1)
' pixColorGrayMaskedCmap()
' pixColorGrayMaskedCmap(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place operation.
''' (2) If type == L_PAINT_LIGHT, it colorizes non-black pixels,
''' preserving antialiasing.
''' If type == L_PAINT_DARK, it colorizes non-white pixels,
''' preserving antialiasing.  See pixColorGrayCmap() for details.
''' (3) This increases the colormap size by the number of
''' different gray (non-black or non-white) colors in the
''' input colormap.  If there is not enough room in the colormap
''' for this expansion, it returns 1 (error).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, with colormap</param>
'''  <param name="pixm">[in] - 1 bpp mask, through which to apply color</param>
'''  <param name="type">[in] - L_PAINT_LIGHT, L_PAINT_DARK</param>
'''  <param name="rval">[in] - target color</param>
'''  <param name="gval">[in] - target color</param>
'''  <param name="bval">[in] - target color</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixColorGrayMaskedCmap(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal type as Enumerations.L_PAINT, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixColorGrayMaskedCmap( pixs.Pointer, pixm.Pointer, type, rval, gval, bval)

	Return _Result
End Function

' SRC\paintcmap.c (492, 1)
' addColorizedGrayToCmap()
' addColorizedGrayToCmap(PIXCMAP *, l_int32, l_int32, l_int32, l_int32, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) If type == L_PAINT_LIGHT, it colorizes non-black pixels,
''' preserving antialiasing.
''' If type == L_PAINT_DARK, it colorizes non-white pixels,
''' preserving antialiasing.
''' (2) This increases the colormap size by the number of
''' different gray (non-black or non-white) colors in the
''' input colormap.  If there is not enough room in the colormap
''' for this expansion, it returns 1 (treated as a warning);
''' the caller should check the return value.
''' (3) This can be used to determine if the new colors will fit in
''' the cmap, using null for na.  Returns 0 if they fit; 2 if
''' they don't fit.
''' (4) The mapping table contains, for each gray color found, the
''' index of the corresponding colorized pixel.  Non-gray
''' pixels are assigned the invalid index 256.
''' (5) See pixColorGrayCmap() for usage.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmap">[in] - from 2 or 4 bpp pix</param>
'''  <param name="type">[in] - L_PAINT_LIGHT, L_PAINT_DARK</param>
'''  <param name="rval">[in] - target color</param>
'''  <param name="gval">[in] - target color</param>
'''  <param name="bval">[in] - target color</param>
'''  <param name="pna">[out][optional] - table for mapping new cmap entries</param>
'''   <returns>0 if OK; 1 on error; 2 if new colors will not fit in cmap.</returns>
Public Shared Function addColorizedGrayToCmap(
				ByVal cmap as PixColormap, 
				ByVal type as Enumerations.L_PAINT, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByRef pna as Numa) as Integer

	If IsNothing (cmap) then Throw New ArgumentNullException  ("cmap cannot be Nothing")

Dim pnaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pna) Then pnaPTR = pna.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.addColorizedGrayToCmap( cmap.Pointer, type, rval, gval, bval, pnaPTR)
	if pnaPTR <> IntPtr.Zero then pna = new Numa(pnaPTR)

	Return _Result
End Function

' SRC\paintcmap.c (583, 1)
' pixSetSelectMaskedCmap()
' pixSetSelectMaskedCmap(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place operation.
''' (2) This paints through the fg of pixm and replaces all pixels
''' in pixs that have a particular value (sindex) with the new color.
''' (3) If pixm == NULL, a warning is given.
''' (4) sindex must be in the existing colormap; otherwise an
''' error is returned.
''' (5) If the new color exists in the colormap, it is used;
''' otherwise, it is added to the colormap.  If the colormap
''' is full, an error is returned.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2, 4 or 8 bpp, with colormap</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask; no-op if NULL</param>
'''  <param name="x">[in] - UL corner of mask relative to pixs</param>
'''  <param name="y">[in] - UL corner of mask relative to pixs</param>
'''  <param name="sindex">[in] - colormap index of pixels in pixs to be changed</param>
'''  <param name="rval">[in] - new color to substitute</param>
'''  <param name="gval">[in] - new color to substitute</param>
'''  <param name="bval">[in] - new color to substitute</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSetSelectMaskedCmap(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal sindex as Integer, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetSelectMaskedCmap( pixs.Pointer, pixmPTR, x, y, sindex, rval, gval, bval)

	Return _Result
End Function

' SRC\paintcmap.c (693, 1)
' pixSetMaskedCmap()
' pixSetMaskedCmap(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place operation.
''' (2) It paints a single color through the mask (as a stencil).
''' (3) The mask origin is placed at (x,y) on pixs, and the
''' operation is clipped to the intersection of the mask and pixs.
''' (4) If pixm == NULL, a warning is given.
''' (5) Typically, pixm is a small binary mask located somewhere
''' on the larger pixs.
''' (6) If the color is in the colormap, it is used.  Otherwise,
''' it is added if possible; an error is returned if the
''' colormap is already full.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2, 4 or 8 bpp, colormapped</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask; no-op if NULL</param>
'''  <param name="x">[in] - origin of pixm relative to pixs; can be negative</param>
'''  <param name="y">[in] - origin of pixm relative to pixs; can be negative</param>
'''  <param name="rval">[in] - new color to set at each masked pixel</param>
'''  <param name="gval">[in] - new color to set at each masked pixel</param>
'''  <param name="bval">[in] - new color to set at each masked pixel</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetMaskedCmap(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetMaskedCmap( pixs.Pointer, pixmPTR, x, y, rval, gval, bval)

	Return _Result
End Function

#End Region
#Region "SRC\parseprotos.c"
' SRC\parseprotos.c (142, 1)
' 
' parseForProtos(const char *, const char *) as char *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function parseForProtos(
				ByRef filein as String, 
				ByRef prestring as String) as String

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (prestring) then Throw New ArgumentNullException  ("prestring cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.parseForProtos( filein, prestring)

	Return _Result
End Function

#End Region
#Region "SRC\partition.c"
' SRC\partition.c (189, 1)
' boxaGetWhiteblocks()
' boxaGetWhiteblocks(BOXA *, BOX *, l_int32, l_int32, l_float32, l_int32, l_float32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This uses the elegant Breuel algorithm, found in "Two
''' Geometric Algorithms for Layout Analysis", 2002,
''' url "citeseer.ist.psu.edu/breuel02two.html".
''' It starts with the bounding boxes (b.b.) of the connected
''' components (c.c.) in a region, along with the rectangle
''' representing that region.  It repeatedly divides the
''' rectangle into four maximal rectangles that exclude a
''' pivot rectangle, sorting them in a priority queue
''' according to one of the six sort flags.  It returns a boxa
''' of the "largest" set that have no intersection with boxes
''' from the input boxas.
''' (2) If box == NULL, the initial region is the minimal region
''' that includes the origin and every box in boxas.
''' (3) maxboxes is the maximum number of whitespace boxes that will
''' be returned.  The actual number will depend on the image
''' and the values chosen for maxoverlap and maxpops.  In many
''' cases, the actual number will be 'maxboxes'.
''' (4) maxoverlap allows pruning of whitespace boxes depending on
''' the overlap.  To avoid all pruning, use maxoverlap = 1.0.
''' To select only boxes that have no overlap with each other
''' (maximal pruning), choose maxoverlap = 0.0.
''' Otherwise, no box can have more than the 'maxoverlap' fraction
''' of its area overlapped by any larger (in the sense of the
''' sortflag) box.
''' (5) Choose maxperim (actually, maximum half-perimeter) to
''' represent a c.c. that is small enough so that you don't care
''' about the white space that could be inside of it.  For all such
''' c.c., the pivot for 'quadfurcation' of a rectangle is selected
''' as having a reasonable proximity to the rectangle centroid.
''' (6) Use fract in the range [0.0 ... 1.0].  Set fract = 0.0
''' to choose the small box nearest the centroid as the pivot.
''' If you choose fract GT 0.0, it is suggested that you call
''' boxaPermuteRandom() first, to permute the boxes (see usage below).
''' This should reduce the search time for each of the pivot boxes.
''' (7) Choose maxpops to be the maximum number of rectangles that
''' are popped from the heap.  This is an indirect way to limit the
''' execution time.  Use 0 for default (a fairly large number).
''' At any time, you can expect the heap to contain about
''' 2.5 times as many boxes as have been popped off.
''' (8) The output result is a sorted set of overlapping
''' boxes, constrained by 'maxboxes', 'maxoverlap' and 'maxpops'.
''' (9) The main defect of the method is that it abstracts out the
''' actual components, retaining only the b.b. for analysis.
''' Consider a component with a large b.b.  If this is chosen
''' as a pivot, all white space inside is immediately taken
''' out of consideration.  Furthermore, even if it is never chosen
''' as a pivot, as the partitioning continues, at no time will
''' any of the whitespace inside this component be part of a
''' rectangle with zero overlapping boxes.  Thus, the interiors
''' of all boxes are necessarily excluded from the union of
''' the returned whitespace boxes.
''' (10) It should be noted that the algorithm puts a large number
''' of partels on the queue.  Setting a limit of X partels to
''' remove from the queue, one typically finds that there will be
''' several times that number (say, 2X - 3X) left on the queue.
''' For an efficient algorithm to find the largest white or
''' or black rectangles, without permitting them to overlap,
''' see pixFindLargeRectangles().
''' (11) USAGE One way to accommodate to this weakness is to remove such
''' large b.b. before starting the computation.  For example,
''' if 'box' is an input image region containing 'boxa' b.b. of c.c.
''' // Faster pivot choosing
''' boxaPermuteRandom(boxa, boxa);
''' // Remove anything either large width or height
''' boxat = boxaSelectBySize(boxa, maxwidth, maxheight,
''' L_SELECT_IF_BOTH, L_SELECT_IF_LT,
''' NULL);
''' boxad = boxaGetWhiteblocks(boxat, box, type, maxboxes,
''' maxoverlap, maxperim, fract,
''' maxpops);
''' The result will be rectangular regions of "white space" that
''' extend into (and often through) the excluded components.
''' (11) As a simple example, suppose you wish to find the columns on a page.
''' First exclude large c.c. that may block the columns, and then call
''' boxad = boxaGetWhiteblocks(boxa, box, L_SORT_BY_HEIGHT,
''' 20, 0.15, 200, 0.2, 2000);
''' to get the 20 tallest boxes with no more than 0.15 overlap
''' between a box and any of the taller ones, and avoiding the
''' use of any c.c. with a b.b. half perimeter greater than 200
''' as a pivot.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - typically, a set of bounding boxes of fg components</param>
'''  <param name="box">[in] - initial region; typically including all boxes in boxas; if null, it computes the region to include all boxes in boxas</param>
'''  <param name="sortflag">[in] - L_SORT_BY_WIDTH, L_SORT_BY_HEIGHT, L_SORT_BY_MIN_DIMENSION, L_SORT_BY_MAX_DIMENSION, L_SORT_BY_PERIMETER, L_SORT_BY_AREA</param>
'''  <param name="maxboxes">[in] - maximum number of output whitespace boxes; e.g., 100</param>
'''  <param name="maxoverlap">[in] - maximum fractional overlap of a box by any of the larger boxes; e.g., 0.2</param>
'''  <param name="maxperim">[in] - maximum half-perimeter, in pixels, for which pivot is selected by proximity to box centroid; e.g., 200</param>
'''  <param name="fract">[in] - fraction of box diagonal that is an acceptable distance from the box centroid to select the pivot; e.g., 0.2</param>
'''  <param name="maxpops">[in] - maximum number of pops from the heap; use 0 as default</param>
'''   <returns>boxa of sorted whitespace boxes, or NULL on error</returns>
Public Shared Function boxaGetWhiteblocks(
				ByVal boxas as Boxa, 
				ByVal box as Box, 
				ByVal sortflag as Enumerations.L_SORT_BY, 
				ByVal maxboxes as Integer, 
				ByVal maxoverlap as Single, 
				ByVal maxperim as Integer, 
				ByVal fract as Single, 
				ByVal maxpops as Integer) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If IsNothing (maxoverlap) then Throw New ArgumentNullException  ("maxoverlap cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaGetWhiteblocks( boxas.Pointer, box.Pointer, sortflag, maxboxes, maxoverlap, maxperim, fract, maxpops)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\partition.c (621, 1)
' boxaPruneSortedOnOverlap()
' boxaPruneSortedOnOverlap(BOXA *, l_float32) as BOXA *
'''  <summary>
''' Notes
''' (1) This selectively removes smaller boxes when they are overlapped
''' by any larger box by more than the input 'maxoverlap' fraction.
''' (2) To avoid all pruning, use maxoverlap = 1.0.  To select only
''' boxes that have no overlap with each other (maximal pruning),
''' set maxoverlap = 0.0.
''' (3) If there are no boxes in boxas, returns an empty boxa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="boxas">[in] - sorted by size in decreasing order</param>
'''  <param name="maxoverlap">[in] - maximum fractional overlap of a box by any of the larger boxes</param>
'''   <returns>boxad pruned, or NULL on error</returns>
Public Shared Function boxaPruneSortedOnOverlap(
				ByVal boxas as Boxa, 
				ByVal maxoverlap as Single) as Boxa

	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (maxoverlap) then Throw New ArgumentNullException  ("maxoverlap cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaPruneSortedOnOverlap( boxas.Pointer, maxoverlap)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

#End Region
#Region "SRC\pdfio1.c"
' SRC\pdfio1.c (239, 1)
' convertFilesToPdf()
' convertFilesToPdf(const char *, const char *, l_int32, l_float32, l_int32, l_int32, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) If %substr is not NULL, only image filenames that contain
''' the substring can be used.  If %substr == NULL, all files
''' in the directory are used.
''' (2) The files in the directory, after optional filtering by
''' the substring, are lexically sorted in increasing order
''' before concatenation.
''' (3) The scalefactor is applied to each image before encoding.
''' If you enter a value LT= 0.0, it will be set to 1.0.
''' (4) Specifying one of the three encoding types for %type forces
''' all images to be compressed with that type.  Use 0 to have
''' the type determined for each image based on depth and whether
''' or not it has a colormap.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirname">[in] - directory name containing images</param>
'''  <param name="substr">[in][optional] - substring filter on filenames; can be NULL</param>
'''  <param name="res">[in] - input resolution of all images</param>
'''  <param name="scalefactor">[in] - scaling factor applied to each image; GT 0.0</param>
'''  <param name="type">[in] - encoding type (L_JPEG_ENCODE, L_G4_ENCODE, L_FLATE_ENCODE, or 0 for default</param>
'''  <param name="quality">[in] - used for JPEG only; 0 for default (75)</param>
'''  <param name="title">[in][optional] - pdf title; if null, taken from the first image filename</param>
'''  <param name="fileout">[in] - pdf file of all images</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertFilesToPdf(
				ByVal dirname as String, 
				ByVal substr as String, 
				ByVal res as Integer, 
				ByVal scalefactor as Single, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByVal title as String, 
				ByVal fileout as String) as Integer

	If IsNothing (dirname) then Throw New ArgumentNullException  ("dirname cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertFilesToPdf( dirname, substr, res, scalefactor, type, quality, title, fileout)

	Return _Result
End Function

' SRC\pdfio1.c (287, 1)
' saConvertFilesToPdf()
' saConvertFilesToPdf(SARRAY *, l_int32, l_float32, l_int32, l_int32, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) See convertFilesToPdf().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array of pathnames for images</param>
'''  <param name="res">[in] - input resolution of all images</param>
'''  <param name="scalefactor">[in] - scaling factor applied to each image; GT 0.0</param>
'''  <param name="type">[in] - encoding type (L_JPEG_ENCODE, L_G4_ENCODE, L_FLATE_ENCODE, or 0 for default</param>
'''  <param name="quality">[in] - used for JPEG only; 0 for default (75)</param>
'''  <param name="title">[in][optional] - pdf title; if null, taken from the first image filename</param>
'''  <param name="fileout">[in] - pdf file of all images</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function saConvertFilesToPdf(
				ByVal sa as Sarray, 
				ByVal res as Integer, 
				ByVal scalefactor as Single, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByVal title as String, 
				ByVal fileout as String) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.saConvertFilesToPdf( sa.Pointer, res, scalefactor, type, quality, title, fileout)

	Return _Result
End Function

' SRC\pdfio1.c (340, 1)
' saConvertFilesToPdfData()
' saConvertFilesToPdfData(SARRAY *, l_int32, l_float32, l_int32, l_int32, const char *, l_uint8 **, size_t *) as l_ok
'''  <summary>
''' Notes
''' (1) See convertFilesToPdf().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array of pathnames for images</param>
'''  <param name="res">[in] - input resolution of all images</param>
'''  <param name="scalefactor">[in] - scaling factor applied to each image; GT 0.0</param>
'''  <param name="type">[in] - encoding type (L_JPEG_ENCODE, L_G4_ENCODE, L_FLATE_ENCODE, or 0 for default</param>
'''  <param name="quality">[in] - used for JPEG only; 0 for default (75)</param>
'''  <param name="title">[in][optional] - pdf title; if null, taken from the first image filename</param>
'''  <param name="pdata">[out] - output pdf data (of all images</param>
'''  <param name="pnbytes">[out] - size of output pdf data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function saConvertFilesToPdfData(
				ByVal sa as Sarray, 
				ByVal res as Integer, 
				ByVal scalefactor as Single, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByVal title as String, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.saConvertFilesToPdfData( sa.Pointer, res, scalefactor, type, quality, title, pdataPTR, pnbytes)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pdfio1.c (457, 1)
' selectDefaultPdfEncoding()
' selectDefaultPdfEncoding(PIX *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This attempts to choose an encoding for the pix that results
''' in the smallest file, assuming that if jpeg encoded, it will
''' use quality = 75.  The decision is approximate, in that
''' (a) all colormapped images will be losslessly encoded with
''' gzip (flate), and (b) an image with less than about 20 colors
''' is likely to be smaller if flate encoded than if encoded
''' as a jpeg (dct).  For example, an image made by pixScaleToGray3()
''' will have 10 colors, and flate encoding will give about
''' twice the compression as jpeg with quality = 75.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="ptype">[out] - L_G4_ENCODE, L_JPEG_ENCODE, L_FLATE_ENCODE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function selectDefaultPdfEncoding(
				ByVal pix as Pix, 
				ByRef ptype as Enumerations.L_ENCODE) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.selectDefaultPdfEncoding( pix.Pointer, ptype)

	Return _Result
End Function

' SRC\pdfio1.c (520, 1)
' convertUnscaledFilesToPdf()
' convertUnscaledFilesToPdf(const char *, const char *, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) If %substr is not NULL, only image filenames that contain
''' the substring can be used.  If %substr == NULL, all files
''' in the directory are used.
''' (2) The files in the directory, after optional filtering by
''' the substring, are lexically sorted in increasing order
''' before concatenation.
''' (3) For jpeg and jp2k, this is very fast because the compressed
''' data is wrapped up and concatenated.  For png and tiffg4,
''' the images must be read and recompressed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirname">[in] - directory name containing images</param>
'''  <param name="substr">[in][optional] - substring filter on filenames; can be NULL</param>
'''  <param name="title">[in][optional] - pdf title; if null, taken from the first image filename</param>
'''  <param name="fileout">[in] - pdf file of all images</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertUnscaledFilesToPdf(
				ByVal dirname as String, 
				ByVal substr as String, 
				ByVal title as String, 
				ByVal fileout as String) as Integer

	If IsNothing (dirname) then Throw New ArgumentNullException  ("dirname cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertUnscaledFilesToPdf( dirname, substr, title, fileout)

	Return _Result
End Function

' SRC\pdfio1.c (558, 1)
' saConvertUnscaledFilesToPdf()
' saConvertUnscaledFilesToPdf(SARRAY *, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) See convertUnscaledFilesToPdf().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array of pathnames for images</param>
'''  <param name="title">[in][optional] - pdf title; if null, taken from the first image filename</param>
'''  <param name="fileout">[in] - pdf file of all images</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function saConvertUnscaledFilesToPdf(
				ByVal sa as Sarray, 
				ByVal title as String, 
				ByVal fileout as String) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.saConvertUnscaledFilesToPdf( sa.Pointer, title, fileout)

	Return _Result
End Function

' SRC\pdfio1.c (596, 1)
' saConvertUnscaledFilesToPdfData()
' saConvertUnscaledFilesToPdfData(SARRAY *, const char *, l_uint8 **, size_t *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array of pathnames for images</param>
'''  <param name="title">[in][optional] - pdf title; if null, taken from the first image filename</param>
'''  <param name="pdata">[out] - output pdf data (of all images)</param>
'''  <param name="pnbytes">[out] - size of output pdf data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function saConvertUnscaledFilesToPdfData(
				ByVal sa as Sarray, 
				ByVal title as String, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.saConvertUnscaledFilesToPdfData( sa.Pointer, title, pdataPTR, pnbytes)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pdfio1.c (668, 1)
' convertUnscaledToPdfData()
' convertUnscaledToPdfData(const char *, const char *, l_uint8 **, size_t *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - of image file</param>
'''  <param name="title">[in][optional] - pdf title; can be NULL</param>
'''  <param name="pdata">[out] - output pdf data for image</param>
'''  <param name="pnbytes">[out] - size of output pdf data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertUnscaledToPdfData(
				ByVal fname as String, 
				ByVal title as String, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger) as Integer

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.convertUnscaledToPdfData( fname, title, pdataPTR, pnbytes)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pdfio1.c (752, 1)
' pixaConvertToPdf()
' pixaConvertToPdf(PIXA *, l_int32, l_float32, l_int32, l_int32, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) The images are encoded with G4 if 1 bpp; JPEG if 8 bpp without
''' colormap and many colors, or 32 bpp; FLATE for anything else.
''' (2) The scalefactor must be GT 0.0; otherwise it is set to 1.0.
''' (3) Specifying one of the three encoding types for %type forces
''' all images to be compressed with that type.  Use 0 to have
''' the type determined for each image based on depth and whether
''' or not it has a colormap.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - containing images all at the same resolution</param>
'''  <param name="res">[in] - override the resolution of each input image, in ppi; use 0 to respect the resolution embedded in the input</param>
'''  <param name="scalefactor">[in] - scaling factor applied to each image; GT 0.0</param>
'''  <param name="type">[in] - encoding type (L_JPEG_ENCODE, L_G4_ENCODE, L_FLATE_ENCODE, or 0 for default</param>
'''  <param name="quality">[in] - used for JPEG only; 0 for default (75)</param>
'''  <param name="title">[in][optional] - pdf title</param>
'''  <param name="fileout">[in] - pdf file of all images</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaConvertToPdf(
				ByVal pixa as Pixa, 
				ByVal res as Integer, 
				ByVal scalefactor as Single, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByVal title as String, 
				ByVal fileout as String) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaConvertToPdf( pixa.Pointer, res, scalefactor, type, quality, title, fileout)

	Return _Result
End Function

' SRC\pdfio1.c (804, 1)
' pixaConvertToPdfData()
' pixaConvertToPdfData(PIXA *, l_int32, l_float32, l_int32, l_int32, const char *, l_uint8 **, size_t *) as l_ok
'''  <summary>
''' Notes
''' (1) See pixaConvertToPdf().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - containing images all at the same resolution</param>
'''  <param name="res">[in] - input resolution of all images</param>
'''  <param name="scalefactor">[in] - scaling factor applied to each image; GT 0.0</param>
'''  <param name="type">[in] - encoding type (L_JPEG_ENCODE, L_G4_ENCODE, L_FLATE_ENCODE, or 0 for default</param>
'''  <param name="quality">[in] - used for JPEG only; 0 for default (75)</param>
'''  <param name="title">[in][optional] - pdf title</param>
'''  <param name="pdata">[out] - output pdf data (of all images</param>
'''  <param name="pnbytes">[out] - size of output pdf data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaConvertToPdfData(
				ByVal pixa as Pixa, 
				ByVal res as Integer, 
				ByVal scalefactor as Single, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByVal title as String, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaConvertToPdfData( pixa.Pointer, res, scalefactor, type, quality, title, pdataPTR, pnbytes)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pdfio1.c (950, 1)
' convertToPdf()
' convertToPdf(const char *, l_int32, l_int32, const char *, l_int32, l_int32, l_int32, const char *, L_PDF_DATA **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) To wrap only one image in pdf, input %plpd = NULL, and
''' the value of %position will be ignored
''' convertToPdf(...  type, quality, x, y, res, NULL, 0);
''' (2) To wrap multiple images on a single pdf page, this is called
''' once for each successive image.  Do it this way
''' L_PDF_DATA   lpd;
''' convertToPdf(...  type, quality, x, y, res, lpd, L_FIRST_IMAGE);
''' convertToPdf(...  type, quality, x, y, res, lpd, L_NEXT_IMAGE);
''' ...
''' convertToPdf(...  type, quality, x, y, res, lpd, L_LAST_IMAGE);
''' This will write the result to the value of %fileout specified
''' in the first call; succeeding values of %fileout are ignored.
''' On the last call the pdf data bytes are computed and written
''' to %fileout, lpd is destroyed internally, and the returned
''' value of lpd is null.  So the client has nothing to clean up.
''' (3) (a) Set %res == 0 to respect the resolution embedded in the
''' image file.  If no resolution is embedded, it will be set
''' to the default value.
''' (b) Set %res to some other value to override the file resolution.
''' (4) (a) If the input %res and the resolution of the output device
''' are equal, the image will be "displayed" at the same size
''' as the original.
''' (b) If the input %res is 72, the output device will render
''' the image at 1 pt/pixel.
''' (c) Some possible choices for the default input pix resolution are
''' 72 ppi  Render pix on any output device at one pt/pixel
''' 96 ppi  Windows default for generated display images
''' 300 ppi  Typical default for scanned images.
''' We choose 300, which is sensible for rendering page images.
''' However,  images come from a variety of sources, and
''' some are explicitly created for viewing on a display.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - input image file -- any format</param>
'''  <param name="type">[in] - L_G4_ENCODE, L_JPEG_ENCODE, L_FLATE_ENCODE</param>
'''  <param name="quality">[in] - used for JPEG only; 0 for default (75)</param>
'''  <param name="fileout">[in] - output pdf file; only required on last image on page</param>
'''  <param name="x">[in] - location of lower-left corner of image, in pixels, relative to the PostScript origin (0,0) at the lower-left corner of the page</param>
'''  <param name="y">[in] - location of lower-left corner of image, in pixels, relative to the PostScript origin (0,0) at the lower-left corner of the page</param>
'''  <param name="res">[in] - override the resolution of the input image, in ppi; use 0 to respect the resolution embedded in the input</param>
'''  <param name="title">[in][optional] - pdf title; if null, taken from filein</param>
'''  <param name="plpd">[in,out] - ptr to lpd, which is created on the first invocation and returned until last image is processed, at which time it is destroyed</param>
'''  <param name="position">[in] - in image sequence L_FIRST_IMAGE, L_NEXT_IMAGE, L_LAST_IMAGE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertToPdf(
				ByVal filein as String, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByVal fileout as String, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal res as Integer, 
				ByVal title as String, 
				ByRef plpd as L_Pdf_Data, 
				ByVal position as Enumerations.L_T_IMAGE) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")

	Dim plpdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(plpd) Then plpdPTR = plpd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.convertToPdf( filein, type, quality, fileout, x, y, res, title, plpdPTR, position)
	if plpdPTR <> IntPtr.Zero then plpd = new L_Pdf_Data(plpdPTR)

	Return _Result
End Function

' SRC\pdfio1.c (1021, 1)
' convertImageDataToPdf()
' convertImageDataToPdf(l_uint8 *, size_t, l_int32, l_int32, const char *, l_int32, l_int32, l_int32, const char *, L_PDF_DATA **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) If %res == 0 and the input resolution field is 0,
''' this will use DEFAULT_INPUT_RES.
''' (2) See comments in convertToPdf().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="imdata">[in] - array of formatted image data; e.g., png, jpeg</param>
'''  <param name="size">[in] - size of image data</param>
'''  <param name="type">[in] - L_G4_ENCODE, L_JPEG_ENCODE, L_FLATE_ENCODE</param>
'''  <param name="quality">[in] - used for JPEG only; 0 for default (75)</param>
'''  <param name="fileout">[in] - output pdf file; only required on last image on page</param>
'''  <param name="x">[in] - location of lower-left corner of image, in pixels, relative to the PostScript origin (0,0) at the lower-left corner of the page</param>
'''  <param name="y">[in] - location of lower-left corner of image, in pixels, relative to the PostScript origin (0,0) at the lower-left corner of the page</param>
'''  <param name="res">[in] - override the resolution of the input image, in ppi; use 0 to respect the resolution embedded in the input</param>
'''  <param name="title">[in][optional] - pdf title</param>
'''  <param name="plpd">[in,out] - ptr to lpd, which is created on the first invocation and returned until last image is processed, at which time it is destroyed</param>
'''  <param name="position">[in] - in image sequence L_FIRST_IMAGE, L_NEXT_IMAGE, L_LAST_IMAGE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertImageDataToPdf(
				ByVal imdata as Byte(), 
				ByVal size as UInteger, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByVal fileout as String, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal res as Integer, 
				ByVal title as String, 
				ByRef plpd as L_Pdf_Data, 
				ByVal position as Enumerations.L_T_IMAGE) as Integer

	If IsNothing (imdata) then Throw New ArgumentNullException  ("imdata cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")

	Dim plpdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(plpd) Then plpdPTR = plpd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.convertImageDataToPdf( imdata, size, type, quality, fileout, x, y, res, title, plpdPTR, position)
	if plpdPTR <> IntPtr.Zero then plpd = new L_Pdf_Data(plpdPTR)

	Return _Result
End Function

' SRC\pdfio1.c (1086, 1)
' convertToPdfData()
' convertToPdfData(const char *, l_int32, l_int32, l_uint8 **, size_t *, l_int32, l_int32, l_int32, const char *, L_PDF_DATA **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) If %res == 0 and the input resolution field is 0,
''' this will use DEFAULT_INPUT_RES.
''' (2) See comments in convertToPdf().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - input image file -- any format</param>
'''  <param name="type">[in] - L_G4_ENCODE, L_JPEG_ENCODE, L_FLATE_ENCODE</param>
'''  <param name="quality">[in] - used for JPEG only; 0 for default (75)</param>
'''  <param name="pdata">[out] - pdf data in memory</param>
'''  <param name="pnbytes">[out] - number of bytes in pdf data</param>
'''  <param name="x">[in] - location of lower-left corner of image, in pixels, relative to the PostScript origin (0,0) at the lower-left corner of the page</param>
'''  <param name="y">[in] - location of lower-left corner of image, in pixels, relative to the PostScript origin (0,0) at the lower-left corner of the page</param>
'''  <param name="res">[in] - override the resolution of the input image, in ppi; use 0 to respect the resolution embedded in the input</param>
'''  <param name="title">[in][optional] - pdf title; if null, use filein</param>
'''  <param name="plpd">[in,out] - ptr to lpd, which is created on the first invocation and returned until last image is processed, at which time it is destroyed</param>
'''  <param name="position">[in] - in image sequence L_FIRST_IMAGE, L_NEXT_IMAGE, L_LAST_IMAGE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertToPdfData(
				ByVal filein as String, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal res as Integer, 
				ByVal title as String, 
				ByRef plpd as L_Pdf_Data, 
				ByVal position as Enumerations.L_T_IMAGE) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero
	Dim plpdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(plpd) Then plpdPTR = plpd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.convertToPdfData( filein, type, quality, pdataPTR, pnbytes, x, y, res, title, plpdPTR, position)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)
	if plpdPTR <> IntPtr.Zero then plpd = new L_Pdf_Data(plpdPTR)

	Return _Result
End Function

' SRC\pdfio1.c (1154, 1)
' convertImageDataToPdfData()
' convertImageDataToPdfData(l_uint8 *, size_t, l_int32, l_int32, l_uint8 **, size_t *, l_int32, l_int32, l_int32, const char *, L_PDF_DATA **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) If %res == 0 and the input resolution field is 0,
''' this will use DEFAULT_INPUT_RES.
''' (2) See comments in convertToPdf().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="imdata">[in] - array of formatted image data; e.g., png, jpeg</param>
'''  <param name="size">[in] - size of image data</param>
'''  <param name="type">[in] - L_G4_ENCODE, L_JPEG_ENCODE, L_FLATE_ENCODE</param>
'''  <param name="quality">[in] - used for JPEG only; 0 for default (75)</param>
'''  <param name="pdata">[out] - pdf data in memory</param>
'''  <param name="pnbytes">[out] - number of bytes in pdf data</param>
'''  <param name="x">[in] - location of lower-left corner of image, in pixels, relative to the PostScript origin (0,0) at the lower-left corner of the page</param>
'''  <param name="y">[in] - location of lower-left corner of image, in pixels, relative to the PostScript origin (0,0) at the lower-left corner of the page</param>
'''  <param name="res">[in] - override the resolution of the input image, in ppi; use 0 to respect the resolution embedded in the input</param>
'''  <param name="title">[in][optional] - pdf title</param>
'''  <param name="plpd">[out] - ptr to lpd, which is created on the first invocation and returned until last image is processed, at which time it is destroyed</param>
'''  <param name="position">[in] - in image sequence L_FIRST_IMAGE, L_NEXT_IMAGE, L_LAST_IMAGE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertImageDataToPdfData(
				ByVal imdata as Byte(), 
				ByVal size as UInteger, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal res as Integer, 
				ByVal title as String, 
				ByRef plpd as L_Pdf_Data, 
				ByVal position as Enumerations.L_T_IMAGE) as Integer

	If IsNothing (imdata) then Throw New ArgumentNullException  ("imdata cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero
	Dim plpdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(plpd) Then plpdPTR = plpd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.convertImageDataToPdfData( imdata, size, type, quality, pdataPTR, pnbytes, x, y, res, title, plpdPTR, position)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)
	if plpdPTR <> IntPtr.Zero then plpd = new L_Pdf_Data(plpdPTR)

	Return _Result
End Function

' SRC\pdfio1.c (1223, 1)
' pixConvertToPdf()
' pixConvertToPdf(PIX *, l_int32, l_int32, const char *, l_int32, l_int32, l_int32, const char *, L_PDF_DATA **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) If %res == 0 and the input resolution field is 0,
''' this will use DEFAULT_INPUT_RES.
''' (2) This only writes data to fileout if it is the last
''' image to be written on the page.
''' (3) See comments in convertToPdf().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="type">[in] - L_G4_ENCODE, L_JPEG_ENCODE, L_FLATE_ENCODE</param>
'''  <param name="quality">[in] - used for JPEG only; 0 for default (75)</param>
'''  <param name="fileout">[in] - output pdf file; only required on last image on page</param>
'''  <param name="x">[in] - location of lower-left corner of image, in pixels, relative to the PostScript origin (0,0 at the lower-left corner of the page)</param>
'''  <param name="y">[in] - location of lower-left corner of image, in pixels, relative to the PostScript origin (0,0 at the lower-left corner of the page)</param>
'''  <param name="res">[in] - override the resolution of the input image, in ppi; use 0 to respect the resolution embedded in the input</param>
'''  <param name="title">[in][optional] - pdf title</param>
'''  <param name="plpd">[in,out] - ptr to lpd, which is created on the first invocation and returned until last image is processed</param>
'''  <param name="position">[in] - in image sequence L_FIRST_IMAGE, L_NEXT_IMAGE, L_LAST_IMAGE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixConvertToPdf(
				ByVal pix as Pix, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByVal fileout as String, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal res as Integer, 
				ByVal title as String, 
				ByRef plpd as L_Pdf_Data, 
				ByVal position as Enumerations.L_T_IMAGE) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")

	Dim plpdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(plpd) Then plpdPTR = plpd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixConvertToPdf( pix.Pointer, type, quality, fileout, x, y, res, title, plpdPTR, position)
	if plpdPTR <> IntPtr.Zero then plpd = new L_Pdf_Data(plpdPTR)

	Return _Result
End Function

' SRC\pdfio1.c (1286, 1)
' pixWriteStreamPdf()
' pixWriteStreamPdf(FILE *, PIX *, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This is the simplest interface for writing a single image
''' with pdf encoding to a stream.  It uses G4 encoding for 1 bpp,
''' JPEG encoding for 8 bpp (no cmap) and 32 bpp, and FLATE
''' encoding for everything else.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for writing</param>
'''  <param name="pix">[in] - all depths, cmap OK</param>
'''  <param name="res">[in] - override the resolution of the input image, in ppi; use 0 to respect the resolution embedded in the input</param>
'''  <param name="title">[in][optional] - pdf title; taken from the first image placed on a page; e.g., an input image filename</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWriteStreamPdf(
				ByVal fp as FILE, 
				ByVal pix as Pix, 
				ByVal res as Integer, 
				ByVal title as String) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteStreamPdf( fp.Pointer, pix.Pointer, res, title)

	Return _Result
End Function

' SRC\pdfio1.c (1335, 1)
' pixWriteMemPdf()
' pixWriteMemPdf(l_uint8 **, size_t *, PIX *, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This is the simplest interface for writing a single image
''' with pdf encoding to memory.  It uses G4 encoding for 1 bpp,
''' JPEG encoding for 8 bpp (no cmap) and 32 bpp, and FLATE
''' encoding for everything else.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - pdf as byte array</param>
'''  <param name="pnbytes">[out] - number of bytes in pdf array</param>
'''  <param name="pix">[in] - all depths, cmap OK</param>
'''  <param name="res">[in] - override the resolution of the input image, in ppi; use 0 to respect the resolution embedded in the input</param>
'''  <param name="title">[in][optional] - pdf title; taken from the first image placed on a page; e.g., an input image filename</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWriteMemPdf(
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger, 
				ByVal pix as Pix, 
				ByVal res as Integer, 
				ByVal title as String) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteMemPdf( pdataPTR, pnbytes, pix.Pointer, res, title)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pdfio1.c (1415, 1)
' convertSegmentedFilesToPdf()
' convertSegmentedFilesToPdf(const char *, const char *, l_int32, l_int32, l_int32, BOXAA *, l_int32, l_float32, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) If %substr is not NULL, only image filenames that contain
''' the substring can be used.  If %substr == NULL, all files
''' in the directory are used.
''' (2) The files in the directory, after optional filtering by
''' the substring, are lexically sorted in increasing order
''' before concatenation.
''' (3) The images are encoded with G4 if 1 bpp; JPEG if 8 bpp without
''' colormap and many colors, or 32 bpp; FLATE for anything else.
''' (4) The boxaa, if it exists, contains one boxa of "image regions"
''' for each image file.  The boxa must be aligned with the
''' sorted set of images.
''' (5) The scalefactor is applied to each image region.  It is
''' typically LT 1.0, to save bytes in the final pdf, because
''' the resolution is often not critical in non-text regions.
''' (6) If the non-image regions have pixel depth GT 1 and the encoding
''' type is G4, they are automatically scaled up by 2x and
''' thresholded.  Otherwise, no scaling is performed on them.
''' (7) Note that this function can be used to generate multipage
''' G4 compressed pdf from any input, by using %boxaa == NULL
''' and %type == L_G4_ENCODE.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirname">[in] - directory name containing images</param>
'''  <param name="substr">[in][optional] - substring filter on filenames; can be NULL</param>
'''  <param name="res">[in] - input resolution of all images</param>
'''  <param name="type">[in] - compression type for non-image regions; the image regions are always compressed with L_JPEG_ENCODE</param>
'''  <param name="thresh">[in] - used for converting gray --GT 1 bpp with L_G4_ENCODE</param>
'''  <param name="baa">[in][optional] - boxaa of image regions</param>
'''  <param name="quality">[in] - used for JPEG only; 0 for default (75)</param>
'''  <param name="scalefactor">[in] - scaling factor applied to each image region</param>
'''  <param name="title">[in][optional] - pdf title; if null, taken from the first image filename</param>
'''  <param name="fileout">[in] - pdf file of all images</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertSegmentedFilesToPdf(
				ByVal dirname as String, 
				ByVal substr as String, 
				ByVal res as Integer, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal thresh as Enumerations.L_ENCODE, 
				ByVal baa as Boxaa, 
				ByVal quality as Integer, 
				ByVal scalefactor as Single, 
				ByVal title as String, 
				ByVal fileout as String) as Integer

	If IsNothing (dirname) then Throw New ArgumentNullException  ("dirname cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")

	Dim baaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(baa) Then baaPTR = baa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.convertSegmentedFilesToPdf( dirname, substr, res, type, thresh, baaPTR, quality, scalefactor, title, fileout)

	Return _Result
End Function

' SRC\pdfio1.c (1535, 1)
' convertNumberedMasksToBoxaa()
' convertNumberedMasksToBoxaa(const char *, const char *, l_int32, l_int32) as BOXAA *
'''  <summary>
''' Notes
''' (1) This is conveniently used to generate the input boxaa
''' for convertSegmentedFilesToPdf().  It guarantees that the
''' boxa will be aligned with the page images, even if some
''' of the boxa are empty.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirname">[in] - directory name containing mask images</param>
'''  <param name="substr">[in][optional] - substring filter on filenames; can be NULL</param>
'''  <param name="numpre">[in] - number of characters in name before number</param>
'''  <param name="numpost">[in] - number of characters in name after number, up to a dot before an extension including an extension and the dot separator</param>
'''   <returns>boxaa of mask regions, or NULL on error</returns>
Public Shared Function convertNumberedMasksToBoxaa(
				ByVal dirname as String, 
				ByVal substr as String, 
				ByVal numpre as Integer, 
				ByVal numpost as Integer) as Boxaa

	If IsNothing (dirname) then Throw New ArgumentNullException  ("dirname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.convertNumberedMasksToBoxaa( dirname, substr, numpre, numpost)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxaa(_Result)
End Function

' SRC\pdfio1.c (1644, 1)
' convertToPdfSegmented()
' convertToPdfSegmented(const char *, l_int32, l_int32, l_int32, BOXA *, l_int32, l_float32, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) If there are no image regions, set %boxa == NULL;
''' %quality and %scalefactor are ignored.
''' (2) Typically, %scalefactor is LT 1.0, because the image regions
''' can be rendered at a lower resolution (for better compression)
''' than the text regions.  If %scalefactor == 0, we use 1.0.
''' If the input image is 1 bpp and scalefactor LT 1.0, we
''' use scaleToGray() to downsample the image regions to gray
''' before compressing them.
''' (3) If the compression type for non-image regions is L_G4_ENCODE
''' and bpp GT 1, the image is upscaled 2x and thresholded
''' to 1 bpp.  That is the only situation where %thresh is used.
''' (4) The parameter %quality is only used for image regions.
''' If %type == L_JPEG_ENCODE, default jpeg quality (75) is
''' used for the non-image regions.
''' (5) Processing matrix for non-image regions.
''' Input  G4  JPEG FLATE
''' ----------|---------------------------------------------------
''' 1 bpp  |  1x, 1 bpp 1x flate, 1 bpp  1x, 1 bpp
''' |
''' cmap   |  2x, 1 bpp 1x flate, cmap   1x, cmap
''' |
''' 2,4 bpp   |  2x, 1 bpp 1x flate   1x, 2,4 bpp
''' no cmap   |   2,4 bpp
''' |
''' 8,32 bpp  |  2x, 1 bpp 1x (jpeg)  1x, 8,32 bpp
''' no cmap   |   8,32 bpp
''' Summary
''' (a) if G4 is requested, G4 is used, with 2x upscaling
''' for all cases except 1 bpp.
''' (b) if JPEG is requested, use flate encoding for all cases
''' except 8 bpp without cmap and 32 bpp (rgb).
''' (c) if FLATE is requested, use flate with no transformation
''' of the raster data.
''' (6) Calling options/sequence for these functions
''' file  --GT  file   (convertToPdfSegmented)
''' pix  --GT  file   (pixConvertToPdfSegmented)
''' pix  --GT  data   (pixConvertToPdfDataSegmented)
''' file  --GT  data   (convertToPdfDataSegmented)
''' pix  --GT  data   (pixConvertToPdfDataSegmented)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - input image file -- any format</param>
'''  <param name="res">[in] - input image resolution; typ. 300 ppi; use 0 for default</param>
'''  <param name="type">[in] - compression type for non-image regions; the image regions are always compressed with L_JPEG_ENCODE</param>
'''  <param name="thresh">[in] - used for converting gray --GT 1 bpp with L_G4_ENCODE</param>
'''  <param name="boxa">[in][optional] - of image regions; can be null</param>
'''  <param name="quality">[in] - used for jpeg image regions; 0 for default</param>
'''  <param name="scalefactor">[in] - used for jpeg regions; must be LT= 1.0</param>
'''  <param name="title">[in][optional] - pdf title; typically taken from the input file for the pix</param>
'''  <param name="fileout">[in] - output pdf file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertToPdfSegmented(
				ByVal filein as String, 
				ByVal res as Integer, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal thresh as Enumerations.L_ENCODE, 
				ByVal boxa as Boxa, 
				ByVal quality as Integer, 
				ByVal scalefactor as Single, 
				ByVal title as String, 
				ByVal fileout as String) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")

	Dim boxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(boxa) Then boxaPTR = boxa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.convertToPdfSegmented( filein, res, type, thresh, boxaPTR, quality, scalefactor, title, fileout)

	Return _Result
End Function

' SRC\pdfio1.c (1704, 1)
' pixConvertToPdfSegmented()
' pixConvertToPdfSegmented(PIX *, l_int32, l_int32, l_int32, BOXA *, l_int32, l_float32, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) See convertToPdfSegmented() for details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth, cmap OK</param>
'''  <param name="res">[in] - input image resolution; typ. 300 ppi; use 0 for default</param>
'''  <param name="type">[in] - compression type for non-image regions; the image regions are always compressed with L_JPEG_ENCODE</param>
'''  <param name="thresh">[in] - used for converting gray --GT 1 bpp with L_G4_ENCODE</param>
'''  <param name="boxa">[in][optional] - of image regions; can be null</param>
'''  <param name="quality">[in] - used for jpeg image regions; 0 for default</param>
'''  <param name="scalefactor">[in] - used for jpeg regions; must be LT= 1.0</param>
'''  <param name="title">[in][optional] - pdf title; typically taken from the input file for the pix</param>
'''  <param name="fileout">[in] - output pdf file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixConvertToPdfSegmented(
				ByVal pixs as Pix, 
				ByVal res as Integer, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal thresh as Enumerations.L_ENCODE, 
				ByVal boxa as Boxa, 
				ByVal quality as Integer, 
				ByVal scalefactor as Single, 
				ByVal title as String, 
				ByVal fileout as String) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")

	Dim boxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(boxa) Then boxaPTR = boxa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixConvertToPdfSegmented( pixs.Pointer, res, type, thresh, boxaPTR, quality, scalefactor, title, fileout)

	Return _Result
End Function

' SRC\pdfio1.c (1767, 1)
' convertToPdfDataSegmented()
' convertToPdfDataSegmented(const char *, l_int32, l_int32, l_int32, BOXA *, l_int32, l_float32, const char *, l_uint8 **, size_t *) as l_ok
'''  <summary>
''' Notes
''' (1) If there are no image regions, set %boxa == NULL;
''' %quality and %scalefactor are ignored.
''' (2) Typically, %scalefactor is LT 1.0.  The image regions are
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - input image file -- any format</param>
'''  <param name="res">[in] - input image resolution; typ. 300 ppi; use 0 for default</param>
'''  <param name="type">[in] - compression type for non-image regions; the image regions are always compressed with L_JPEG_ENCODE</param>
'''  <param name="thresh">[in] - used for converting gray --GT 1 bpp with L_G4_ENCODE</param>
'''  <param name="boxa">[in][optional] - image regions; can be null</param>
'''  <param name="quality">[in] - used for jpeg image regions; 0 for default</param>
'''  <param name="scalefactor">[in] - used for jpeg regions; must be LT= 1.0</param>
'''  <param name="title">[in][optional] - pdf title; if null, uses filein</param>
'''  <param name="pdata">[out] - pdf data in memory</param>
'''  <param name="pnbytes">[out] - number of bytes in pdf data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertToPdfDataSegmented(
				ByVal filein as String, 
				ByVal res as Integer, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal thresh as Enumerations.L_ENCODE, 
				ByVal boxa as Boxa, 
				ByVal quality as Integer, 
				ByVal scalefactor as Single, 
				ByVal title as String, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")

	Dim boxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(boxa) Then boxaPTR = boxa.Pointer
	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.convertToPdfDataSegmented( filein, res, type, thresh, boxaPTR, quality, scalefactor, title, pdataPTR, pnbytes)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pdfio1.c (1834, 1)
' pixConvertToPdfDataSegmented()
' pixConvertToPdfDataSegmented(PIX *, l_int32, l_int32, l_int32, BOXA *, l_int32, l_float32, const char *, l_uint8 **, size_t *) as l_ok
'''  <summary>
''' Notes
''' (1) See convertToPdfSegmented() for details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth, cmap OK</param>
'''  <param name="res">[in] - input image resolution; typ. 300 ppi; use 0 for default</param>
'''  <param name="type">[in] - compression type for non-image regions; the image regions are always compressed with L_JPEG_ENCODE</param>
'''  <param name="thresh">[in] - used for converting gray --GT 1 bpp with L_G4_ENCODE</param>
'''  <param name="boxa">[in][optional] - of image regions; can be null</param>
'''  <param name="quality">[in] - used for jpeg image regions; 0 for default</param>
'''  <param name="scalefactor">[in] - used for jpeg regions; must be LT= 1.0</param>
'''  <param name="title">[in][optional] - pdf title; typically taken from the input file for the pix</param>
'''  <param name="pdata">[out] - pdf data in memory</param>
'''  <param name="pnbytes">[out] - number of bytes in pdf data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixConvertToPdfDataSegmented(
				ByVal pixs as Pix, 
				ByVal res as Integer, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal thresh as Enumerations.L_ENCODE, 
				ByVal boxa as Boxa, 
				ByVal quality as Integer, 
				ByVal scalefactor as Single, 
				ByVal title as String, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")

	Dim boxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(boxa) Then boxaPTR = boxa.Pointer
	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixConvertToPdfDataSegmented( pixs.Pointer, res, type, thresh, boxaPTR, quality, scalefactor, title, pdataPTR, pnbytes)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pdfio1.c (1998, 1)
' concatenatePdf()
' concatenatePdf(const char *, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This only works with leptonica-formatted single-page pdf files.
''' (2) If %substr is not NULL, only filenames that contain
''' the substring can be returned.  If %substr == NULL,
''' none of the filenames are filtered out.
''' (3) The files in the directory, after optional filtering by
''' the substring, are lexically sorted in increasing order
''' before concatenation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirname">[in] - directory name containing single-page pdf files</param>
'''  <param name="substr">[in][optional] - substring filter on filenames; can be NULL</param>
'''  <param name="fileout">[in] - concatenated pdf file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function concatenatePdf(
				ByVal dirname as String, 
				ByVal substr as String, 
				ByVal fileout as String) as Integer

	If IsNothing (dirname) then Throw New ArgumentNullException  ("dirname cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.concatenatePdf( dirname, substr, fileout)

	Return _Result
End Function

' SRC\pdfio1.c (2033, 1)
' saConcatenatePdf()
' saConcatenatePdf(SARRAY *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This only works with leptonica-formatted single-page pdf files.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array of pathnames for single-page pdf files</param>
'''  <param name="fileout">[in] - concatenated pdf file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function saConcatenatePdf(
				ByVal sa as Sarray, 
				ByVal fileout as String) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.saConcatenatePdf( sa.Pointer, fileout)

	Return _Result
End Function

' SRC\pdfio1.c (2069, 1)
' ptraConcatenatePdf()
' ptraConcatenatePdf(L_PTRA *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This only works with leptonica-formatted single-page pdf files.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pa">[in] - array of pdf strings, each for a single-page pdf file</param>
'''  <param name="fileout">[in] - concatenated pdf file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptraConcatenatePdf(
				ByVal pa as L_Ptra, 
				ByVal fileout as String) as Integer

	If IsNothing (pa) then Throw New ArgumentNullException  ("pa cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptraConcatenatePdf( pa.Pointer, fileout)

	Return _Result
End Function

' SRC\pdfio1.c (2113, 1)
' concatenatePdfToData()
' concatenatePdfToData(const char *, const char *, l_uint8 **, size_t *) as l_ok
'''  <summary>
''' Notes
''' (1) This only works with leptonica-formatted single-page pdf files.
''' (2) If %substr is not NULL, only filenames that contain
''' the substring can be returned.  If %substr == NULL,
''' none of the filenames are filtered out.
''' (3) The files in the directory, after optional filtering by
''' the substring, are lexically sorted in increasing order
''' before concatenation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirname">[in] - directory name containing single-page pdf files</param>
'''  <param name="substr">[in][optional] - substring filter on filenames; can be NULL</param>
'''  <param name="pdata">[out] - concatenated pdf data in memory</param>
'''  <param name="pnbytes">[out] - number of bytes in pdf data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function concatenatePdfToData(
				ByVal dirname as String, 
				ByVal substr as String, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger) as Integer

	If IsNothing (dirname) then Throw New ArgumentNullException  ("dirname cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.concatenatePdfToData( dirname, substr, pdataPTR, pnbytes)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pdfio1.c (2154, 1)
' saConcatenatePdfToData()
' saConcatenatePdfToData(SARRAY *, l_uint8 **, size_t *) as l_ok
'''  <summary>
''' Notes
''' (1) This only works with leptonica-formatted single-page pdf files.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array of pathnames for single-page pdf files</param>
'''  <param name="pdata">[out] - concatenated pdf data in memory</param>
'''  <param name="pnbytes">[out] - number of bytes in pdf data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function saConcatenatePdfToData(
				ByVal sa as Sarray, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.saConcatenatePdfToData( sa.Pointer, pdataPTR, pnbytes)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

#End Region
#Region "SRC\pdfio2.c"
' SRC\pdfio2.c (182, 1)
' pixConvertToPdfData()
' pixConvertToPdfData(PIX *, l_int32, l_int32, l_uint8 **, size_t *, l_int32, l_int32, l_int32, const char *, L_PDF_DATA **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) If %res == 0 and the input resolution field is 0,
''' this will use DEFAULT_INPUT_RES.
''' (2) This only writes %data if it is the last image to be
''' written on the page.
''' (3) See comments in convertToPdf().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - all depths; cmap OK</param>
'''  <param name="type">[in] - L_G4_ENCODE, L_JPEG_ENCODE, L_FLATE_ENCODE</param>
'''  <param name="quality">[in] - used for JPEG only; 0 for default (75)</param>
'''  <param name="pdata">[out] - pdf array</param>
'''  <param name="pnbytes">[out] - number of bytes in pdf array</param>
'''  <param name="x">[in] - location of lower-left corner of image, in pixels, relative to the PostScript origin (0,0) at the lower-left corner of the page)</param>
'''  <param name="y">[in] - location of lower-left corner of image, in pixels, relative to the PostScript origin (0,0) at the lower-left corner of the page)</param>
'''  <param name="res">[in] - override the resolution of the input image, in ppi; use 0 to respect the resolution embedded in the input</param>
'''  <param name="title">[in][optional] - pdf title</param>
'''  <param name="plpd">[in,out] - ptr to lpd, which is created on the first invocation and returned until last image is processed</param>
'''  <param name="position">[in] - in image sequence L_FIRST_IMAGE, L_NEXT_IMAGE, L_LAST_IMAGE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixConvertToPdfData(
				ByVal pix as Pix, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal res as Integer, 
				ByVal title as String, 
				ByRef plpd as L_Pdf_Data, 
				ByVal position as Enumerations.L_T_IMAGE) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero
	Dim plpdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(plpd) Then plpdPTR = plpd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixConvertToPdfData( pix.Pointer, type, quality, pdataPTR, pnbytes, x, y, res, title, plpdPTR, position)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)
	if plpdPTR <> IntPtr.Zero then plpd = new L_Pdf_Data(plpdPTR)

	Return _Result
End Function

' SRC\pdfio2.c (307, 1)
' ptraConcatenatePdfToData()
' ptraConcatenatePdfToData(L_PTRA *, SARRAY *, l_uint8 **, size_t *) as l_ok
'''  <summary>
''' Notes
''' (1) This only works with leptonica-formatted single-page pdf files.
''' pdf files generated by other programs will have unpredictable
''' (and usually bad) results.  The requirements for each pdf file
''' (a) The Catalog and Info objects are the first two.
''' (b) Object 3 is Pages
''' (c) Object 4 is Page
''' (d) The remaining objects are Contents, XObjects, and ColorSpace
''' (2) We remove trailers from each page, and append the full trailer
''' for all pages at the end.
''' (3) For all but the first file, remove the ID and the first 3
''' objects (catalog, info, pages), so that each subsequent
''' file has only objects of these classes
''' Page, Contents, XObject, ColorSpace (Indexed RGB).
''' For those objects, we substitute these refs to objects
''' in the local file
''' Page  Parent(object 3), Contents, XObject(typically multiple)
''' XObject  [ColorSpace if indexed]
''' The Pages object on the first page (object 3) has a Kids array
''' of references to all the Page objects, with a Count equal
''' to the number of pages.  Each Page object refers back to
''' this parent.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pa_data">[in] - ptra array of pdf strings, each for a single-page pdf file</param>
'''  <param name="sa">[in] - string array [optional] of pathnames for input pdf files</param>
'''  <param name="pdata">[out] - concatenated pdf data in memory</param>
'''  <param name="pnbytes">[out] - number of bytes in pdf data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptraConcatenatePdfToData(
				ByVal pa_data as L_Ptra, 
				ByVal sa as Sarray, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger) as Integer

	If IsNothing (pa_data) then Throw New ArgumentNullException  ("pa_data cannot be Nothing")

	Dim saPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sa) Then saPTR = sa.Pointer
	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.ptraConcatenatePdfToData( pa_data.Pointer, saPTR, pdataPTR, pnbytes)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pdfio2.c (471, 1)
' convertTiffMultipageToPdf()
' convertTiffMultipageToPdf(const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) A multipage tiff file can also be converted to PS, using
''' convertTiffMultipageToPS()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - (tiff)</param>
'''  <param name="fileout">[in] - (pdf)</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertTiffMultipageToPdf(
				ByVal filein as String, 
				ByVal fileout as String) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertTiffMultipageToPdf( filein, fileout)

	Return _Result
End Function

' SRC\pdfio2.c (520, 1)
' l_generateCIDataForPdf()
' l_generateCIDataForPdf(const char *, PIX *, l_int32, L_COMP_DATA **) as l_ok
'''  <summary>
''' Notes
''' (1) You must set either filename or pix.
''' (2) Given an image file and optionally a pix raster of that data,
''' this provides a CID that is compatible with PDF, preferably
''' without transcoding.
''' (3) The pix is included for efficiency, in case transcoding
''' is required and the pix is available to the caller.
''' (4) We don't try to open files named "stdin" or "-" for Tesseract
''' compatibility reasons. We may remove this restriction
''' in the future.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in][optional] - ; can be null</param>
'''  <param name="pix">[in][optional] - ; can be null</param>
'''  <param name="quality">[in] - for jpeg if transcoded; 75 is standard</param>
'''  <param name="pcid">[out] - compressed data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_generateCIDataForPdf(
				ByVal fname as String, 
				ByVal pix as Pix, 
				ByVal quality as Integer, 
				ByRef pcid as L_Compressed_Data) as Integer


	Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer
	Dim pcidPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pcid) Then pcidPTR = pcid.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.l_generateCIDataForPdf( fname, pixPTR, quality, pcidPTR)
	if pcidPTR <> IntPtr.Zero then pcid = new L_Compressed_Data(pcidPTR)

	Return _Result
End Function

' SRC\pdfio2.c (598, 1)
' l_generateFlateDataPdf()
' l_generateFlateDataPdf(const char *, PIX *) as L_COMP_DATA *
'''  <summary>
''' Notes
''' (1) If you hand this a png file, you are going to get
''' png predictors embedded in the flate data. So it has
''' come to this. http//xkcd.com/1022/
''' (2) Exception if the png is interlaced or if it is RGBA,
''' it will be transcoded.
''' (3) If transcoding is required, this will not have to read from
''' file if you also input a pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - preferably png</param>
'''  <param name="pixs">[in][optional] - ; can be null</param>
'''   <returns>cid containing png data, or NULL on error</returns>
Public Shared Function l_generateFlateDataPdf(
				ByVal fname as String, 
				ByVal pixs as Pix) as L_Compressed_Data

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")

	Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_generateFlateDataPdf( fname, pixsPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Compressed_Data(_Result)
End Function

' SRC\pdfio2.c (795, 1)
' l_generateJpegData()
' l_generateJpegData(const char *, l_int32) as L_COMP_DATA *
'''  <summary>
''' Notes
''' (1) Set ascii85flag
''' ~ 0 for binary data (not permitted in PostScript)
''' ~ 1 for ascii85 (5 for 4) encoded binary data
''' (not permitted in pdf)
''' (2) Do not free the data.  l_generateJpegDataMem() will free
''' the data if it does not use ascii encoding.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - of jpeg file</param>
'''  <param name="ascii85flag">[in] - 0 for jpeg; 1 for ascii85-encoded jpeg</param>
'''   <returns>cid containing jpeg data, or NULL on error</returns>
Public Shared Function l_generateJpegData(
				ByVal fname as String, 
				ByVal ascii85flag as Integer) as L_Compressed_Data

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_generateJpegData( fname, ascii85flag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Compressed_Data(_Result)
End Function

' SRC\pdfio2.c (829, 1)
' l_generateJpegDataMem()
' l_generateJpegDataMem(l_uint8 *, size_t, l_int32) as L_COMP_DATA *
'''  <summary>
''' Notes
''' (1) See l_generateJpegData().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - of jpeg file</param>
'''  <param name="nbytes">[in] - </param>
'''  <param name="ascii85flag">[in] - 0 for jpeg; 1 for ascii85-encoded jpeg</param>
'''   <returns>cid containing jpeg data, or NULL on error</returns>
Public Shared Function l_generateJpegDataMem(
				ByVal data as Byte(), 
				ByVal nbytes as UInteger, 
				ByVal ascii85flag as Integer) as L_Compressed_Data

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_generateJpegDataMem( data, nbytes, ascii85flag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Compressed_Data(_Result)
End Function

' SRC\pdfio2.c (943, 1)
' l_generateCIData()
' l_generateCIData(const char *, l_int32, l_int32, l_int32, L_COMP_DATA **) as l_ok
'''  <summary>
''' Notes
''' (1) This can be used for both PostScript and pdf.
''' (1) Set ascii85
''' ~ 0 for binary data (not permitted in PostScript)
''' ~ 1 for ascii85 (5 for 4) encoded binary data
''' (2) This attempts to compress according to the requested type.
''' If this can't be done, it falls back to ordinary flate encoding.
''' (3) This differs from l_generateCIDataPdf(), which determines
''' the format and attempts to generate the CID without transcoding.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - </param>
'''  <param name="type">[in] - L_G4_ENCODE, L_JPEG_ENCODE, L_FLATE_ENCODE, L_JP2K_ENCODE</param>
'''  <param name="quality">[in] - used for jpeg only; 0 for default (75)</param>
'''  <param name="ascii85">[in] - 0 for binary; 1 for ascii85-encoded</param>
'''  <param name="pcid">[out] - compressed data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_generateCIData(
				ByVal fname as String, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByVal ascii85 as Integer, 
				ByRef pcid as L_Compressed_Data) as Integer

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")

	Dim pcidPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pcid) Then pcidPTR = pcid.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.l_generateCIData( fname, type, quality, ascii85, pcidPTR)
	if pcidPTR <> IntPtr.Zero then pcid = new L_Compressed_Data(pcidPTR)

	Return _Result
End Function

' SRC\pdfio2.c (1039, 1)
' pixGenerateCIData()
' pixGenerateCIData(PIX *, l_int32, l_int32, l_int32, L_COMP_DATA **) as l_ok
'''  <summary>
''' Notes
''' (1) Set ascii85
''' ~ 0 for binary data (not permitted in PostScript)
''' ~ 1 for ascii85 (5 for 4) encoded binary data
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 or 32 bpp, no colormap</param>
'''  <param name="type">[in] - L_G4_ENCODE, L_JPEG_ENCODE, L_FLATE_ENCODE</param>
'''  <param name="quality">[in] - used for jpeg only; 0 for default (75)</param>
'''  <param name="ascii85">[in] - 0 for binary; 1 for ascii85-encoded</param>
'''  <param name="pcid">[out] - compressed data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGenerateCIData(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByVal ascii85 as Integer, 
				ByRef pcid as L_Compressed_Data) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pcidPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pcid) Then pcidPTR = pcid.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGenerateCIData( pixs.Pointer, type, quality, ascii85, pcidPTR)
	if pcidPTR <> IntPtr.Zero then pcid = new L_Compressed_Data(pcidPTR)

	Return _Result
End Function

' SRC\pdfio2.c (1112, 1)
' l_generateFlateData()
' l_generateFlateData(const char *, l_int32) as L_COMP_DATA *
'''  <summary>
''' Notes
''' (1) The input image is converted to one of these 4 types
''' ~ 1 bpp
''' ~ 8 bpp, no colormap
''' ~ 8 bpp, colormap
''' ~ 32 bpp rgb
''' (2) Set ascii85flag
''' ~ 0 for binary data (not permitted in PostScript)
''' ~ 1 for ascii85 (5 for 4) encoded binary data
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - </param>
'''  <param name="ascii85flag">[in] - 0 for gzipped; 1 for ascii85-encoded gzipped</param>
'''   <returns>cid flate compressed image data, or NULL on error</returns>
Public Shared Function l_generateFlateData(
				ByVal fname as String, 
				ByVal ascii85flag as Integer) as L_Compressed_Data

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_generateFlateData( fname, ascii85flag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Compressed_Data(_Result)
End Function

' SRC\pdfio2.c (1350, 1)
' l_generateG4Data()
' l_generateG4Data(const char *, l_int32) as L_COMP_DATA *
'''  <summary>
''' Notes
''' (1) Set ascii85flag
''' ~ 0 for binary data (not permitted in PostScript)
''' ~ 1 for ascii85 (5 for 4) encoded binary data
''' (not permitted in pdf)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - of g4 compressed file</param>
'''  <param name="ascii85flag">[in] - 0 for g4 compressed; 1 for ascii85-encoded g4</param>
'''   <returns>cid g4 compressed image data, or NULL on error</returns>
Public Shared Function l_generateG4Data(
				ByVal fname as String, 
				ByVal ascii85flag as Integer) as L_Compressed_Data

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_generateG4Data( fname, ascii85flag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Compressed_Data(_Result)
End Function

' SRC\pdfio2.c (1427, 1)
' cidConvertToPdfData()
' cidConvertToPdfData(L_COMP_DATA *, const char *, l_uint8 **, size_t *) as l_ok
'''  <summary>
''' Notes
''' (1) Caller must not destroy the cid.  It is absorbed in the
''' lpd and destroyed by this function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cid">[in] - compressed image data -- of jp2k image</param>
'''  <param name="title">[in][optional] - pdf title; can be NULL</param>
'''  <param name="pdata">[out] - output pdf data for image</param>
'''  <param name="pnbytes">[out] - size of output pdf data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function cidConvertToPdfData(
				ByVal cid as L_Compressed_Data, 
				ByVal title as String, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger) as Integer

	If IsNothing (cid) then Throw New ArgumentNullException  ("cid cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.cidConvertToPdfData( cid.Pointer, title, pdataPTR, pnbytes)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pdfio2.c (1476, 1)
' l_CIDataDestroy()
' l_CIDataDestroy(L_COMP_DATA **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pcid">[in,out] - will be set to null before returning</param>
Public Shared Sub l_CIDataDestroy(
				ByRef pcid as L_Compressed_Data)


	Dim pcidPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pcid) Then pcidPTR = pcid.Pointer

	LeptonicaSharp.Natives.l_CIDataDestroy( pcidPTR)
	if pcidPTR <> IntPtr.Zero then pcid = new L_Compressed_Data(pcidPTR)

End Sub

' SRC\pdfio2.c (2438, 1)
' l_pdfSetG4ImageMask()
' l_pdfSetG4ImageMask(l_int32) as void
'''  <summary>
''' Notes
''' (1) The default is for writing only the fg (through the mask).
''' That way when you write a 1 bpp image, the bg is transparent,
''' so any previously written image remains visible behind it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="flag">[in] - 1 for writing g4 data as fg only through a mask; 0 for writing fg and bg</param>
Public Shared Sub l_pdfSetG4ImageMask(
				ByVal flag as Integer)



	LeptonicaSharp.Natives.l_pdfSetG4ImageMask( flag)

End Sub

' SRC\pdfio2.c (2458, 1)
' l_pdfSetDateAndVersion()
' l_pdfSetDateAndVersion(l_int32) as void
'''  <summary>
''' Notes
''' (1) The default is for writing this data.  For regression tests
''' that compare output against golden files, it is useful to omit.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="flag">[in] - 1 for writing date/time and leptonica version; 0 for omitting this from the metadata</param>
Public Shared Sub l_pdfSetDateAndVersion(
				ByVal flag as Integer)



	LeptonicaSharp.Natives.l_pdfSetDateAndVersion( flag)

End Sub

#End Region
#Region "SRC\pix1.c"
' SRC\pix1.c (282, 1)
' setPixMemoryManager()
' setPixMemoryManager(alloc_fn, dealloc_fn) as void
'''  <summary>
''' Notes
''' (1) Use this to change the alloc and/or dealloc functions;
''' e.g., setPixMemoryManager(my_malloc, my_free).
''' (2) The C99 standard (section 6.7.5.3, par. 8) says
''' A declaration of a parameter as "function returning type"
''' shall be adjusted to "pointer to function returning type"
''' so that it can be in either of these two forms
''' (a) type (function-ptr(type, ...))
''' (b) type ((function-ptr)(type, ...))
''' because form (a) is implictly converted to form (b), as in the
''' definition of struct PixMemoryManager above.  So, for example,
''' we should be able to declare either of these
''' (a) void (allocator(size_t))
''' (b) void ((allocator)(size_t))
''' However, MSVC++ only accepts the second version.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="allocator">[in][optional] - use NULL to skip</param>
'''  <param name="deallocator">[in][optional] - use NULL to skip</param>
Public Shared Sub setPixMemoryManager(
				ByVal allocator as IntPtr, 
				ByVal deallocator as IntPtr)



	LeptonicaSharp.Natives.setPixMemoryManager( allocator, deallocator)

End Sub

' SRC\pix1.c (302, 1)
' pixCreate()
' pixCreate(l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="width">[in] - </param>
'''  <param name="height">[in] - </param>
'''  <param name="depth">[in] - </param>
'''   <returns>pixd with data allocated and initialized to 0, or NULL on error</returns>
Public Shared Function pixCreate(
				ByVal width as Integer, 
				ByVal height as Integer, 
				ByVal depth as Integer) as Pix



	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCreate( width, height, depth)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix1.c (331, 1)
' pixCreateNoInit()
' pixCreateNoInit(l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Must set pad bits to avoid reading uninitialized data, because
''' some optimized routines (e.g., pixConnComp()) read from pad bits.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="width">[in] - </param>
'''  <param name="height">[in] - </param>
'''  <param name="depth">[in] - </param>
'''   <returns>pixd with data allocated but not initialized, or NULL on error</returns>
Public Shared Function pixCreateNoInit(
				ByVal width as Integer, 
				ByVal height as Integer, 
				ByVal depth as Integer) as Pix



	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCreateNoInit( width, height, depth)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix1.c (367, 1)
' pixCreateTemplate()
' pixCreateTemplate(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) Makes a Pix of the same size as the input Pix, with the
''' data array allocated and initialized to 0.
''' (2) Copies the other fields, including colormap if it exists.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixCreateTemplate(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCreateTemplate( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix1.c (397, 1)
' pixCreateTemplateNoInit()
' pixCreateTemplateNoInit(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) Makes a Pix of the same size as the input Pix, with
''' the data array allocated but not initialized to 0.
''' (2) Copies the other fields, including colormap if it exists.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixCreateTemplateNoInit(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCreateTemplateNoInit( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix1.c (439, 1)
' pixCreateHeader()
' pixCreateHeader(l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) It is assumed that all 32 bit pix have 3 spp.  If there is
''' a valid alpha channel, this will be set to 4 spp later.
''' (2) If the number of bytes to be allocated is larger than the
''' maximum value in an int32, we can get overflow, resulting
''' in a smaller amount of memory actually being allocated.
''' Later, an attempt to access memory that wasn't allocated will
''' cause a crash.  So to avoid crashing a program (or worse)
''' with bad (or malicious) input, this is where we limit the
''' requested allocation of image data in a typesafe way.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="width">[in] - </param>
'''  <param name="height">[in] - </param>
'''  <param name="depth">[in] - </param>
'''   <returns>pixd with no data allocated, or NULL on error</returns>
Public Shared Function pixCreateHeader(
				ByVal width as Integer, 
				ByVal height as Integer, 
				ByVal depth as Integer) as Pix



	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCreateHeader( width, height, depth)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix1.c (517, 1)
' pixClone()
' pixClone(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) A "clone" is simply a handle (ptr) to an existing pix.
''' It is implemented because (a) images can be large and
''' hence expensive to copy, and (b) extra handles to a data
''' structure need to be made with a simple policy to avoid
''' both double frees and memory leaks.  Pix are reference
''' counted.  The side effect of pixClone() is an increase
''' by 1 in the ref count.
''' (2) The protocol to be used is
''' (a) Whenever you want a new handle to an existing image,
''' call pixClone(), which just bumps a ref count.
''' (b) Always call pixDestroy() on all handles.  This
''' decrements the ref count, nulls the handle, and
''' only destroys the pix when pixDestroy() has been
''' called on all handles.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''   <returns>same pix ptr, or NULL on error</returns>
Public Shared Function pixClone(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixClone( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix1.c (545, 1)
' pixDestroy()
' pixDestroy(PIX **) as void
'''  <summary>
''' Notes
''' (1) Decrements the ref count and, if 0, destroys the pix.
''' (2) Always nulls the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ppix">[in,out] - will be nulled</param>
Public Shared Sub pixDestroy(
				ByRef ppix as Pix)


	Dim ppixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppix) Then ppixPTR = ppix.Pointer

	LeptonicaSharp.Natives.pixDestroy( ppixPTR)
	if ppixPTR <> IntPtr.Zero then ppix = new Pix(ppixPTR)

End Sub

' SRC\pix1.c (630, 1)
' pixCopy()
' pixCopy(PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) There are three cases
''' (a) pixd == null  (makes a new pix; refcount = 1)
''' (b) pixd == pixs  (no-op)
''' (c) pixd != pixs  (data copy; no change in refcount)
''' If the refcount of pixd GT 1, case (c) will side-effect
''' these handles.
''' (2) The general pattern of use is
''' pixd = pixCopy(pixd, pixs);
''' This will work for all three cases.
''' For clarity when the case is known, you can use
''' (a) pixd = pixCopy(NULL, pixs);
''' (c) pixCopy(pixd, pixs);
''' (3) For case (c), we check if pixs and pixd are the same
''' size (w,h,d).  If so, the data is copied directly.
''' Otherwise, the data is reallocated to the correct size
''' and the copy proceeds.  The refcount of pixd is unchanged.
''' (4) This operation, like all others that may involve a pre-existing
''' pixd, will side-effect any existing clones of pixd.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - can be null, equal to pixs, different from pixs</param>
'''  <param name="pixs">[in] - </param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixCopy(
				ByVal pixd as Pix, 
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCopy( pixdPTR, pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix1.c (698, 1)
' pixResizeImageData()
' pixResizeImageData(PIX *, PIX *) as l_ok
'''  <summary>
''' Notes
''' (1) If the sizes of data in pixs and pixd are unequal, this
''' frees the existing image data in pixd and allocates
''' an uninitialized buffer that will hold the required amount
''' of image data in pixs.  The image data from pixs is not
''' copied into the new buffer.
''' (2) On failure to allocate, pixd is unchanged.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - gets new uninitialized buffer for image data</param>
'''  <param name="pixs">[in] - determines the size of the buffer; not changed</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixResizeImageData(
				ByVal pixd as Pix, 
				ByVal pixs as Pix) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixResizeImageData( pixd.Pointer, pixs.Pointer)

	Return _Result
End Function

' SRC\pix1.c (747, 1)
' pixCopyColormap()
' pixCopyColormap(PIX *, PIX *) as l_ok
'''  <summary>
''' Notes
''' (1) This always destroys any colormap in pixd (except if
''' the operation is a no-op.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - </param>
'''  <param name="pixs">[in] - copies the colormap to %pixd</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixCopyColormap(
				ByVal pixd as Pix, 
				ByVal pixs as Pix) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCopyColormap( pixd.Pointer, pixs.Pointer)

	Return _Result
End Function

' SRC\pix1.c (780, 1)
' pixSizesEqual()
' pixSizesEqual(PIX *, PIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - </param>
'''  <param name="pix2">[in] - </param>
'''   <returns>1 if the two pix have same {h, w, d}; 0 otherwise.</returns>
Public Shared Function pixSizesEqual(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSizesEqual( pix1.Pointer, pix2.Pointer)

	Return _Result
End Function

' SRC\pix1.c (854, 1)
' pixTransferAllData()
' pixTransferAllData(PIX *, PIX **, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This does a complete data transfer from pixs to pixd,
''' followed by the destruction of pixs (refcount permitting).
''' (2) If the refcount of pixs is 1, pixs is destroyed.  Otherwise,
''' the data in pixs is copied (rather than transferred) to pixd.
''' (3) This operation, like all others with a pre-existing pixd,
''' will side-effect any existing clones of pixd.  The pixd
''' refcount does not change.
''' (4) When might you use this?  Suppose you have an in-place Pix
''' function (returning void) with the typical signature
''' void function-inplace(PIX pix, ...)
''' where "..." are non-pointer input parameters, and suppose
''' further that you sometimes want to return an arbitrary Pix
''' in place of the input Pix.  There are two ways you can do this
''' (a) The straightforward way is to change the function
''' signature to take the address of the Pix ptr
''' \code
''' void function-inplace(PIX ppix, ...) {
''' PIX pixt = function-makenew(ppix);
''' pixDestroy(ppix);
''' ppix = pixt;
''' return;
''' }
''' \endcode
''' Here, the input and returned pix are different, as viewed
''' by the calling function, and the inplace function is
''' expected to destroy the input pix to avoid a memory leak.
''' (b) Keep the signature the same and use pixTransferAllData()
''' to return the new Pix in the input Pix struct
''' \code
''' void function-inplace(PIX pix, ...) {
''' PIX pixt = function-makenew(pix);
''' pixTransferAllData(pix, pixt, 0, 0);
''' // pixDestroy() is called on pixt
''' return;
''' }
''' \endcode
''' Here, the input and returned pix are the same, as viewed
''' by the calling function, and the inplace function must
''' never destroy the input pix, because the calling function
''' maintains an unchanged handle to it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - must be different from pixs</param>
'''  <param name="ppixs">[in,out] - will be nulled if refcount goes to 0</param>
'''  <param name="copytext">[in] - 1 to copy the text field; 0 to skip</param>
'''  <param name="copyformat">[in] - 1 to copy the informat field; 0 to skip</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixTransferAllData(
				ByVal pixd as Pix, 
				ByRef ppixs as Pix, 
				ByVal copytext as Integer, 
				ByVal copyformat as Integer) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")

	Dim ppixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixs) Then ppixsPTR = ppixs.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixTransferAllData( pixd.Pointer, ppixsPTR, copytext, copyformat)
	if ppixsPTR <> IntPtr.Zero then ppixs = new Pix(ppixsPTR)

	Return _Result
End Function

' SRC\pix1.c (944, 1)
' pixSwapAndDestroy()
' pixSwapAndDestroy(PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) Simple operation to change the handle name safely.
''' After this operation, the original image in pixd has
''' been destroyed, pixd points to what was pixs, and
''' the input pixs ptr has been nulled.
''' (2) This works safely whether or not pixs and pixd are cloned.
''' If pixs is cloned, the other handles still point to
''' the original image, with the ref count reduced by 1.
''' (3) Usage example
''' \code
''' Pix pix1 = pixRead("...");
''' Pix pix2 = function(pix1, ...);
''' pixSwapAndDestroy(pix1, pix2);
''' pixDestroy(pix1);  // holds what was in pix2
''' \endcode
''' Example with clones ([] shows ref count of image generated
''' by the function)
''' \code
''' Pix pixs = pixRead("...");
''' Pix pix1 = pixClone(pixs);
''' Pix pix2 = function(pix1, ...);   [1]
''' Pix pix3 = pixClone(pix2);   [1] --GT [2]
''' pixSwapAndDestroy(pix1, pix2);
''' pixDestroy(pixs);  // still holds read image
''' pixDestroy(pix1);  // holds what was in pix2  [2] --GT [1]
''' pixDestroy(pix3);  // holds what was in pix2  [1] --GT [0]
''' \endcode
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ppixd">[out][optional] - input pixd can be null, and it must be different from pixs</param>
'''  <param name="ppixs">[in,out] - will be nulled after the swap</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSwapAndDestroy(
				ByRef ppixd as Pix, 
				ByRef ppixs as Pix) as Integer


Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer
	Dim ppixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixs) Then ppixsPTR = ppixs.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSwapAndDestroy( ppixdPTR, ppixsPTR)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)
	if ppixsPTR <> IntPtr.Zero then ppixs = new Pix(ppixsPTR)

	Return _Result
End Function

' SRC\pix1.c (969, 1)
' 
' pixGetWidth(PIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixGetWidth(
				ByRef pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetWidth( pix.Pointer)

	Return _Result
End Function

' SRC\pix1.c (981, 1)
' 
' pixSetWidth(PIX *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixSetWidth(
				ByRef pix as Pix, 
				ByRef width as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetWidth( pix.Pointer, width)

	Return _Result
End Function

' SRC\pix1.c (999, 1)
' 
' pixGetHeight(PIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixGetHeight(
				ByRef pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetHeight( pix.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1011, 1)
' 
' pixSetHeight(PIX *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixSetHeight(
				ByRef pix as Pix, 
				ByRef height as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetHeight( pix.Pointer, height)

	Return _Result
End Function

' SRC\pix1.c (1029, 1)
' 
' pixGetDepth(PIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixGetDepth(
				ByRef pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetDepth( pix.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1041, 1)
' 
' pixSetDepth(PIX *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixSetDepth(
				ByRef pix as Pix, 
				ByRef depth as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetDepth( pix.Pointer, depth)

	Return _Result
End Function

' SRC\pix1.c (1064, 1)
' pixGetDimensions()
' pixGetDimensions(PIX *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="pw">[out][optional] - each can be null</param>
'''  <param name="ph">[out][optional] - each can be null</param>
'''  <param name="pd">[out][optional] - each can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetDimensions(
				ByVal pix as Pix, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pd as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetDimensions( pix.Pointer, pw, ph, pd)

	Return _Result
End Function

' SRC\pix1.c (1091, 1)
' pixSetDimensions()
' pixSetDimensions(PIX *, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="w">[in] - use 0 to skip the setting for any of these</param>
'''  <param name="h">[in] - use 0 to skip the setting for any of these</param>
'''  <param name="d">[in] - use 0 to skip the setting for any of these</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSetDimensions(
				ByVal pix as Pix, 
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal d as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetDimensions( pix.Pointer, w, h, d)

	Return _Result
End Function

' SRC\pix1.c (1115, 1)
' pixCopyDimensions()
' pixCopyDimensions(PIX *, PIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - </param>
'''  <param name="pixs">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixCopyDimensions(
				ByVal pixd as Pix, 
				ByVal pixs as Pix) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCopyDimensions( pixd.Pointer, pixs.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1136, 1)
' 
' pixGetSpp(PIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixGetSpp(
				ByRef pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetSpp( pix.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1164, 1)
' 
' pixSetSpp(PIX *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixSetSpp(
				ByRef pix as Pix, 
				ByRef spp as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetSpp( pix.Pointer, spp)

	Return _Result
End Function

' SRC\pix1.c (1187, 1)
' pixCopySpp()
' pixCopySpp(PIX *, PIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - </param>
'''  <param name="pixs">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixCopySpp(
				ByVal pixd as Pix, 
				ByVal pixs as Pix) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCopySpp( pixd.Pointer, pixs.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1205, 1)
' 
' pixGetWpl(PIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixGetWpl(
				ByRef pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetWpl( pix.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1216, 1)
' 
' pixSetWpl(PIX *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixSetWpl(
				ByRef pix as Pix, 
				ByRef wpl as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetWpl( pix.Pointer, wpl)

	Return _Result
End Function

' SRC\pix1.c (1230, 1)
' 
' pixGetRefcount(PIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixGetRefcount(
				ByRef pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetRefcount( pix.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1241, 1)
' 
' pixChangeRefcount(PIX *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixChangeRefcount(
				ByRef pix as Pix, 
				ByRef delta as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixChangeRefcount( pix.Pointer, delta)

	Return _Result
End Function

' SRC\pix1.c (1255, 1)
' 
' pixGetXRes(PIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixGetXRes(
				ByRef pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetXRes( pix.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1266, 1)
' 
' pixSetXRes(PIX *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixSetXRes(
				ByRef pix as Pix, 
				ByRef res as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetXRes( pix.Pointer, res)

	Return _Result
End Function

' SRC\pix1.c (1280, 1)
' 
' pixGetYRes(PIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixGetYRes(
				ByRef pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetYRes( pix.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1291, 1)
' 
' pixSetYRes(PIX *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixSetYRes(
				ByRef pix as Pix, 
				ByRef res as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetYRes( pix.Pointer, res)

	Return _Result
End Function

' SRC\pix1.c (1312, 1)
' pixGetResolution()
' pixGetResolution(PIX *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="pxres">[out][optional] - each can be null</param>
'''  <param name="pyres">[out][optional] - each can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetResolution(
				ByVal pix as Pix, 
				ByRef pxres as Integer, 
				ByRef pyres as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetResolution( pix.Pointer, pxres, pyres)

	Return _Result
End Function

' SRC\pix1.c (1338, 1)
' pixSetResolution()
' pixSetResolution(PIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="xres">[in] - use 0 to skip setting a value for either of these</param>
'''  <param name="yres">[in] - use 0 to skip setting a value for either of these</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSetResolution(
				ByVal pix as Pix, 
				ByVal xres as Integer, 
				ByVal yres as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetResolution( pix.Pointer, xres, yres)

	Return _Result
End Function

' SRC\pix1.c (1353, 1)
' 
' pixCopyResolution(PIX *, PIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixCopyResolution(
				ByRef pixd as Pix, 
				ByRef pixs as Pix) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer
Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCopyResolution( pixd.Pointer, pixs.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1372, 1)
' 
' pixScaleResolution(PIX *, l_float32, l_float32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixScaleResolution(
				ByRef pix as Pix, 
				ByRef xscale as Single, 
				ByRef yscale as Single) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (xscale) then Throw New ArgumentNullException  ("xscale cannot be Nothing")
	If IsNothing (yscale) then Throw New ArgumentNullException  ("yscale cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixScaleResolution( pix.Pointer, xscale, yscale)

	Return _Result
End Function

' SRC\pix1.c (1390, 1)
' 
' pixGetInputFormat(PIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixGetInputFormat(
				ByRef pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetInputFormat( pix.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1401, 1)
' 
' pixSetInputFormat(PIX *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixSetInputFormat(
				ByRef pix as Pix, 
				ByRef informat as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetInputFormat( pix.Pointer, informat)

	Return _Result
End Function

' SRC\pix1.c (1414, 1)
' 
' pixCopyInputFormat(PIX *, PIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixCopyInputFormat(
				ByRef pixd as Pix, 
				ByRef pixs as Pix) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer
Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCopyInputFormat( pixd.Pointer, pixs.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1432, 1)
' 
' pixSetSpecial(PIX *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixSetSpecial(
				ByRef pix as Pix, 
				ByRef special as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetSpecial( pix.Pointer, special)

	Return _Result
End Function

' SRC\pix1.c (1457, 1)
' pixGetText()
' pixGetText(PIX *) as char *
'''  <summary>
''' Notes
''' (1) The text string belongs to the pix.  The caller must
''' NOT free it!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''   <returns>ptr to existing text string</returns>
Public Shared Function pixGetText(
				ByVal pix as Pix) as String

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.pixGetText( pix.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1481, 1)
' pixSetText()
' pixSetText(PIX *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This removes any existing textstring and puts a copy of
''' the input textstring there.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="textstring">[in]can be null - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSetText(
				ByVal pix as Pix, 
				ByVal textstring as String) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetText( pix.Pointer, textstring)

	Return _Result
End Function

' SRC\pix1.c (1509, 1)
' pixAddText()
' pixAddText(PIX *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This adds the new textstring to any existing text.
''' (2) Either or both the existing text and the new text
''' string can be null.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="textstring">[in]can be null - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixAddText(
				ByVal pix as Pix, 
				ByVal textstring as String) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixAddText( pix.Pointer, textstring)

	Return _Result
End Function

' SRC\pix1.c (1527, 1)
' 
' pixCopyText(PIX *, PIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixCopyText(
				ByRef pixd as Pix, 
				ByRef pixs as Pix) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer
Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCopyText( pixd.Pointer, pixs.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1545, 1)
' 
' pixGetColormap(PIX *) as PIXCMAP *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixGetColormap(
				ByRef pix as Pix) as PixColormap

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetColormap( pix.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixColormap(_Result)
End Function

' SRC\pix1.c (1571, 1)
' pixSetColormap()
' pixSetColormap(PIX *, PIXCMAP *) as l_ok
'''  <summary>
''' Notes
''' (1) Unlike with the pix data field, pixSetColormap() destroys
''' any existing colormap before assigning the new one.
''' Because colormaps are not ref counted, it is important that
''' the new colormap does not belong to any other pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="colormap">[in] - to be assigned</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function pixSetColormap(
				ByVal pix as Pix, 
				ByVal colormap as PixColormap) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (colormap) then Throw New ArgumentNullException  ("colormap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetColormap( pix.Pointer, colormap.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1592, 1)
' pixDestroyColormap()
' pixDestroyColormap(PIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixDestroyColormap(
				ByVal pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixDestroyColormap( pix.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1622, 1)
' pixGetData()
' pixGetData(PIX *) as l_uint32 *
'''  <summary>
''' Notes
''' (1) This gives a new handle for the data.  The data is still
''' owned by the pix, so do not call LEPT_FREE() on it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''   <returns>ptr to image data</returns>
Public Shared Function pixGetData(
				ByVal pix as Pix) as Byte()

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetData( pix.Pointer)
Dim B(1) As Byte : Marshal.Copy(_Result, B, 0, B.Length)

	Return B
End Function

' SRC\pix1.c (1646, 1)
' pixSetData()
' pixSetData(PIX *, l_uint32 *) as l_int32
'''  <summary>
''' Notes
''' (1) This does not free any existing data.  To free existing
''' data, use pixFreeData() before pixSetData().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="data">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSetData(
				ByVal pix as Pix, 
				ByVal data as Byte()) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")

	Dim dataPTR As IntPtr = Marshal.AllocHGlobal(data.Count) : Marshal.Copy(data, 0, dataPTR, data.Length)

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetData( pix.Pointer, dataPTR)

	Return _Result
End Function

' SRC\pix1.c (1676, 1)
' pixExtractData()
' pixExtractData(PIX *) as l_uint32 *
'''  <summary>
''' Notes
''' (1) This extracts the pix image data for use in another context.
''' The caller still needs to use pixDestroy() on the input pix.
''' (2) If refcount == 1, the data is extracted and the
''' pix-GTdata ptr is set to NULL.
''' (3) If refcount GT 1, this simply returns a copy of the data,
''' using the pix allocator, and leaving the input pix unchanged.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns>ptr to data, or null on error</returns>
Public Shared Function pixExtractData(
				ByRef pixs as Pix) as Byte()

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixExtractData( pixs.Pointer)
Dim B(1) As Byte : Marshal.Copy(_Result, B, 0, B.Length)

	Return B
End Function

' SRC\pix1.c (1717, 1)
' pixFreeData()
' pixFreeData(PIX *) as l_int32
'''  <summary>
''' Notes
''' (1) This frees the data and sets the pix data ptr to null.
''' It should be used before pixSetData() in the situation where
''' you want to free any existing data before doing
''' a subsequent assignment with pixSetData().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFreeData(
				ByVal pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFreeData( pix.Pointer)

	Return _Result
End Function

' SRC\pix1.c (1808, 1)
' pixGetLinePtrs()
' pixGetLinePtrs(PIX *, l_int32 *) as void **
'''  <summary>
''' Notes
''' (1) This is intended to be used for fast random pixel access.
''' For example, for an 8 bpp image,
''' val = GET_DATA_BYTE(lines8[i], j);
''' is equivalent to, but much faster than,
''' pixGetPixel(pix, j, i, val);
''' (2) How much faster?  For 1 bpp, it's from 6 to 10x faster.
''' For 8 bpp, it's an amazing 30x faster.  So if you are
''' doing random access over a substantial part of the image,
''' use this line ptr array.
''' (3) When random access is used in conjunction with a stack,
''' queue or heap, the overall computation time depends on
''' the operations performed on each struct that is popped
''' or pushed, and whether we are using a priority queue (O(logn))
''' or a queue or stack (O(1)).  For example, for maze search,
''' the overall ratio of time for line ptrs vs. pixGet/Set is
''' Maze type  Type    Time ratio
''' binary   queue   0.4
''' gray  heap (priority queue)  0.6
''' (4) Because this returns a void and the accessors take void,
''' the compiler cannot check the pointer types.  It is
''' strongly recommended that you adopt a naming scheme for
''' the returned ptr arrays that indicates the pixel depth.
''' (This follows the original intent of Simonyi's "Hungarian"
''' application notation, where naming is used proactively
''' to make errors visibly obvious.)  By doing this, you can
''' tell by inspection if the correct accessor is used.
''' For example, for an 8 bpp pixg
''' void lineg8 = pixGetLinePtrs(pixg, NULL);
''' val = GET_DATA_BYTE(lineg8[i], j);  // fast access; BYTE, 8
''' ...
''' LEPT_FREE(lineg8);  // don't forget this
''' (5) These are convenient for accessing bytes sequentially in an
''' 8 bpp grayscale image.  People who write image processing code
''' on 8 bpp images are accustomed to grabbing pixels directly out
''' of the raster array.  Note that for little endians, you first
''' need to reverse the byte order in each 32-bit word.
''' Here's a typical usage pattern
''' pixEndianByteSwap(pix);   // always safe; no-op on big-endians
''' l_uint8 lineptrs = (l_uint8 )pixGetLinePtrs(pix, NULL);
''' pixGetDimensions(pix, w, h, NULL);
''' for (i = 0; i LT h; i++) {
''' l_uint8 line = lineptrs[i];
''' for (j = 0; j LT w; j++) {
''' val = line[j];
''' ...
''' }
''' }
''' pixEndianByteSwap(pix);  // restore big-endian order
''' LEPT_FREE(lineptrs);
''' This can be done even more simply as follows
''' l_uint8 lineptrs = pixSetupByteProcessing(pix, w, h);
''' for (i = 0; i LT h; i++) {
''' l_uint8 line = lineptrs[i];
''' for (j = 0; j LT w; j++) {
''' val = line[j];
''' ...
''' }
''' }
''' pixCleanupByteProcessing(pix, lineptrs);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="psize">[out][optional] - array size, which is the pix height</param>
'''   <returns>array of line ptrs, or NULL on error</returns>
Public Shared Function pixGetLinePtrs(
				ByVal pix as Pix, 
				ByRef psize as Integer) as IntPtr()

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetLinePtrs( pix.Pointer, psize)
Dim B(1) As IntPtr : Marshal.Copy(_Result, B, 0, B.Length)

	Return B
End Function

' SRC\pix1.c (1848, 1)
' pixPrintStreamInfo()
' pixPrintStreamInfo(FILE *, PIX *, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pix">[in] - </param>
'''  <param name="text">[in][optional] - identifying string; can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixPrintStreamInfo(
				ByVal fp as FILE, 
				ByVal pix as Pix, 
				ByVal text as String) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixPrintStreamInfo( fp.Pointer, pix.Pointer, text)

	Return _Result
End Function

#End Region
#Region "SRC\pix2.c"
' SRC\pix2.c (180, 1)
' pixGetPixel()
' pixGetPixel(PIX *, l_int32, l_int32, l_uint32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This returns the value in the data array.  If the pix is
''' colormapped, it returns the colormap index, not the rgb value.
''' (2) Because of the function overhead and the parameter checking,
''' this is much slower than using the GET_DATA_() macros directly.
''' Speed on a 1 Mpixel RGB image, using a 3 GHz machine
''' pixGet/pixSet ~25 Mpix/sec
''' GET_DATA/SET_DATA ~350 MPix/sec
''' If speed is important and you're doing random access into
''' the pix, use pixGetLinePtrs() and the array access macros.
''' (3) If the point is outside the image, this returns an error (1),
''' with 0 in %pval.  To avoid spamming output, it fails silently.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="x">[in] - ,y    pixel coords</param>
'''  <param name="pval">[out] - pixel value</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixGetPixel(
				ByVal pix as Pix, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByRef pval as UInteger) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetPixel( pix.Pointer, x, y, pval)

	Return _Result
End Function

' SRC\pix2.c (251, 1)
' pixSetPixel()
' pixSetPixel(PIX *, l_int32, l_int32, l_uint32) as l_ok
'''  <summary>
''' Notes
''' (1) Warning the input value is not checked for overflow with respect
''' the the depth of %pix, and the sign bit (if any) is ignored.
''' For d == 1, %val GT 0 sets the bit on.
''' For d == 2, 4, 8 and 16, %val is masked to the maximum allowable
''' pixel value, and any (invalid) higher order bits are discarded.
''' (2) See pixGetPixel() for information on performance.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="x">[in] - ,y   pixel coords</param>
'''  <param name="val">[in] - value to be inserted</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetPixel(
				ByVal pix as Pix, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByVal val as UInteger) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetPixel( pix.Pointer, x, y, val)

	Return _Result
End Function

' SRC\pix2.c (314, 1)
' pixGetRGBPixel()
' pixGetRGBPixel(PIX *, l_int32, l_int32, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 32 bpp rgb, not colormapped</param>
'''  <param name="x">[in] - ,y    pixel coords</param>
'''  <param name="prval">[out][optional] - red component</param>
'''  <param name="pgval">[out][optional] - green component</param>
'''  <param name="pbval">[out][optional] - blue component</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixGetRGBPixel(
				ByVal pix as Pix, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByRef prval as Integer, 
				ByRef pgval as Integer, 
				ByRef pbval as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {32}.contains (pix.d) = false then Throw New ArgumentException ("32 bpp rgb, not colormapped")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetRGBPixel( pix.Pointer, x, y, prval, pgval, pbval)

	Return _Result
End Function

' SRC\pix2.c (362, 1)
' pixSetRGBPixel()
' pixSetRGBPixel(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 32 bpp rgb</param>
'''  <param name="x">[in] - ,y    pixel coords</param>
'''  <param name="rval">[in] - red component</param>
'''  <param name="gval">[in] - green component</param>
'''  <param name="bval">[in] - blue component</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetRGBPixel(
				ByVal pix as Pix, 
				ByVal x as Integer, 
				ByRef y as Integer, 
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {32}.contains (pix.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetRGBPixel( pix.Pointer, x, y, rval, gval, bval)

	Return _Result
End Function

' SRC\pix2.c (409, 1)
' pixGetRandomPixel()
' pixGetRandomPixel(PIX *, l_uint32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If the pix is colormapped, it returns the rgb value.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth; can be colormapped</param>
'''  <param name="pval">[out][optional] - pixel value</param>
'''  <param name="px">[out][optional] - x coordinate chosen; can be null</param>
'''  <param name="py">[out][optional] - y coordinate chosen; can be null</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixGetRandomPixel(
				ByVal pix as Pix, 
				ByRef pval as UInteger, 
				ByRef px as Integer, 
				ByRef py as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetRandomPixel( pix.Pointer, pval, px, py)

	Return _Result
End Function

' SRC\pix2.c (455, 1)
' pixClearPixel()
' pixClearPixel(PIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth; warning if colormapped</param>
'''  <param name="x">[in] - ,y   pixel coords</param>
'''   <returns>0 if OK; 1 on error.</returns>
Public Shared Function pixClearPixel(
				ByVal pix as Pix, 
				ByVal x as Integer, 
				ByRef y as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixClearPixel( pix.Pointer, x, y)

	Return _Result
End Function

' SRC\pix2.c (513, 1)
' pixFlipPixel()
' pixFlipPixel(PIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - any depth, warning if colormapped</param>
'''  <param name="x">[in] - ,y   pixel coords</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixFlipPixel(
				ByVal pix as Pix, 
				ByVal x as Integer, 
				ByRef y as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFlipPixel( pix.Pointer, x, y)

	Return _Result
End Function

' SRC\pix2.c (592, 1)
' setPixelLow()
' setPixelLow(l_uint32 *, l_int32, l_int32, l_uint32) as void
'''  <summary>
''' Notes
''' (1) Caution input variables are not checked!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="line">[in] - ptr to beginning of line,</param>
'''  <param name="x">[in] - pixel location in line</param>
'''  <param name="depth">[in] - bpp</param>
'''  <param name="val">[in] - to be inserted</param>
Public Shared Sub setPixelLow(
				ByVal line as Byte(), 
				ByVal x as Integer, 
				ByVal depth as Integer, 
				ByVal val as UInteger)

	If IsNothing (line) then Throw New ArgumentNullException  ("line cannot be Nothing")

	Dim linePTR As IntPtr = Marshal.AllocHGlobal(line.Count) : Marshal.Copy(line, 0, linePTR, line.Length)

	LeptonicaSharp.Natives.setPixelLow( linePTR, x, depth, val)

End Sub

' SRC\pix2.c (648, 1)
' pixGetBlackOrWhiteVal()
' pixGetBlackOrWhiteVal(PIX *, l_int32, l_uint32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Side effect.  For a colormapped image, if the requested
''' color is not present and there is room to add it in the cmap,
''' it is added and the new index is returned.  If there is no room,
''' the index of the closest color in intensity is returned.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; cmap ok</param>
'''  <param name="op">[in] - L_GET_BLACK_VAL, L_GET_WHITE_VAL</param>
'''  <param name="pval">[out] - pixel value</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixGetBlackOrWhiteVal(
				ByVal pixs as Pix, 
				ByVal op as Enumerations.L_GET_VAL, 
				ByRef pval as UInteger) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetBlackOrWhiteVal( pixs.Pointer, op, pval)

	Return _Result
End Function

' SRC\pix2.c (704, 1)
' pixClearAll()
' pixClearAll(PIX *) as l_ok
'''  <summary>
''' Notes
''' (1) Clears all data to 0.  For 1 bpp, this is white; for grayscale
''' or color, this is black.
''' (2) Caution for colormapped pix, this sets the color to the first
''' one in the colormap.  Be sure that this is the intended color!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - all depths; use cmapped with caution</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixClearAll(
				ByVal pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixClearAll( pix.Pointer)

	Return _Result
End Function

' SRC\pix2.c (733, 1)
' pixSetAll()
' pixSetAll(PIX *) as l_ok
'''  <summary>
''' Notes
''' (1) Sets all data to 1.  For 1 bpp, this is black; for grayscale
''' or color, this is white.
''' (2) Caution for colormapped pix, this sets the pixel value to the
''' maximum value supported by the colormap 2^d - 1.  However, this
''' color may not be defined, because the colormap may not be full.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - all depths; use cmapped with caution</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSetAll(
				ByVal pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetAll( pix.Pointer)

	Return _Result
End Function

' SRC\pix2.c (776, 1)
' pixSetAllGray()
' pixSetAllGray(PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) N.B.  For all images, %grayval == 0 represents black and
''' %grayval == 255 represents white.
''' (2) For depth LT 8, we do our best to approximate the gray level.
''' For 1 bpp images, any %grayval LT 128 is black; GT= 128 is white.
''' For 32 bpp images, each r,g,b component is set to %grayval,
''' and the alpha component is preserved.
''' (3) If pix is colormapped, it adds the gray value, replicated in
''' all components, to the colormap if it's not there and there
''' is room.  If the colormap is full, it finds the closest color in
''' L2 distance of components.  This index is written to all pixels.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - all depths, cmap ok</param>
'''  <param name="grayval">[in] - in range 0 ... 255</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetAllGray(
				ByVal pix as Pix, 
				ByVal grayval as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetAllGray( pix.Pointer, grayval)

	Return _Result
End Function

' SRC\pix2.c (868, 1)
' pixSetAllArbitrary()
' pixSetAllArbitrary(PIX *, l_uint32) as l_ok
'''  <summary>
''' Notes
''' (1) Caution 1!  For colormapped pix, %val is used as an index
''' into a colormap.  Be sure that index refers to the intended color.
''' If the color is not in the colormap, you should first add it
''' and then call this function.
''' (2) Caution 2!  For 32 bpp pix, the interpretation of the LSB
''' of %val depends on whether spp == 3 (RGB) or spp == 4 (RGBA).
''' For RGB, the LSB is ignored in image transformations.
''' For RGBA, the LSB is interpreted as the alpha (transparency)
''' component; full transparency has alpha == 0x0, whereas
''' full opacity has alpha = 0xff.  An RGBA image with full
''' opacity behaves like an RGB image.
''' (3) As an example of (2), suppose you want to initialize a 32 bpp
''' pix with partial opacity, say 0xee337788.  If the pix is 3 spp,
''' the 0x88 alpha component will be ignored and may be changed
''' in subsequent processing.  However, if the pix is 4 spp, the
''' alpha component will be retained and used. The function
''' pixCreate(w, h, 32) makes an RGB image by default, and
''' pixSetSpp(pix, 4) can be used to promote an RGB image to RGBA.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - all depths; use cmapped with caution</param>
'''  <param name="val">[in] - value to set all pixels</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetAllArbitrary(
				ByVal pix as Pix, 
				ByVal val as UInteger) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetAllArbitrary( pix.Pointer, val)

	Return _Result
End Function

' SRC\pix2.c (938, 1)
' pixSetBlackOrWhite()
' pixSetBlackOrWhite(PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Function for setting all pixels in an image to either black
''' or white.
''' (2) If pixs is colormapped, it adds black or white to the
''' colormap if it's not there and there is room.  If the colormap
''' is full, it finds the closest color in intensity.
''' This index is written to all pixels.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; cmap ok</param>
'''  <param name="op">[in] - L_SET_BLACK, L_SET_WHITE</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetBlackOrWhite(
				ByVal pixs as Pix, 
				ByVal op as Enumerations.L_SET) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetBlackOrWhite( pixs.Pointer, op)

	Return _Result
End Function

' SRC\pix2.c (985, 1)
' pixSetComponentArbitrary()
' pixSetComponentArbitrary(PIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) For example, this can be used to set the alpha component to opaque
''' pixSetComponentArbitrary(pix, L_ALPHA_CHANNEL, 255)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 32 bpp</param>
'''  <param name="comp">[in] - COLOR_RED, COLOR_GREEN, COLOR_BLUE, L_ALPHA_CHANNEL</param>
'''  <param name="val">[in] - value to set this component</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetComponentArbitrary(
				ByVal pix as Pix, 
				ByVal comp as Enumerations.colors_32_bpp, 
				ByVal val as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetComponentArbitrary( pix.Pointer, comp, val)

	Return _Result
End Function

' SRC\pix2.c (1035, 1)
' pixClearInRect()
' pixClearInRect(PIX *, BOX *) as l_ok
'''  <summary>
''' Notes
''' (1) Clears all data in rect to 0.  For 1 bpp, this is white;
''' for grayscale or color, this is black.
''' (2) Caution for colormapped pix, this sets the color to the first
''' one in the colormap.  Be sure that this is the intended color!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - all depths; can be cmapped</param>
'''  <param name="box">[in] - in which all pixels will be cleared</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixClearInRect(
				ByVal pix as Pix, 
				ByVal box as Box) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixClearInRect( pix.Pointer, box.Pointer)

	Return _Result
End Function

' SRC\pix2.c (1070, 1)
' pixSetInRect()
' pixSetInRect(PIX *, BOX *) as l_ok
'''  <summary>
''' Notes
''' (1) Sets all data in rect to 1.  For 1 bpp, this is black;
''' for grayscale or color, this is white.
''' (2) Caution for colormapped pix, this sets the pixel value to the
''' maximum value supported by the colormap 2^d - 1.  However, this
''' color may not be defined, because the colormap may not be full.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - all depths, can be cmapped</param>
'''  <param name="box">[in] - in which all pixels will be set</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSetInRect(
				ByVal pix as Pix, 
				ByVal box as Box) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetInRect( pix.Pointer, box.Pointer)

	Return _Result
End Function

' SRC\pix2.c (1112, 1)
' pixSetInRectArbitrary()
' pixSetInRectArbitrary(PIX *, BOX *, l_uint32) as l_ok
'''  <summary>
''' Notes
''' (1) For colormapped pix, be sure the value is the intended
''' one in the colormap.
''' (2) Caution for colormapped pix, this sets each pixel in the
''' rect to the color at the index equal to val.  Be sure that
''' this index exists in the colormap and that it is the intended one!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - all depths; can be cmapped</param>
'''  <param name="box">[in] - in which all pixels will be set to val</param>
'''  <param name="val">[in] - value to set all pixels</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetInRectArbitrary(
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByVal val as UInteger) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetInRectArbitrary( pix.Pointer, box.Pointer, val)

	Return _Result
End Function

' SRC\pix2.c (1213, 1)
' pixBlendInRect()
' pixBlendInRect(PIX *, BOX *, l_uint32, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place function.  It blends the input color %val
''' with the pixels in pixs in the specified rectangle.
''' If no rectangle is specified, it blends over the entire image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="box">[in][optional] - in which all pixels will be blended</param>
'''  <param name="val">[in] - blend value; 0xrrggbb00</param>
'''  <param name="fract">[in] - fraction of color to be blended with each pixel in pixs</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixBlendInRect(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal val as UInteger, 
				ByVal fract as Single) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixBlendInRect( pixs.Pointer, boxPTR, val, fract)

	Return _Result
End Function

' SRC\pix2.c (1299, 1)
' pixSetPadBits()
' pixSetPadBits(PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) The pad bits are the bits that expand each scanline to a
''' multiple of 32 bits.  They are usually not used in
''' image processing operations.  When boundary conditions
''' are important, as in seedfill, they must be set properly.
''' (2) This sets the value of the pad bits (if any) in the last
''' 32-bit word in each scanline.
''' (3) For 32 bpp pix, there are no pad bits, so this is a no-op.
''' (4) When writing formatted output, such as tiff, png or jpeg,
''' the pad bits have no effect on the raster image that is
''' generated by reading back from the file.  However, in some
''' cases, the compressed file itself will depend on the pad
''' bits.  This is seen, for example, in Windows with 2 and 4 bpp
''' tiff-compressed images that have pad bits on each scanline.
''' It is sometimes convenient to use a golden file with a
''' byte-by-byte check to verify invariance.  Consequently,
''' and because setting the pad bits is cheap, the pad bits are
''' set to 0 before writing these compressed files.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1, 2, 4, 8, 16, 32 bpp</param>
'''  <param name="val">[in] - 0 or 1</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetPadBits(
				ByVal pix as Pix, 
				ByVal val as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {1,2,4,8,16,32}.contains (pix.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16, 32 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetPadBits( pix.Pointer, val)

	Return _Result
End Function

' SRC\pix2.c (1359, 1)
' pixSetPadBitsBand()
' pixSetPadBitsBand(PIX *, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) The pad bits are the bits that expand each scanline to a
''' multiple of 32 bits.  They are usually not used in
''' image processing operations.  When boundary conditions
''' are important, as in seedfill, they must be set properly.
''' (2) This sets the value of the pad bits (if any) in the last
''' 32-bit word in each scanline, within the specified
''' band of raster lines.
''' (3) For 32 bpp pix, there are no pad bits, so this is a no-op.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1, 2, 4, 8, 16, 32 bpp</param>
'''  <param name="by">[in] - starting y value of band</param>
'''  <param name="bh">[in] - height of band</param>
'''  <param name="val">[in] - 0 or 1</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetPadBitsBand(
				ByVal pix as Pix, 
				ByVal by as Integer, 
				ByVal bh as Integer, 
				ByVal val as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {1,2,4,8,16,32}.contains (pix.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16, 32 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetPadBitsBand( pix.Pointer, by, bh, val)

	Return _Result
End Function

' SRC\pix2.c (1431, 1)
' pixSetOrClearBorder()
' pixSetOrClearBorder(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) The border region is defined to be the region in the
''' image within a specific distance of each edge.  Here, we
''' allow the pixels within a specified distance of each
''' edge to be set independently.  This either sets or
''' clears all pixels in the border region.
''' (2) For binary images, use PIX_SET for black and PIX_CLR for white.
''' (3) For grayscale or color images, use PIX_SET for white
''' and PIX_CLR for black.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths</param>
'''  <param name="left">[in] - right, top, bot amount to set or clear</param>
'''  <param name="op">[in] - operation PIX_SET or PIX_CLR</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetOrClearBorder(
				ByVal pixs as Pix, 
				ByVal left as Integer, 
				ByRef right as Integer, 
				ByRef top as Integer, 
				ByRef bot as Integer, 
				ByVal op as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetOrClearBorder( pixs.Pointer, left, right, top, bot, op)

	Return _Result
End Function

' SRC\pix2.c (1480, 1)
' pixSetBorderVal()
' pixSetBorderVal(PIX *, l_int32, l_int32, l_int32, l_int32, l_uint32) as l_ok
'''  <summary>
''' Notes
''' (1) The border region is defined to be the region in the
''' image within a specific distance of each edge.  Here, we
''' allow the pixels within a specified distance of each
''' edge to be set independently.  This sets the pixels
''' in the border region to the given input value.
''' (2) For efficiency, use pixSetOrClearBorder() if
''' you're setting the border to either black or white.
''' (3) If d != 32, the input value should be masked off
''' to the appropriate number of least significant bits.
''' (4) The code is easily generalized for 2 or 4 bpp.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8, 16 or 32 bpp</param>
'''  <param name="left">[in] - amount to set</param>
'''  <param name="right">[in] - amount to set</param>
'''  <param name="top">[in] - amount to set</param>
'''  <param name="bot">[in] - amount to set</param>
'''  <param name="val">[in] - value to set at each border pixel</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetBorderVal(
				ByVal pixs as Pix, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer, 
				ByVal val as UInteger) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetBorderVal( pixs.Pointer, left, right, top, bot, val)

	Return _Result
End Function

' SRC\pix2.c (1584, 1)
' pixSetBorderRingVal()
' pixSetBorderRingVal(PIX *, l_int32, l_uint32) as l_ok
'''  <summary>
''' Notes
''' (1) The rings are single-pixel-wide rectangular sets of
''' pixels at a given distance from the edge of the pix.
''' This sets all pixels in a given ring to a value.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth; cmap OK</param>
'''  <param name="dist">[in] - distance from outside; must be GT 0; first ring is 1</param>
'''  <param name="val">[in] - value to set at each border pixel</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetBorderRingVal(
				ByVal pixs as Pix, 
				ByVal dist as Integer, 
				ByVal val as UInteger) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetBorderRingVal( pixs.Pointer, dist, val)

	Return _Result
End Function

' SRC\pix2.c (1635, 1)
' pixSetMirroredBorder()
' pixSetMirroredBorder(PIX *, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This applies what is effectively mirror boundary conditions
''' to a border region in the image.  It is in-place.
''' (2) This is useful for setting pixels near the border to a
''' value representative of the near pixels to the interior.
''' (3) The general pixRasterop() is used for an in-place operation here
''' because there is no overlap between the src and dest rectangles.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="left">[in] - number of pixels to set</param>
'''  <param name="right">[in] - number of pixels to set</param>
'''  <param name="top">[in] - number of pixels to set</param>
'''  <param name="bot">[in] - number of pixels to set</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSetMirroredBorder(
				ByVal pixs as Pix, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetMirroredBorder( pixs.Pointer, left, right, top, bot)

	Return _Result
End Function

' SRC\pix2.c (1686, 1)
' pixCopyBorder()
' pixCopyBorder(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) pixd can be null, but otherwise it must be the same size
''' and depth as pixs.  Always returns pixd.
''' (2) This is useful in situations where by setting a few border
''' pixels we can avoid having to copy all pixels in pixs into
''' pixd as an initialization step for some operation.
''' Nevertheless, for safety, if making a new pixd, all the
''' non-border pixels are initialized to 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - all depths; colormap ok; can be NULL</param>
'''  <param name="pixs">[in] - same depth and size as pixd</param>
'''  <param name="left">[in] - number of pixels to copy</param>
'''  <param name="right">[in] - number of pixels to copy</param>
'''  <param name="top">[in] - number of pixels to copy</param>
'''  <param name="bot">[in] - number of pixels to copy</param>
'''   <returns>pixd, or NULL on error if pixd is not defined</returns>
Public Shared Function pixCopyBorder(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer) as Pix

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCopyBorder( pixd.Pointer, pixs.Pointer, left, right, top, bot)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (1740, 1)
' pixAddBorder()
' pixAddBorder(PIX *, l_int32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) See pixGetBlackOrWhiteVal() for values of black and white pixels.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="npix">[in] - number of pixels to be added to each side</param>
'''  <param name="val">[in] - value of added border pixels</param>
'''   <returns>pixd with the added exterior pixels, or NULL on error</returns>
Public Shared Function pixAddBorder(
				ByVal pixs as Pix, 
				ByVal npix as Integer, 
				ByVal val as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAddBorder( pixs.Pointer, npix, val)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (1780, 1)
' pixAddBlackOrWhiteBorder()
' pixAddBlackOrWhiteBorder(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See pixGetBlackOrWhiteVal() for possible side effect (adding
''' a color to a colormap).
''' (2) The only complication is that pixs may have a colormap.
''' There are two ways to add the black or white border
''' (a) As done here (simplest, most efficient)
''' (b) l_int32 ws, hs, d;
''' pixGetDimensions(pixs, ws, hs, d);
''' Pix pixd = pixCreate(ws + left + right, hs + top + bot, d);
''' PixColormap cmap = pixGetColormap(pixs);
''' if (cmap != NULL)
''' pixSetColormap(pixd, pixcmapCopy(cmap));
''' pixSetBlackOrWhite(pixd, L_SET_WHITE);  // uses cmap
''' pixRasterop(pixd, left, top, ws, hs, PIX_SET, pixs, 0, 0);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="left">[in] - number of pixels added</param>
'''  <param name="right">[in] - number of pixels added</param>
'''  <param name="top">[in] - number of pixels added</param>
'''  <param name="bot">[in] - number of pixels added</param>
'''  <param name="op">[in] - L_GET_BLACK_VAL, L_GET_WHITE_VAL</param>
'''   <returns>pixd with the added exterior pixels, or NULL on error</returns>
Public Shared Function pixAddBlackOrWhiteBorder(
				ByVal pixs as Pix, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer, 
				ByVal op as Enumerations.L_GET_VAL) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAddBlackOrWhiteBorder( pixs.Pointer, left, right, top, bot, op)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (1834, 1)
' pixAddBorderGeneral()
' pixAddBorderGeneral(PIX *, l_int32, l_int32, l_int32, l_int32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) For binary images
''' white  val = 0
''' black  val = 1
''' For grayscale images
''' white  val = 2  d - 1
''' black  val = 0
''' For rgb color images
''' white  val = 0xffffff00
''' black  val = 0
''' For colormapped images, set val to the appropriate colormap index.
''' (2) If the added border is either black or white, you can use
''' pixAddBlackOrWhiteBorder()
''' The black and white values for all images can be found with
''' pixGetBlackOrWhiteVal()
''' which, if pixs is cmapped, may add an entry to the colormap.
''' Alternatively, if pixs has a colormap, you can find the index
''' of the pixel whose intensity is closest to white or black
''' white pixcmapGetRankIntensity(cmap, 1.0, index);
''' black pixcmapGetRankIntensity(cmap, 0.0, index);
''' and use that for val.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="left">[in] - number of pixels added</param>
'''  <param name="right">[in] - number of pixels added</param>
'''  <param name="top">[in] - number of pixels added</param>
'''  <param name="bot">[in] - number of pixels added</param>
'''  <param name="val">[in] - value of added border pixels</param>
'''   <returns>pixd with the added exterior pixels, or NULL on error</returns>
Public Shared Function pixAddBorderGeneral(
				ByVal pixs as Pix, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer, 
				ByVal val as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAddBorderGeneral( pixs.Pointer, left, right, top, bot, val)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (1889, 1)
' pixRemoveBorder()
' pixRemoveBorder(PIX *, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="npix">[in] - number to be removed from each of the 4 sides</param>
'''   <returns>pixd with pixels removed around border, or NULL on error</returns>
Public Shared Function pixRemoveBorder(
				ByVal pixs as Pix, 
				ByVal npix as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRemoveBorder( pixs.Pointer, npix)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (1910, 1)
' pixRemoveBorderGeneral()
' pixRemoveBorderGeneral(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="left">[in] - number of pixels removed</param>
'''  <param name="right">[in] - number of pixels removed</param>
'''  <param name="top">[in] - number of pixels removed</param>
'''  <param name="bot">[in] - number of pixels removed</param>
'''   <returns>pixd with pixels removed around border, or NULL on error</returns>
Public Shared Function pixRemoveBorderGeneral(
				ByVal pixs as Pix, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRemoveBorderGeneral( pixs.Pointer, left, right, top, bot)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (1963, 1)
' pixRemoveBorderToSize()
' pixRemoveBorderToSize(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Removes pixels as evenly as possible from the sides of the
''' image, leaving the central part.
''' (2) Returns clone if no pixels requested removed, or the target
''' sizes are larger than the image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="wd">[in] - target width; use 0 if only removing from height</param>
'''  <param name="hd">[in] - target height; use 0 if only removing from width</param>
'''   <returns>pixd with pixels removed around border, or NULL on error</returns>
Public Shared Function pixRemoveBorderToSize(
				ByVal pixs as Pix, 
				ByVal wd as Integer, 
				ByVal hd as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRemoveBorderToSize( pixs.Pointer, wd, hd)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (2018, 1)
' pixAddMirroredBorder()
' pixAddMirroredBorder(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This applies what is effectively mirror boundary conditions.
''' For the added border pixels in pixd, the pixels in pixs
''' near the border are mirror-copied into the border region.
''' (2) This is useful for avoiding special operations near
''' boundaries when doing image processing operations
''' such as rank filters and convolution.  In use, one first
''' adds mirrored pixels to each side of the image.  The number
''' of pixels added on each side is half the filter dimension.
''' Then the image processing operations proceed over a
''' region equal to the size of the original image, and
''' write directly into a dest pix of the same size as pixs.
''' (3) The general pixRasterop() is used for an in-place operation here
''' because there is no overlap between the src and dest rectangles.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="left">[in] - number of pixels added</param>
'''  <param name="right">[in] - number of pixels added</param>
'''  <param name="top">[in] - number of pixels added</param>
'''  <param name="bot">[in] - number of pixels added</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAddMirroredBorder(
				ByVal pixs as Pix, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAddMirroredBorder( pixs.Pointer, left, right, top, bot)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (2071, 1)
' pixAddRepeatedBorder()
' pixAddRepeatedBorder(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This applies a repeated border, as if the central part of
''' the image is tiled over the plane.  So, for example, the
''' pixels in the left border come from the right side of the image.
''' (2) The general pixRasterop() is used for an in-place operation here
''' because there is no overlap between the src and dest rectangles.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="left">[in] - number of pixels added</param>
'''  <param name="right">[in] - number of pixels added</param>
'''  <param name="top">[in] - number of pixels added</param>
'''  <param name="bot">[in] - number of pixels added</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAddRepeatedBorder(
				ByVal pixs as Pix, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAddRepeatedBorder( pixs.Pointer, left, right, top, bot)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (2127, 1)
' pixAddMixedBorder()
' pixAddMixedBorder(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This applies mirrored boundary conditions horizontally
''' and repeated b.c. vertically.
''' (2) It is specifically used for avoiding special operations
''' near boundaries when convolving a hue-saturation histogram
''' with a given window size.  The repeated b.c. are used
''' vertically for hue, and the mirrored b.c. are used
''' horizontally for saturation.  The number of pixels added
''' on each side is approximately (but not quite) half the
''' filter dimension.  The image processing operations can
''' then proceed over a region equal to the size of the original
''' image, and write directly into a dest pix of the same
''' size as pixs.
''' (3) The general pixRasterop() can be used for an in-place
''' operation here because there is no overlap between the
''' src and dest rectangles.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="left">[in] - number of pixels added</param>
'''  <param name="right">[in] - number of pixels added</param>
'''  <param name="top">[in] - number of pixels added</param>
'''  <param name="bot">[in] - number of pixels added</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAddMixedBorder(
				ByVal pixs as Pix, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAddMixedBorder( pixs.Pointer, left, right, top, bot)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (2174, 1)
' pixAddContinuedBorder()
' pixAddContinuedBorder(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This adds pixels on each side whose values are equal to
''' the value on the closest boundary pixel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="left">[in] - pixels on each side to be added</param>
'''  <param name="right">[in] - pixels on each side to be added</param>
'''  <param name="top">[in] - pixels on each side to be added</param>
'''  <param name="bot">[in] - pixels on each side to be added</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAddContinuedBorder(
				ByVal pixs as Pix, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAddContinuedBorder( pixs.Pointer, left, right, top, bot)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (2217, 1)
' pixShiftAndTransferAlpha()
' pixShiftAndTransferAlpha(PIX *, PIX *, l_float32, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - 32 bpp</param>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="shiftx">[in] - </param>
'''  <param name="shifty">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixShiftAndTransferAlpha(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal shiftx as Single, 
				ByVal shifty as Single) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (shiftx) then Throw New ArgumentNullException  ("shiftx cannot be Nothing")
	If IsNothing (shifty) then Throw New ArgumentNullException  ("shifty cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixShiftAndTransferAlpha( pixd.Pointer, pixs.Pointer, shiftx, shifty)

	Return _Result
End Function

' SRC\pix2.c (2268, 1)
' pixDisplayLayersRGBA()
' pixDisplayLayersRGBA(PIX *, l_uint32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Use %val == 0xffffff00 for white background.
''' (2) Three views are given
''' ~ the image with a fully opaque alpha
''' ~ the alpha layer
''' ~ the image as it would appear with a white background.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - cmap or 32 bpp rgba</param>
'''  <param name="val">[in] - 32 bit unsigned color to use as background</param>
'''  <param name="maxw">[in] - max output image width; 0 for no scaling</param>
'''   <returns>pixd showing various image views, or NULL on error</returns>
Public Shared Function pixDisplayLayersRGBA(
				ByVal pixs as Pix, 
				ByVal val as UInteger, 
				ByVal maxw as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDisplayLayersRGBA( pixs.Pointer, val, maxw)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (2340, 1)
' pixCreateRGBImage()
' pixCreateRGBImage(PIX *, PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) the 4th byte, sometimes called the "alpha channel",
''' and which is often used for blending between different
''' images, is left with 0 value.
''' (2) see Note (4) in pix.h for details on storage of
''' 8-bit samples within each 32-bit word.
''' (3) This implementation, setting the r, g and b components
''' sequentially, is much faster than setting them in parallel
''' by constructing an RGB dest pixel and writing it to dest.
''' The reason is there are many more cache misses when reading
''' from 3 input images simultaneously.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixr">[in] - 8 bpp red pix</param>
'''  <param name="pixg">[in] - 8 bpp green pix</param>
'''  <param name="pixb">[in] - 8 bpp blue pix</param>
'''   <returns>32 bpp pix, interleaved with 4 samples/pixel, or NULL on error</returns>
Public Shared Function pixCreateRGBImage(
				ByVal pixr as Pix, 
				ByVal pixg as Pix, 
				ByVal pixb as Pix) as Pix

	If IsNothing (pixr) then Throw New ArgumentNullException  ("pixr cannot be Nothing")
	If IsNothing (pixg) then Throw New ArgumentNullException  ("pixg cannot be Nothing")
	If IsNothing (pixb) then Throw New ArgumentNullException  ("pixb cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCreateRGBImage( pixr.Pointer, pixg.Pointer, pixb.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (2396, 1)
' pixGetRGBComponent()
' pixGetRGBComponent(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Three calls to this function generate the r, g and b 8 bpp
''' component images.  This is much faster than generating the
''' three images in parallel, by extracting a src pixel and setting
''' the pixels of each component image from it.  The reason is
''' there are many more cache misses when writing to three
''' output images simultaneously.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp, or colormapped</param>
'''  <param name="comp">[in] - one of {COLOR_RED, COLOR_GREEN, COLOR_BLUE, L_ALPHA_CHANNEL}</param>
'''   <returns>pixd the selected 8 bpp component image of the input 32 bpp image or NULL on error</returns>
Public Shared Function pixGetRGBComponent(
				ByVal pixs as Pix, 
				ByVal comp as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetRGBComponent( pixs.Pointer, comp)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (2455, 1)
' pixSetRGBComponent()
' pixSetRGBComponent(PIX *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This places the 8 bpp pixel in pixs into the
''' specified component (properly interleaved) in pixd,
''' (2) The two images are registered to the UL corner; the sizes
''' need not be the same, but a warning is issued if they differ.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - 32 bpp</param>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="comp">[in] - one of the set {COLOR_RED, COLOR_GREEN, COLOR_BLUE, L_ALPHA_CHANNEL}</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetRGBComponent(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal comp as Integer) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetRGBComponent( pixd.Pointer, pixs.Pointer, comp)

	Return _Result
End Function

' SRC\pix2.c (2517, 1)
' pixGetRGBComponentCmap()
' pixGetRGBComponentCmap(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) In leptonica, we do not support alpha in colormaps.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - colormapped</param>
'''  <param name="comp">[in] - one of the set {COLOR_RED, COLOR_GREEN, COLOR_BLUE}</param>
'''   <returns>pixd  the selected 8 bpp component image of the input cmapped image, or NULL on error</returns>
Public Shared Function pixGetRGBComponentCmap(
				ByVal pixs as Pix, 
				ByVal comp as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetRGBComponentCmap( pixs.Pointer, comp)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (2602, 1)
' pixCopyRGBComponent()
' pixCopyRGBComponent(PIX *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) The two images are registered to the UL corner.  The sizes
''' are usually the same, and a warning is issued if they differ.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - 32 bpp</param>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="comp">[in] - one of the set {COLOR_RED, COLOR_GREEN, COLOR_BLUE, L_ALPHA_CHANNEL}</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixCopyRGBComponent(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal comp as Integer) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCopyRGBComponent( pixd.Pointer, pixs.Pointer, comp)

	Return _Result
End Function

' SRC\pix2.c (2663, 1)
' composeRGBPixel()
' composeRGBPixel(l_int32, l_int32, l_int32, l_uint32 *) as l_ok
'''  <summary>
''' Notes
''' (1) All channels are 8 bits the input values must be between
''' 0 and 255.  For speed, this is not enforced by masking
''' with 0xff before shifting.
''' (2) A slower implementation uses macros
''' SET_DATA_BYTE(ppixel, COLOR_RED, rval);
''' SET_DATA_BYTE(ppixel, COLOR_GREEN, gval);
''' SET_DATA_BYTE(ppixel, COLOR_BLUE, bval);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''  <param name="ppixel">[out] - 32-bit pixel</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function composeRGBPixel(
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByRef ppixel as UInteger) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.composeRGBPixel( rval, gval, bval, ppixel)

	Return _Result
End Function

' SRC\pix2.c (2694, 1)
' composeRGBAPixel()
' composeRGBAPixel(l_int32, l_int32, l_int32, l_int32, l_uint32 *) as l_ok
'''  <summary>
''' Notes
''' (1) All channels are 8 bits the input values must be between
''' 0 and 255.  For speed, this is not enforced by masking
''' with 0xff before shifting.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rval">[in] - </param>
'''  <param name="gval">[in] - </param>
'''  <param name="bval">[in] - </param>
'''  <param name="aval">[in] - </param>
'''  <param name="ppixel">[out] - 32-bit pixel</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function composeRGBAPixel(
				ByVal rval as Integer, 
				ByVal gval as Integer, 
				ByVal bval as Integer, 
				ByVal aval as Integer, 
				ByRef ppixel as UInteger) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.composeRGBAPixel( rval, gval, bval, aval, ppixel)

	Return _Result
End Function

' SRC\pix2.c (2729, 1)
' extractRGBValues()
' extractRGBValues(l_uint32, l_int32 *, l_int32 *, l_int32 *) as void
'''  <summary>
''' Notes
''' (1) A slower implementation uses macros
''' prval = GET_DATA_BYTE(pixel, COLOR_RED);
''' pgval = GET_DATA_BYTE(pixel, COLOR_GREEN);
''' pbval = GET_DATA_BYTE(pixel, COLOR_BLUE);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixel">[in] - 32 bit</param>
'''  <param name="prval">[out][optional] - red component</param>
'''  <param name="pgval">[out][optional] - green component</param>
'''  <param name="pbval">[out][optional] - blue component</param>
Public Shared Sub extractRGBValues(
				ByVal pixel as UInteger, 
				ByRef prval as Integer, 
				ByRef pgval as Integer, 
				ByRef pbval as Integer)



	LeptonicaSharp.Natives.extractRGBValues( pixel, prval, pgval, pbval)

End Sub

' SRC\pix2.c (2752, 1)
' extractRGBAValues()
' extractRGBAValues(l_uint32, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixel">[in] - 32 bit</param>
'''  <param name="prval">[out][optional] - red component</param>
'''  <param name="pgval">[out][optional] - green component</param>
'''  <param name="pbval">[out][optional] - blue component</param>
'''  <param name="paval">[out][optional] - alpha component</param>
Public Shared Sub extractRGBAValues(
				ByVal pixel as UInteger, 
				ByRef prval as Integer, 
				ByRef pgval as Integer, 
				ByRef pbval as Integer, 
				ByRef paval as Integer)



	LeptonicaSharp.Natives.extractRGBAValues( pixel, prval, pgval, pbval, paval)

End Sub

' SRC\pix2.c (2774, 1)
' extractMinMaxComponent()
' extractMinMaxComponent(l_uint32, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixel">[in] - 32 bpp RGB</param>
'''  <param name="type">[in] - L_CHOOSE_MIN or L_CHOOSE_MAX</param>
'''   <returns>component in range [0 ... 255], or NULL on error</returns>
Public Shared Function extractMinMaxComponent(
				ByVal pixel as UInteger, 
				ByVal type as Enumerations.L_CHOOSE_M) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.extractMinMaxComponent( pixel, type)

	Return _Result
End Function

' SRC\pix2.c (2808, 1)
' pixGetRGBLine()
' pixGetRGBLine(PIX *, l_int32, l_uint8 *, l_uint8 *, l_uint8 *) as l_ok
'''  <summary>
''' Notes
''' (1) This puts rgb components from the input line in pixs
''' into the given buffers.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="row">[in] - </param>
'''  <param name="bufr">[in] - array of red samples; size w bytes</param>
'''  <param name="bufg">[in] - array of green samples; size w bytes</param>
'''  <param name="bufb">[in] - array of blue samples; size w bytes</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixGetRGBLine(
				ByVal pixs as Pix, 
				ByVal row as Integer, 
				ByVal bufr as Byte(), 
				ByVal bufg as Byte(), 
				ByVal bufb as Byte()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (bufr) then Throw New ArgumentNullException  ("bufr cannot be Nothing")
	If IsNothing (bufg) then Throw New ArgumentNullException  ("bufg cannot be Nothing")
	If IsNothing (bufb) then Throw New ArgumentNullException  ("bufb cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetRGBLine( pixs.Pointer, row, bufr, bufg, bufb)

	Return _Result
End Function

' SRC\pix2.c (2871, 1)
' pixEndianByteSwapNew()
' pixEndianByteSwapNew(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This is used to convert the data in a pix to a
''' serialized byte buffer in raster order, and, for RGB,
''' in order RGBA.  This requires flipping bytes within
''' each 32-bit word for little-endian platforms, because the
''' words have a MSB-to-the-left rule, whereas byte raster-order
''' requires the left-most byte in each word to be byte 0.
''' For big-endians, no swap is necessary, so this returns a clone.
''' (2) Unlike pixEndianByteSwap(), which swaps the bytes in-place,
''' this returns a new pix (or a clone).  We provide this
''' because often when serialization is done, the source
''' pix needs to be restored to canonical little-endian order,
''' and this requires a second byte swap.  In such a situation,
''' it is twice as fast to make a new pix in big-endian order,
''' use it, and destroy it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixEndianByteSwapNew(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixEndianByteSwapNew( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (2934, 1)
' pixEndianByteSwap()
' pixEndianByteSwap(PIX *) as l_ok
'''  <summary>
''' Notes
''' (1) This is used on little-endian platforms to swap
''' the bytes within a word; bytes 0 and 3 are swapped,
''' and bytes 1 and 2 are swapped.
''' (2) This is required for little-endians in situations
''' where we convert from a serialized byte order that is
''' in raster order, as one typically has in file formats,
''' to one with MSB-to-the-left in each 32-bit word, or v.v.
''' See pix.h for a description of the canonical format
''' (MSB-to-the left) that is used for both little-endian
''' and big-endian platforms.   For big-endians, the
''' MSB-to-the-left word order has the bytes in raster
''' order when serialized, so no byte flipping is required.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixEndianByteSwap(
				ByVal pixs as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixEndianByteSwap( pixs.Pointer)

	Return _Result
End Function

' SRC\pix2.c (2992, 1)
' lineEndianByteSwap()
' lineEndianByteSwap(l_uint32 *, l_uint32 *, l_int32) as l_int32
'''  <summary>
''' Notes
''' (1) This is used on little-endian platforms to swap
''' the bytes within each word in the line of image data.
''' Bytes 0 LT==GT 3 and 1 LT==GT 2 are swapped in the dest
''' byte array data8d, relative to the pix data in datas.
''' (2) The bytes represent 8 bit pixel values.  They are swapped
''' for little endians so that when the dest array datad
''' is addressed by bytes, the pixels are chosen sequentially
''' from left to right in the image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="datad">[in] - dest byte array data, reordered on little-endians</param>
'''  <param name="datas">[in] - a src line of pix data)</param>
'''  <param name="wpl">[in] - number of 32 bit words in the line</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function lineEndianByteSwap(
				ByVal datad as Byte(), 
				ByVal datas as Byte(), 
				ByVal wpl as Integer) as Integer

	If IsNothing (datad) then Throw New ArgumentNullException  ("datad cannot be Nothing")
	If IsNothing (datas) then Throw New ArgumentNullException  ("datas cannot be Nothing")

	Dim datadPTR As IntPtr = Marshal.AllocHGlobal(datad.Count) : Marshal.Copy(datad, 0, datadPTR, datad.Length)
	Dim datasPTR As IntPtr = Marshal.AllocHGlobal(datas.Count) : Marshal.Copy(datas, 0, datasPTR, datas.Length)

	Dim _Result as Integer = LeptonicaSharp.Natives.lineEndianByteSwap( datadPTR, datasPTR, wpl)

	Return _Result
End Function

' SRC\pix2.c (3045, 1)
' pixEndianTwoByteSwapNew()
' pixEndianTwoByteSwapNew(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This is used on little-endian platforms to swap the
''' 2-byte entities within a 32-bit word.
''' (2) This is equivalent to a full byte swap, as performed
''' by pixEndianByteSwap(), followed by byte swaps in
''' each of the 16-bit entities separately.
''' (3) Unlike pixEndianTwoByteSwap(), which swaps the shorts in-place,
''' this returns a new pix (or a clone).  We provide this
''' to avoid having to swap twice in situations where the input
''' pix must be restored to canonical little-endian order.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixEndianTwoByteSwapNew(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixEndianTwoByteSwapNew( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix2.c (3098, 1)
' pixEndianTwoByteSwap()
' pixEndianTwoByteSwap(PIX *) as l_ok
'''  <summary>
''' Notes
''' (1) This is used on little-endian platforms to swap the
''' 2-byte entities within a 32-bit word.
''' (2) This is equivalent to a full byte swap, as performed
''' by pixEndianByteSwap(), followed by byte swaps in
''' each of the 16-bit entities separately.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixEndianTwoByteSwap(
				ByVal pixs as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixEndianTwoByteSwap( pixs.Pointer)

	Return _Result
End Function

' SRC\pix2.c (3152, 1)
' pixGetRasterData()
' pixGetRasterData(PIX *, l_uint8 **, size_t *) as l_ok
'''  <summary>
''' Notes
''' (1) This returns the raster data as a byte string, padded to the
''' byte.  For 1 bpp, the first pixel is the MSbit in the first byte.
''' For rgb, the bytes are in (rgb) order.  This is the format
''' required for flate encoding of pixels in a PostScript file.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 8, 32 bpp</param>
'''  <param name="pdata">[out] - raster data in memory</param>
'''  <param name="pnbytes">[out] - number of bytes in data string</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetRasterData(
				ByVal pixs as Pix, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,8,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 8, 32 bpp")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetRasterData( pixs.Pointer, pdataPTR, pnbytes)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pix2.c (3226, 1)
' pixAlphaIsOpaque()
' pixAlphaIsOpaque(PIX *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 32 bpp, spp == 4</param>
'''  <param name="popaque">[out] - 1 if spp == 4 and all alpha component values are 255 (opaque); 0 otherwise</param>
'''   <returns>0 if OK, 1 on error Notes 1) On error, opaque is returned as 0 (FALSE).</returns>
Public Shared Function pixAlphaIsOpaque(
				ByVal pix as Pix, 
				ByRef popaque as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixAlphaIsOpaque( pix.Pointer, popaque)

	Return _Result
End Function

' SRC\pix2.c (3291, 1)
' pixSetupByteProcessing()
' pixSetupByteProcessing(PIX *, l_int32 *, l_int32 *) as l_uint8 **
'''  <summary>
''' Notes
''' (1) This is a simple helper for processing 8 bpp images with
''' direct byte access.  It can swap byte order within each word.
''' (2) After processing, you must call pixCleanupByteProcessing(),
''' which frees the lineptr array and restores byte order.
''' (3) Usage
''' l_uint8 lineptrs = pixSetupByteProcessing(pix, w, h);
''' for (i = 0; i LT h; i++) {
''' l_uint8 line = lineptrs[i];
''' for (j = 0; j LT w; j++) {
''' val = line[j];
''' ...
''' }
''' }
''' pixCleanupByteProcessing(pix, lineptrs);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 bpp, no colormap</param>
'''  <param name="pw">[out][optional] - width</param>
'''  <param name="ph">[out][optional] - height</param>
'''   <returns>line ptr array, or NULL on error</returns>
Public Shared Function pixSetupByteProcessing(
				ByVal pix as Pix, 
				ByRef pw as Integer, 
				ByRef ph as Integer) as List( of Byte())

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSetupByteProcessing( pix.Pointer, pw, ph)
Dim B As New List(Of Byte())
Dim PTRs(1) As IntPtr : Marshal.Copy(_Result, PTRs, 0, PTRs.Length)
For Each PTR In PTRs : Dim X(3) As Byte : Marshal.Copy(PTR, X, 0, X.Length) : Next

	Return B
End Function

' SRC\pix2.c (3329, 1)
' pixCleanupByteProcessing()
' pixCleanupByteProcessing(PIX *, l_uint8 **) as l_ok
'''  <summary>
''' Notes
''' (1) This must be called after processing that was initiated
''' by pixSetupByteProcessing() has finished.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 bpp, no colormap</param>
'''  <param name="lineptrs">[in] - ptrs to the beginning of each raster line of data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixCleanupByteProcessing(
				ByVal pix as Pix, 
				ByVal lineptrs as List(Of Byte())) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (lineptrs) then Throw New ArgumentNullException  ("lineptrs cannot be Nothing")

Dim lineptrsPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCleanupByteProcessing( pix.Pointer, lineptrsPTR)

	Return _Result
End Function

' SRC\pix2.c (3371, 1)
' l_setAlphaMaskBorder()
' l_setAlphaMaskBorder(l_float32, l_float32) as void
'''  <summary>
''' Notes
''' (1) This sets the opacity values used to generate the two outer
''' boundary rings in the alpha mask associated with geometric
''' transforms such as pixRotateWithAlpha().
''' (2) The default values are val1 = 0.0 (completely transparent
''' in the outermost ring) and val2 = 0.5 (half transparent
''' in the second ring).  When the image is blended, this
''' completely removes the outer ring (shrinking the image by
''' 2 in each direction), and alpha-blends with 0.5 the second ring.
''' Using val1 = 0.25 and val2 = 0.75 gives a slightly more
''' blurred border, with no perceptual difference at screen resolution.
''' (3) The actual mask values are found by multiplying these
''' normalized opacity values by 255.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="val1">[in] - in [0.0 ... 1.0]</param>
'''  <param name="val2">[in] - in [0.0 ... 1.0]</param>
Public Shared Sub l_setAlphaMaskBorder(
				ByVal val1 as Single, 
				ByVal val2 as Single)

	If IsNothing (val1) then Throw New ArgumentNullException  ("val1 cannot be Nothing")
	If IsNothing (val2) then Throw New ArgumentNullException  ("val2 cannot be Nothing")


	LeptonicaSharp.Natives.l_setAlphaMaskBorder( val1, val2)

End Sub

#End Region
#Region "SRC\pix3.c"
' SRC\pix3.c (155, 1)
' pixSetMasked()
' pixSetMasked(PIX *, PIX *, l_uint32) as l_ok
'''  <summary>
''' Notes
''' (1) In-place operation.
''' (2) NOTE For cmapped images, this calls pixSetMaskedCmap().
''' %val must be the 32-bit color representation of the RGB pixel.
''' It is not the index into the colormap!
''' (2) If pixm == NULL, a warning is given.
''' (3) This is an implicitly aligned operation, where the UL
''' corners of pixd and pixm coincide.  A warning is
''' issued if the two image sizes differ significantly,
''' but the operation proceeds.
''' (4) Each pixel in pixd that co-locates with an ON pixel
''' in pixm is set to the specified input value.
''' Other pixels in pixd are not changed.
''' (5) You can visualize this as painting the color through
''' the mask, as a stencil.
''' (6) If you do not want to have the UL corners aligned,
''' use the function pixSetMaskedGeneral(), which requires
''' you to input the UL corner of pixm relative to pixd.
''' (7) Implementation details see comments in pixPaintThroughMask()
''' for when we use rasterop to do the painting.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - 1, 2, 4, 8, 16 or 32 bpp; or colormapped</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask; no operation if NULL</param>
'''  <param name="val">[in] - value to set at each masked pixel</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetMasked(
				ByVal pixd as Pix, 
				ByVal pixm as Pix, 
				ByVal val as UInteger) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetMasked( pixd.Pointer, pixmPTR, val)

	Return _Result
End Function

' SRC\pix3.c (294, 1)
' pixSetMaskedGeneral()
' pixSetMaskedGeneral(PIX *, PIX *, l_uint32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place operation.
''' (2) Alignment is explicit.  If you want the UL corners of
''' the two images to be aligned, use pixSetMasked().
''' (3) A typical use would be painting through the foreground
''' of a small binary mask pixm, located somewhere on a
''' larger pixd.  Other pixels in pixd are not changed.
''' (4) You can visualize this as painting the color through
''' the mask, as a stencil.
''' (5) This uses rasterop to handle clipping and different depths of pixd.
''' (6) If pixd has a colormap, you should call pixPaintThroughMask().
''' (7) Why is this function here, if pixPaintThroughMask() does the
''' same thing, and does it more generally?  I've retained it here
''' to show how one can paint through a mask using only full
''' image rasterops, rather than pixel peeking in pixm and poking
''' in pixd.  It's somewhat baroque, but I found it amusing.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - 8, 16 or 32 bpp</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask; no operation if null</param>
'''  <param name="val">[in] - value to set at each masked pixel</param>
'''  <param name="x">[in] - location of UL corner of pixm relative to pixd; can be negative</param>
'''  <param name="y">[in] - location of UL corner of pixm relative to pixd; can be negative</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixSetMaskedGeneral(
				ByVal pixd as Pix, 
				ByVal pixm as Pix, 
				ByVal val as UInteger, 
				ByVal x as Integer, 
				ByVal y as Integer) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetMaskedGeneral( pixd.Pointer, pixmPTR, val, x, y)

	Return _Result
End Function

' SRC\pix3.c (374, 1)
' pixCombineMasked()
' pixCombineMasked(PIX *, PIX *, PIX *) as l_ok
'''  <summary>
''' Notes
''' (1) In-place operation; pixd is changed.
''' (2) This sets each pixel in pixd that co-locates with an ON
''' pixel in pixm to the corresponding value of pixs.
''' (3) pixs and pixd must be the same depth and not colormapped.
''' (4) All three input pix are aligned at the UL corner, and the
''' operation is clipped to the intersection of all three images.
''' (5) If pixm == NULL, it's a no-op.
''' (6) Implementation see notes in pixCombineMaskedGeneral().
''' For 8 bpp selective masking, you might guess that it
''' would be faster to generate an 8 bpp version of pixm,
''' using pixConvert1To8(pixm, 0, 255), and then use a
''' general combine operation
''' d = (d  ~m) | (s  m)
''' on a word-by-word basis.  Not always.  The word-by-word
''' combine takes a time that is independent of the mask data.
''' If the mask is relatively sparse, the byte-check method
''' is actually faster!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - 1 bpp, 8 bpp gray or 32 bpp rgb; no cmap</param>
'''  <param name="pixs">[in] - 1 bpp, 8 bpp gray or 32 bpp rgb; no cmap</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask; no operation if NULL</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixCombineMasked(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal pixm as Pix) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCombineMasked( pixd.Pointer, pixs.Pointer, pixmPTR)

	Return _Result
End Function

' SRC\pix3.c (493, 1)
' pixCombineMaskedGeneral()
' pixCombineMaskedGeneral(PIX *, PIX *, PIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) In-place operation; pixd is changed.
''' (2) This is a generalized version of pixCombinedMasked(), where
''' the source and mask can be placed at the same (arbitrary)
''' location relative to pixd.
''' (3) pixs and pixd must be the same depth and not colormapped.
''' (4) The UL corners of both pixs and pixm are aligned with
''' the point (x, y) of pixd, and the operation is clipped to
''' the intersection of all three images.
''' (5) If pixm == NULL, it's a no-op.
''' (6) Implementation.  There are two ways to do these.  In the first,
''' we use rasterop, ORing the part of pixs under the mask
''' with pixd (which has been appropriately cleared there first).
''' In the second, the mask is used one pixel at a time to
''' selectively replace pixels of pixd with those of pixs.
''' Here, we use rasterop for 1 bpp and pixel-wise replacement
''' for 8 and 32 bpp.  To use rasterop for 8 bpp, for example,
''' we must first generate an 8 bpp version of the mask.
''' The code is simple
''' Pix pixm8 = pixConvert1To8(NULL, pixm, 0, 255);
''' Pix pixt = pixAnd(NULL, pixs, pixm8);
''' pixRasterop(pixd, x, y, wmin, hmin, PIX_DST  PIX_NOT(PIX_SRC),
''' pixm8, 0, 0);
''' pixRasterop(pixd, x, y, wmin, hmin, PIX_SRC | PIX_DST,
''' pixt, 0, 0);
''' pixDestroy(pixt);
''' pixDestroy(pixm8);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - 1 bpp, 8 bpp gray or 32 bpp rgb</param>
'''  <param name="pixs">[in] - 1 bpp, 8 bpp gray or 32 bpp rgb</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask</param>
'''  <param name="x">[in] - origin of pixs and pixm relative to pixd; can be negative</param>
'''  <param name="y">[in] - origin of pixs and pixm relative to pixd; can be negative</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixCombineMaskedGeneral(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCombineMaskedGeneral( pixd.Pointer, pixs.Pointer, pixmPTR, x, y)

	Return _Result
End Function

' SRC\pix3.c (618, 1)
' pixPaintThroughMask()
' pixPaintThroughMask(PIX *, PIX *, l_int32, l_int32, l_uint32) as l_ok
'''  <summary>
''' Notes
''' (1) In-place operation.  Calls pixSetMaskedCmap() for colormapped
''' images.
''' (2) For 1, 2, 4, 8 and 16 bpp gray, we take the appropriate
''' number of least significant bits of val.
''' (3) If pixm == NULL, it's a no-op.
''' (4) The mask origin is placed at (x,y) on pixd, and the
''' operation is clipped to the intersection of rectangles.
''' (5) For rgb, the components in val are in the canonical locations,
''' with red in location COLOR_RED, etc.
''' (6) Implementation detail 1
''' For painting with val == 0 or val == maxval, you can use rasterop.
''' If val == 0, invert the mask so that it's 0 over the region
''' into which you want to write, and use PIX_SRC  PIX_DST to
''' clear those pixels.  To write with val = maxval (all 1's),
''' use PIX_SRC | PIX_DST to set all bits under the mask.
''' (7) Implementation detail 2
''' The rasterop trick can be used for depth GT 1 as well.
''' For val == 0, generate the mask for depth d from the binary
''' mask using
''' pixmd = pixUnpackBinary(pixm, d, 1);
''' and use pixRasterop() with PIX_MASK.  For val == maxval,
''' pixmd = pixUnpackBinary(pixm, d, 0);
''' and use pixRasterop() with PIX_PAINT.
''' But note that if d == 32 bpp, it is about 3x faster to use
''' the general implementation (not pixRasterop()).
''' (8) Implementation detail 3
''' It might be expected that the switch in the inner loop will
''' cause large branching delays and should be avoided.
''' This is not the case, because the entrance is always the
''' same and the compiler can correctly predict the jump.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - 1, 2, 4, 8, 16 or 32 bpp; or colormapped</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask</param>
'''  <param name="x">[in] - origin of pixm relative to pixd; can be negative</param>
'''  <param name="y">[in] - origin of pixm relative to pixd; can be negative</param>
'''  <param name="val">[in] - pixel value to set at each masked pixel</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixPaintThroughMask(
				ByVal pixd as Pix, 
				ByVal pixm as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal val as UInteger) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixPaintThroughMask( pixd.Pointer, pixmPTR, x, y, val)

	Return _Result
End Function

' SRC\pix3.c (786, 1)
' pixPaintSelfThroughMask()
' pixPaintSelfThroughMask(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) In-place operation; pixd is changed.
''' (2) If pixm == NULL, it's a no-op.
''' (3) The mask origin is placed at (x,y) on pixd, and the
''' operation is clipped to the intersection of pixd and the
''' fg of the mask.
''' (4) %tsize is the the requested size for tiling.  The actual
''' actual size for each c.c. will be bounded by the minimum
''' dimension of the c.c.
''' (5) For %mindist, %searchdir and %ntiles, see pixFindRepCloseTile().
''' They determine the set of possible tiles that can be used
''' to build a larger mirrored tile to paint onto pixd through
''' the c.c. of pixm.
''' (6) %distblend is used for alpha blending.  It is only applied
''' if there is exactly one c.c. in the mask.  Use distblend == 0
''' to skip blending and just paint through the 1 bpp mask.
''' (7) To apply blending to more than 1 component, call this function
''' repeatedly with %pixm, %x and %y representing one component of
''' the mask each time.  This would be done as follows, for an
''' underlying image pixs and mask pixm of components to fill
''' Boxa boxa = pixConnComp(pixm, pixa, 8);
''' n = boxaGetCount(boxa);
''' for (i = 0; i LT n; i++) {
''' Pix pix = pixaGetPix(pixa, i, L_CLONE);
''' Box box = pixaGetBox(pixa, i, L_CLONE);
''' boxGetGeometry(box, bx, by, bw, bh);
''' pixPaintSelfThroughMask(pixs, pix, bx, by, searchdir,
''' mindist, tilesize, ntiles, distblend);
''' pixDestroy(pix);
''' boxDestroy(box);
''' }
''' pixaDestroy(pixa);
''' boxaDestroy(boxa);
''' (8) If no tiles can be found, this falls back to estimating the
''' color near the boundary of the region to be textured.
''' (9) This can be used to replace the pixels in some regions of
''' an image by selected neighboring pixels.  The mask represents
''' the pixels to be replaced.  For each connected component in
''' the mask, this function selects up to two tiles of neighboring
''' pixels to be used for replacement of pixels represented by
''' the component (i.e., under the FG of that component in the mask).
''' After selection, mirror replication is used to generate an
''' image that is large enough to cover the component.  Alpha
''' blending can also be used outside of the component, but near the
''' edge, to blur the transition between painted and original pixels.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - 8 bpp gray or 32 bpp rgb; not colormapped</param>
'''  <param name="pixm">[in] - 1 bpp mask</param>
'''  <param name="x">[in] - origin of pixm relative to pixd; must not be negative</param>
'''  <param name="y">[in] - origin of pixm relative to pixd; must not be negative</param>
'''  <param name="searchdir">[in] - L_HORIZ, L_VERT or L_BOTH_DIRECTIONS</param>
'''  <param name="mindist">[in] - min distance of nearest tile edge to box; GT= 0</param>
'''  <param name="tilesize">[in] - requested size for tiling; may be reduced</param>
'''  <param name="ntiles">[in] - number of tiles tested in each row/column</param>
'''  <param name="distblend">[in] - distance outside the fg used for blending with pixs</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixPaintSelfThroughMask(
				ByVal pixd as Pix, 
				ByVal pixm as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal searchdir as Enumerations.L_direction, 
				ByVal mindist as Integer, 
				ByVal tilesize as Integer, 
				ByVal ntiles as Integer, 
				ByVal distblend as Integer) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixPaintSelfThroughMask( pixd.Pointer, pixm.Pointer, x, y, searchdir, mindist, tilesize, ntiles, distblend)

	Return _Result
End Function

' SRC\pix3.c (943, 1)
' pixMakeMaskFromVal()
' pixMakeMaskFromVal(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This generates a 1 bpp mask image, where a 1 is written in
''' the mask for each pixel in pixs that has a value %val.
''' (2) If no pixels have the value, an empty mask is generated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2, 4 or 8 bpp; can be colormapped</param>
'''  <param name="val">[in] - pixel value</param>
'''   <returns>pixd 1 bpp mask, or NULL on error</returns>
Public Shared Function pixMakeMaskFromVal(
				ByVal pixs as Pix, 
				ByVal val as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMakeMaskFromVal( pixs.Pointer, val)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix3.c (1000, 1)
' pixMakeMaskFromLUT()
' pixMakeMaskFromLUT(PIX *, l_int32 *) as PIX *
'''  <summary>
''' Notes
''' (1) This generates a 1 bpp mask image, where a 1 is written in
''' the mask for each pixel in pixs that has a value corresponding
''' to a 1 in the LUT.
''' (2) The LUT should be of size 256.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2, 4 or 8 bpp; can be colormapped</param>
'''  <param name="tab">[in] - 256-entry LUT; 1 means to write to mask</param>
'''   <returns>pixd 1 bpp mask, or NULL on error</returns>
Public Shared Function pixMakeMaskFromLUT(
				ByVal pixs as Pix, 
				ByVal tab as Integer()) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (tab) then Throw New ArgumentNullException  ("tab cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMakeMaskFromLUT( pixs.Pointer, tab)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix3.c (1069, 1)
' pixMakeArbMaskFromRGB()
' pixMakeArbMaskFromRGB(PIX *, l_float32, l_float32, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This generates a 1 bpp mask image, where a 1 is written in
''' the mask for each pixel in pixs that satisfies
''' rc  rval + gc  gval + bc  bval GT thresh
''' where rval is the red component, etc.
''' (2) Unlike with pixConvertToGray(), there are no constraints
''' on the color coefficients, which can be negative.  For
''' example, a mask that discriminates against red and in favor
''' of blue will have rc LT 0.0 and bc GT 0.0.
''' (3) To make the result independent of intensity (the 'V' in HSV),
''' select coefficients so that %thresh = 0.  Then the result
''' is not changed when all components are multiplied by the
''' same constant (as long as nothing saturates).  This can be
''' useful if, for example, the illumination is not uniform.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp RGB</param>
'''  <param name="rc">[in] - arithmetic factors; can be negative</param>
'''  <param name="gc">[in] - arithmetic factors; can be negative</param>
'''  <param name="bc">[in] - arithmetic factors; can be negative</param>
'''  <param name="thresh">[in] - lower threshold on weighted sum of components</param>
'''   <returns>pixd 1 bpp mask, or NULL on error</returns>
Public Shared Function pixMakeArbMaskFromRGB(
				ByVal pixs as Pix, 
				ByVal rc as Single, 
				ByVal gc as Single, 
				ByVal bc as Single, 
				ByVal thresh as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rc) then Throw New ArgumentNullException  ("rc cannot be Nothing")
	If IsNothing (gc) then Throw New ArgumentNullException  ("gc cannot be Nothing")
	If IsNothing (bc) then Throw New ArgumentNullException  ("bc cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp RGB")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMakeArbMaskFromRGB( pixs.Pointer, rc, gc, bc, thresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix3.c (1146, 1)
' pixSetUnderTransparency()
' pixSetUnderTransparency(PIX *, l_uint32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This sets the r, g and b components under every fully
''' transparent alpha component to %val.  The alpha components
''' are unchanged.
''' (2) Full transparency is denoted by alpha == 0.  Setting
''' all pixels to a constant %val where alpha is transparent
''' can improve compressibility by reducing the entropy.
''' (3) The visual result depends on how the image is displayed.
''' (a) For display devices that respect the use of the alpha
''' layer, this will not affect the appearance.
''' (b) For typical leptonica operations, alpha is ignored,
''' so there will be a change in appearance because this
''' resets the rgb values in the fully transparent region.
''' (4) pixRead() and pixWrite() will, by default, read and write
''' 4-component (rgba) pix in png format.  To ignore the alpha
''' component after reading, or omit it on writing, pixSetSpp(..., 3).
''' (5) Here are some examples
''' To convert all fully transparent pixels in a 4 component
''' (rgba) png file to white
''' pixs = pixRead(LTinfileGT);
''' pixd = pixSetUnderTransparency(pixs, 0xffffff00, 0);
''' To write pixd with the alpha component
''' pixWrite(LToutfileGT, pixd, IFF_PNG);
''' To write and rgba image without the alpha component, first do
''' pixSetSpp(pixd, 3);
''' If you later want to use the alpha, spp must be reset to 4.
''' (fancier) To remove the alpha by blending the image over
''' a white background
''' pixRemoveAlpha()
''' This changes all pixel values where the alpha component is
''' not opaque (255).
''' (6) Caution.  rgb images in leptonica typically have value 0 in
''' the alpha channel, which is fully transparent.  If spp for
''' such an image were changed from 3 to 4, the image becomes
''' fully transparent, and this function will set each pixel to %val.
''' If you really want to set every pixel to the same value,
''' use pixSetAllArbitrary().
''' (7) This is useful for compressing an RGBA image where the part
''' of the image that is fully transparent is random junk; compression
''' is typically improved by setting that region to a constant.
''' For rendering as a 3 component RGB image over a uniform
''' background of arbitrary color, use pixAlphaBlendUniform().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgba</param>
'''  <param name="val">[in] - 32 bit unsigned color to use where alpha == 0</param>
'''  <param name="debug">[in] - displays layers of pixs</param>
'''   <returns>pixd 32 bpp rgba, or NULL on error</returns>
Public Shared Function pixSetUnderTransparency(
				ByVal pixs as Pix, 
				ByVal val as UInteger, 
				ByVal debug as Enumerations.DebugOnOff) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSetUnderTransparency( pixs.Pointer, val, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix3.c (1222, 1)
' pixMakeAlphaFromMask()
' pixMakeAlphaFromMask(PIX *, l_int32, BOX **) as PIX *
'''  <summary>
''' Notes
''' (1) This generates a 8 bpp alpha layer that is opaque (256)
''' over the FG of pixs, and goes transparent linearly away
''' from the FG pixels, decaying to 0 (transparent) is an
''' 8-connected distance given by %dist.  If %dist == 0,
''' this does a simple conversion from 1 to 8 bpp.
''' (2) If box == NULL, this returns an alpha mask that is the
''' full size of pixs.  Otherwise, the returned mask pixd covers
''' just the FG pixels of pixs, expanded by %dist in each
''' direction (if possible), and the returned box gives the
''' location of the returned mask relative to pixs.
''' (3) This is useful for painting through a mask and allowing
''' blending of the painted image with an underlying image
''' in the mask background for pixels near foreground mask pixels.
''' For example, with an underlying rgb image pix1, an overlaying
''' image rgb pix2, binary mask pixm, and dist GT 0, this
''' blending is achieved with
''' pix3 = pixMakeAlphaFromMask(pixm, dist, box);
''' boxGetGeometry(box, x, y, NULL, NULL);
''' pix4 = pixBlendWithGrayMask(pix1, pix2, pix3, x, y);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="dist">[in] - blending distance; typically 10 - 30</param>
'''  <param name="pbox">[out][optional] - use NULL to get the full size</param>
'''   <returns>pixd (8 bpp gray, or NULL on error</returns>
Public Shared Function pixMakeAlphaFromMask(
				ByVal pixs as Pix, 
				ByVal dist as Integer, 
				ByRef pbox as Box) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

Dim pboxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbox) Then pboxPTR = pbox.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMakeAlphaFromMask( pixs.Pointer, dist, pboxPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pboxPTR <> IntPtr.Zero then pbox = new Box(pboxPTR)

	Return  new Pix(_Result)
End Function

' SRC\pix3.c (1291, 1)
' pixGetColorNearMaskBoundary()
' pixGetColorNearMaskBoundary(PIX *, PIX *, BOX *, l_int32, l_uint32 *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This finds the average color in a set of pixels that are
''' roughly a distance %dist from the c.c. boundary and in the
''' background of the mask image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="pixm">[in] - 1 bpp mask, full image</param>
'''  <param name="box">[in] - region of mask; typically b.b. of a component</param>
'''  <param name="dist">[in] - distance into BG from mask boundary to use</param>
'''  <param name="pval">[out] - average pixel value</param>
'''  <param name="debug">[in] - 1 to output mask images</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function pixGetColorNearMaskBoundary(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal box as Box, 
				ByVal dist as Integer, 
				ByRef pval as UInteger, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetColorNearMaskBoundary( pixs.Pointer, pixm.Pointer, box.Pointer, dist, pval, debug)

	Return _Result
End Function

' SRC\pix3.c (1395, 1)
' pixInvert()
' pixInvert(PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This inverts pixs, for all pixel depths.
''' (2) There are 3 cases
''' (a) pixd == null,   ~src --GT new pixd
''' (b) pixd == pixs,   ~src --GT src  (in-place)
''' (c) pixd != pixs,   ~src --GT input pixd
''' (3) For clarity, if the case is known, use these patterns
''' (a) pixd = pixInvert(NULL, pixs);
''' (b) pixInvert(pixs, pixs);
''' (c) pixInvert(pixd, pixs);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - </param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixInvert(
				ByVal pixd as Pix, 
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixInvert( pixdPTR, pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix3.c (1446, 1)
' pixOr()
' pixOr(PIX *, PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This gives the union of two images with equal depth,
''' aligning them to the the UL corner.  pixs1 and pixs2
''' need not have the same width and height.
''' (2) There are 3 cases
''' (a) pixd == null,   (src1 | src2) --GT new pixd
''' (b) pixd == pixs1,  (src1 | src2) --GT src1  (in-place)
''' (c) pixd != pixs1,  (src1 | src2) --GT input pixd
''' (3) For clarity, if the case is known, use these patterns
''' (a) pixd = pixOr(NULL, pixs1, pixs2);
''' (b) pixOr(pixs1, pixs1, pixs2);
''' (c) pixOr(pixd, pixs1, pixs2);
''' (4) The size of the result is determined by pixs1.
''' (5) The depths of pixs1 and pixs2 must be equal.
''' (6) Note carefully that the order of pixs1 and pixs2 only matters
''' for the in-place case.  For in-place, you must have
''' pixd == pixs1.  Setting pixd == pixs2 gives an incorrect
''' result the copy puts pixs1 image data in pixs2, and
''' the rasterop is then between pixs2 and pixs2 (a no-op).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs1, different from pixs1</param>
'''  <param name="pixs1">[in] - can be == pixd</param>
'''  <param name="pixs2">[in] - must be != pixd</param>
'''   <returns>pixd always</returns>
Public Shared Function pixOr(
				ByVal pixd as Pix, 
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixOr( pixdPTR, pixs1.Pointer, pixs2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix3.c (1510, 1)
' pixAnd()
' pixAnd(PIX *, PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This gives the intersection of two images with equal depth,
''' aligning them to the the UL corner.  pixs1 and pixs2
''' need not have the same width and height.
''' (2) There are 3 cases
''' (a) pixd == null,   (src1  src2) --GT new pixd
''' (b) pixd == pixs1,  (src1  src2) --GT src1  (in-place)
''' (c) pixd != pixs1,  (src1  src2) --GT input pixd
''' (3) For clarity, if the case is known, use these patterns
''' (a) pixd = pixAnd(NULL, pixs1, pixs2);
''' (b) pixAnd(pixs1, pixs1, pixs2);
''' (c) pixAnd(pixd, pixs1, pixs2);
''' (4) The size of the result is determined by pixs1.
''' (5) The depths of pixs1 and pixs2 must be equal.
''' (6) Note carefully that the order of pixs1 and pixs2 only matters
''' for the in-place case.  For in-place, you must have
''' pixd == pixs1.  Setting pixd == pixs2 gives an incorrect
''' result the copy puts pixs1 image data in pixs2, and
''' the rasterop is then between pixs2 and pixs2 (a no-op).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs1, different from pixs1</param>
'''  <param name="pixs1">[in] - can be == pixd</param>
'''  <param name="pixs2">[in] - must be != pixd</param>
'''   <returns>pixd always</returns>
Public Shared Function pixAnd(
				ByVal pixd as Pix, 
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAnd( pixdPTR, pixs1.Pointer, pixs2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix3.c (1574, 1)
' pixXor()
' pixXor(PIX *, PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This gives the XOR of two images with equal depth,
''' aligning them to the the UL corner.  pixs1 and pixs2
''' need not have the same width and height.
''' (2) There are 3 cases
''' (a) pixd == null,   (src1 ^ src2) --GT new pixd
''' (b) pixd == pixs1,  (src1 ^ src2) --GT src1  (in-place)
''' (c) pixd != pixs1,  (src1 ^ src2) --GT input pixd
''' (3) For clarity, if the case is known, use these patterns
''' (a) pixd = pixXor(NULL, pixs1, pixs2);
''' (b) pixXor(pixs1, pixs1, pixs2);
''' (c) pixXor(pixd, pixs1, pixs2);
''' (4) The size of the result is determined by pixs1.
''' (5) The depths of pixs1 and pixs2 must be equal.
''' (6) Note carefully that the order of pixs1 and pixs2 only matters
''' for the in-place case.  For in-place, you must have
''' pixd == pixs1.  Setting pixd == pixs2 gives an incorrect
''' result the copy puts pixs1 image data in pixs2, and
''' the rasterop is then between pixs2 and pixs2 (a no-op).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs1, different from pixs1</param>
'''  <param name="pixs1">[in] - can be == pixd</param>
'''  <param name="pixs2">[in] - must be != pixd</param>
'''   <returns>pixd always</returns>
Public Shared Function pixXor(
				ByVal pixd as Pix, 
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixXor( pixdPTR, pixs1.Pointer, pixs2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix3.c (1639, 1)
' pixSubtract()
' pixSubtract(PIX *, PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This gives the set subtraction of two images with equal depth,
''' aligning them to the the UL corner.  pixs1 and pixs2
''' need not have the same width and height.
''' (2) Source pixs2 is always subtracted from source pixs1.
''' The result is
''' pixs1 \ pixs2 = pixs1  (~pixs2)
''' (3) There are 4 cases
''' (a) pixd == null,   (src1 - src2) --GT new pixd
''' (b) pixd == pixs1,  (src1 - src2) --GT src1  (in-place)
''' (c) pixd == pixs2,  (src1 - src2) --GT src2  (in-place)
''' (d) pixd != pixs1  pixd != pixs2),
''' (src1 - src2) --GT input pixd
''' (4) For clarity, if the case is known, use these patterns
''' (a) pixd = pixSubtract(NULL, pixs1, pixs2);
''' (b) pixSubtract(pixs1, pixs1, pixs2);
''' (c) pixSubtract(pixs2, pixs1, pixs2);
''' (d) pixSubtract(pixd, pixs1, pixs2);
''' (5) The size of the result is determined by pixs1.
''' (6) The depths of pixs1 and pixs2 must be equal.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs1, equal to pixs2, or different from both pixs1 and pixs2</param>
'''  <param name="pixs1">[in] - can be == pixd</param>
'''  <param name="pixs2">[in] - can be == pixd</param>
'''   <returns>pixd always</returns>
Public Shared Function pixSubtract(
				ByVal pixd as Pix, 
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSubtract( pixdPTR, pixs1.Pointer, pixs2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix3.c (1701, 1)
' pixZero()
' pixZero(PIX *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) For a binary image, if there are no fg (black) pixels, empty = 1.
''' (2) For a grayscale image, if all pixels are black (0), empty = 1.
''' (3) For an RGB image, if all 4 components in every pixel is 0,
''' empty = 1.
''' (4) For a colormapped image, pixel values are 0.  The colormap
''' is ignored.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - all depths; colormap OK</param>
'''  <param name="pempty">[out] - 1 if all bits in image data field are 0; 0 otherwise</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixZero(
				ByVal pix as Pix, 
				ByRef pempty as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixZero( pix.Pointer, pempty)

	Return _Result
End Function

' SRC\pix3.c (1751, 1)
' pixForegroundFraction()
' pixForegroundFraction(PIX *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1 bpp</param>
'''  <param name="pfract">[out] - fraction of ON pixels</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixForegroundFraction(
				ByVal pix as Pix, 
				ByRef pfract as Single()) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {1}.contains (pix.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixForegroundFraction( pix.Pointer, pfract)

	Return _Result
End Function

' SRC\pix3.c (1778, 1)
' pixaCountPixels()
' pixaCountPixels(PIXA *) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - array of 1 bpp pix</param>
'''   <returns>na of ON pixels in each pix, or NULL on error</returns>
Public Shared Function pixaCountPixels(
				ByVal pixa as Pixa) as Numa

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaCountPixels( pixa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix3.c (1823, 1)
' pixCountPixels()
' pixCountPixels(PIX *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="pcount">[out] - count of ON pixels</param>
'''  <param name="tab8">[in][optional] - 8-bit pixel lookup table</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixCountPixels(
				ByVal pixs as Pix, 
				ByRef pcount as Integer, 
				ByVal tab8 as Integer()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCountPixels( pixs.Pointer, pcount, tab8)

	Return _Result
End Function

' SRC\pix3.c (1887, 1)
' pixCountPixelsInRect()
' pixCountPixelsInRect(PIX *, BOX *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="box">[in] - (can be null)</param>
'''  <param name="pcount">[out] - count of ON pixels</param>
'''  <param name="tab8">[in][optional] - 8-bit pixel lookup table</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixCountPixelsInRect(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByRef pcount as Integer, 
				ByVal tab8 as Integer()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCountPixelsInRect( pixs.Pointer, box.Pointer, pcount, tab8)

	Return _Result
End Function

' SRC\pix3.c (1931, 1)
' pixCountByRow()
' pixCountByRow(PIX *, BOX *) as NUMA *
'''  <summary>
''' Notes
''' (1) To resample for a bin size different from 1, use
''' numaUniformSampling() on the result of this function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1 bpp</param>
'''  <param name="box">[in][optional] - clipping box for count; can be null</param>
'''   <returns>na of number of ON pixels by row, or NULL on error</returns>
Public Shared Function pixCountByRow(
				ByVal pix as Pix, 
				ByVal box as Box) as Numa

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {1}.contains (pix.d) = false then Throw New ArgumentException ("1 bpp")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCountByRow( pix.Pointer, boxPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix3.c (1983, 1)
' pixCountByColumn()
' pixCountByColumn(PIX *, BOX *) as NUMA *
'''  <summary>
''' Notes
''' (1) To resample for a bin size different from 1, use
''' numaUniformSampling() on the result of this function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1 bpp</param>
'''  <param name="box">[in][optional] - clipping box for count; can be null</param>
'''   <returns>na of number of ON pixels by column, or NULL on error</returns>
Public Shared Function pixCountByColumn(
				ByVal pix as Pix, 
				ByVal box as Box) as Numa

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {1}.contains (pix.d) = false then Throw New ArgumentException ("1 bpp")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCountByColumn( pix.Pointer, boxPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix3.c (2029, 1)
' pixCountPixelsByRow()
' pixCountPixelsByRow(PIX *, l_int32 *) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1 bpp</param>
'''  <param name="tab8">[in][optional] - 8-bit pixel lookup table</param>
'''   <returns>na of counts, or NULL on error</returns>
Public Shared Function pixCountPixelsByRow(
				ByVal pix as Pix, 
				ByVal tab8 as Integer()) as Numa

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {1}.contains (pix.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCountPixelsByRow( pix.Pointer, tab8)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix3.c (2063, 1)
' pixCountPixelsByColumn()
' pixCountPixelsByColumn(PIX *) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1 bpp</param>
'''   <returns>na of counts in each column, or NULL on error</returns>
Public Shared Function pixCountPixelsByColumn(
				ByVal pix as Pix) as Numa

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {1}.contains (pix.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCountPixelsByColumn( pix.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix3.c (2104, 1)
' pixCountPixelsInRow()
' pixCountPixelsInRow(PIX *, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1 bpp</param>
'''  <param name="row">[in] - number</param>
'''  <param name="pcount">[out] - sum of ON pixels in raster line</param>
'''  <param name="tab8">[in][optional] - 8-bit pixel lookup table</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixCountPixelsInRow(
				ByVal pix as Pix, 
				ByVal row as Integer, 
				ByRef pcount as Integer, 
				ByVal tab8 as Integer()) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {1}.contains (pix.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCountPixelsInRow( pix.Pointer, row, pcount, tab8)

	Return _Result
End Function

' SRC\pix3.c (2167, 1)
' pixGetMomentByColumn()
' pixGetMomentByColumn(PIX *, l_int32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1 bpp</param>
'''  <param name="order">[in] - of moment, either 1 or 2</param>
'''   <returns>na of first moment of fg pixels, by column, or NULL on error</returns>
Public Shared Function pixGetMomentByColumn(
				ByVal pix as Pix, 
				ByVal order as Integer) as Numa

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {1}.contains (pix.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetMomentByColumn( pix.Pointer, order)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix3.c (2225, 1)
' pixThresholdPixelSum()
' pixThresholdPixelSum(PIX *, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This sums the ON pixels and returns immediately if the count
''' goes above threshold.  It is therefore more efficient
''' for matching images (by running this function on the xor of
''' the 2 images) than using pixCountPixels(), which counts all
''' pixels before returning.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1 bpp</param>
'''  <param name="thresh">[in] - threshold</param>
'''  <param name="pabove">[out] - 1 if above threshold; 0 if equal to or less than threshold</param>
'''  <param name="tab8">[in][optional] - 8-bit pixel lookup table</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixThresholdPixelSum(
				ByVal pix as Pix, 
				ByVal thresh as Integer, 
				ByRef pabove as Integer, 
				ByVal tab8 as Integer()) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {1}.contains (pix.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixThresholdPixelSum( pix.Pointer, thresh, pabove, tab8)

	Return _Result
End Function

' SRC\pix3.c (2297, 1)
' makePixelSumTab8()
' makePixelSumTab8() as l_int32 *
'''  <summary>
''' Notes
''' (1) This table of integers gives the number of 1 bits
''' in the 8 bit index.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns>table of 256 l_int32, or NULL on error</returns>
Public Shared Function makePixelSumTab8() as Integer()



	Dim _Result as Integer() = LeptonicaSharp.Natives.makePixelSumTab8( )

	Return _Result
End Function

' SRC\pix3.c (2342, 1)
' makePixelCentroidTab8()
' makePixelCentroidTab8() as l_int32 *
'''  <summary>
''' Notes
''' (1) This table of integers gives the centroid weight of the 1 bits
''' in the 8 bit index.  In other words, if sumtab is obtained by
''' makePixelSumTab8, and centroidtab is obtained by
''' makePixelCentroidTab8, then, for 1 LT= i LT= 255,
''' centroidtab[i] / (float)sumtab[i]
''' is the centroid of the 1 bits in the 8-bit index i, where the
''' MSB is considered to have position 0 and the LSB is considered
''' to have position 7.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns>table of 256 l_int32, or NULL on error</returns>
Public Shared Function makePixelCentroidTab8() as Integer()



	Dim _Result as Integer() = LeptonicaSharp.Natives.makePixelCentroidTab8( )

	Return _Result
End Function

' SRC\pix3.c (2400, 1)
' pixAverageByRow()
' pixAverageByRow(PIX *, BOX *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) To resample for a bin size different from 1, use
''' numaUniformSampling() on the result of this function.
''' (2) If type == L_BLACK_IS_MAX, black pixels get the maximum
''' value (0xff for 8 bpp, 0xffff for 16 bpp) and white get 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 or 16 bpp; no colormap</param>
'''  <param name="box">[in][optional] - clipping box for sum; can be null</param>
'''  <param name="type">[in] - L_WHITE_IS_MAX, L_BLACK_IS_MAX</param>
'''   <returns>na of pixel averages by row, or NULL on error</returns>
Public Shared Function pixAverageByRow(
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByVal type as Enumerations.L_IS_MAX) as Numa

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAverageByRow( pix.Pointer, boxPTR, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix3.c (2469, 1)
' pixAverageByColumn()
' pixAverageByColumn(PIX *, BOX *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) To resample for a bin size different from 1, use
''' numaUniformSampling() on the result of this function.
''' (2) If type == L_BLACK_IS_MAX, black pixels get the maximum
''' value (0xff for 8 bpp, 0xffff for 16 bpp) and white get 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 or 16 bpp; no colormap</param>
'''  <param name="box">[in][optional] - clipping box for sum; can be null</param>
'''  <param name="type">[in] - L_WHITE_IS_MAX, L_BLACK_IS_MAX</param>
'''   <returns>na of pixel averages by column, or NULL on error</returns>
Public Shared Function pixAverageByColumn(
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByVal type as Enumerations.L_IS_MAX) as Numa

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAverageByColumn( pix.Pointer, boxPTR, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix3.c (2534, 1)
' pixAverageInRect()
' pixAverageInRect(PIX *, BOX *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1, 2, 4, 8 bpp; not cmapped</param>
'''  <param name="box">[in][optional] - if null, use entire image</param>
'''  <param name="pave">[out] - average of pixel values in region</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixAverageInRect(
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByRef pave as Single()) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixAverageInRect( pix.Pointer, boxPTR, pave)

	Return _Result
End Function

' SRC\pix3.c (2600, 1)
' pixVarianceByRow()
' pixVarianceByRow(PIX *, BOX *) as NUMA *
'''  <summary>
''' Notes
''' (1) To resample for a bin size different from 1, use
''' numaUniformSampling() on the result of this function.
''' (2) We are actually computing the RMS deviation in each row.
''' This is the square root of the variance.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 or 16 bpp; no colormap</param>
'''  <param name="box">[in][optional] - clipping box for variance; can be null</param>
'''   <returns>na of rmsdev by row, or NULL on error</returns>
Public Shared Function pixVarianceByRow(
				ByVal pix as Pix, 
				ByVal box as Box) as Numa

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixVarianceByRow( pix.Pointer, boxPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix3.c (2665, 1)
' pixVarianceByColumn()
' pixVarianceByColumn(PIX *, BOX *) as NUMA *
'''  <summary>
''' Notes
''' (1) To resample for a bin size different from 1, use
''' numaUniformSampling() on the result of this function.
''' (2) We are actually computing the RMS deviation in each row.
''' This is the square root of the variance.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 or 16 bpp; no colormap</param>
'''  <param name="box">[in][optional] - clipping box for variance; can be null</param>
'''   <returns>na of rmsdev by column, or NULL on error</returns>
Public Shared Function pixVarianceByColumn(
				ByVal pix as Pix, 
				ByVal box as Box) as Numa

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixVarianceByColumn( pix.Pointer, boxPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix3.c (2723, 1)
' pixVarianceInRect()
' pixVarianceInRect(PIX *, BOX *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1, 2, 4, 8 bpp; not cmapped</param>
'''  <param name="box">[in][optional] - if null, use entire image</param>
'''  <param name="prootvar">[out] - sqrt variance of pixel values in region</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixVarianceInRect(
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByRef prootvar as Single()) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixVarianceInRect( pix.Pointer, boxPTR, prootvar)

	Return _Result
End Function

' SRC\pix3.c (2800, 1)
' pixAbsDiffByRow()
' pixAbsDiffByRow(PIX *, BOX *) as NUMA *
'''  <summary>
''' Notes
''' (1) This is an average over differences of adjacent pixels along
''' each row.
''' (2) To resample for a bin size different from 1, use
''' numaUniformSampling() on the result of this function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 bpp; no colormap</param>
'''  <param name="box">[in][optional] - clipping box for region; can be null</param>
'''   <returns>na of abs val pixel difference averages by row, or NULL on error</returns>
Public Shared Function pixAbsDiffByRow(
				ByVal pix as Pix, 
				ByVal box as Box) as Numa

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {8}.contains (pix.d) = false then Throw New ArgumentException ("8 bpp; no colormap")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAbsDiffByRow( pix.Pointer, boxPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix3.c (2861, 1)
' pixAbsDiffByColumn()
' pixAbsDiffByColumn(PIX *, BOX *) as NUMA *
'''  <summary>
''' Notes
''' (1) This is an average over differences of adjacent pixels along
''' each column.
''' (2) To resample for a bin size different from 1, use
''' numaUniformSampling() on the result of this function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 bpp; no colormap</param>
'''  <param name="box">[in][optional] - clipping box for region; can be null</param>
'''   <returns>na of abs val pixel difference averages by column, or NULL on error</returns>
Public Shared Function pixAbsDiffByColumn(
				ByVal pix as Pix, 
				ByVal box as Box) as Numa

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {8}.contains (pix.d) = false then Throw New ArgumentException ("8 bpp; no colormap")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAbsDiffByColumn( pix.Pointer, boxPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix3.c (2924, 1)
' pixAbsDiffInRect()
' pixAbsDiffInRect(PIX *, BOX *, l_int32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This gives the average over the abs val of differences of
''' adjacent pixels values, along either each
''' row  dir == L_HORIZONTAL_LINE
''' column  dir == L_VERTICAL_LINE
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 bpp; not cmapped</param>
'''  <param name="box">[in][optional] - if null, use entire image</param>
'''  <param name="dir">[in] - differences along L_HORIZONTAL_LINE or L_VERTICAL_LINE</param>
'''  <param name="pabsdiff">[out] - average of abs diff pixel values in region</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixAbsDiffInRect(
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByVal dir as Enumerations.L_LINE, 
				ByRef pabsdiff as Single()) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixAbsDiffInRect( pix.Pointer, boxPTR, dir, pabsdiff)

	Return _Result
End Function

' SRC\pix3.c (3001, 1)
' pixAbsDiffOnLine()
' pixAbsDiffOnLine(PIX *, l_int32, l_int32, l_int32, l_int32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This gives the average over the abs val of differences of
''' adjacent pixels values, along a line that is either horizontal
''' or vertical.
''' (2) If horizontal, require x1 LT x2; if vertical, require y1 LT y2.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 bpp; not cmapped</param>
'''  <param name="x1">[in] - first point; x1 LT= x2, y1 LT= y2</param>
'''  <param name="y1">[in] - first point; x1 LT= x2, y1 LT= y2</param>
'''  <param name="x2">[in] - first point</param>
'''  <param name="y2">[in] - first point</param>
'''  <param name="pabsdiff">[out] - average of abs diff pixel values on line</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixAbsDiffOnLine(
				ByVal pix as Pix, 
				ByVal x1 as Integer, 
				ByVal y1 as Integer, 
				ByVal x2 as Integer, 
				ByVal y2 as Integer, 
				ByRef pabsdiff as Single()) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixAbsDiffOnLine( pix.Pointer, x1, y1, x2, y2, pabsdiff)

	Return _Result
End Function

' SRC\pix3.c (3083, 1)
' pixCountArbInRect()
' pixCountArbInRect(PIX *, BOX *, l_int32, l_int32, l_int32 *) as l_int32
'''  <summary>
''' Notes
''' (1) If pixs is cmapped, %val is compared to the colormap index;
''' otherwise, %val is compared to the grayscale value.
''' (2) Set the subsampling %factor GT 1 to reduce the amount of computation.
''' If %factor GT 1, multiply the count by %factor  %factor.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, or colormapped</param>
'''  <param name="box">[in][optional] - over which count is made; use entire image if NULL</param>
'''  <param name="val">[in] - pixel value to count</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''  <param name="pcount">[out] - count; estimate it if factor GT 1</param>
'''   <returns>na histogram, or NULL on error</returns>
Public Shared Function pixCountArbInRect(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal val as Integer, 
				ByVal factor as Integer, 
				ByRef pcount as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCountArbInRect( pixs.Pointer, boxPTR, val, factor, pcount)

	Return _Result
End Function

' SRC\pix3.c (3161, 1)
' pixMirroredTiling()
' pixMirroredTiling(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This uses mirrored tiling, where each row alternates
''' with LR flips and every column alternates with TB
''' flips, such that the result is a tiling with identical
''' 2 x 2 tiles, each of which is composed of these transforms
''' -----------------
''' | 1 |  LR |
''' -----------------
''' | TB   |  LR/TB |
''' -----------------
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 or 32 bpp, small tile; to be replicated</param>
'''  <param name="w">[in] - dimensions of output pix</param>
'''  <param name="h">[in] - dimensions of output pix</param>
'''   <returns>pixd usually larger pix, mirror-tiled with pixs, or NULL on error</returns>
Public Shared Function pixMirroredTiling(
				ByVal pixs as Pix, 
				ByVal w as Integer, 
				ByVal h as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMirroredTiling( pixs.Pointer, w, h)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix3.c (3236, 1)
' pixFindRepCloseTile()
' pixFindRepCloseTile(PIX *, BOX *, l_int32, l_int32, l_int32, l_int32, BOX **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This looks for one or two square tiles with conforming median
''' intensity and low variance, that is outside but near the input box.
''' (2) %mindist specifies the gap between the box and the
''' potential tiles.  The tiles are given an overlap of 50%.
''' %ntiles specifies the number of tiles that are tested
''' beyond %mindist for each row or column.
''' (3) For example, if %mindist = 20, %tilesize = 50 and %ntiles = 3,
''' a horizontal search to the right will have 3 tiles in each row,
''' with left edges at 20, 45 and 70 from the right edge of the
''' input %box.  The number of rows of tiles is determined by
''' the height of %box and %tsize, with the 50% overlap..
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="box">[in] - region of pixs to search around</param>
'''  <param name="searchdir">[in] - L_HORIZ or L_VERT; direction to search</param>
'''  <param name="mindist">[in] - min distance of selected tile edge from box; GT= 0</param>
'''  <param name="tsize">[in] - tile size; GT 1; even; typically ~50</param>
'''  <param name="ntiles">[in] - number of tiles tested in each row/column</param>
'''  <param name="pboxtile">[out] - region of best tile</param>
'''  <param name="debug">[in] - 1    for debug output</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFindRepCloseTile(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal searchdir as Enumerations.L_direction, 
				ByVal mindist as Integer, 
				ByVal tsize as Integer, 
				ByVal ntiles as Integer, 
				ByRef pboxtile as Box, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim pboxtilePTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxtile) Then pboxtilePTR = pboxtile.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindRepCloseTile( pixs.Pointer, box.Pointer, searchdir, mindist, tsize, ntiles, pboxtilePTR, debug)
	if pboxtilePTR <> IntPtr.Zero then pboxtile = new Box(pboxtilePTR)

	Return _Result
End Function

#End Region
#Region "SRC\pix4.c"
' SRC\pix4.c (109, 1)
' pixGetGrayHistogram()
' pixGetGrayHistogram(PIX *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) If pixs has a colormap, it is converted to 8 bpp gray.
''' If you want a histogram of the colormap indices, use
''' pixGetCmapHistogram().
''' (2) If pixs does not have a colormap, the output histogram is
''' of size 2^d, where d is the depth of pixs.
''' (3) Set the subsampling factor GT 1 to reduce the amount of computation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 bpp; can be colormapped</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''   <returns>na histogram, or NULL on error</returns>
Public Shared Function pixGetGrayHistogram(
				ByVal pixs as Pix, 
				ByVal factor as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8,16}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16 bpp; can be colormapped")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetGrayHistogram( pixs.Pointer, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix4.c (205, 1)
' pixGetGrayHistogramMasked()
' pixGetGrayHistogramMasked(PIX *, PIX *, l_int32, l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) If pixs is cmapped, it is converted to 8 bpp gray.
''' If you want a histogram of the colormap indices, use
''' pixGetCmapHistogramMasked().
''' (2) This always returns a 256-value histogram of pixel values.
''' (3) Set the subsampling factor GT 1 to reduce the amount of computation.
''' (4) Clipping of pixm (if it exists) to pixs is done in the inner loop.
''' (5) Input x,y are ignored unless pixm exists.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, or colormapped</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask over which histogram is to be computed; use all pixels if null</param>
'''  <param name="x">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0; these values are ignored if pixm is null</param>
'''  <param name="y">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0; these values are ignored if pixm is null</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''   <returns>na histogram, or NULL on error</returns>
Public Shared Function pixGetGrayHistogramMasked(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal factor as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetGrayHistogramMasked( pixs.Pointer, pixmPTR, x, y, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix4.c (285, 1)
' pixGetGrayHistogramInRect()
' pixGetGrayHistogramInRect(PIX *, BOX *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) If pixs is cmapped, it is converted to 8 bpp gray.
''' If you want a histogram of the colormap indices, use
''' pixGetCmapHistogramInRect().
''' (2) This always returns a 256-value histogram of pixel values.
''' (3) Set the subsampling %factor GT 1 to reduce the amount of computation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, or colormapped</param>
'''  <param name="box">[in][optional] - over which histogram is to be computed; use full image if NULL</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''   <returns>na histogram, or NULL on error</returns>
Public Shared Function pixGetGrayHistogramInRect(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal factor as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetGrayHistogramInRect( pixs.Pointer, boxPTR, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix4.c (353, 1)
' pixGetGrayHistogramTiled()
' pixGetGrayHistogramTiled(PIX *, l_int32, l_int32, l_int32) as NUMAA *
'''  <summary>
''' Notes
''' (1) If pixs is cmapped, it is converted to 8 bpp gray.
''' (2) This returns a set of 256-value histograms of pixel values.
''' (3) Set the subsampling factor GT 1 to reduce the amount of computation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth, colormap OK</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''  <param name="nx">[in] - tiling; GT= 1; typically small</param>
'''  <param name="ny">[in] - tiling; GT= 1; typically small</param>
'''   <returns>naa set of histograms, or NULL on error</returns>
Public Shared Function pixGetGrayHistogramTiled(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByVal nx as Integer, 
				ByVal ny as Integer) as Numaa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetGrayHistogramTiled( pixs.Pointer, factor, nx, ny)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numaa(_Result)
End Function

' SRC\pix4.c (410, 1)
' pixGetColorHistogram()
' pixGetColorHistogram(PIX *, l_int32, NUMA **, NUMA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) This generates a set of three 256 entry histograms,
''' one for each color component (r,g,b).
''' (2) Set the subsampling %factor GT 1 to reduce the amount of computation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - rgb or colormapped</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''  <param name="pnar">[out] - red histogram</param>
'''  <param name="pnag">[out] - green histogram</param>
'''  <param name="pnab">[out] - blue histogram</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetColorHistogram(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByRef pnar as Numa, 
				ByRef pnag as Numa, 
				ByRef pnab as Numa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pnarPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnar) Then pnarPTR = pnar.Pointer
	Dim pnagPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnag) Then pnagPTR = pnag.Pointer
	Dim pnabPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnab) Then pnabPTR = pnab.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetColorHistogram( pixs.Pointer, factor, pnarPTR, pnagPTR, pnabPTR)
	if pnarPTR <> IntPtr.Zero then pnar = new Numa(pnarPTR)
	if pnagPTR <> IntPtr.Zero then pnag = new Numa(pnagPTR)
	if pnabPTR <> IntPtr.Zero then pnab = new Numa(pnabPTR)

	Return _Result
End Function

' SRC\pix4.c (512, 1)
' pixGetColorHistogramMasked()
' pixGetColorHistogramMasked(PIX *, PIX *, l_int32, l_int32, l_int32, NUMA **, NUMA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) This generates a set of three 256 entry histograms,
''' (2) Set the subsampling %factor GT 1 to reduce the amount of computation.
''' (3) Clipping of pixm (if it exists) to pixs is done in the inner loop.
''' (4) Input x,y are ignored unless pixm exists.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb, or colormapped</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask over which histogram is to be computed; use all pixels if null</param>
'''  <param name="x">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0; these values are ignored if pixm is null</param>
'''  <param name="y">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0; these values are ignored if pixm is null</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''  <param name="pnar">[out] - red histogram</param>
'''  <param name="pnag">[out] - green histogram</param>
'''  <param name="pnab">[out] - blue histogram</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetColorHistogramMasked(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal factor as Integer, 
				ByRef pnar as Numa, 
				ByRef pnag as Numa, 
				ByRef pnab as Numa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer
	Dim pnarPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnar) Then pnarPTR = pnar.Pointer
	Dim pnagPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnag) Then pnagPTR = pnag.Pointer
	Dim pnabPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnab) Then pnabPTR = pnab.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetColorHistogramMasked( pixs.Pointer, pixmPTR, x, y, factor, pnarPTR, pnagPTR, pnabPTR)
	if pnarPTR <> IntPtr.Zero then pnar = new Numa(pnarPTR)
	if pnagPTR <> IntPtr.Zero then pnag = new Numa(pnagPTR)
	if pnabPTR <> IntPtr.Zero then pnab = new Numa(pnabPTR)

	Return _Result
End Function

' SRC\pix4.c (627, 1)
' pixGetCmapHistogram()
' pixGetCmapHistogram(PIX *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) This generates a histogram of colormap pixel indices,
''' and is of size 2^d.
''' (2) Set the subsampling %factor GT 1 to reduce the amount of computation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - colormapped d = 2, 4 or 8</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''   <returns>na histogram of cmap indices, or NULL on error</returns>
Public Shared Function pixGetCmapHistogram(
				ByVal pixs as Pix, 
				ByVal factor as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetCmapHistogram( pixs.Pointer, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix4.c (692, 1)
' pixGetCmapHistogramMasked()
' pixGetCmapHistogramMasked(PIX *, PIX *, l_int32, l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) This generates a histogram of colormap pixel indices,
''' and is of size 2^d.
''' (2) Set the subsampling %factor GT 1 to reduce the amount of computation.
''' (3) Clipping of pixm to pixs is done in the inner loop.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - colormapped d = 2, 4 or 8</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask over which histogram is to be computed; use all pixels if null</param>
'''  <param name="x">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0; these values are ignored if pixm is null</param>
'''  <param name="y">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0; these values are ignored if pixm is null</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''   <returns>na histogram, or NULL on error</returns>
Public Shared Function pixGetCmapHistogramMasked(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal factor as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetCmapHistogramMasked( pixs.Pointer, pixmPTR, x, y, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix4.c (772, 1)
' pixGetCmapHistogramInRect()
' pixGetCmapHistogramInRect(PIX *, BOX *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) This generates a histogram of colormap pixel indices,
''' and is of size 2^d.
''' (2) Set the subsampling %factor GT 1 to reduce the amount of computation.
''' (3) Clipping to the box is done in the inner loop.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - colormapped d = 2, 4 or 8</param>
'''  <param name="box">[in][optional] - over which histogram is to be computed; use full image if NULL</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''   <returns>na histogram, or NULL on error</returns>
Public Shared Function pixGetCmapHistogramInRect(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal factor as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetCmapHistogramInRect( pixs.Pointer, boxPTR, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix4.c (831, 1)
' pixCountRGBColors()
' pixCountRGBColors(PIX *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - rgb or rgba</param>
'''   <returns>ncolors, or -1 on error</returns>
Public Shared Function pixCountRGBColors(
				ByVal pixs as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixCountRGBColors( pixs.Pointer)

	Return _Result
End Function

' SRC\pix4.c (861, 1)
' pixGetColorAmapHistogram()
' pixGetColorAmapHistogram(PIX *, l_int32) as L_AMAP *
'''  <summary>
''' Notes
''' (1) This generates an ordered map from pixel value to histogram count.
''' (2) Use amapGetCountForColor() to use the map to look up a count.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - rgb or rgba</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''   <returns>amap, or NULL on error</returns>
Public Shared Function pixGetColorAmapHistogram(
				ByVal pixs as Pix, 
				ByVal factor as Integer) as L_Rbtree

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetColorAmapHistogram( pixs.Pointer, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree(_Result)
End Function

' SRC\pix4.c (910, 1)
' amapGetCountForColor()
' amapGetCountForColor(L_AMAP *, l_uint32) as l_int32
'''  <summary>
''' Notes
''' (1) The ordered map is made by pixGetColorAmapHistogram().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="amap">[in] - map from pixel value to count</param>
'''  <param name="val">[in] - rgb or rgba pixel value</param>
'''   <returns>count, or -1 on error</returns>
Public Shared Function amapGetCountForColor(
				ByVal amap as L_Rbtree, 
				ByVal val as UInteger) as Integer

	If IsNothing (amap) then Throw New ArgumentNullException  ("amap cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.amapGetCountForColor( amap.Pointer, val)

	Return _Result
End Function

' SRC\pix4.c (945, 1)
' pixGetRankValue()
' pixGetRankValue(PIX *, l_int32, l_float32, l_uint32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Simple function to get rank values of an image.
''' For a color image, the median value (rank = 0.5) can be
''' used to linearly remap the colors based on the median
''' of a target image, using pixLinearMapToTargetColor().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, 32 bpp or colormapped</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''  <param name="rank">[in] - between 0.0 and 1.0; 1.0 is brightest, 0.0 is darkest</param>
'''  <param name="pvalue">[out] - pixel value corresponding to input rank</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetRankValue(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByVal rank as Single, 
				ByRef pvalue as UInteger) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rank) then Throw New ArgumentNullException  ("rank cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetRankValue( pixs.Pointer, factor, rank, pvalue)

	Return _Result
End Function

' SRC\pix4.c (1015, 1)
' pixGetRankValueMaskedRGB()
' pixGetRankValueMaskedRGB(PIX *, PIX *, l_int32, l_int32, l_int32, l_float32, l_float32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Computes the rank component values of pixels in pixs that
''' are under the fg of the optional mask.  If the mask is null, it
''' computes the average of the pixels in pixs.
''' (2) Set the subsampling %factor GT 1 to reduce the amount of
''' computation.
''' (4) Input x,y are ignored unless pixm exists.
''' (5) The rank must be in [0.0 ... 1.0], where the brightest pixel
''' has rank 1.0.  For the median pixel value, use 0.5.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask over which rank val is to be taken; use all pixels if null</param>
'''  <param name="x">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0; these values are ignored if pixm is null</param>
'''  <param name="y">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0; these values are ignored if pixm is null</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''  <param name="rank">[in] - between 0.0 and 1.0; 1.0 is brightest, 0.0 is darkest</param>
'''  <param name="prval">[out][optional] - red component val for input rank</param>
'''  <param name="pgval">[out][optional] - green component val for input rank</param>
'''  <param name="pbval">[out][optional] - blue component val for input rank</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetRankValueMaskedRGB(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal factor as Integer, 
				ByVal rank as Single, 
				ByRef prval as Single(), 
				ByRef pgval as Single(), 
				ByRef pbval as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rank) then Throw New ArgumentNullException  ("rank cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetRankValueMaskedRGB( pixs.Pointer, pixmPTR, x, y, factor, rank, prval, pgval, pbval)

	Return _Result
End Function

' SRC\pix4.c (1107, 1)
' pixGetRankValueMasked()
' pixGetRankValueMasked(PIX *, PIX *, l_int32, l_int32, l_int32, l_float32, l_float32 *, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) Computes the rank value of pixels in pixs that are under
''' the fg of the optional mask.  If the mask is null, it
''' computes the average of the pixels in pixs.
''' (2) Set the subsampling %factor GT 1 to reduce the amount of
''' computation.
''' (3) Clipping of pixm (if it exists) to pixs is done in the inner loop.
''' (4) Input x,y are ignored unless pixm exists.
''' (5) The rank must be in [0.0 ... 1.0], where the brightest pixel
''' has rank 1.0.  For the median pixel value, use 0.5.
''' (6) The histogram can optionally be returned, so that other rank
''' values can be extracted without recomputing the histogram.
''' In that case, just use
''' numaHistogramGetValFromRank(na, rank, val);
''' on the returned Numa for additional rank values.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, or colormapped</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask, over which the rank val is to be taken; use all pixels if null</param>
'''  <param name="x">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0; these values are ignored if pixm is null</param>
'''  <param name="y">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0; these values are ignored if pixm is null</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''  <param name="rank">[in] - between 0.0 and 1.0; 1.0 is brightest, 0.0 is darkest</param>
'''  <param name="pval">[out] - pixel value corresponding to input rank</param>
'''  <param name="pna">[out][optional] - of histogram</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetRankValueMasked(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal factor as Integer, 
				ByVal rank as Single, 
				ByRef pval as Single(), 
				ByRef pna as Numa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rank) then Throw New ArgumentNullException  ("rank cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer
Dim pnaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pna) Then pnaPTR = pna.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetRankValueMasked( pixs.Pointer, pixmPTR, x, y, factor, rank, pval, pnaPTR)
	if pnaPTR <> IntPtr.Zero then pna = new Numa(pnaPTR)

	Return _Result
End Function

' SRC\pix4.c (1176, 1)
' pixGetPixelAverage()
' pixGetPixelAverage(PIX *, PIX *, l_int32, l_int32, l_int32, l_uint32 *) as l_ok
'''  <summary>
''' Notes
''' (1) For rgb pix, this is a more direct computation of the
''' average value of the pixels in %pixs that are under the
''' mask %pixm. It is faster than pixGetPixelStats(), which
''' calls pixGetAverageMaskedRGB() and has the overhead of
''' generating a temporary pix of each of the three components;
''' this can take most of the time if %factor GT 1.
''' (2) If %pixm is null, this gives the average value of all
''' pixels in %pixs.  The returned value is an integer.
''' (3) For color %pixs, the returned pixel value is in the standard
''' uint32 RGBA packing.
''' (4) Clipping of pixm (if it exists) to pixs is done in the inner loop.
''' (5) Input x,y are ignored if %pixm does not exist.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 or 32 bpp, or colormapped</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask over which average is to be taken; use all pixels if null</param>
'''  <param name="x">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0</param>
'''  <param name="y">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0</param>
'''  <param name="factor">[in] - subsampling factor; GT= 1</param>
'''  <param name="pval">[out] - average pixel value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetPixelAverage(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal factor as Integer, 
				ByRef pval as UInteger) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetPixelAverage( pixs.Pointer, pixmPTR, x, y, factor, pval)

	Return _Result
End Function

' SRC\pix4.c (1294, 1)
' pixGetPixelStats()
' pixGetPixelStats(PIX *, l_int32, l_int32, l_uint32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Simple function to get one of four statistical values of an image.
''' (2) It does not take a mask it uses the entire image.
''' (3) To get the average pixel value of an RGB image, suggest using
''' pixGetPixelAverage(), which is considerably faster.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, 32 bpp or colormapped</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''  <param name="type">[in] - L_MEAN_ABSVAL, L_ROOT_MEAN_SQUARE, L_STANDARD_DEVIATION, L_VARIANCE</param>
'''  <param name="pvalue">[out] - pixel value corresponding to input type</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetPixelStats(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByVal type as Enumerations.L_statistical_measures, 
				ByRef pvalue as UInteger) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetPixelStats( pixs.Pointer, factor, type, pvalue)

	Return _Result
End Function

' SRC\pix4.c (1361, 1)
' pixGetAverageMaskedRGB()
' pixGetAverageMaskedRGB(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_float32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) For usage, see pixGetAverageMasked().
''' (2) If there is a colormap, it is removed before the 8 bpp
''' component images are extracted.
''' (3) A better name for this would be pixGetPixelStatsRGB()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp, or colormapped</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask over which average is to be taken; use all pixels if null</param>
'''  <param name="x">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0</param>
'''  <param name="y">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0</param>
'''  <param name="factor">[in] - subsampling factor; GT= 1</param>
'''  <param name="type">[in] - L_MEAN_ABSVAL, L_ROOT_MEAN_SQUARE, L_STANDARD_DEVIATION, L_VARIANCE</param>
'''  <param name="prval">[out][optional] - measured red value of given 'type'</param>
'''  <param name="pgval">[out][optional] - measured green value of given 'type'</param>
'''  <param name="pbval">[out][optional] - measured blue value of given 'type'</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetAverageMaskedRGB(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal factor as Integer, 
				ByVal type as Enumerations.L_statistical_measures, 
				ByRef prval as Single(), 
				ByRef pgval as Single(), 
				ByRef pbval as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetAverageMaskedRGB( pixs.Pointer, pixmPTR, x, y, factor, type, prval, pgval, pbval)

	Return _Result
End Function

' SRC\pix4.c (1457, 1)
' pixGetAverageMasked()
' pixGetAverageMasked(PIX *, PIX *, l_int32, l_int32, l_int32, l_int32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Use L_MEAN_ABSVAL to get the average value of pixels in pixs
''' that are under the fg of the optional mask.  If the mask
''' is null, it finds the average of the pixels in pixs.
''' (2) Likewise, use L_ROOT_MEAN_SQUARE to get the rms value of
''' pixels in pixs, either masked or not; L_STANDARD_DEVIATION
''' to get the standard deviation from the mean of the pixels;
''' L_VARIANCE to get the average squared difference from the
''' expected value.  The variance is the square of the stdev.
''' For the standard deviation, we use
''' sqrt([([x] - x)]^2) = sqrt([x^2] - [x]^2)
''' (3) Set the subsampling %factor GT 1 to reduce the amount of
''' computation.
''' (4) Clipping of pixm (if it exists) to pixs is done in the inner loop.
''' (5) Input x,y are ignored unless pixm exists.
''' (6) A better name for this would be pixGetPixelStatsGray()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 or 16 bpp, or colormapped</param>
'''  <param name="pixm">[in][optional] - 1 bpp mask over which average is to be taken; use all pixels if null</param>
'''  <param name="x">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0</param>
'''  <param name="y">[in] - UL corner of pixm relative to the UL corner of pixs; can be LT 0</param>
'''  <param name="factor">[in] - subsampling factor; GT= 1</param>
'''  <param name="type">[in] - L_MEAN_ABSVAL, L_ROOT_MEAN_SQUARE, L_STANDARD_DEVIATION, L_VARIANCE</param>
'''  <param name="pval">[out] - measured value of given 'type'</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetAverageMasked(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal factor as Integer, 
				ByVal type as Enumerations.L_statistical_measures, 
				ByRef pval as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetAverageMasked( pixs.Pointer, pixmPTR, x, y, factor, type, pval)

	Return _Result
End Function

' SRC\pix4.c (1576, 1)
' pixGetAverageTiledRGB()
' pixGetAverageTiledRGB(PIX *, l_int32, l_int32, l_int32, PIX **, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) For usage, see pixGetAverageTiled().
''' (2) If there is a colormap, it is removed before the 8 bpp
''' component images are extracted.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp, or colormapped</param>
'''  <param name="sx">[in] - tile size; must be at least 2 x 2</param>
'''  <param name="sy">[in] - tile size; must be at least 2 x 2</param>
'''  <param name="type">[in] - L_MEAN_ABSVAL, L_ROOT_MEAN_SQUARE, L_STANDARD_DEVIATION</param>
'''  <param name="ppixr">[out][optional] - tiled 'average' of red component</param>
'''  <param name="ppixg">[out][optional] - tiled 'average' of green component</param>
'''  <param name="ppixb">[out][optional] - tiled 'average' of blue component</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetAverageTiledRGB(
				ByVal pixs as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer, 
				ByVal type as Enumerations.L_statistical_measures, 
				ByRef ppixr as Pix, 
				ByRef ppixg as Pix, 
				ByRef ppixb as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim ppixrPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixr) Then ppixrPTR = ppixr.Pointer
Dim ppixgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixg) Then ppixgPTR = ppixg.Pointer
Dim ppixbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixb) Then ppixbPTR = ppixb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetAverageTiledRGB( pixs.Pointer, sx, sy, type, ppixrPTR, ppixgPTR, ppixbPTR)
	if ppixrPTR <> IntPtr.Zero then ppixr = new Pix(ppixrPTR)
	if ppixgPTR <> IntPtr.Zero then ppixg = new Pix(ppixgPTR)
	if ppixbPTR <> IntPtr.Zero then ppixb = new Pix(ppixbPTR)

	Return _Result
End Function

' SRC\pix4.c (1653, 1)
' pixGetAverageTiled()
' pixGetAverageTiled(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Only computes for tiles that are entirely contained in pixs.
''' (2) Use L_MEAN_ABSVAL to get the average abs value within the tile;
''' L_ROOT_MEAN_SQUARE to get the rms value within each tile;
''' L_STANDARD_DEVIATION to get the standard dev. from the average
''' within each tile.
''' (3) If colormapped, converts to 8 bpp gray.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, or colormapped</param>
'''  <param name="sx">[in] - tile size; must be at least 2 x 2</param>
'''  <param name="sy">[in] - tile size; must be at least 2 x 2</param>
'''  <param name="type">[in] - L_MEAN_ABSVAL, L_ROOT_MEAN_SQUARE, L_STANDARD_DEVIATION</param>
'''   <returns>pixd average values in each tile, or NULL on error</returns>
Public Shared Function pixGetAverageTiled(
				ByVal pixs as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer, 
				ByVal type as Enumerations.L_statistical_measures) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetAverageTiled( pixs.Pointer, sx, sy, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix4.c (1756, 1)
' pixRowStats()
' pixRowStats(PIX *, BOX *, NUMA **, NUMA **, NUMA **, NUMA **, NUMA **, NUMA **) as l_int32
'''  <summary>
''' Notes
''' (1) This computes numas that represent column vectors of statistics,
''' with each of its values derived from the corresponding row of a Pix.
''' (2) Use NULL on input to prevent computation of any of the 5 numas.
''' (3) Other functions that compute pixel row statistics are
''' pixCountPixelsByRow()
''' pixAverageByRow()
''' pixVarianceByRow()
''' pixGetRowStats()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; not cmapped</param>
'''  <param name="box">[in][optional] - clipping box; can be null</param>
'''  <param name="pnamean">[out][optional] - numa of mean values</param>
'''  <param name="pnamedian">[out][optional] - numa of median values</param>
'''  <param name="pnamode">[out][optional] - numa of mode intensity values</param>
'''  <param name="pnamodecount">[out][optional] - numa of mode counts</param>
'''  <param name="pnavar">[out][optional] - numa of variance</param>
'''  <param name="pnarootvar">[out][optional] - numa of square root of variance</param>
'''   <returns>na numa of requested statistic for each row, or NULL on error</returns>
Public Shared Function pixRowStats(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByRef pnamean as Numa, 
				ByRef pnamedian as Numa, 
				ByRef pnamode as Numa, 
				ByRef pnamodecount as Numa, 
				ByRef pnavar as Numa, 
				ByRef pnarootvar as Numa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer
Dim pnameanPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnamean) Then pnameanPTR = pnamean.Pointer
Dim pnamedianPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnamedian) Then pnamedianPTR = pnamedian.Pointer
Dim pnamodePTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnamode) Then pnamodePTR = pnamode.Pointer
Dim pnamodecountPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnamodecount) Then pnamodecountPTR = pnamodecount.Pointer
Dim pnavarPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnavar) Then pnavarPTR = pnavar.Pointer
Dim pnarootvarPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnarootvar) Then pnarootvarPTR = pnarootvar.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixRowStats( pixs.Pointer, boxPTR, pnameanPTR, pnamedianPTR, pnamodePTR, pnamodecountPTR, pnavarPTR, pnarootvarPTR)
	if pnameanPTR <> IntPtr.Zero then pnamean = new Numa(pnameanPTR)
	if pnamedianPTR <> IntPtr.Zero then pnamedian = new Numa(pnamedianPTR)
	if pnamodePTR <> IntPtr.Zero then pnamode = new Numa(pnamodePTR)
	if pnamodecountPTR <> IntPtr.Zero then pnamodecount = new Numa(pnamodecountPTR)
	if pnavarPTR <> IntPtr.Zero then pnavar = new Numa(pnavarPTR)
	if pnarootvarPTR <> IntPtr.Zero then pnarootvar = new Numa(pnarootvarPTR)

	Return _Result
End Function

' SRC\pix4.c (1916, 1)
' pixColumnStats()
' pixColumnStats(PIX *, BOX *, NUMA **, NUMA **, NUMA **, NUMA **, NUMA **, NUMA **) as l_int32
'''  <summary>
''' Notes
''' (1) This computes numas that represent row vectors of statistics,
''' with each of its values derived from the corresponding col of a Pix.
''' (2) Use NULL on input to prevent computation of any of the 5 numas.
''' (3) Other functions that compute pixel column statistics are
''' pixCountPixelsByColumn()
''' pixAverageByColumn()
''' pixVarianceByColumn()
''' pixGetColumnStats()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; not cmapped</param>
'''  <param name="box">[in][optional] - clipping box; can be null</param>
'''  <param name="pnamean">[out][optional] - numa of mean values</param>
'''  <param name="pnamedian">[out][optional] - numa of median values</param>
'''  <param name="pnamode">[out][optional] - numa of mode intensity values</param>
'''  <param name="pnamodecount">[out][optional] - numa of mode counts</param>
'''  <param name="pnavar">[out][optional] - numa of variance</param>
'''  <param name="pnarootvar">[out][optional] - numa of square root of variance</param>
'''   <returns>na numa of requested statistic for each column, or NULL on error</returns>
Public Shared Function pixColumnStats(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByRef pnamean as Numa, 
				ByRef pnamedian as Numa, 
				ByRef pnamode as Numa, 
				ByRef pnamodecount as Numa, 
				ByRef pnavar as Numa, 
				ByRef pnarootvar as Numa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer
Dim pnameanPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnamean) Then pnameanPTR = pnamean.Pointer
Dim pnamedianPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnamedian) Then pnamedianPTR = pnamedian.Pointer
Dim pnamodePTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnamode) Then pnamodePTR = pnamode.Pointer
Dim pnamodecountPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnamodecount) Then pnamodecountPTR = pnamodecount.Pointer
Dim pnavarPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnavar) Then pnavarPTR = pnavar.Pointer
Dim pnarootvarPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnarootvar) Then pnarootvarPTR = pnarootvar.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixColumnStats( pixs.Pointer, boxPTR, pnameanPTR, pnamedianPTR, pnamodePTR, pnamodecountPTR, pnavarPTR, pnarootvarPTR)
	if pnameanPTR <> IntPtr.Zero then pnamean = new Numa(pnameanPTR)
	if pnamedianPTR <> IntPtr.Zero then pnamedian = new Numa(pnamedianPTR)
	if pnamodePTR <> IntPtr.Zero then pnamode = new Numa(pnamodePTR)
	if pnamodecountPTR <> IntPtr.Zero then pnamodecount = new Numa(pnamodecountPTR)
	if pnavarPTR <> IntPtr.Zero then pnavar = new Numa(pnavarPTR)
	if pnarootvarPTR <> IntPtr.Zero then pnarootvar = new Numa(pnarootvarPTR)

	Return _Result
End Function

' SRC\pix4.c (2063, 1)
' pixGetRangeValues()
' pixGetRangeValues(PIX *, l_int32, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If pixs is 8 bpp grayscale, the color selection type is ignored.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale, 32 bpp rgb, or colormapped</param>
'''  <param name="factor">[in] - subsampling factor; GT= 1; ignored if colormapped</param>
'''  <param name="color">[in] - L_SELECT_RED, L_SELECT_GREEN or L_SELECT_BLUE</param>
'''  <param name="pminval">[out][optional] - minimum value of component</param>
'''  <param name="pmaxval">[out][optional] - maximum value of component</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetRangeValues(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByVal color as Enumerations.L_SELECT_, 
				ByRef pminval as Integer, 
				ByRef pmaxval as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8,16}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale, 32 bpp rgb, or colormapped")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetRangeValues( pixs.Pointer, factor, color, pminval, pmaxval)

	Return _Result
End Function

' SRC\pix4.c (2141, 1)
' pixGetExtremeValue()
' pixGetExtremeValue(PIX *, l_int32, l_int32, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If pixs is grayscale, the result is returned in grayval.
''' Otherwise, if there is a colormap or d == 32,
''' each requested color component is returned.  At least
''' one color component (address) must be input.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale, 32 bpp rgb, or colormapped</param>
'''  <param name="factor">[in] - subsampling factor; GT= 1; ignored if colormapped</param>
'''  <param name="type">[in] - L_SELECT_MIN or L_SELECT_MAX</param>
'''  <param name="prval">[out][optional] - red component</param>
'''  <param name="pgval">[out][optional] - green component</param>
'''  <param name="pbval">[out][optional] - blue component</param>
'''  <param name="pgrayval">[out][optional] - min or max gray value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetExtremeValue(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByVal type as Enumerations.L_SELECT_, 
				ByRef prval as Integer, 
				ByRef pgval as Integer, 
				ByRef pbval as Integer, 
				ByRef pgrayval as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8,16}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale, 32 bpp rgb, or colormapped")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetExtremeValue( pixs.Pointer, factor, type, prval, pgval, pbval, pgrayval)

	Return _Result
End Function

' SRC\pix4.c (2278, 1)
' pixGetMaxValueInRect()
' pixGetMaxValueInRect(PIX *, BOX *, l_uint32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This can be used to find the maximum and its location
''' in a 2-dimensional histogram, where the x and y directions
''' represent two color components (e.g., saturation and hue).
''' (2) Note that here a 32 bpp pixs has pixel values that are simply
''' numbers.  They are not 8 bpp components in a colorspace.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8, 16 or 32 bpp grayscale; no color space components</param>
'''  <param name="box">[in][optional] - region; set box = NULL to use entire pixs</param>
'''  <param name="pmaxval">[out][optional] - max value in region</param>
'''  <param name="pxmax">[out][optional] - x location of max value</param>
'''  <param name="pymax">[out][optional] - y location of max value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetMaxValueInRect(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByRef pmaxval as UInteger, 
				ByRef pxmax as Integer, 
				ByRef pymax as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetMaxValueInRect( pixs.Pointer, boxPTR, pmaxval, pxmax, pymax)

	Return _Result
End Function

' SRC\pix4.c (2367, 1)
' pixGetBinnedComponentRange()
' pixGetBinnedComponentRange(PIX *, l_int32, l_int32, l_int32, l_int32 *, l_int32 *, l_uint32 **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This returns the min and max average values of the
''' selected color component in the set of rank bins,
''' where the ranking is done using the specified component.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="nbins">[in] - number of equal population bins; must be GT 1</param>
'''  <param name="factor">[in] - subsampling factor; GT= 1</param>
'''  <param name="color">[in] - L_SELECT_RED, L_SELECT_GREEN or L_SELECT_BLUE</param>
'''  <param name="pminval">[out][optional] - minimum value of component</param>
'''  <param name="pmaxval">[out][optional] - maximum value of component</param>
'''  <param name="pcarray">[out][optional] - color array of bins</param>
'''  <param name="fontsize">[in][optional] - 0 for no debug; for debug, valid set is {4,6,8,10,12,14,16,18,20}.</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetBinnedComponentRange(
				ByVal pixs as Pix, 
				ByVal nbins as Integer, 
				ByVal factor as Integer, 
				ByVal color as Enumerations.L_SELECT_, 
				ByRef pminval as Integer, 
				ByRef pmaxval as Integer, 
				ByRef pcarray as Byte(), 
				ByVal fontsize as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim pcarrayPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetBinnedComponentRange( pixs.Pointer, nbins, factor, color, pminval, pmaxval, pcarrayPTR, fontsize)
	ReDim pcarray(IIf(1 > 0, 1, 1) - 1) : If pcarrayPTR <> IntPtr.Zero Then Marshal.Copy(pcarrayPTR, pcarray, 0, pcarray.count)

	Return _Result
End Function

' SRC\pix4.c (2467, 1)
' pixGetRankColorArray()
' pixGetRankColorArray(PIX *, l_int32, l_int32, l_int32, l_uint32 **, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) The color selection flag is one of L_SELECT_RED, L_SELECT_GREEN,
''' L_SELECT_BLUE, L_SELECT_MIN, L_SELECT_MAX, L_SELECT_AVERAGE,
''' L_SELECT_HUE, L_SELECT_SATURATION.
''' (2) Then it finds the histogram of the selected color type in each
''' RGB pixel.  For each of the %nbins sets of pixels,
''' ordered by this color type value, find the average RGB color,
''' and return this as a "rank color" array.  The output array
''' has %nbins colors.
''' (3) Set the subsampling factor GT 1 to reduce the amount of
''' computation.  Typically you want at least 10,000 pixels
''' for reasonable statistics.
''' (4) The rank color as a function of rank can then be found from
''' rankint = (l_int32)(rank  (nbins - 1) + 0.5);
''' extractRGBValues(array[rankint], rval, gval, bval);
''' where the rank is in [0.0 ... 1.0].
''' This function is meant to be simple and approximate.
''' (5) Compare this with pixGetBinnedColor(), which generates equal
''' width intensity bins and finds the average color in each bin.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp or cmapped</param>
'''  <param name="nbins">[in] - number of equal population bins; must be GT 1</param>
'''  <param name="type">[in] - color selection flag</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''  <param name="pcarray">[out] - array of colors, ranked by intensity</param>
'''  <param name="debugflag">[in] - 1 to display color squares and plots of color components; 2 to write them as png to file</param>
'''  <param name="fontsize">[in][optional] - 0 for no debug; for debug, valid set is {4,6,8,10,12,14,16,18,20}.  Ignored if debugflag == 0.  fontsize == 6 is typical.</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetRankColorArray(
				ByVal pixs as Pix, 
				ByVal nbins as Integer, 
				ByVal type as Integer, 
				ByVal factor as Integer, 
				ByRef pcarray as Byte(), 
				ByVal debugflag as Integer, 
				ByVal fontsize as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pcarrayPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetRankColorArray( pixs.Pointer, nbins, type, factor, pcarrayPTR, debugflag, fontsize)
	ReDim pcarray(IIf(1 > 0, 1, 1) - 1) : If pcarrayPTR <> IntPtr.Zero Then Marshal.Copy(pcarrayPTR, pcarray, 0, pcarray.count)

	Return _Result
End Function

' SRC\pix4.c (2629, 1)
' pixGetBinnedColor()
' pixGetBinnedColor(PIX *, PIX *, l_int32, l_int32, NUMA *, l_uint32 **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This takes a color image, a grayscale (intensity) version,
''' a LUT from intensity to bin number, and the number of bins.
''' It computes the average color for pixels whose intensity
''' is in each bin.  This is returned as an array of l_uint32
''' colors in our standard RGBA ordering.
''' (2) This function generates equal width intensity bins and
''' finds the average color in each bin.  Compare this with
''' pixGetRankColorArray(), which rank orders the pixels
''' by the value of the selected component in each pixel,
''' sets up bins with equal population (not intensity width!),
''' and gets the average color in each bin.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="pixg">[in] - 8 bpp grayscale version of pixs</param>
'''  <param name="factor">[in] - sampling factor along pixel counting direction</param>
'''  <param name="nbins">[in] - number of intensity bins</param>
'''  <param name="nalut">[in] - LUT for mapping from intensity to bin number</param>
'''  <param name="pcarray">[out] - array of average color values in each bin</param>
'''  <param name="debugflag">[in] - 1 to display output debug plots of color components; 2 to write them as png to file</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixGetBinnedColor(
				ByVal pixs as Pix, 
				ByVal pixg as Pix, 
				ByVal factor as Integer, 
				ByVal nbins as Integer, 
				ByVal nalut as Numa, 
				ByRef pcarray as Byte(), 
				ByVal debugflag as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixg) then Throw New ArgumentNullException  ("pixg cannot be Nothing")
	If IsNothing (nalut) then Throw New ArgumentNullException  ("nalut cannot be Nothing")

	Dim pcarrayPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetBinnedColor( pixs.Pointer, pixg.Pointer, factor, nbins, nalut.Pointer, pcarrayPTR, debugflag)
	ReDim pcarray(IIf(1 > 0, 1, 1) - 1) : If pcarrayPTR <> IntPtr.Zero Then Marshal.Copy(pcarrayPTR, pcarray, 0, pcarray.count)

	Return _Result
End Function

' SRC\pix4.c (2759, 1)
' pixDisplayColorArray()
' pixDisplayColorArray(l_uint32 *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="carray">[in] - array of colors 0xrrggbb00</param>
'''  <param name="ncolors">[in] - size of array</param>
'''  <param name="side">[in] - size of each color square; suggest 200</param>
'''  <param name="ncols">[in] - number of columns in output color matrix</param>
'''  <param name="fontsize">[in] - to label each square with text.  Valid set is {4,6,8,10,12,14,16,18,20}.  Use 0 to disable.</param>
'''   <returns>pixd color array, or NULL on error</returns>
Public Shared Function pixDisplayColorArray(
				ByVal carray as Byte(), 
				ByVal ncolors as Integer, 
				ByVal side as Integer, 
				ByVal ncols as Integer, 
				ByVal fontsize as Integer) as Pix

	If IsNothing (carray) then Throw New ArgumentNullException  ("carray cannot be Nothing")

	Dim carrayPTR As IntPtr = Marshal.AllocHGlobal(carray.Count) : Marshal.Copy(carray, 0, carrayPTR, carray.Length)

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDisplayColorArray( carrayPTR, ncolors, side, ncols, fontsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix4.c (2831, 1)
' pixRankBinByStrip()
' pixRankBinByStrip(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This generates a pix where each column represents a strip of
''' the input image.  If %direction == L_SCAN_HORIZONTAL, the
''' input impage is tiled into vertical strips of width %size,
''' where %size is a compromise between getting better spatial
''' columnwise resolution (small %size) and getting better
''' columnwise statistical information (larger %size).  Likewise
''' with rows of the image if %direction == L_SCAN_VERTICAL.
''' (2) For L_HORIZONTAL_SCAN, the output pix contains rank binned
''' median colors in each column that correspond to a vertical
''' strip of width %size in the input image.
''' (3) The color selection flag is one of L_SELECT_RED, L_SELECT_GREEN,
''' L_SELECT_BLUE, L_SELECT_MIN, L_SELECT_MAX, L_SELECT_AVERAGE.
''' It determines how the rank ordering is done.
''' (4) Typical input values might be %size = 5, %nbins = 10.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp or cmapped</param>
'''  <param name="direction">[in] - L_SCAN_HORIZONTAL or L_SCAN_VERTICAL</param>
'''  <param name="size">[in] - of strips in scan direction</param>
'''  <param name="nbins">[in] - number of equal population bins; must be GT 1</param>
'''  <param name="type">[in] - color selection flag</param>
'''   <returns>pixd result, or NULL on error</returns>
Public Shared Function pixRankBinByStrip(
				ByVal pixs as Pix, 
				ByVal direction as Enumerations.L_scan_direction, 
				ByVal size as Integer, 
				ByVal nbins as Integer, 
				ByVal type as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRankBinByStrip( pixs.Pointer, direction, size, nbins, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix4.c (2928, 1)
' pixaGetAlignedStats()
' pixaGetAlignedStats(PIXA *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Each pixel in the returned pix represents an average
''' (or median, or mode) over the corresponding pixels in each
''' pix in the pixa.
''' (2) The %thresh parameter works with L_MODE_VAL only, and
''' sets a minimum occupancy of the mode bin.
''' If the occupancy of the mode bin is less than %thresh, the
''' mode value is returned as 0.  To always return the actual
''' mode value, set %thresh = 0.  See pixGetRowStats().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - of identically sized, 8 bpp pix; not cmapped</param>
'''  <param name="type">[in] - L_MEAN_ABSVAL, L_MEDIAN_VAL, L_MODE_VAL, L_MODE_COUNT</param>
'''  <param name="nbins">[in] - of histogram for median and mode; ignored for mean</param>
'''  <param name="thresh">[in] - on histogram for mode val; ignored for all other types</param>
'''   <returns>pix with pixelwise aligned stats, or NULL on error.</returns>
Public Shared Function pixaGetAlignedStats(
				ByVal pixa as Pixa, 
				ByVal type as Enumerations.L_statistical_measures, 
				ByVal nbins as Integer, 
				ByVal thresh as Integer) as Pix

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaGetAlignedStats( pixa.Pointer, type, nbins, thresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix4.c (2975, 1)
' pixaExtractColumnFromEachPix()
' pixaExtractColumnFromEachPix(PIXA *, l_int32, PIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - of identically sized, 8 bpp; not cmapped</param>
'''  <param name="col">[in] - column index</param>
'''  <param name="pixd">[in] - pix into which each column is inserted</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaExtractColumnFromEachPix(
				ByVal pixa as Pixa, 
				ByVal col as Integer, 
				ByVal pixd as Pix) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaExtractColumnFromEachPix( pixa.Pointer, col, pixd.Pointer)

	Return _Result
End Function

' SRC\pix4.c (3050, 1)
' pixGetRowStats()
' pixGetRowStats(PIX *, l_int32, l_int32, l_int32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This computes a column vector of statistics using each
''' row of a Pix.  The result is put in %colvect.
''' (2) The %thresh parameter works with L_MODE_VAL only, and
''' sets a minimum occupancy of the mode bin.
''' If the occupancy of the mode bin is less than %thresh, the
''' mode value is returned as 0.  To always return the actual
''' mode value, set %thresh = 0.
''' (3) What is the meaning of this %thresh parameter?
''' For each row, the total count in the histogram is w, the
''' image width.  So %thresh, relative to w, gives a measure
''' of the ratio of the bin width to the width of the distribution.
''' The larger %thresh, the narrower the distribution must be
''' for the mode value to be returned (instead of returning 0).
''' (4) If the Pix consists of a set of corresponding columns,
''' one for each Pix in a Pixa, the width of the Pix is the
''' number of Pix in the Pixa and the column vector can
''' be stored as a column in a Pix of the same size as
''' each Pix in the Pixa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; not cmapped</param>
'''  <param name="type">[in] - L_MEAN_ABSVAL, L_MEDIAN_VAL, L_MODE_VAL, L_MODE_COUNT</param>
'''  <param name="nbins">[in] - of histogram for median and mode; ignored for mean</param>
'''  <param name="thresh">[in] - on histogram for mode; ignored for mean and median</param>
'''  <param name="colvect">[in] - vector of results gathered across the rows of pixs</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetRowStats(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.L_statistical_measures, 
				ByVal nbins as Integer, 
				ByVal thresh as Integer, 
				ByVal colvect as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (colvect) then Throw New ArgumentNullException  ("colvect cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetRowStats( pixs.Pointer, type, nbins, thresh, colvect)

	Return _Result
End Function

' SRC\pix4.c (3172, 1)
' pixGetColumnStats()
' pixGetColumnStats(PIX *, l_int32, l_int32, l_int32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This computes a row vector of statistics using each
''' column of a Pix.  The result is put in %rowvect.
''' (2) The %thresh parameter works with L_MODE_VAL only, and
''' sets a minimum occupancy of the mode bin.
''' If the occupancy of the mode bin is less than %thresh, the
''' mode value is returned as 0.  To always return the actual
''' mode value, set %thresh = 0.
''' (3) What is the meaning of this %thresh parameter?
''' For each column, the total count in the histogram is h, the
''' image height.  So %thresh, relative to h, gives a measure
''' of the ratio of the bin width to the width of the distribution.
''' The larger %thresh, the narrower the distribution must be
''' for the mode value to be returned (instead of returning 0).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; not cmapped</param>
'''  <param name="type">[in] - L_MEAN_ABSVAL, L_MEDIAN_VAL, L_MODE_VAL, L_MODE_COUNT</param>
'''  <param name="nbins">[in] - of histogram for median and mode; ignored for mean</param>
'''  <param name="thresh">[in] - on histogram for mode val; ignored for all other types</param>
'''  <param name="rowvect">[in] - vector of results gathered down the columns of pixs</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetColumnStats(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.L_statistical_measures, 
				ByVal nbins as Integer, 
				ByVal thresh as Integer, 
				ByVal rowvect as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rowvect) then Throw New ArgumentNullException  ("rowvect cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetColumnStats( pixs.Pointer, type, nbins, thresh, rowvect)

	Return _Result
End Function

' SRC\pix4.c (3273, 1)
' pixSetPixelColumn()
' pixSetPixelColumn(PIX *, l_int32, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 bpp; not cmapped</param>
'''  <param name="col">[in] - column index</param>
'''  <param name="colvect">[in] - vector of floats</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSetPixelColumn(
				ByVal pix as Pix, 
				ByVal col as Integer, 
				ByVal colvect as Single()) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (colvect) then Throw New ArgumentNullException  ("colvect cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetPixelColumn( pix.Pointer, col, colvect)

	Return _Result
End Function

' SRC\pix4.c (3313, 1)
' pixThresholdForFgBg()
' pixThresholdForFgBg(PIX *, l_int32, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth; cmapped ok</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''  <param name="thresh">[in] - threshold for generating foreground mask</param>
'''  <param name="pfgval">[out][optional] - average foreground value</param>
'''  <param name="pbgval">[out][optional] - average background value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixThresholdForFgBg(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByVal thresh as Integer, 
				ByRef pfgval as Integer, 
				ByRef pbgval as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixThresholdForFgBg( pixs.Pointer, factor, thresh, pfgval, pbgval)

	Return _Result
End Function

' SRC\pix4.c (3372, 1)
' pixSplitDistributionFgBg()
' pixSplitDistributionFgBg(PIX *, l_float32, l_int32, l_int32 *, l_int32 *, l_int32 *, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) See numaSplitDistribution() for details on the underlying
''' method of choosing a threshold.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth; cmapped ok</param>
'''  <param name="scorefract">[in] - fraction of the max score, used to determine the range over which the histogram min is searched</param>
'''  <param name="factor">[in] - subsampling factor; integer GT= 1</param>
'''  <param name="pthresh">[out][optional] - best threshold for separating</param>
'''  <param name="pfgval">[out][optional] - average foreground value</param>
'''  <param name="pbgval">[out][optional] - average background value</param>
'''  <param name="ppixdb">[out][optional] - plot of distribution and split point</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSplitDistributionFgBg(
				ByVal pixs as Pix, 
				ByVal scorefract as Single, 
				ByVal factor as Integer, 
				ByRef pthresh as Integer, 
				ByRef pfgval as Integer, 
				ByRef pbgval as Integer, 
				ByRef ppixdb as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (scorefract) then Throw New ArgumentNullException  ("scorefract cannot be Nothing")

Dim ppixdbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdb) Then ppixdbPTR = ppixdb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSplitDistributionFgBg( pixs.Pointer, scorefract, factor, pthresh, pfgval, pbgval, ppixdbPTR)
	if ppixdbPTR <> IntPtr.Zero then ppixdb = new Pix(ppixdbPTR)

	Return _Result
End Function

#End Region
#Region "SRC\pix5.c"
' SRC\pix5.c (130, 1)
' pixaFindDimensions()
' pixaFindDimensions(PIXA *, NUMA **, NUMA **) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="pnaw">[out][optional] - numa of pix widths</param>
'''  <param name="pnah">[out][optional] - numa of pix heights</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaFindDimensions(
				ByVal pixa as Pixa, 
				ByRef pnaw as Numa, 
				ByRef pnah as Numa) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")

Dim pnawPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaw) Then pnawPTR = pnaw.Pointer
Dim pnahPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnah) Then pnahPTR = pnah.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaFindDimensions( pixa.Pointer, pnawPTR, pnahPTR)
	if pnawPTR <> IntPtr.Zero then pnaw = new Numa(pnawPTR)
	if pnahPTR <> IntPtr.Zero then pnah = new Numa(pnahPTR)

	Return _Result
End Function

' SRC\pix5.c (180, 1)
' pixFindAreaPerimRatio()
' pixFindAreaPerimRatio(PIX *, l_int32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The area is the number of fg pixels that are not on the
''' boundary (i.e., are not 8-connected to a bg pixel), and the
''' perimeter is the number of fg boundary pixels.  Returns
''' 0.0 if there are no fg pixels.
''' (2) This function is retained because clients are using it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="tab">[in][optional] - pixel sum table, can be NULL</param>
'''  <param name="pfract">[out] - area/perimeter ratio</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFindAreaPerimRatio(
				ByVal pixs as Pix, 
				ByVal tab as Integer(), 
				ByRef pfract as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindAreaPerimRatio( pixs.Pointer, tab, pfract)

	Return _Result
End Function

' SRC\pix5.c (231, 1)
' pixaFindPerimToAreaRatio()
' pixaFindPerimToAreaRatio(PIXA *) as NUMA *
'''  <summary>
''' Notes
''' (1) This is typically used for a pixa consisting of
''' 1 bpp connected components.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - of 1 bpp pix</param>
'''   <returns>na   of perimeter/arear ratio for each pix, or NULL on error</returns>
Public Shared Function pixaFindPerimToAreaRatio(
				ByVal pixa as Pixa) as Numa

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaFindPerimToAreaRatio( pixa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix5.c (281, 1)
' pixFindPerimToAreaRatio()
' pixFindPerimToAreaRatio(PIX *, l_int32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The perimeter is the number of fg boundary pixels, and the
''' area is the number of fg pixels.  This returns 0.0 if
''' there are no fg pixels.
''' (2) Unlike pixFindAreaPerimRatio(), this uses the full set of
''' fg pixels for the area, and the ratio is taken in the opposite
''' order.
''' (3) This is typically used for a single connected component.
''' This always has a value LT= 1.0, and if the average distance
''' of a fg pixel from the nearest bg pixel is d, this has
''' a value ~1/d.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="tab">[in][optional] - pixel sum table, can be NULL</param>
'''  <param name="pfract">[out] - perimeter/area ratio</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFindPerimToAreaRatio(
				ByVal pixs as Pix, 
				ByVal tab as Integer(), 
				ByRef pfract as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindPerimToAreaRatio( pixs.Pointer, tab, pfract)

	Return _Result
End Function

' SRC\pix5.c (335, 1)
' pixaFindPerimSizeRatio()
' pixaFindPerimSizeRatio(PIXA *) as NUMA *
'''  <summary>
''' Notes
''' (1) This is typically used for a pixa consisting of
''' 1 bpp connected components.
''' (2) This has a minimum value for a circle of pi/4; a value for
''' a rectangle component of approx. 1.0; and a value much larger
''' than 1.0 for a component with a highly irregular boundary.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - of 1 bpp pix</param>
'''   <returns>na   of fg perimeter/(2(w+h)) ratio for each pix, or NULL on error</returns>
Public Shared Function pixaFindPerimSizeRatio(
				ByVal pixa as Pixa) as Numa

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaFindPerimSizeRatio( pixa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix5.c (385, 1)
' pixFindPerimSizeRatio()
' pixFindPerimSizeRatio(PIX *, l_int32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) We take the 'size' as twice the sum of the width and
''' height of pixs, and the perimeter is the number of fg
''' boundary pixels.  We use the fg pixels of the boundary
''' because the pix may be clipped to the boundary, so an
''' erosion is required to count all boundary pixels.
''' (2) This has a large value for dendritic, fractal-like components
''' with highly irregular boundaries.
''' (3) This is typically used for a single connected component.
''' It has a value of about 1.0 for rectangular components with
''' relatively smooth boundaries.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="tab">[in][optional] - pixel sum table, can be NULL</param>
'''  <param name="pratio">[out] - perimeter/size ratio</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFindPerimSizeRatio(
				ByVal pixs as Pix, 
				ByVal tab as Integer(), 
				ByRef pratio as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindPerimSizeRatio( pixs.Pointer, tab, pratio)

	Return _Result
End Function

' SRC\pix5.c (431, 1)
' pixaFindAreaFraction()
' pixaFindAreaFraction(PIXA *) as NUMA *
'''  <summary>
''' Notes
''' (1) This is typically used for a pixa consisting of
''' 1 bpp connected components.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - of 1 bpp pix</param>
'''   <returns>na  of area fractions for each pix, or NULL on error</returns>
Public Shared Function pixaFindAreaFraction(
				ByVal pixa as Pixa) as Numa

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaFindAreaFraction( pixa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix5.c (474, 1)
' pixFindAreaFraction()
' pixFindAreaFraction(PIX *, l_int32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This finds the ratio of the number of fg pixels to the
''' size of the pix (w  h).  It is typically used for a
''' single connected component.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="tab">[in][optional] - pixel sum table, can be NULL</param>
'''  <param name="pfract">[out] - fg area/size ratio</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFindAreaFraction(
				ByVal pixs as Pix, 
				ByVal tab as Integer(), 
				ByRef pfract as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindAreaFraction( pixs.Pointer, tab, pfract)

	Return _Result
End Function

' SRC\pix5.c (522, 1)
' pixaFindAreaFractionMasked()
' pixaFindAreaFractionMasked(PIXA *, PIX *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) This is typically used for a pixa consisting of
''' 1 bpp connected components, which has an associated
''' boxa giving the location of the components relative
''' to the mask origin.
''' (2) The debug flag displays in green and red the masked and
''' unmasked parts of the image from which pixa was derived.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - of 1 bpp pix</param>
'''  <param name="pixm">[in] - mask image</param>
'''  <param name="debug">[in] - 1 for output, 0 to suppress</param>
'''   <returns>na of ratio masked/total fractions for each pix, or NULL on error</returns>
Public Shared Function pixaFindAreaFractionMasked(
				ByVal pixa as Pixa, 
				ByVal pixm as Pix, 
				ByVal debug as Enumerations.DebugOnOff) as Numa

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaFindAreaFractionMasked( pixa.Pointer, pixm.Pointer, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix5.c (601, 1)
' pixFindAreaFractionMasked()
' pixFindAreaFractionMasked(PIX *, BOX *, PIX *, l_int32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This finds the ratio of the number of masked fg pixels
''' in pixs to the total number of fg pixels in pixs.
''' It is typically used for a single connected component.
''' If there are no fg pixels, this returns a ratio of 0.0.
''' (2) The box gives the location of the pix relative to that
''' of the UL corner of the mask.  Therefore, the rasterop
''' is performed with the pix translated to its location
''' (x, y) in the mask before ANDing.
''' If box == NULL, the UL corners of pixs and pixm are aligned.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, typically a single component</param>
'''  <param name="box">[in][optional] - for pixs relative to pixm</param>
'''  <param name="pixm">[in] - 1 bpp mask, typically over the entire image from which the component pixs was extracted</param>
'''  <param name="tab">[in][optional] - pixel sum table, can be NULL</param>
'''  <param name="pfract">[out] - fg area/size ratio</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFindAreaFractionMasked(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal pixm as Pix, 
				ByVal tab as Integer(), 
				ByRef pfract as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindAreaFractionMasked( pixs.Pointer, boxPTR, pixm.Pointer, tab, pfract)

	Return _Result
End Function

' SRC\pix5.c (660, 1)
' pixaFindWidthHeightRatio()
' pixaFindWidthHeightRatio(PIXA *) as NUMA *
'''  <summary>
''' Notes
''' (1) This is typically used for a pixa consisting of
''' 1 bpp connected components.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - of 1 bpp pix</param>
'''   <returns>na of width/height ratios for each pix, or NULL on error</returns>
Public Shared Function pixaFindWidthHeightRatio(
				ByVal pixa as Pixa) as Numa

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaFindWidthHeightRatio( pixa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix5.c (696, 1)
' pixaFindWidthHeightProduct()
' pixaFindWidthHeightProduct(PIXA *) as NUMA *
'''  <summary>
''' Notes
''' (1) This is typically used for a pixa consisting of
''' 1 bpp connected components.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - of 1 bpp pix</param>
'''   <returns>na of widthheight products for each pix, or NULL on error</returns>
Public Shared Function pixaFindWidthHeightProduct(
				ByVal pixa as Pixa) as Numa

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaFindWidthHeightProduct( pixa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix5.c (736, 1)
' pixFindOverlapFraction()
' pixFindOverlapFraction(PIX *, PIX *, l_int32, l_int32, l_int32 *, l_float32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The UL corner of pixs2 is placed at (x2, y2) in pixs1.
''' (2) This measure is similar to the correlation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs1">[in] - 1 bpp</param>
'''  <param name="pixs2">[in] - 1 bpp</param>
'''  <param name="x2">[in] - location in pixs1 of UL corner of pixs2</param>
'''  <param name="y2">[in] - location in pixs1 of UL corner of pixs2</param>
'''  <param name="tab">[in][optional] - pixel sum table, can be null</param>
'''  <param name="pratio">[out] - ratio fg intersection to fg union</param>
'''  <param name="pnoverlap">[out][optional] - number of overlapping pixels</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFindOverlapFraction(
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix, 
				ByVal x2 as Integer, 
				ByVal y2 as Integer, 
				ByVal tab as Integer(), 
				ByRef pratio as Single(), 
				ByRef pnoverlap as Integer) as Integer

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")
	If {1}.contains (pixs1.d) = false then Throw New ArgumentException ("1 bpp")
	If {1}.contains (pixs2.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindOverlapFraction( pixs1.Pointer, pixs2.Pointer, x2, y2, tab, pratio, pnoverlap)

	Return _Result
End Function

' SRC\pix5.c (803, 1)
' pixFindRectangleComps()
' pixFindRectangleComps(PIX *, l_int32, l_int32, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) This applies the function pixConformsToRectangle() to
''' each 8-c.c. in pixs, and returns a boxa containing the
''' regions of all components that are conforming.
''' (2) Conforming components must satisfy both the size constraint
''' given by %minsize and the slop in conforming to a rectangle
''' determined by %dist.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="dist">[in] - max distance allowed between bounding box and nearest foreground pixel within it</param>
'''  <param name="minw">[in] - minimum size in each direction as a requirement for a conforming rectangle</param>
'''  <param name="minh">[in] - minimum size in each direction as a requirement for a conforming rectangle</param>
'''   <returns>boxa of components that conform, or NULL on error</returns>
Public Shared Function pixFindRectangleComps(
				ByVal pixs as Pix, 
				ByVal dist as Integer, 
				ByVal minw as Integer, 
				ByVal minh as Integer) as Boxa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFindRectangleComps( pixs.Pointer, dist, minw, minh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\pix5.c (883, 1)
' pixConformsToRectangle()
' pixConformsToRectangle(PIX *, BOX *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) There are several ways to test if a connected component has
''' an essentially rectangular boundary, such as
''' a. Fraction of fill into the bounding box
''' b. Max-min distance of fg pixel from periphery of bounding box
''' c. Max depth of bg intrusions into component within bounding box
''' The weakness of (a) is that it is highly sensitive to holes
''' within the c.c.  The weakness of (b) is that it can have
''' arbitrarily large intrusions into the c.c.  Method (c) tests
''' the integrity of the outer boundary of the c.c., with respect
''' to the enclosing bounding box, so we use it.
''' (2) This tests if the connected component within the box conforms
''' to the box at all points on the periphery within %dist.
''' Inside, at a distance from the box boundary that is greater
''' than %dist, we don't care about the pixels in the c.c.
''' (3) We can think of the conforming condition as follows
''' No pixel inside a distance %dist from the boundary
''' can connect to the boundary through a path through the bg.
''' To implement this, we need to do a flood fill.  We can go
''' either from inside toward the boundary, or the other direction.
''' It's easiest to fill from the boundary, and then verify that
''' there are no filled pixels farther than %dist from the boundary.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="box">[in][optional] - if null, use the entire pixs</param>
'''  <param name="dist">[in] - max distance allowed between bounding box and nearest foreground pixel within it</param>
'''  <param name="pconforms">[out] - 0 (false) if not conforming; 1 (true) if conforming</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixConformsToRectangle(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal dist as Integer, 
				ByRef pconforms as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixConformsToRectangle( pixs.Pointer, boxPTR, dist, pconforms)

	Return _Result
End Function

' SRC\pix5.c (950, 1)
' pixClipRectangles()
' pixClipRectangles(PIX *, BOXA *) as PIXA *
'''  <summary>
''' Notes
''' (1) The returned pixa includes the actual regions clipped out from
''' the input pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="boxa">[in] - requested clipping regions</param>
'''   <returns>pixa consisting of requested regions, or NULL on error</returns>
Public Shared Function pixClipRectangles(
				ByVal pixs as Pix, 
				ByVal boxa as Boxa) as Pixa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixClipRectangles( pixs.Pointer, boxa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pix5.c (1016, 1)
' pixClipRectangle()
' pixClipRectangle(PIX *, BOX *, BOX **) as PIX *
'''  <summary>
''' Notes
''' This should be simple, but there are choices to be made.
''' The box is defined relative to the pix coordinates.  However,
''' if the box is not contained within the pix, we have two choices
''' (1) clip the box to the pix
''' (2) make a new pix equal to the full box dimensions,
''' but let rasterop do the clipping and positioning
''' of the src with respect to the dest
''' Choice (2) immediately brings up the problem of what pixel values
''' to use that were not taken from the src.  For example, on a grayscale
''' image, do you want the pixels not taken from the src to be black
''' or white or something else?  To implement choice 2, one needs to
''' specify the color of these extra pixels.
''' So we adopt (1), and clip the box first, if necessary,
''' before making the dest pix and doing the rasterop.  But there
''' is another issue to consider.  If you want to paste the
''' clipped pix back into pixs, it must be properly aligned, and
''' it is necessary to use the clipped box for alignment.
''' Accordingly, this function has a third (optional) argument, which is
''' the input box clipped to the src pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="box">[in] - requested clipping region; const</param>
'''  <param name="pboxc">[out][optional] - actual box of clipped region</param>
'''   <returns>clipped pix, or NULL on error or if rectangle doesn't intersect pixs</returns>
Public Shared Function pixClipRectangle(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByRef pboxc as Box) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")

Dim pboxcPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxc) Then pboxcPTR = pboxc.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixClipRectangle( pixs.Pointer, box.Pointer, pboxcPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pboxcPTR <> IntPtr.Zero then pboxc = new Box(pboxcPTR)

	Return  new Pix(_Result)
End Function

' SRC\pix5.c (1089, 1)
' pixClipMasked()
' pixClipMasked(PIX *, PIX *, l_int32, l_int32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) If pixs has a colormap, it is preserved in pixd.
''' (2) The depth of pixd is the same as that of pixs.
''' (3) If the depth of pixs is 1, use %outval = 0 for white background
''' and 1 for black; otherwise, use the max value for white
''' and 0 for black.  If pixs has a colormap, the max value for
''' %outval is 0xffffffff; otherwise, it is 2^d - 1.
''' (4) When using 1 bpp pixs, this is a simple clip and
''' blend operation.  For example, if both pix1 and pix2 are
''' black text on white background, and you want to OR the
''' fg on the two images, let pixm be the inverse of pix2.
''' Then the operation takes all of pix1 that's in the bg of
''' pix2, and for the remainder (which are the pixels
''' corresponding to the fg of the pix2), paint them black
''' (1) in pix1.  The function call looks like
''' pixClipMasked(pix2, pixInvert(pix1, pix1), x, y, 1);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16, 32 bpp; colormap ok</param>
'''  <param name="pixm">[in] - clipping mask, 1 bpp</param>
'''  <param name="x">[in] - origin of clipping mask relative to pixs</param>
'''  <param name="y">[in] - origin of clipping mask relative to pixs</param>
'''  <param name="outval">[in] - val to use for pixels that are outside the mask</param>
'''   <returns>pixd, clipped pix or NULL on error or if pixm doesn't intersect pixs</returns>
Public Shared Function pixClipMasked(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal outval as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixClipMasked( pixs.Pointer, pixm.Pointer, x, y, outval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix5.c (1151, 1)
' pixCropToMatch()
' pixCropToMatch(PIX *, PIX *, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This resizes pixs1 and/or pixs2 by cropping at the right
''' and bottom, so that they're the same size.
''' (2) If a pix doesn't need to be cropped, a clone is returned.
''' (3) Note the images are implicitly aligned to the UL corner.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs1">[in] - any depth, colormap OK</param>
'''  <param name="pixs2">[in] - any depth, colormap OK</param>
'''  <param name="ppixd1">[out] - may be a clone</param>
'''  <param name="ppixd2">[out] - may be a clone</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixCropToMatch(
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix, 
				ByRef ppixd1 as Pix, 
				ByRef ppixd2 as Pix) as Integer

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")

	Dim ppixd1PTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd1) Then ppixd1PTR = ppixd1.Pointer
	Dim ppixd2PTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd2) Then ppixd2PTR = ppixd2.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixCropToMatch( pixs1.Pointer, pixs2.Pointer, ppixd1PTR, ppixd2PTR)
	if ppixd1PTR <> IntPtr.Zero then ppixd1 = new Pix(ppixd1PTR)
	if ppixd2PTR <> IntPtr.Zero then ppixd2 = new Pix(ppixd2PTR)

	Return _Result
End Function

' SRC\pix5.c (1194, 1)
' pixCropToSize()
' pixCropToSize(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If either w or h is smaller than the corresponding dimension
''' of pixs, this returns a cropped image; otherwise it returns
''' a clone of pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth, colormap OK</param>
'''  <param name="w">[in] - max dimensions of cropped image</param>
'''  <param name="h">[in] - max dimensions of cropped image</param>
'''   <returns>pixd cropped if necessary or NULL on error.</returns>
Public Shared Function pixCropToSize(
				ByVal pixs as Pix, 
				ByVal w as Integer, 
				ByVal h as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCropToSize( pixs.Pointer, w, h)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix5.c (1248, 1)
' pixResizeToMatch()
' pixResizeToMatch(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This resizes pixs to make pixd, without scaling, by either
''' cropping or extending separately in both width and height.
''' Extension is done by replicating the last row or column.
''' This is useful in a situation where, due to scaling
''' operations, two images that are expected to be the
''' same size can differ slightly in each dimension.
''' (2) You can use either an existing pixt or specify
''' both %w and %h.  If pixt is defined, the values
''' in %w and %h are ignored.
''' (3) If pixt is larger than pixs (or if w and/or d is larger
''' than the dimension of pixs, replicate the outer row and
''' column of pixels in pixs into pixd.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16, 32 bpp; colormap ok</param>
'''  <param name="pixt">[in]can be null - ; we use only the size</param>
'''  <param name="w">[in] - ignored if pixt is defined</param>
'''  <param name="h">[in] - ignored if pixt is defined</param>
'''   <returns>pixd resized to match or NULL on error</returns>
Public Shared Function pixResizeToMatch(
				ByVal pixs as Pix, 
				ByVal pixt as Pix, 
				ByVal w as Integer, 
				ByVal h as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixtPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixt) Then pixtPTR = pixt.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixResizeToMatch( pixs.Pointer, pixtPTR, w, h)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix5.c (1329, 1)
' pixMakeFrameMask()
' pixMakeFrameMask(l_int32, l_int32, l_float32, l_float32, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This makes an arbitrary 1-component mask with a centered fg
''' frame, which can have both an inner and an outer boundary.
''' All input fractional distances are measured from the image
''' border to the frame boundary, in units of the image half-width
''' for hf1 and hf2 and the image half-height for vf1 and vf2.
''' The distances to the outer frame boundary are given by hf1
''' and vf1; to the inner frame boundary, by hf2 and vf2.
''' Input fractions are thus in [0.0 ... 1.0], with hf1 LT= hf2
''' and vf1 LT= vf2.  Horizontal and vertical frame widths are
''' thus independently specified.
''' (2) Special cases
''' full fg mask hf1 = vf1 = 0.0, hf2 = vf2 = 1.0.
''' empty fg (zero width) mask set  hf1 = hf2  and vf1 = vf2.
''' fg rectangle with no hole set hf2 = vf2 = 1.0.
''' frame touching outer boundary set hf1 = vf1 = 0.0.
''' (3) The vertical thickness of the horizontal mask parts
''' is 0.5  (vf2 - vf1)  h.  The horizontal thickness of the
''' vertical mask parts is 0.5  (hf2 - hf1)  w.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="w">[in] - dimensions of output 1 bpp pix</param>
'''  <param name="h">[in] - dimensions of output 1 bpp pix</param>
'''  <param name="hf1">[in] - horizontal fraction of half-width at outer frame bdry</param>
'''  <param name="hf2">[in] - horizontal fraction of half-width at inner frame bdry</param>
'''  <param name="vf1">[in] - vertical fraction of half-width at outer frame bdry</param>
'''  <param name="vf2">[in] - vertical fraction of half-width at inner frame bdry</param>
'''   <returns>pixd 1 bpp, or NULL on error.</returns>
Public Shared Function pixMakeFrameMask(
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal hf1 as Single, 
				ByVal hf2 as Single, 
				ByVal vf1 as Single, 
				ByVal vf2 as Single) as Pix

	If IsNothing (hf1) then Throw New ArgumentNullException  ("hf1 cannot be Nothing")
	If IsNothing (hf2) then Throw New ArgumentNullException  ("hf2 cannot be Nothing")
	If IsNothing (vf1) then Throw New ArgumentNullException  ("vf1 cannot be Nothing")
	If IsNothing (vf2) then Throw New ArgumentNullException  ("vf2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMakeFrameMask( w, h, hf1, hf2, vf1, vf2)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix5.c (1395, 1)
' pixMakeCoveringOfRectangles()
' pixMakeCoveringOfRectangles(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This iteratively finds the bounding boxes of the connected
''' components and generates a mask from them.  Two iterations
''' should suffice for most situations.
''' (2) Returns an empty pix if %pixs is empty.
''' (3) If there are many small components in proximity, it may
''' be useful to merge them with a morphological closing before
''' calling this one.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="maxiters">[in] - max iterations use 0 to iterate to completion</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixMakeCoveringOfRectangles(
				ByVal pixs as Pix, 
				ByVal maxiters as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMakeCoveringOfRectangles( pixs.Pointer, maxiters)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix5.c (1468, 1)
' pixFractionFgInMask()
' pixFractionFgInMask(PIX *, PIX *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This gives the fraction of fg pixels in pix1 that are in
''' the intersection (i.e., under the fg) of pix2
''' |1  2|/|1|, where |...| means the number of fg pixels.
''' Note that this is different from the situation where
''' pix1 and pix2 are reversed.
''' (2) Both pix1 and pix2 are registered to the UL corners.  A warning
''' is issued if pix1 and pix2 have different sizes.
''' (3) This can also be used to find the fraction of fg pixels in pix1
''' that are NOT under the fg of pix2 1.0 - |1  2|/|1|
''' (4) If pix1 or pix2 are empty, this returns %fract = 0.0.
''' (5) For example, pix2 could be a frame around the outside of the
''' image, made from pixMakeFrameMask().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 1 bpp</param>
'''  <param name="pix2">[in] - 1 bpp</param>
'''  <param name="pfract">[out] - fraction of fg pixels in 1 that are aligned with the fg of 2</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function pixFractionFgInMask(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByRef pfract as Single()) as Integer

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If {1}.contains (pix1.d) = false then Throw New ArgumentException ("1 bpp")
	If {1}.contains (pix2.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFractionFgInMask( pix1.Pointer, pix2.Pointer, pfract)

	Return _Result
End Function

' SRC\pix5.c (1524, 1)
' pixClipToForeground()
' pixClipToForeground(PIX *, PIX **, BOX **) as l_ok
'''  <summary>
''' Notes
''' (1) At least one of {pixd, box} must be specified.
''' (2) If there are no fg pixels, the returned ptrs are null.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="ppixd">[out][optional] - clipped pix returned</param>
'''  <param name="pbox">[out][optional] - bounding box</param>
'''   <returns>0 if OK; 1 on error or if there are no fg pixels</returns>
Public Shared Function pixClipToForeground(
				ByVal pixs as Pix, 
				ByRef ppixd as Pix, 
				ByRef pbox as Box) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer
Dim pboxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbox) Then pboxPTR = pbox.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixClipToForeground( pixs.Pointer, ppixdPTR, pboxPTR)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)
	if pboxPTR <> IntPtr.Zero then pbox = new Box(pboxPTR)

	Return _Result
End Function

' SRC\pix5.c (1624, 1)
' pixTestClipToForeground()
' pixTestClipToForeground(PIX *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This is a lightweight test to determine if a 1 bpp image
''' can be further cropped without loss of fg pixels.
''' If it cannot, canclip is set to 0.
''' (2) It does not test for the existence of any fg pixels.
''' If there are no fg pixels, it will return %canclip = 1.
''' Check the output of the subsequent call to pixClipToForeground().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="pcanclip">[out] - 1 if fg does not extend to all four edges</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixTestClipToForeground(
				ByVal pixs as Pix, 
				ByRef pcanclip as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixTestClipToForeground( pixs.Pointer, pcanclip)

	Return _Result
End Function

' SRC\pix5.c (1696, 1)
' pixClipBoxToForeground()
' pixClipBoxToForeground(PIX *, BOX *, PIX **, BOX **) as l_ok
'''  <summary>
''' Notes
''' (1) At least one of {pixd, boxd} must be specified.
''' (2) If there are no fg pixels, the returned ptrs are null.
''' (3) Do not use pixs for the 3rd arg or boxs for the 4th arg;
''' this will leak memory.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="boxs">[in][optional] - use full image if null</param>
'''  <param name="ppixd">[out][optional] - clipped pix returned</param>
'''  <param name="pboxd">[out][optional] - bounding box</param>
'''   <returns>0 if OK; 1 on error or if there are no fg pixels</returns>
Public Shared Function pixClipBoxToForeground(
				ByVal pixs as Pix, 
				ByVal boxs as Box, 
				ByRef ppixd as Pix, 
				ByRef pboxd as Box) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim boxsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(boxs) Then boxsPTR = boxs.Pointer
Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer
Dim pboxdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxd) Then pboxdPTR = pboxd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixClipBoxToForeground( pixs.Pointer, boxsPTR, ppixdPTR, pboxdPTR)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)
	if pboxdPTR <> IntPtr.Zero then pboxd = new Box(pboxdPTR)

	Return _Result
End Function

' SRC\pix5.c (1762, 1)
' pixScanForForeground()
' pixScanForForeground(PIX *, BOX *, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If there are no fg pixels, the position is set to 0.
''' Caller must check the return value!
''' (2) Use %box == NULL to scan from edge of pixs
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="box">[in][optional] - within which the search is conducted</param>
'''  <param name="scanflag">[in] - direction of scan; e.g., L_FROM_LEFT</param>
'''  <param name="ploc">[out] - location in scan direction of first black pixel</param>
'''   <returns>0 if OK; 1 on error or if no fg pixels are found</returns>
Public Shared Function pixScanForForeground(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal scanflag as Enumerations.L_scan_direction, 
				ByRef ploc as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixScanForForeground( pixs.Pointer, boxPTR, scanflag, ploc)

	Return _Result
End Function

' SRC\pix5.c (1878, 1)
' pixClipBoxToEdges()
' pixClipBoxToEdges(PIX *, BOX *, l_int32, l_int32, l_int32, l_int32, PIX **, BOX **) as l_ok
'''  <summary>
''' Notes
''' (1) At least one of {pixd, boxd} must be specified.
''' (2) If there are no fg pixels, the returned ptrs are null.
''' (3) This function attempts to locate rectangular "image" regions
''' of high-density fg pixels, that have well-defined edges
''' on the four sides.
''' (4) Edges are searched for on each side, iterating in order
''' from left, right, top and bottom.  As each new edge is
''' found, the search box is resized to use that location.
''' Once an edge is found, it is held.  If no more edges
''' are found in one iteration, the search fails.
''' (5) See pixScanForEdge() for usage of the thresholds and %maxwidth.
''' (6) The thresholds must be at least 1, and the low threshold
''' cannot be larger than the high threshold.
''' (7) If the low and high thresholds are both 1, this is equivalent
''' to pixClipBoxToForeground().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="boxs">[in][optional] - ; use full image if null</param>
'''  <param name="lowthresh">[in] - threshold to choose clipping location</param>
'''  <param name="highthresh">[in] - threshold required to find an edge</param>
'''  <param name="maxwidth">[in] - max allowed width between low and high thresh locs</param>
'''  <param name="factor">[in] - sampling factor along pixel counting direction</param>
'''  <param name="ppixd">[out][optional] - clipped pix returned</param>
'''  <param name="pboxd">[out][optional] - bounding box</param>
'''   <returns>0 if OK; 1 on error or if a fg edge is not found from all four sides.</returns>
Public Shared Function pixClipBoxToEdges(
				ByVal pixs as Pix, 
				ByVal boxs as Box, 
				ByVal lowthresh as Integer, 
				ByVal highthresh as Integer, 
				ByVal maxwidth as Integer, 
				ByVal factor as Integer, 
				ByRef ppixd as Pix, 
				ByRef pboxd as Box) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim boxsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(boxs) Then boxsPTR = boxs.Pointer
Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer
Dim pboxdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxd) Then pboxdPTR = pboxd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixClipBoxToEdges( pixs.Pointer, boxsPTR, lowthresh, highthresh, maxwidth, factor, ppixdPTR, pboxdPTR)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)
	if pboxdPTR <> IntPtr.Zero then pboxd = new Box(pboxdPTR)

	Return _Result
End Function

' SRC\pix5.c (2008, 1)
' pixScanForEdge()
' pixScanForEdge(PIX *, BOX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If there are no fg pixels, the position is set to 0.
''' Caller must check the return value!
''' (2) Use %box == NULL to scan from edge of pixs
''' (3) As the scan progresses, the location where the sum of
''' pixels equals or excees %lowthresh is noted (loc).  The
''' scan is stopped when the sum of pixels equals or exceeds
''' %highthresh.  If the scan distance between loc and that
''' point does not exceed %maxwidth, an edge is found and
''' its position is taken to be loc.  %maxwidth implicitly
''' sets a minimum on the required gradient of the edge.
''' (4) The thresholds must be at least 1, and the low threshold
''' cannot be larger than the high threshold.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="box">[in][optional] - within which the search is conducted</param>
'''  <param name="lowthresh">[in] - threshold to choose clipping location</param>
'''  <param name="highthresh">[in] - threshold required to find an edge</param>
'''  <param name="maxwidth">[in] - max allowed width between low and high thresh locs</param>
'''  <param name="factor">[in] - sampling factor along pixel counting direction</param>
'''  <param name="scanflag">[in] - direction of scan; e.g., L_FROM_LEFT</param>
'''  <param name="ploc">[out] - location in scan direction of first black pixel</param>
'''   <returns>0 if OK; 1 on error or if the edge is not found</returns>
Public Shared Function pixScanForEdge(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal lowthresh as Integer, 
				ByVal highthresh as Integer, 
				ByVal maxwidth as Integer, 
				ByVal factor as Integer, 
				ByVal scanflag as Enumerations.L_scan_direction, 
				ByRef ploc as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixScanForEdge( pixs.Pointer, boxPTR, lowthresh, highthresh, maxwidth, factor, scanflag, ploc)

	Return _Result
End Function

' SRC\pix5.c (2189, 1)
' pixExtractOnLine()
' pixExtractOnLine(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) Input end points are clipped to the pix.
''' (2) If the line is either horizontal, or closer to horizontal
''' than to vertical, the points will be extracted from left
''' to right in the pix.  Likewise, if the line is vertical,
''' or closer to vertical than to horizontal, the points will
''' be extracted from top to bottom.
''' (3) Can be used with numaCountReverals(), for example, to
''' characterize the intensity smoothness along a line.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp or 8 bpp; no colormap</param>
'''  <param name="x1">[in] - one end point for line</param>
'''  <param name="y1">[in] - one end point for line</param>
'''  <param name="x2">[in] - another end pt for line</param>
'''  <param name="y2">[in] - another end pt for line</param>
'''  <param name="factor">[in] - sampling; GT= 1</param>
'''   <returns>na of pixel values along line, or NULL on error.</returns>
Public Shared Function pixExtractOnLine(
				ByVal pixs as Pix, 
				ByVal x1 as Integer, 
				ByVal y1 as Integer, 
				ByVal x2 as Integer, 
				ByVal y2 as Integer, 
				ByVal factor as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixExtractOnLine( pixs.Pointer, x1, y1, x2, y2, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix5.c (2309, 1)
' pixAverageOnLine()
' pixAverageOnLine(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as l_float32
'''  <summary>
''' Notes
''' (1) The line must be either horizontal or vertical, so either
''' y1 == y2 (horizontal) or x1 == x2 (vertical).
''' (2) If horizontal, x1 must be LT= x2.
''' If vertical, y1 must be LT= y2.
''' characterize the intensity smoothness along a line.
''' (3) Input end points are clipped to the pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp or 8 bpp; no colormap</param>
'''  <param name="x1">[in] - starting pt for line</param>
'''  <param name="y1">[in] - starting pt for line</param>
'''  <param name="x2">[in] - end pt for line</param>
'''  <param name="y2">[in] - end pt for line</param>
'''  <param name="factor">[in] - sampling; GT= 1</param>
'''   <returns>average of pixel values along line, or NULL on error.</returns>
Public Shared Function pixAverageOnLine(
				ByVal pixs as Pix, 
				ByVal x1 as Integer, 
				ByVal y1 as Integer, 
				ByVal x2 as Integer, 
				ByVal y2 as Integer, 
				ByVal factor as Integer) as Single

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Single = LeptonicaSharp.Natives.pixAverageOnLine( pixs.Pointer, x1, y1, x2, y2, factor)

	Return _Result
End Function

' SRC\pix5.c (2408, 1)
' pixAverageIntensityProfile()
' pixAverageIntensityProfile(PIX *, l_float32, l_int32, l_int32, l_int32, l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) If d != 1 bpp, colormaps are removed and the result
''' is converted to 8 bpp.
''' (2) If %dir == L_HORIZONTAL_LINE, the intensity is averaged
''' along each horizontal raster line (sampled by %factor1),
''' and the profile is the array of these averages in the
''' vertical direction between %first and %last raster lines,
''' and sampled by %factor2.
''' (3) If %dir == L_VERTICAL_LINE, the intensity is averaged
''' along each vertical line (sampled by %factor1),
''' and the profile is the array of these averages in the
''' horizontal direction between %first and %last columns,
''' and sampled by %factor2.
''' (4) The averages are measured over the central %fract of the image.
''' Use %fract == 1.0 to average across the entire width or height.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth; colormap OK</param>
'''  <param name="fract">[in] - fraction of image width or height to be used</param>
'''  <param name="dir">[in] - averaging direction L_HORIZONTAL_LINE or L_VERTICAL_LINE</param>
'''  <param name="first">[in] - last span of rows or columns to measure</param>
'''  <param name="factor1">[in] - sampling along fast scan direction; GT= 1</param>
'''  <param name="factor2">[in] - sampling along slow scan direction; GT= 1</param>
'''   <returns>na of reversal profile, or NULL on error.</returns>
Public Shared Function pixAverageIntensityProfile(
				ByVal pixs as Pix, 
				ByVal fract as Single, 
				ByVal dir as Enumerations.L_LINE, 
				ByVal first as Integer, 
				ByRef last as Integer, 
				ByVal factor1 as Integer, 
				ByVal factor2 as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAverageIntensityProfile( pixs.Pointer, fract, dir, first, last, factor1, factor2)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix5.c (2523, 1)
' pixReversalProfile()
' pixReversalProfile(PIX *, l_float32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) If d != 1 bpp, colormaps are removed and the result
''' is converted to 8 bpp.
''' (2) If %dir == L_HORIZONTAL_LINE, the the reversals are counted
''' along each horizontal raster line (sampled by %factor1),
''' and the profile is the array of these sums in the
''' vertical direction between %first and %last raster lines,
''' and sampled by %factor2.
''' (3) If %dir == L_VERTICAL_LINE, the the reversals are counted
''' along each vertical column (sampled by %factor1),
''' and the profile is the array of these sums in the
''' horizontal direction between %first and %last columns,
''' and sampled by %factor2.
''' (4) For each row or column, the reversals are summed over the
''' central %fract of the image.  Use %fract == 1.0 to sum
''' across the entire width (of row) or height (of column).
''' (5) %minreversal is the relative change in intensity that is
''' required to resolve peaks and valleys.  A typical number for
''' locating text in 8 bpp might be 50.  For 1 bpp, minreversal
''' must be 1.
''' (6) The reversal profile is simply the number of reversals
''' in a row or column, vs the row or column index.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth; colormap OK</param>
'''  <param name="fract">[in] - fraction of image width or height to be used</param>
'''  <param name="dir">[in] - profile direction L_HORIZONTAL_LINE or L_VERTICAL_LINE</param>
'''  <param name="first">[in] - span of rows or columns to measure</param>
'''  <param name="last">[in] - span of rows or columns to measure</param>
'''  <param name="minreversal">[in] - minimum change in intensity to trigger a reversal</param>
'''  <param name="factor1">[in] - sampling along raster line (fast scan); GT= 1</param>
'''  <param name="factor2">[in] - sampling of raster lines (slow scan); GT= 1</param>
'''   <returns>na of reversal profile, or NULL on error.</returns>
Public Shared Function pixReversalProfile(
				ByVal pixs as Pix, 
				ByVal fract as Single, 
				ByVal dir as Enumerations.L_LINE, 
				ByVal first as Integer, 
				ByVal last as Integer, 
				ByVal minreversal as Integer, 
				ByVal factor1 as Integer, 
				ByVal factor2 as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReversalProfile( pixs.Pointer, fract, dir, first, last, minreversal, factor1, factor2)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pix5.c (2632, 1)
' pixWindowedVarianceOnLine()
' pixWindowedVarianceOnLine(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) The returned variance array traverses the line starting
''' from the smallest coordinate, min(c1,c2).
''' (2) Line end points are clipped to pixs.
''' (3) The reference point for the variance calculation is the center of
''' the window.  Therefore, the numa start parameter from
''' pixExtractOnLine() is incremented by %size/2,
''' to align the variance values with the pixel coordinate.
''' (4) The square root of the variance is the RMS deviation from the mean.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; no colormap</param>
'''  <param name="dir">[in] - L_HORIZONTAL_LINE or L_VERTICAL_LINE</param>
'''  <param name="loc">[in] - location of the constant coordinate for the line</param>
'''  <param name="c1">[in] - end point coordinates for the line</param>
'''  <param name="c2">[in] - end point coordinates for the line</param>
'''  <param name="size">[in] - window size; must be GT 1</param>
'''  <param name="pnad">[out] - windowed square root of variance</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixWindowedVarianceOnLine(
				ByVal pixs as Pix, 
				ByVal dir as Enumerations.L_LINE, 
				ByVal loc as Integer, 
				ByVal c1 as Integer, 
				ByVal c2 as Integer, 
				ByVal size as Integer, 
				ByRef pnad as Numa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp; no colormap")

	Dim pnadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnad) Then pnadPTR = pnad.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWindowedVarianceOnLine( pixs.Pointer, dir, loc, c1, c2, size, pnadPTR)
	if pnadPTR <> IntPtr.Zero then pnad = new Numa(pnadPTR)

	Return _Result
End Function

' SRC\pix5.c (2750, 1)
' pixMinMaxNearLine()
' pixMinMaxNearLine(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, NUMA **, NUMA **, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If the line is more horizontal than vertical, the values
''' are computed for [x1, x2], and the pixels are taken
''' below and/or above the local y-value.  Otherwise, the
''' values are computed for [y1, y2] and the pixels are taken
''' to the left and/or right of the local x value.
''' (2) %direction specifies which side (or both sides) of the
''' line are scanned for min and max values.
''' (3) There are two ways to tell if the returned values of min
''' and max averages are valid the returned values cannot be
''' negative and the function must return 0.
''' (4) All accessed pixels are clipped to the pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; no colormap</param>
'''  <param name="x1">[in] - starting pt for line</param>
'''  <param name="y1">[in] - starting pt for line</param>
'''  <param name="x2">[in] - end pt for line</param>
'''  <param name="y2">[in] - end pt for line</param>
'''  <param name="dist">[in] - distance to search from line in each direction</param>
'''  <param name="direction">[in] - L_SCAN_NEGATIVE, L_SCAN_POSITIVE, L_SCAN_BOTH</param>
'''  <param name="pnamin">[out][optional] - minimum values</param>
'''  <param name="pnamax">[out][optional] - maximum values</param>
'''  <param name="pminave">[out][optional] - average of minimum values</param>
'''  <param name="pmaxave">[out][optional] - average of maximum values</param>
'''   <returns>0 if OK; 1 on error or if there are no sampled points within the image.</returns>
Public Shared Function pixMinMaxNearLine(
				ByVal pixs as Pix, 
				ByVal x1 as Integer, 
				ByVal y1 as Integer, 
				ByVal x2 as Integer, 
				ByVal y2 as Integer, 
				ByVal dist as Integer, 
				ByVal direction as Enumerations.L_scan_direction, 
				ByRef pnamin as Numa, 
				ByRef pnamax as Numa, 
				ByRef pminave as Single(), 
				ByRef pmaxave as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp; no colormap")

Dim pnaminPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnamin) Then pnaminPTR = pnamin.Pointer
Dim pnamaxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnamax) Then pnamaxPTR = pnamax.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixMinMaxNearLine( pixs.Pointer, x1, y1, x2, y2, dist, direction, pnaminPTR, pnamaxPTR, pminave, pmaxave)
	if pnaminPTR <> IntPtr.Zero then pnamin = new Numa(pnaminPTR)
	if pnamaxPTR <> IntPtr.Zero then pnamax = new Numa(pnamaxPTR)

	Return _Result
End Function

' SRC\pix5.c (2873, 1)
' pixRankRowTransform()
' pixRankRowTransform(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) The time is O(n) in the number of pixels and runs about
''' 100 Mpixels/sec on a 3 GHz machine.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; no colormap</param>
'''   <returns>pixd with pixels sorted in each row, from min to max value</returns>
Public Shared Function pixRankRowTransform(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp; no colormap")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRankRowTransform( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pix5.c (2926, 1)
' pixRankColumnTransform()
' pixRankColumnTransform(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) The time is O(n) in the number of pixels and runs about
''' 50 Mpixels/sec on a 3 GHz machine.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; no colormap</param>
'''   <returns>pixd with pixels sorted in each column, from min to max value</returns>
Public Shared Function pixRankColumnTransform(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp; no colormap")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRankColumnTransform( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\pixabasic.c"
' SRC\pixabasic.c (162, 1)
' pixaCreate()
' pixaCreate(l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) This creates an empty boxa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - initial number of ptrs</param>
'''   <returns>pixa, or NULL on error</returns>
Public Shared Function pixaCreate(
				ByVal n as Integer) as Pixa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixabasic.c (201, 1)
' pixaCreateFromPix()
' pixaCreateFromPix(PIX *, l_int32, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) For bpp = 1, we truncate each retrieved pix to the ON
''' pixels, which we assume for now start at (0,0)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - with individual components on a lattice</param>
'''  <param name="n">[in] - number of components</param>
'''  <param name="cellw">[in] - width of each cell</param>
'''  <param name="cellh">[in] - height of each cell</param>
'''   <returns>pixa, or NULL on error</returns>
Public Shared Function pixaCreateFromPix(
				ByVal pixs as Pix, 
				ByVal n as Integer, 
				ByVal cellw as Integer, 
				ByVal cellh as Integer) as Pixa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaCreateFromPix( pixs.Pointer, n, cellw, cellh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixabasic.c (264, 1)
' pixaCreateFromBoxa()
' pixaCreateFromBoxa(PIX *, BOXA *, l_int32 *) as PIXA *
'''  <summary>
''' Notes
''' (1) This simply extracts from pixs the region corresponding to each
''' box in the boxa.
''' (2) The 3rd arg is optional.  If the extent of the boxa exceeds the
''' size of the pixa, so that some boxes are either clipped
''' or entirely outside the pix, a warning is returned as TRUE.
''' (3) pixad will have only the properly clipped elements, and
''' the internal boxa will be correct.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="boxa">[in] - </param>
'''  <param name="pcropwarn">[out][optional] - TRUE if the boxa extent is larger than pixs.</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaCreateFromBoxa(
				ByVal pixs as Pix, 
				ByVal boxa as Boxa, 
				ByRef pcropwarn as Integer) as Pixa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaCreateFromBoxa( pixs.Pointer, boxa.Pointer, pcropwarn)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixabasic.c (337, 1)
' pixaSplitPix()
' pixaSplitPix(PIX *, l_int32, l_int32, l_int32, l_uint32) as PIXA *
'''  <summary>
''' Notes
''' (1) This is a variant on pixaCreateFromPix(), where we
''' simply divide the image up into (approximately) equal
''' subunits.  If you want the subimages to have essentially
''' the same aspect ratio as the input pix, use nx = ny.
''' (2) If borderwidth is 0, we ignore the input bordercolor and
''' redefine it to white.
''' (3) The bordercolor is always used to initialize each tiled pix,
''' so that if the src is clipped, the unblitted part will
''' be this color.  This avoids 1 pixel wide black stripes at the
''' left and lower edges.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - with individual components on a lattice</param>
'''  <param name="nx">[in] - number of mosaic cells horizontally</param>
'''  <param name="ny">[in] - number of mosaic cells vertically</param>
'''  <param name="borderwidth">[in] - of added border on all sides</param>
'''  <param name="bordercolor">[in] - in our RGBA format 0xrrggbbaa</param>
'''   <returns>pixa, or NULL on error</returns>
Public Shared Function pixaSplitPix(
				ByVal pixs as Pix, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByVal borderwidth as Integer, 
				ByVal bordercolor as UInteger) as Pixa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaSplitPix( pixs.Pointer, nx, ny, borderwidth, bordercolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixabasic.c (399, 1)
' pixaDestroy()
' pixaDestroy(PIXA **) as void
'''  <summary>
''' Notes
''' (1) Decrements the ref count and, if 0, destroys the pixa.
''' (2) Always nulls the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ppixa">[in,out]can be null - ed</param>
Public Shared Sub pixaDestroy(
				ByRef ppixa as Pixa)


Dim ppixaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixa) Then ppixaPTR = ppixa.Pointer

	LeptonicaSharp.Natives.pixaDestroy( ppixaPTR)
	if ppixaPTR <> IntPtr.Zero then ppixa = new Pixa(ppixaPTR)

End Sub

' SRC\pixabasic.c (441, 1)
' pixaCopy()
' pixaCopy(PIXA *, l_int32) as PIXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="copyflag">[in] - see pix.h for details L_COPY makes a new pixa and copies each pix and each box; L_CLONE gives a new ref-counted handle to the input pixa; L_COPY_CLONE makes a new pixa and inserts clones of all pix and boxes</param>
'''   <returns>new pixa, or NULL on error</returns>
Public Shared Function pixaCopy(
				ByVal pixa as Pixa, 
				ByVal copyflag as Enumerations.L_access_storage) as Pixa

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaCopy( pixa.Pointer, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixabasic.c (494, 1)
' pixaAddPix()
' pixaAddPix(PIXA *, PIX *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="pix">[in] - to be added</param>
'''  <param name="copyflag">[in] - L_INSERT, L_COPY, L_CLONE</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixaAddPix(
				ByVal pixa as Pixa, 
				ByVal pix as Pix, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaAddPix( pixa.Pointer, pix.Pointer, copyflag)

	Return _Result
End Function

' SRC\pixabasic.c (538, 1)
' pixaAddBox()
' pixaAddBox(PIXA *, BOX *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="box">[in] - </param>
'''  <param name="copyflag">[in] - L_INSERT, L_COPY, L_CLONE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaAddBox(
				ByVal pixa as Pixa, 
				ByVal box as Box, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaAddBox( pixa.Pointer, box.Pointer, copyflag)

	Return _Result
End Function

' SRC\pixabasic.c (593, 1)
' pixaExtendArrayToSize()
' pixaExtendArrayToSize(PIXA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) If necessary, reallocs new pixa and boxa ptrs arrays to %size.
''' The pixa and boxa ptr arrays must always be equal in size.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="size">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixaExtendArrayToSize(
				ByVal pixa as Pixa, 
				ByVal size as Integer) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaExtendArrayToSize( pixa.Pointer, size)

	Return _Result
End Function

' SRC\pixabasic.c (622, 1)
' pixaGetCount()
' pixaGetCount(PIXA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''   <returns>count, or 0 if no pixa</returns>
Public Shared Function pixaGetCount(
				ByVal pixa as Pixa) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaGetCount( pixa.Pointer)

	Return _Result
End Function

' SRC\pixabasic.c (641, 1)
' pixaChangeRefcount()
' pixaChangeRefcount(PIXA *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="delta">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaChangeRefcount(
				ByVal pixa as Pixa, 
				ByVal delta as Integer) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaChangeRefcount( pixa.Pointer, delta)

	Return _Result
End Function

' SRC\pixabasic.c (663, 1)
' pixaGetPix()
' pixaGetPix(PIXA *, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="index">[in] - to the index-th pix</param>
'''  <param name="accesstype">[in] - L_COPY or L_CLONE</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixaGetPix(
				ByVal pixa as Pixa, 
				ByVal index as Integer, 
				ByVal accesstype as Enumerations.L_access_storage) as Pix

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaGetPix( pixa.Pointer, index, accesstype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixabasic.c (698, 1)
' pixaGetPixDimensions()
' pixaGetPixDimensions(PIXA *, l_int32, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="index">[in] - to the index-th box</param>
'''  <param name="pw">[out][optional] - each can be null</param>
'''  <param name="ph">[out][optional] - each can be null</param>
'''  <param name="pd">[out][optional] - each can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaGetPixDimensions(
				ByVal pixa as Pixa, 
				ByVal index as Integer, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pd as Integer) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaGetPixDimensions( pixa.Pointer, index, pw, ph, pd)

	Return _Result
End Function

' SRC\pixabasic.c (732, 1)
' pixaGetBoxa()
' pixaGetBoxa(PIXA *, l_int32) as BOXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="accesstype">[in] - L_COPY, L_CLONE, L_COPY_CLONE</param>
'''   <returns>boxa, or NULL on error</returns>
Public Shared Function pixaGetBoxa(
				ByVal pixa as Pixa, 
				ByVal accesstype as Enumerations.L_access_storage) as Boxa

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaGetBoxa( pixa.Pointer, accesstype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\pixabasic.c (756, 1)
' pixaGetBoxaCount()
' pixaGetBoxaCount(PIXA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''   <returns>count, or 0 on error</returns>
Public Shared Function pixaGetBoxaCount(
				ByVal pixa as Pixa) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaGetBoxaCount( pixa.Pointer)

	Return _Result
End Function

' SRC\pixabasic.c (788, 1)
' pixaGetBox()
' pixaGetBox(PIXA *, l_int32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) There is always a boxa with a pixa, and it is initialized so
''' that each box ptr is NULL.
''' (2) In general, we expect that there is either a box associated
''' with each pix, or no boxes at all in the boxa.
''' (3) Having no boxes is thus not an automatic error.  Whether it
''' is an actual error is determined by the calling program.
''' If the caller expects to get a box, it is an error; see, e.g.,
''' pixaGetBoxGeometry().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="index">[in] - to the index-th pix</param>
'''  <param name="accesstype">[in] - L_COPY or L_CLONE</param>
'''   <returns>box if null, not automatically an error, or NULL on error</returns>
Public Shared Function pixaGetBox(
				ByVal pixa as Pixa, 
				ByVal index as Integer, 
				ByVal accesstype as Enumerations.L_access_storage) as Box

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaGetBox( pixa.Pointer, index, accesstype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\pixabasic.c (826, 1)
' pixaGetBoxGeometry()
' pixaGetBoxGeometry(PIXA *, l_int32, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="index">[in] - to the index-th box</param>
'''  <param name="px">[out][optional] - each can be null</param>
'''  <param name="py">[out][optional] - each can be null</param>
'''  <param name="pw">[out][optional] - each can be null</param>
'''  <param name="ph">[out][optional] - each can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaGetBoxGeometry(
				ByVal pixa as Pixa, 
				ByVal index as Integer, 
				ByRef px as Integer, 
				ByRef py as Integer, 
				ByRef pw as Integer, 
				ByRef ph as Integer) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaGetBoxGeometry( pixa.Pointer, index, px, py, pw, ph)

	Return _Result
End Function

' SRC\pixabasic.c (868, 1)
' pixaSetBoxa()
' pixaSetBoxa(PIXA *, BOXA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This destroys the existing boxa in the pixa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="boxa">[in] - </param>
'''  <param name="accesstype">[in] - L_INSERT, L_COPY, L_CLONE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaSetBoxa(
				ByVal pixa as Pixa, 
				ByVal boxa as Boxa, 
				ByVal accesstype as Enumerations.L_access_storage) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (boxa) then Throw New ArgumentNullException  ("boxa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaSetBoxa( pixa.Pointer, boxa.Pointer, accesstype)

	Return _Result
End Function

' SRC\pixabasic.c (907, 1)
' pixaGetPixArray()
' pixaGetPixArray(PIXA *) as PIX **
'''  <summary>
''' Notes
''' (1) This returns a ptr to the actual array.  The array is
''' owned by the pixa, so it must not be destroyed.
''' (2) The caller should always check if the return value is NULL
''' before accessing any of the pix ptrs in this array!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''   <returns>pix array, or NULL on error</returns>
Public Shared Function pixaGetPixArray(
				ByVal pixa as Pixa) as Pix

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaGetPixArray( pixa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing
Dim B as new Pix(_Result)

	Return B
End Function

' SRC\pixabasic.c (932, 1)
' pixaVerifyDepth()
' pixaVerifyDepth(PIXA *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) It is considered to be an error if there are no pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="psame">[out] - 1 if depth is the same for all pix; 0 otherwise</param>
'''  <param name="pmaxd">[out][optional] - max depth of all pix</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaVerifyDepth(
				ByVal pixa as Pixa, 
				ByRef psame as Integer, 
				ByRef pmaxd as Integer) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaVerifyDepth( pixa.Pointer, psame, pmaxd)

	Return _Result
End Function

' SRC\pixabasic.c (978, 1)
' pixaVerifyDimensions()
' pixaVerifyDimensions(PIXA *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) It is considered to be an error if there are no pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="psame">[out] - 1 if dimensions are the same for all pix; 0 otherwise</param>
'''  <param name="pmaxw">[out][optional] - max width of all pix</param>
'''  <param name="pmaxh">[out][optional] - max height of all pix</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaVerifyDimensions(
				ByVal pixa as Pixa, 
				ByRef psame as Integer, 
				ByRef pmaxw as Integer, 
				ByRef pmaxh as Integer) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaVerifyDimensions( pixa.Pointer, psame, pmaxw, pmaxh)

	Return _Result
End Function

' SRC\pixabasic.c (1029, 1)
' pixaIsFull()
' pixaIsFull(PIXA *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) A pixa is "full" if the array of pix is fully
''' occupied from index 0 to index (pixa-GTn - 1).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="pfullpa">[out][optional] - 1 if pixa is full</param>
'''  <param name="pfullba">[out][optional] - 1 if boxa is full</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaIsFull(
				ByVal pixa as Pixa, 
				ByRef pfullpa as Integer, 
				ByRef pfullba as Integer) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaIsFull( pixa.Pointer, pfullpa, pfullba)

	Return _Result
End Function

' SRC\pixabasic.c (1079, 1)
' pixaCountText()
' pixaCountText(PIXA *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) All pix have non-empty text strings if the returned value %ntext
''' equals the pixa count.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="pntext">[out] - number of pix with non-empty text strings</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function pixaCountText(
				ByVal pixa as Pixa, 
				ByRef pntext as Integer) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaCountText( pixa.Pointer, pntext)

	Return _Result
End Function

' SRC\pixabasic.c (1122, 1)
' pixaSetText()
' pixaSetText(PIXA *, SARRAY *) as l_ok
'''  <summary>
''' Notes
''' (1) To clear all the text fields, use sa == NULL;
''' (2) If sa is defined, it must be the same size as %pixa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="sa">[in][optional] - array of text strings, to insert in each pix</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function pixaSetText(
				ByVal pixa as Pixa, 
				ByVal sa as Sarray) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")

	Dim saPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sa) Then saPTR = sa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaSetText( pixa.Pointer, saPTR)

	Return _Result
End Function

' SRC\pixabasic.c (1180, 1)
' pixaGetLinePtrs()
' pixaGetLinePtrs(PIXA *, l_int32 *) as void ***
'''  <summary>
''' Notes
''' (1) See pixGetLinePtrs() for details.
''' (2) It is best if all pix in the pixa are the same size.
''' The size of each line ptr array is equal to the height
''' of the pix that it refers to.
''' (3) This is an array of arrays.  To destroy it
''' for (i = 0; i LT size; i++)
''' LEPT_FREE(lineset[i]);
''' LEPT_FREE(lineset);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - of pix that all have the same depth</param>
'''  <param name="psize">[out][optional] - number of pix in the pixa</param>
'''   <returns>array of array of line ptrs, or NULL on error</returns>
Public Shared Function pixaGetLinePtrs(
				ByVal pixa as Pixa, 
				ByRef psize as Integer) as IntPtr

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaGetLinePtrs( pixa.Pointer, psize)

	Return _Result
End Function

' SRC\pixabasic.c (1228, 1)
' pixaWriteStreamInfo()
' pixaWriteStreamInfo(FILE *, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) For each pix in the pixa, write out the pix dimensions, spp,
''' text string (if it exists), and cmap info.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pixa">[in] - </param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function pixaWriteStreamInfo(
				ByVal fp as FILE, 
				ByVal pixa as Pixa) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaWriteStreamInfo( fp.Pointer, pixa.Pointer)

	Return _Result
End Function

' SRC\pixabasic.c (1286, 1)
' pixaReplacePix()
' pixaReplacePix(PIXA *, l_int32, PIX *, BOX *) as l_ok
'''  <summary>
''' Notes
''' (1) In-place replacement of one pix.
''' (2) The previous pix at that location is destroyed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="index">[in] - to the index-th pix</param>
'''  <param name="pix">[in] - insert to replace existing one</param>
'''  <param name="box">[in][optional] - insert to replace existing</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaReplacePix(
				ByVal pixa as Pixa, 
				ByVal index as Integer, 
				ByVal pix as Pix, 
				ByVal box as Box) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaReplacePix( pixa.Pointer, index, pix.Pointer, boxPTR)

	Return _Result
End Function

' SRC\pixabasic.c (1336, 1)
' pixaInsertPix()
' pixaInsertPix(PIXA *, l_int32, PIX *, BOX *) as l_ok
'''  <summary>
''' Notes
''' (1) This shifts pixa[i] --GT pixa[i + 1] for all i GT= index,
''' and then inserts at pixa[index].
''' (2) To insert at the beginning of the array, set index = 0.
''' (3) It should not be used repeatedly on large arrays,
''' because the function is O(n).
''' (4) To append a pix to a pixa, it's easier to use pixaAddPix().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="index">[in] - at which pix is to be inserted</param>
'''  <param name="pixs">[in] - new pix to be inserted</param>
'''  <param name="box">[in][optional] - new box to be inserted</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaInsertPix(
				ByVal pixa as Pixa, 
				ByVal index as Integer, 
				ByVal pixs as Pix, 
				ByVal box as Box) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaInsertPix( pixa.Pointer, index, pixs.Pointer, boxPTR)

	Return _Result
End Function

' SRC\pixabasic.c (1386, 1)
' pixaRemovePix()
' pixaRemovePix(PIXA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This shifts pixa[i] --GT pixa[i - 1] for all i GT index.
''' (2) It should not be used repeatedly on large arrays,
''' because the function is O(n).
''' (3) The corresponding box is removed as well, if it exists.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="index">[in] - of pix to be removed</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaRemovePix(
				ByVal pixa as Pixa, 
				ByVal index as Integer) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaRemovePix( pixa.Pointer, index)

	Return _Result
End Function

' SRC\pixabasic.c (1438, 1)
' pixaRemovePixAndSave()
' pixaRemovePixAndSave(PIXA *, l_int32, PIX **, BOX **) as l_ok
'''  <summary>
''' Notes
''' (1) This shifts pixa[i] --GT pixa[i - 1] for all i GT index.
''' (2) It should not be used repeatedly on large arrays,
''' because the function is O(n).
''' (3) The corresponding box is removed as well, if it exists.
''' (4) The removed pix and box can either be retained or destroyed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="index">[in] - of pix to be removed</param>
'''  <param name="ppix">[out][optional] - removed pix</param>
'''  <param name="pbox">[out][optional] - removed box</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaRemovePixAndSave(
				ByVal pixa as Pixa, 
				ByVal index as Integer, 
				ByRef ppix as Pix, 
				ByRef pbox as Box) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")

Dim ppixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppix) Then ppixPTR = ppix.Pointer
Dim pboxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbox) Then pboxPTR = pbox.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaRemovePixAndSave( pixa.Pointer, index, ppixPTR, pboxPTR)
	if ppixPTR <> IntPtr.Zero then ppix = new Pix(ppixPTR)
	if pboxPTR <> IntPtr.Zero then pbox = new Box(pboxPTR)

	Return _Result
End Function

' SRC\pixabasic.c (1513, 1)
' pixaInitFull()
' pixaInitFull(PIXA *, PIX *, BOX *) as l_ok
'''  <summary>
''' Notes
''' (1) This initializes a pixa by filling up the entire pix ptr array
''' with copies of %pix.  If %pix == NULL, we use a tiny placeholder
''' pix (w = h = d = 1).  Any existing pix are destroyed.
''' It also optionally fills the boxa with copies of %box.
''' After this operation, the numbers of pix and (optionally)
''' boxes are equal to the number of allocated ptrs.
''' (2) Note that we use pixaReplacePix() instead of pixaInsertPix().
''' They both have the same effect when inserting into a NULL ptr
''' in the pixa ptr array
''' (3) If the boxa is not initialized (i.e., filled with boxes),
''' later insertion of boxes will cause an error, because the
''' 'n' field is 0.
''' (4) Example usage.  This function is useful to prepare for a
''' random insertion (or replacement) of pix into a pixa.
''' To randomly insert pix into a pixa, without boxes, up to
''' some index "max"
''' Pixa pixa = pixaCreate(max);
''' pixaInitFull(pixa, NULL, NULL);
''' An existing pixa with a smaller ptr array can also be reused
''' pixaExtendArrayToSize(pixa, max);
''' pixaInitFull(pixa, NULL, NULL);
''' The initialization allows the pixa to always be properly
''' filled, even if all pix (and boxes) are not later replaced.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - typically empty</param>
'''  <param name="pix">[in][optional] - to be replicated into the entire pixa ptr array</param>
'''  <param name="box">[in][optional] - to be replicated into the entire boxa ptr array</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaInitFull(
				ByVal pixa as Pixa, 
				ByVal pix as Pix, 
				ByVal box as Box) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")

	Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer
	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaInitFull( pixa.Pointer, pixPTR, boxPTR)

	Return _Result
End Function

' SRC\pixabasic.c (1555, 1)
' pixaClear()
' pixaClear(PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) This destroys all pix in the pixa, as well as
''' all boxes in the boxa.  The ptrs in the pix ptr array
''' are all null'd.  The number of allocated pix, n, is set to 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaClear(
				ByVal pixa as Pixa) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaClear( pixa.Pointer)

	Return _Result
End Function

' SRC\pixabasic.c (1593, 1)
' pixaJoin()
' pixaJoin(PIXA *, PIXA *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This appends a clone of each indicated pix in pixas to pixad
''' (2) istart LT 0 is taken to mean 'read from the start' (istart = 0)
''' (3) iend LT 0 means 'read to the end'
''' (4) If pixas is NULL or contains no pix, this is a no-op.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixad">[in] - dest pixa; add to this one</param>
'''  <param name="pixas">[in][optional] - source pixa; add from this one</param>
'''  <param name="istart">[in] - starting index in pixas</param>
'''  <param name="iend">[in] - ending index in pixas; use -1 to cat all</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaJoin(
				ByVal pixad as Pixa, 
				ByVal pixas as Pixa, 
				ByVal istart as Integer, 
				ByVal iend as Integer) as Integer

	If IsNothing (pixad) then Throw New ArgumentNullException  ("pixad cannot be Nothing")

	Dim pixasPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixas) Then pixasPTR = pixas.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaJoin( pixad.Pointer, pixasPTR, istart, iend)

	Return _Result
End Function

' SRC\pixabasic.c (1649, 1)
' pixaInterleave()
' pixaInterleave(PIXA *, PIXA *, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) %copyflag determines if the pix are copied or cloned.
''' The boxes, if they exist, are copied.
''' (2) If the two pixa have different sizes, a warning is issued,
''' and the number of pairs returned is the minimum size.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa1">[in] - first src pixa</param>
'''  <param name="pixa2">[in] - second src pixa</param>
'''  <param name="copyflag">[in] - L_CLONE, L_COPY</param>
'''   <returns>pixa  interleaved from sources, or NULL on error.</returns>
Public Shared Function pixaInterleave(
				ByVal pixa1 as Pixa, 
				ByVal pixa2 as Pixa, 
				ByVal copyflag as Enumerations.L_access_storage) as Pixa

	If IsNothing (pixa1) then Throw New ArgumentNullException  ("pixa1 cannot be Nothing")
	If IsNothing (pixa2) then Throw New ArgumentNullException  ("pixa2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaInterleave( pixa1.Pointer, pixa2.Pointer, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixabasic.c (1714, 1)
' pixaaJoin()
' pixaaJoin(PIXAA *, PIXAA *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This appends a clone of each indicated pixa in paas to pixaad
''' (2) istart LT 0 is taken to mean 'read from the start' (istart = 0)
''' (3) iend LT 0 means 'read to the end'
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paad">[in] - dest pixaa; add to this one</param>
'''  <param name="paas">[in][optional] - source pixaa; add from this one</param>
'''  <param name="istart">[in] - starting index in pixaas</param>
'''  <param name="iend">[in] - ending index in pixaas; use -1 to cat all</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaaJoin(
				ByVal paad as Pixaa, 
				ByVal paas as Pixaa, 
				ByVal istart as Integer, 
				ByVal iend as Integer) as Integer

	If IsNothing (paad) then Throw New ArgumentNullException  ("paad cannot be Nothing")

	Dim paasPTR As IntPtr = IntPtr.Zero : If Not IsNothing(paas) Then paasPTR = paas.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaJoin( paad.Pointer, paasPTR, istart, iend)

	Return _Result
End Function

' SRC\pixabasic.c (1772, 1)
' pixaaCreate()
' pixaaCreate(l_int32) as PIXAA *
'''  <summary>
''' Notes
''' (1) A pixaa provides a 2-level hierarchy of images.
''' A common use is for segmentation masks, which are
''' inexpensive to store in png format.
''' (2) For example, suppose you want a mask for each textline
''' in a two-column page.  The textline masks for each column
''' can be represented by a pixa, of which there are 2 in the pixaa.
''' The boxes for the textline mask components within a column
''' can have their origin referred to the column rather than the page.
''' Then the boxa field can be used to represent the two box (regions)
''' for the columns, and the (x,y) components of each box can
''' be used to get the absolute position of the textlines on
''' the page.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - initial number of pixa ptrs</param>
'''   <returns>paa, or NULL on error</returns>
Public Shared Function pixaaCreate(
				ByVal n as Integer) as Pixaa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixaa(_Result)
End Function

' SRC\pixabasic.c (1817, 1)
' pixaaCreateFromPixa()
' pixaaCreateFromPixa(PIXA *, l_int32, l_int32, l_int32) as PIXAA *
'''  <summary>
''' Notes
''' (1) This subdivides a pixa into a set of smaller pixa that
''' are accumulated into a pixaa.
''' (2) If type == L_CHOOSE_CONSECUTIVE, the first 'n' pix are
''' put in a pixa and added to pixaa, then the next 'n', etc.
''' If type == L_CHOOSE_SKIP_BY, the first pixa is made by
''' aggregating pix[0], pix[n], pix[2n], etc.
''' (3) The copyflag specifies if each new pix is a copy or a clone.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="n">[in] - number specifying subdivision of pixa</param>
'''  <param name="type">[in] - L_CHOOSE_CONSECUTIVE, L_CHOOSE_SKIP_BY</param>
'''  <param name="copyflag">[in] - L_CLONE, L_COPY</param>
'''   <returns>paa, or NULL on error</returns>
Public Shared Function pixaaCreateFromPixa(
				ByVal pixa as Pixa, 
				ByVal n as Integer, 
				ByVal type as Enumerations.L_CHOOSE, 
				ByVal copyflag as Enumerations.L_access_storage) as Pixaa

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaCreateFromPixa( pixa.Pointer, n, type, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixaa(_Result)
End Function

' SRC\pixabasic.c (1879, 1)
' pixaaDestroy()
' pixaaDestroy(PIXAA **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ppaa">[in,out] - to be nulled</param>
Public Shared Sub pixaaDestroy(
				ByRef ppaa as Pixaa)


	Dim ppaaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppaa) Then ppaaPTR = ppaa.Pointer

	LeptonicaSharp.Natives.pixaaDestroy( ppaaPTR)
	if ppaaPTR <> IntPtr.Zero then ppaa = new Pixaa(ppaaPTR)

End Sub

' SRC\pixabasic.c (1923, 1)
' pixaaAddPixa()
' pixaaAddPixa(PIXAA *, PIXA *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''  <param name="pixa">[in] - to be added</param>
'''  <param name="copyflag">[in] - L_INSERT inserts the pixa directly; L_COPY makes a new pixa and copies each pix and each box; L_CLONE gives a new handle to the input pixa; L_COPY_CLONE makes a new pixa and inserts clones of all pix and boxes</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixaaAddPixa(
				ByVal paa as Pixaa, 
				ByVal pixa as Pixa, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaAddPixa( paa.Pointer, pixa.Pointer, copyflag)

	Return _Result
End Function

' SRC\pixabasic.c (1964, 1)
' pixaaExtendArray()
' pixaaExtendArray(PIXAA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixaaExtendArray(
				ByVal paa as Pixaa) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaExtendArray( paa.Pointer)

	Return _Result
End Function

' SRC\pixabasic.c (1992, 1)
' pixaaAddPix()
' pixaaAddPix(PIXAA *, l_int32, PIX *, BOX *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - input paa</param>
'''  <param name="index">[in] - index of pixa in paa</param>
'''  <param name="pix">[in] - to be added</param>
'''  <param name="box">[in][optional] - to be added</param>
'''  <param name="copyflag">[in] - L_INSERT, L_COPY, L_CLONE</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixaaAddPix(
				ByVal paa as Pixaa, 
				ByVal index as Integer, 
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaAddPix( paa.Pointer, index, pix.Pointer, boxPTR, copyflag)

	Return _Result
End Function

' SRC\pixabasic.c (2031, 1)
' pixaaAddBox()
' pixaaAddBox(PIXAA *, BOX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) The box can be used, for example, to hold the support region
''' of a pixa that is being added to the pixaa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''  <param name="box">[in] - </param>
'''  <param name="copyflag">[in] - L_INSERT, L_COPY, L_CLONE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaaAddBox(
				ByVal paa as Pixaa, 
				ByVal box as Box, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaAddBox( paa.Pointer, box.Pointer, copyflag)

	Return _Result
End Function

' SRC\pixabasic.c (2066, 1)
' pixaaGetCount()
' pixaaGetCount(PIXAA *, NUMA **) as l_int32
'''  <summary>
''' Notes
''' (1) If paa is empty, a returned na will also be empty.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''  <param name="pna">[out][optional] - number of pix in each pixa</param>
'''   <returns>count, or 0 if no pixaa</returns>
Public Shared Function pixaaGetCount(
				ByVal paa as Pixaa, 
				ByRef pna as Numa) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")

Dim pnaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pna) Then pnaPTR = pna.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaGetCount( paa.Pointer, pnaPTR)
	if pnaPTR <> IntPtr.Zero then pna = new Numa(pnaPTR)

	Return _Result
End Function

' SRC\pixabasic.c (2115, 1)
' pixaaGetPixa()
' pixaaGetPixa(PIXAA *, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) L_COPY makes a new pixa with a copy of every pix
''' (2) L_CLONE just makes a new reference to the pixa,
''' and bumps the counter.  You would use this, for example,
''' when you need to extract some data from a pix within a
''' pixa within a pixaa.
''' (3) L_COPY_CLONE makes a new pixa with a clone of every pix
''' and box
''' (4) In all cases, you must invoke pixaDestroy() on the returned pixa
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''  <param name="index">[in] - to the index-th pixa</param>
'''  <param name="accesstype">[in] - L_COPY, L_CLONE, L_COPY_CLONE</param>
'''   <returns>pixa, or NULL on error</returns>
Public Shared Function pixaaGetPixa(
				ByVal paa as Pixaa, 
				ByVal index as Integer, 
				ByVal accesstype as Enumerations.L_access_storage) as Pixa

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaGetPixa( paa.Pointer, index, accesstype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixabasic.c (2153, 1)
' pixaaGetBoxa()
' pixaaGetBoxa(PIXAA *, l_int32) as BOXA *
'''  <summary>
''' Notes
''' (1) L_COPY returns a copy; L_CLONE returns a new reference to the boxa.
''' (2) In both cases, invoke boxaDestroy() on the returned boxa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''  <param name="accesstype">[in] - L_COPY, L_CLONE</param>
'''   <returns>boxa, or NULL on error</returns>
Public Shared Function pixaaGetBoxa(
				ByVal paa as Pixaa, 
				ByVal accesstype as Enumerations.L_access_storage) as Boxa

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaGetBoxa( paa.Pointer, accesstype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\pixabasic.c (2177, 1)
' pixaaGetPix()
' pixaaGetPix(PIXAA *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''  <param name="index">[in] - index into the pixa array in the pixaa</param>
'''  <param name="ipix">[in] - index into the pix array in the pixa</param>
'''  <param name="accessflag">[in] - L_COPY or L_CLONE</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixaaGetPix(
				ByVal paa as Pixaa, 
				ByVal index as Integer, 
				ByVal ipix as Integer, 
				ByVal accessflag as Enumerations.L_access_storage) as Pix

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaGetPix( paa.Pointer, index, ipix, accessflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixabasic.c (2210, 1)
' pixaaVerifyDepth()
' pixaaVerifyDepth(PIXAA *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) It is considered to be an error if any pixa have no pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''  <param name="psame">[out] - 1 if all pix have the same depth; 0 otherwise</param>
'''  <param name="pmaxd">[out][optional] - max depth of all pix in pixaa</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixaaVerifyDepth(
				ByVal paa as Pixaa, 
				ByRef psame as Integer, 
				ByRef pmaxd as Integer) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaVerifyDepth( paa.Pointer, psame, pmaxd)

	Return _Result
End Function

' SRC\pixabasic.c (2260, 1)
' pixaaVerifyDimensions()
' pixaaVerifyDimensions(PIXAA *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) It is considered to be an error if any pixa have no pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''  <param name="psame">[out] - 1 if all pix have the same depth; 0 otherwise</param>
'''  <param name="pmaxw">[out][optional] - max width of all pix in pixaa</param>
'''  <param name="pmaxh">[out][optional] - max height of all pix in pixaa</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixaaVerifyDimensions(
				ByVal paa as Pixaa, 
				ByRef psame as Integer, 
				ByRef pmaxw as Integer, 
				ByRef pmaxh as Integer) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaVerifyDimensions( paa.Pointer, psame, pmaxw, pmaxh)

	Return _Result
End Function

' SRC\pixabasic.c (2314, 1)
' pixaaIsFull()
' pixaaIsFull(PIXAA *, l_int32 *) as l_int32
'''  <summary>
''' Notes
''' (1) Does not require boxa associated with each pixa to be full.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''  <param name="pfull">[out] - 1 if all pixa in the paa have full pix arrays</param>
'''   <returns>return 0 if OK, 1 on error</returns>
Public Shared Function pixaaIsFull(
				ByVal paa as Pixaa, 
				ByRef pfull as Integer) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaIsFull( paa.Pointer, pfull)

	Return _Result
End Function

' SRC\pixabasic.c (2366, 1)
' pixaaInitFull()
' pixaaInitFull(PIXAA *, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) This initializes a pixaa by filling up the entire pixa ptr array
''' with copies of %pixa.  Any existing pixa are destroyed.
''' (2) Example usage.  This function is useful to prepare for a
''' random insertion (or replacement) of pixa into a pixaa.
''' To randomly insert pixa into a pixaa, up to some index "max"
''' Pixaa paa = pixaaCreate(max);
''' Pixa pixa = pixaCreate(1);  // if you want little memory
''' pixaaInitFull(paa, pixa);  // copy it to entire array
''' pixaDestroy(pixa);  // no longer needed
''' The initialization allows the pixaa to always be properly filled.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - typically empty</param>
'''  <param name="pixa">[in] - to be replicated into the entire pixa ptr array</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaaInitFull(
				ByVal paa as Pixaa, 
				ByVal pixa as Pixa) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaInitFull( paa.Pointer, pixa.Pointer)

	Return _Result
End Function

' SRC\pixabasic.c (2408, 1)
' pixaaReplacePixa()
' pixaaReplacePixa(PIXAA *, l_int32, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) This allows random insertion of a pixa into a pixaa, with
''' destruction of any existing pixa at that location.
''' The input pixa is now owned by the pixaa.
''' (2) No other pixa in the array are affected.
''' (3) The index must be within the allowed set.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''  <param name="index">[in] - to the index-th pixa</param>
'''  <param name="pixa">[in] - insert to replace existing one</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaaReplacePixa(
				ByVal paa as Pixaa, 
				ByVal index as Integer, 
				ByVal pixa as Pixa) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaReplacePixa( paa.Pointer, index, pixa.Pointer)

	Return _Result
End Function

' SRC\pixabasic.c (2441, 1)
' pixaaClear()
' pixaaClear(PIXAA *) as l_ok
'''  <summary>
''' Notes
''' (1) This destroys all pixa in the pixaa, and nulls the ptrs
''' in the pixa ptr array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaaClear(
				ByVal paa as Pixaa) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaClear( paa.Pointer)

	Return _Result
End Function

' SRC\pixabasic.c (2472, 1)
' pixaaTruncate()
' pixaaTruncate(PIXAA *) as l_ok
'''  <summary>
''' Notes
''' (1) This identifies the largest index containing a pixa that
''' has any pix within it, destroys all pixa above that index,
''' and resets the count.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaaTruncate(
				ByVal paa as Pixaa) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaTruncate( paa.Pointer)

	Return _Result
End Function

' SRC\pixabasic.c (2519, 1)
' pixaRead()
' pixaRead(const char *) as PIXA *
'''  <summary>
''' Notes
''' (1) The pix are stored in the file as png.
''' If the png library is not linked, this will fail.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>pixa, or NULL on error</returns>
Public Shared Function pixaRead(
				ByVal filename as String) as Pixa

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixabasic.c (2556, 1)
' pixaReadStream()
' pixaReadStream(FILE *) as PIXA *
'''  <summary>
''' Notes
''' (1) The pix are stored in the file as png.
''' If the png library is not linked, this will fail.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>pixa, or NULL on error</returns>
Public Shared Function pixaReadStream(
				ByVal fp as FILE) as Pixa

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixabasic.c (2615, 1)
' pixaReadMem()
' pixaReadMem(const l_uint8 *, size_t) as PIXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - of serialized pixa</param>
'''  <param name="size">[in] - of data in bytes</param>
'''   <returns>pixa, or NULL on error</returns>
Public Shared Function pixaReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as Pixa

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixabasic.c (2652, 1)
' pixaWriteDebug()
' pixaWriteDebug(const char *, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) Debug version, intended for use in the library when writing
''' to files in a temp directory with names that are compiled in.
''' This is used instead of pixaWrite() for all such library calls.
''' (2) The global variable LeptDebugOK defaults to 0, and can be set
''' or cleared by the function setLeptDebugOK().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - </param>
'''  <param name="pixa">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixaWriteDebug(
				ByVal fname as String, 
				ByVal pixa as Pixa) as Integer

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaWriteDebug( fname, pixa.Pointer)

	Return _Result
End Function

' SRC\pixabasic.c (2680, 1)
' pixaWrite()
' pixaWrite(const char *, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) The pix are stored in the file as png.
''' If the png library is not linked, this will fail.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pixa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaWrite(
				ByVal filename as String, 
				ByVal pixa as Pixa) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaWrite( filename, pixa.Pointer)

	Return _Result
End Function

' SRC\pixabasic.c (2721, 1)
' pixaWriteStream()
' pixaWriteStream(FILE *, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) The pix are stored in the file as png.
''' If the png library is not linked, this will fail.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for "wb"</param>
'''  <param name="pixa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaWriteStream(
				ByVal fp as FILE, 
				ByVal pixa as Pixa) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaWriteStream( fp.Pointer, pixa.Pointer)

	Return _Result
End Function

' SRC\pixabasic.c (2768, 1)
' pixaWriteMem()
' pixaWriteMem(l_uint8 **, size_t *, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a pixa in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized pixa</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="pixa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal pixa as Pixa) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaWriteMem( pdataPTR, psize, pixa.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pixabasic.c (2821, 1)
' pixaReadBoth()
' pixaReadBoth(const char *) as PIXA *
'''  <summary>
''' Notes
''' (1) This reads serialized files of either a pixa or a pixacomp,
''' and returns a pixa in memory.  It requires png and jpeg libraries.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>pixa, or NULL on error</returns>
Public Shared Function pixaReadBoth(
				ByVal filename as String) as Pixa

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaReadBoth( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixabasic.c (2878, 1)
' pixaaReadFromFiles()
' pixaaReadFromFiles(const char *, const char *, l_int32, l_int32) as PIXAA *
'''  <summary>
''' Notes
''' (1) The files must be serialized pixa files (e.g., .pa)
''' If some files cannot be read, warnings are issued.
''' (2) Use %substr to filter filenames in the directory.  If
''' %substr == NULL, this takes all files.
''' (3) After filtering, use %first and %nfiles to select
''' a contiguous set of files, that have been lexically
''' sorted in increasing order.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirname">[in] - directory</param>
'''  <param name="substr">[in][optional] - substring filter on filenames; can be NULL</param>
'''  <param name="first">[in] - 0-based</param>
'''  <param name="nfiles">[in] - use 0 for everything from %first to the end</param>
'''   <returns>paa, or NULL on error or if no pixa files are found.</returns>
Public Shared Function pixaaReadFromFiles(
				ByVal dirname as String, 
				ByVal substr as String, 
				ByVal first as Integer, 
				ByVal nfiles as Integer) as Pixaa

	If IsNothing (dirname) then Throw New ArgumentNullException  ("dirname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaReadFromFiles( dirname, substr, first, nfiles)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixaa(_Result)
End Function

' SRC\pixabasic.c (2928, 1)
' pixaaRead()
' pixaaRead(const char *) as PIXAA *
'''  <summary>
''' Notes
''' (1) The pix are stored in the file as png.
''' If the png library is not linked, this will fail.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>paa, or NULL on error</returns>
Public Shared Function pixaaRead(
				ByVal filename as String) as Pixaa

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixaa(_Result)
End Function

' SRC\pixabasic.c (2965, 1)
' pixaaReadStream()
' pixaaReadStream(FILE *) as PIXAA *
'''  <summary>
''' Notes
''' (1) The pix are stored in the file as png.
''' If the png library is not linked, this will fail.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>paa, or NULL on error</returns>
Public Shared Function pixaaReadStream(
				ByVal fp as FILE) as Pixaa

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixaa(_Result)
End Function

' SRC\pixabasic.c (3023, 1)
' pixaaReadMem()
' pixaaReadMem(const l_uint8 *, size_t) as PIXAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - of serialized pixaa</param>
'''  <param name="size">[in] - of data in bytes</param>
'''   <returns>paa, or NULL on error</returns>
Public Shared Function pixaaReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as Pixaa

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixaa(_Result)
End Function

' SRC\pixabasic.c (3057, 1)
' pixaaWrite()
' pixaaWrite(const char *, PIXAA *) as l_ok
'''  <summary>
''' Notes
''' (1) The pix are stored in the file as png.
''' If the png library is not linked, this will fail.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="paa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaaWrite(
				ByVal filename as String, 
				ByVal paa as Pixaa) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaWrite( filename, paa.Pointer)

	Return _Result
End Function

' SRC\pixabasic.c (3098, 1)
' pixaaWriteStream()
' pixaaWriteStream(FILE *, PIXAA *) as l_ok
'''  <summary>
''' Notes
''' (1) The pix are stored in the file as png.
''' If the png library is not linked, this will fail.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for "wb"</param>
'''  <param name="paa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaaWriteStream(
				ByVal fp as FILE, 
				ByVal paa as Pixaa) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaWriteStream( fp.Pointer, paa.Pointer)

	Return _Result
End Function

' SRC\pixabasic.c (3144, 1)
' pixaaWriteMem()
' pixaaWriteMem(l_uint8 **, size_t *, PIXAA *) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a pixaa in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized pixaa</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="paa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaaWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal paa as Pixaa) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaWriteMem( pdataPTR, psize, paa.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

#End Region
#Region "SRC\pixacc.c"
' SRC\pixacc.c (90, 1)
' pixaccCreate()
' pixaccCreate(l_int32, l_int32, l_int32) as PIXACC *
'''  <summary>
''' Notes
''' (1) Use %negflag = 1 for safety if any negative numbers are going
''' to be used in the chain of operations.  Negative numbers
''' arise, e.g., by subtracting a pix, or by adding a pix
''' that has been pre-multiplied by a negative number.
''' (2) Initializes the internal 32 bpp pix, similarly to the
''' initialization in pixInitAccumulate().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="w">[in] - of 32 bpp internal Pix</param>
'''  <param name="h">[in] - of 32 bpp internal Pix</param>
'''  <param name="negflag">[in] - 0 if only positive numbers are involved; 1 if there will be negative numbers</param>
'''   <returns>pixacc, or NULL on error</returns>
Public Shared Function pixaccCreate(
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal negflag as Integer) as Pixacc



	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaccCreate( w, h, negflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixacc(_Result)
End Function

' SRC\pixacc.c (131, 1)
' pixaccCreateFromPix()
' pixaccCreateFromPix(PIX *, l_int32) as PIXACC *
'''  <summary>
''' Notes
''' (1) See pixaccCreate()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="negflag">[in] - 0 if only positive numbers are involved; 1 if there will be negative numbers</param>
'''   <returns>pixacc, or NULL on error</returns>
Public Shared Function pixaccCreateFromPix(
				ByVal pix as Pix, 
				ByVal negflag as Integer) as Pixacc

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaccCreateFromPix( pix.Pointer, negflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixacc(_Result)
End Function

' SRC\pixacc.c (160, 1)
' pixaccDestroy()
' pixaccDestroy(PIXACC **) as void
'''  <summary>
''' Notes
''' (1) Always nulls the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ppixacc">[in,out] - to be nulled</param>
Public Shared Sub pixaccDestroy(
				ByRef ppixacc as Pixacc)


	Dim ppixaccPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixacc) Then ppixaccPTR = ppixacc.Pointer

	LeptonicaSharp.Natives.pixaccDestroy( ppixaccPTR)
	if ppixaccPTR <> IntPtr.Zero then ppixacc = new Pixacc(ppixaccPTR)

End Sub

' SRC\pixacc.c (192, 1)
' pixaccFinal()
' pixaccFinal(PIXACC *, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixacc">[in] - </param>
'''  <param name="outdepth">[in] - 8, 16 or 32 bpp</param>
'''   <returns>pixd 8 , 16 or 32 bpp, or NULL on error</returns>
Public Shared Function pixaccFinal(
				ByVal pixacc as Pixacc, 
				ByVal outdepth as Integer) as Pix

	If IsNothing (pixacc) then Throw New ArgumentNullException  ("pixacc cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaccFinal( pixacc.Pointer, outdepth)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixacc.c (215, 1)
' pixaccGetPix()
' pixaccGetPix(PIXACC *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixacc">[in] - </param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixaccGetPix(
				ByVal pixacc as Pixacc) as Pix

	If IsNothing (pixacc) then Throw New ArgumentNullException  ("pixacc cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaccGetPix( pixacc.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixacc.c (232, 1)
' pixaccGetOffset()
' pixaccGetOffset(PIXACC *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixacc">[in] - </param>
'''   <returns>offset, or -1 on error</returns>
Public Shared Function pixaccGetOffset(
				ByVal pixacc as Pixacc) as Integer

	If IsNothing (pixacc) then Throw New ArgumentNullException  ("pixacc cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaccGetOffset( pixacc.Pointer)

	Return _Result
End Function

' SRC\pixacc.c (253, 1)
' pixaccAdd()
' pixaccAdd(PIXACC *, PIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixacc">[in] - </param>
'''  <param name="pix">[in] - to be added</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaccAdd(
				ByVal pixacc as Pixacc, 
				ByVal pix as Pix) as Integer

	If IsNothing (pixacc) then Throw New ArgumentNullException  ("pixacc cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaccAdd( pixacc.Pointer, pix.Pointer)

	Return _Result
End Function

' SRC\pixacc.c (275, 1)
' pixaccSubtract()
' pixaccSubtract(PIXACC *, PIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixacc">[in] - </param>
'''  <param name="pix">[in] - to be subtracted</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaccSubtract(
				ByVal pixacc as Pixacc, 
				ByVal pix as Pix) as Integer

	If IsNothing (pixacc) then Throw New ArgumentNullException  ("pixacc cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaccSubtract( pixacc.Pointer, pix.Pointer)

	Return _Result
End Function

' SRC\pixacc.c (297, 1)
' pixaccMultConst()
' pixaccMultConst(PIXACC *, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixacc">[in] - </param>
'''  <param name="factor">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaccMultConst(
				ByVal pixacc as Pixacc, 
				ByVal factor as Single) as Integer

	If IsNothing (pixacc) then Throw New ArgumentNullException  ("pixacc cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaccMultConst( pixacc.Pointer, factor)

	Return _Result
End Function

' SRC\pixacc.c (325, 1)
' pixaccMultConstAccumulate()
' pixaccMultConstAccumulate(PIXACC *, PIX *, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This creates a temp pix that is %pix multiplied by the
''' constant %factor.  It then adds that into %pixacc.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixacc">[in] - </param>
'''  <param name="pix">[in] - </param>
'''  <param name="factor">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaccMultConstAccumulate(
				ByVal pixacc as Pixacc, 
				ByVal pix as Pix, 
				ByVal factor as Single) as Integer

	If IsNothing (pixacc) then Throw New ArgumentNullException  ("pixacc cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaccMultConstAccumulate( pixacc.Pointer, pix.Pointer, factor)

	Return _Result
End Function

#End Region
#Region "SRC\pixafunc1.c"
' SRC\pixafunc1.c (212, 1)
' pixSelectBySize()
' pixSelectBySize(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32 *) as PIX *
'''  <summary>
''' Notes
''' (1) The args specify constraints on the size of the
''' components that are kept.
''' (2) If unchanged, returns a copy of pixs.  Otherwise,
''' returns a new pix with the filtered components.
''' (3) If the selection type is L_SELECT_WIDTH, the input
''' height is ignored, and v.v.
''' (4) To keep small components, use relation = L_SELECT_IF_LT or
''' L_SELECT_IF_LTE.
''' To keep large components, use relation = L_SELECT_IF_GT or
''' L_SELECT_IF_GTE.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="width">[in] - threshold dimensions</param>
'''  <param name="height">[in] - threshold dimensions</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="type">[in] - L_SELECT_WIDTH, L_SELECT_HEIGHT, L_SELECT_IF_EITHER, L_SELECT_IF_BOTH</param>
'''  <param name="relation">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 otherwise</param>
'''   <returns>filtered pixd, or NULL on error</returns>
Public Shared Function pixSelectBySize(
				ByVal pixs as Pix, 
				ByVal width as Integer, 
				ByVal height as Integer, 
				ByVal connectivity as Integer, 
				ByVal type as Enumerations.L_SELECT, 
				ByVal relation as Enumerations.L_SELECT_IF, 
				ByRef pchanged as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSelectBySize( pixs.Pointer, width, height, connectivity, type, relation, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc1.c (299, 1)
' pixaSelectBySize()
' pixaSelectBySize(PIXA *, l_int32, l_int32, l_int32, l_int32, l_int32 *) as PIXA *
'''  <summary>
''' Notes
''' (1) The args specify constraints on the size of the
''' components that are kept.
''' (2) Uses pix and box clones in the new pixa.
''' (3) If the selection type is L_SELECT_WIDTH, the input
''' height is ignored, and v.v.
''' (4) To keep small components, use relation = L_SELECT_IF_LT or
''' L_SELECT_IF_LTE.
''' To keep large components, use relation = L_SELECT_IF_GT or
''' L_SELECT_IF_GTE.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="width">[in] - threshold dimensions</param>
'''  <param name="height">[in] - threshold dimensions</param>
'''  <param name="type">[in] - L_SELECT_WIDTH, L_SELECT_HEIGHT, L_SELECT_IF_EITHER, L_SELECT_IF_BOTH</param>
'''  <param name="relation">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 otherwise</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaSelectBySize(
				ByVal pixas as Pixa, 
				ByVal width as Integer, 
				ByVal height as Integer, 
				ByVal type as Enumerations.L_SELECT, 
				ByVal relation as Enumerations.L_SELECT_IF, 
				ByRef pchanged as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaSelectBySize( pixas.Pointer, width, height, type, relation, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (355, 1)
' pixaMakeSizeIndicator()
' pixaMakeSizeIndicator(PIXA *, l_int32, l_int32, l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The args specify constraints on the size of the
''' components that are kept.
''' (2) If the selection type is L_SELECT_WIDTH, the input
''' height is ignored, and v.v.
''' (3) To keep small components, use relation = L_SELECT_IF_LT or
''' L_SELECT_IF_LTE.
''' To keep large components, use relation = L_SELECT_IF_GT or
''' L_SELECT_IF_GTE.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="width">[in] - threshold dimensions</param>
'''  <param name="height">[in] - threshold dimensions</param>
'''  <param name="type">[in] - L_SELECT_WIDTH, L_SELECT_HEIGHT, L_SELECT_IF_EITHER, L_SELECT_IF_BOTH</param>
'''  <param name="relation">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''   <returns>na indicator array, or NULL on error</returns>
Public Shared Function pixaMakeSizeIndicator(
				ByVal pixa as Pixa, 
				ByVal width as Integer, 
				ByVal height as Integer, 
				ByVal type as Enumerations.L_SELECT, 
				ByVal relation as Enumerations.L_SELECT_IF) as Numa

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaMakeSizeIndicator( pixa.Pointer, width, height, type, relation)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\pixafunc1.c (446, 1)
' pixSelectByPerimToAreaRatio()
' pixSelectByPerimToAreaRatio(PIX *, l_float32, l_int32, l_int32, l_int32 *) as PIX *
'''  <summary>
''' Notes
''' (1) The args specify constraints on the size of the
''' components that are kept.
''' (2) If unchanged, returns a copy of pixs.  Otherwise,
''' returns a new pix with the filtered components.
''' (3) This filters "thick" components, where a thick component
''' is defined to have a ratio of boundary to interior pixels
''' that is smaller than a given threshold value.
''' (4) Use L_SELECT_IF_LT or L_SELECT_IF_LTE to save the thicker
''' components, and L_SELECT_IF_GT or L_SELECT_IF_GTE to remove them.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="thresh">[in] - threshold ratio of fg boundary to fg pixels</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="type">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 if clone returned</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixSelectByPerimToAreaRatio(
				ByVal pixs as Pix, 
				ByVal thresh as Single, 
				ByVal connectivity as Integer, 
				ByVal type as Enumerations.L_SELECT_IF, 
				ByRef pchanged as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSelectByPerimToAreaRatio( pixs.Pointer, thresh, connectivity, type, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc1.c (520, 1)
' pixaSelectByPerimToAreaRatio()
' pixaSelectByPerimToAreaRatio(PIXA *, l_float32, l_int32, l_int32 *) as PIXA *
'''  <summary>
''' Notes
''' (1) Returns a pixa clone if no components are removed.
''' (2) Uses pix and box clones in the new pixa.
''' (3) See pixSelectByPerimToAreaRatio().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="thresh">[in] - threshold ratio of fg boundary to fg pixels</param>
'''  <param name="type">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 if clone returned</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaSelectByPerimToAreaRatio(
				ByVal pixas as Pixa, 
				ByVal thresh as Single, 
				ByVal type as Enumerations.L_SELECT_IF, 
				ByRef pchanged as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaSelectByPerimToAreaRatio( pixas.Pointer, thresh, type, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (577, 1)
' pixSelectByPerimSizeRatio()
' pixSelectByPerimSizeRatio(PIX *, l_float32, l_int32, l_int32, l_int32 *) as PIX *
'''  <summary>
''' Notes
''' (1) The args specify constraints on the size of the
''' components that are kept.
''' (2) If unchanged, returns a copy of pixs.  Otherwise,
''' returns a new pix with the filtered components.
''' (3) This filters components with smooth vs. dendritic shape, using
''' the ratio of the fg boundary pixels to the circumference of
''' the bounding box, and comparing it to a threshold value.
''' (4) Use L_SELECT_IF_LT or L_SELECT_IF_LTE to save the smooth
''' boundary components, and L_SELECT_IF_GT or L_SELECT_IF_GTE
''' to remove them.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="thresh">[in] - threshold ratio of fg boundary to fg pixels</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="type">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 if clone returned</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixSelectByPerimSizeRatio(
				ByVal pixs as Pix, 
				ByVal thresh as Single, 
				ByVal connectivity as Integer, 
				ByVal type as Enumerations.L_SELECT_IF, 
				ByRef pchanged as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSelectByPerimSizeRatio( pixs.Pointer, thresh, connectivity, type, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc1.c (651, 1)
' pixaSelectByPerimSizeRatio()
' pixaSelectByPerimSizeRatio(PIXA *, l_float32, l_int32, l_int32 *) as PIXA *
'''  <summary>
''' Notes
''' (1) Returns a pixa clone if no components are removed.
''' (2) Uses pix and box clones in the new pixa.
''' (3) See pixSelectByPerimSizeRatio().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="thresh">[in] - threshold ratio of fg boundary to b.b. circumference</param>
'''  <param name="type">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 if clone returned</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaSelectByPerimSizeRatio(
				ByVal pixas as Pixa, 
				ByVal thresh as Single, 
				ByVal type as Enumerations.L_SELECT_IF, 
				ByRef pchanged as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaSelectByPerimSizeRatio( pixas.Pointer, thresh, type, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (707, 1)
' pixSelectByAreaFraction()
' pixSelectByAreaFraction(PIX *, l_float32, l_int32, l_int32, l_int32 *) as PIX *
'''  <summary>
''' Notes
''' (1) The args specify constraints on the amount of foreground
''' coverage of the components that are kept.
''' (2) If unchanged, returns a copy of pixs.  Otherwise,
''' returns a new pix with the filtered components.
''' (3) This filters components based on the fraction of fg pixels
''' of the component in its bounding box.
''' (4) Use L_SELECT_IF_LT or L_SELECT_IF_LTE to save components
''' with less than the threshold fraction of foreground, and
''' L_SELECT_IF_GT or L_SELECT_IF_GTE to remove them.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="thresh">[in] - threshold ratio of fg pixels to (w  h)</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="type">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 if clone returned</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixSelectByAreaFraction(
				ByVal pixs as Pix, 
				ByVal thresh as Single, 
				ByVal connectivity as Integer, 
				ByVal type as Enumerations.L_SELECT_IF, 
				ByRef pchanged as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSelectByAreaFraction( pixs.Pointer, thresh, connectivity, type, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc1.c (785, 1)
' pixaSelectByAreaFraction()
' pixaSelectByAreaFraction(PIXA *, l_float32, l_int32, l_int32 *) as PIXA *
'''  <summary>
''' Notes
''' (1) Returns a pixa clone if no components are removed.
''' (2) Uses pix and box clones in the new pixa.
''' (3) This filters components based on the fraction of fg pixels
''' of the component in its bounding box.
''' (4) Use L_SELECT_IF_LT or L_SELECT_IF_LTE to save components
''' with less than the threshold fraction of foreground, and
''' L_SELECT_IF_GT or L_SELECT_IF_GTE to remove them.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="thresh">[in] - threshold ratio of fg pixels to (w  h)</param>
'''  <param name="type">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 if clone returned</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaSelectByAreaFraction(
				ByVal pixas as Pixa, 
				ByVal thresh as Single, 
				ByVal type as Enumerations.L_SELECT_IF, 
				ByRef pchanged as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaSelectByAreaFraction( pixas.Pointer, thresh, type, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (840, 1)
' pixSelectByWidthHeightRatio()
' pixSelectByWidthHeightRatio(PIX *, l_float32, l_int32, l_int32, l_int32 *) as PIX *
'''  <summary>
''' Notes
''' (1) The args specify constraints on the width-to-height ratio
''' for components that are kept.
''' (2) If unchanged, returns a copy of pixs.  Otherwise,
''' returns a new pix with the filtered components.
''' (3) This filters components based on the width-to-height ratios.
''' (4) Use L_SELECT_IF_LT or L_SELECT_IF_LTE to save components
''' with less than the threshold ratio, and
''' L_SELECT_IF_GT or L_SELECT_IF_GTE to remove them.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="thresh">[in] - threshold ratio of width/height</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="type">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 if clone returned</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixSelectByWidthHeightRatio(
				ByVal pixs as Pix, 
				ByVal thresh as Single, 
				ByVal connectivity as Integer, 
				ByVal type as Enumerations.L_SELECT_IF, 
				ByRef pchanged as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSelectByWidthHeightRatio( pixs.Pointer, thresh, connectivity, type, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc1.c (918, 1)
' pixaSelectByWidthHeightRatio()
' pixaSelectByWidthHeightRatio(PIXA *, l_float32, l_int32, l_int32 *) as PIXA *
'''  <summary>
''' Notes
''' (1) Returns a pixa clone if no components are removed.
''' (2) Uses pix and box clones in the new pixa.
''' (3) This filters components based on the width-to-height ratio
''' of each pix.
''' (4) Use L_SELECT_IF_LT or L_SELECT_IF_LTE to save components
''' with less than the threshold ratio, and
''' L_SELECT_IF_GT or L_SELECT_IF_GTE to remove them.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="thresh">[in] - threshold ratio of width/height</param>
'''  <param name="type">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 if clone returned</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaSelectByWidthHeightRatio(
				ByVal pixas as Pixa, 
				ByVal thresh as Single, 
				ByVal type as Enumerations.L_SELECT_IF, 
				ByRef pchanged as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaSelectByWidthHeightRatio( pixas.Pointer, thresh, type, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (968, 1)
' pixaSelectByNumConnComp()
' pixaSelectByNumConnComp(PIXA *, l_int32, l_int32, l_int32, l_int32 *) as PIXA *
'''  <summary>
''' Notes
''' (1) Returns a pixa clone if no components are removed.
''' (2) Uses pix and box clones in the new pixa.
''' (3) This filters by the number of connected components in
''' a given range.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="nmin">[in] - minimum number of components</param>
'''  <param name="nmax">[in] - maximum number of components</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 if clone returned</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaSelectByNumConnComp(
				ByVal pixas as Pixa, 
				ByVal nmin as Integer, 
				ByVal nmax as Integer, 
				ByVal connectivity as Integer, 
				ByRef pchanged as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaSelectByNumConnComp( pixas.Pointer, nmin, nmax, connectivity, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (1027, 1)
' pixaSelectWithIndicator()
' pixaSelectWithIndicator(PIXA *, NUMA *, l_int32 *) as PIXA *
'''  <summary>
''' Notes
''' (1) Returns a pixa clone if no components are removed.
''' (2) Uses pix and box clones in the new pixa.
''' (3) The indicator numa has values 0 (ignore) and 1 (accept).
''' (4) If the source boxa is not fully populated, it is left
''' empty in the dest pixa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="na">[in] - indicator numa</param>
'''  <param name="pchanged">[out][optional] - 1 if changed; 0 if clone returned</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaSelectWithIndicator(
				ByVal pixas as Pixa, 
				ByVal na as Numa, 
				ByRef pchanged as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaSelectWithIndicator( pixas.Pointer, na.Pointer, pchanged)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (1087, 1)
' pixRemoveWithIndicator()
' pixRemoveWithIndicator(PIX *, PIXA *, NUMA *) as l_ok
'''  <summary>
''' Notes
''' (1) This complements pixAddWithIndicator().   Here, the selected
''' components are set subtracted from pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp pix from which components are removed; in-place</param>
'''  <param name="pixa">[in] - of connected components in pixs</param>
'''  <param name="na">[in] - numa indicator remove components corresponding to 1s</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRemoveWithIndicator(
				ByVal pixs as Pix, 
				ByVal pixa as Pixa, 
				ByVal na as Numa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRemoveWithIndicator( pixs.Pointer, pixa.Pointer, na.Pointer)

	Return _Result
End Function

' SRC\pixafunc1.c (1140, 1)
' pixAddWithIndicator()
' pixAddWithIndicator(PIX *, PIXA *, NUMA *) as l_ok
'''  <summary>
''' Notes
''' (1) This complements pixRemoveWithIndicator().   Here, the selected
''' components are added to pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp pix from which components are added; in-place</param>
'''  <param name="pixa">[in] - of connected components, some of which will be put into pixs</param>
'''  <param name="na">[in] - numa indicator add components corresponding to 1s</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixAddWithIndicator(
				ByVal pixs as Pix, 
				ByVal pixa as Pixa, 
				ByVal na as Numa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixAddWithIndicator( pixs.Pointer, pixa.Pointer, na.Pointer)

	Return _Result
End Function

' SRC\pixafunc1.c (1193, 1)
' pixaSelectWithString()
' pixaSelectWithString(PIXA *, const char *, l_int32 *) as PIXA *
'''  <summary>
''' Notes
''' (1) Returns a pixa with copies of selected pix.
''' (2) Associated boxes are also copied, if fully populated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="str">[in] - string of indices into pixa, giving the pix to be selected</param>
'''  <param name="perror">[out][optional] - 1 if any indices are invalid; 0 if all indices are valid</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaSelectWithString(
				ByVal pixas as Pixa, 
				ByVal str as String, 
				ByRef perror as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (str) then Throw New ArgumentNullException  ("str cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaSelectWithString( pixas.Pointer, str, perror)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (1264, 1)
' pixaRenderComponent()
' pixaRenderComponent(PIX *, PIXA *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If pixs is null, this generates an empty pix of a size determined
''' by union of the component bounding boxes, and including the origin.
''' (2) The selected component is blitted into pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in][optional] - 1 bpp pix</param>
'''  <param name="pixa">[in] - of 1 bpp connected components, one of which will be rendered in pixs, with its origin determined by the associated box.</param>
'''  <param name="index">[in] - of component to be rendered</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixaRenderComponent(
				ByVal pixs as Pix, 
				ByVal pixa as Pixa, 
				ByVal index as Integer) as Pix

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")

	Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaRenderComponent( pixsPTR, pixa.Pointer, index)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc1.c (1334, 1)
' pixaSort()
' pixaSort(PIXA *, l_int32, l_int32, NUMA **, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) This sorts based on the data in the boxa.  If the boxa
''' count is not the same as the pixa count, this returns an error.
''' (2) If the boxa is empty, it makes one corresponding to the
''' dimensions of each pix, which allows meaningful sorting on
''' all types except x and y.
''' (3) The copyflag refers to the pix and box copies that are
''' inserted into the sorted pixa.  These are either L_COPY
''' or L_CLONE.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="sorttype">[in] - L_SORT_BY_X, L_SORT_BY_Y, L_SORT_BY_WIDTH, L_SORT_BY_HEIGHT, L_SORT_BY_MIN_DIMENSION, L_SORT_BY_MAX_DIMENSION, L_SORT_BY_PERIMETER, L_SORT_BY_AREA, L_SORT_BY_ASPECT_RATIO</param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING, L_SORT_DECREASING</param>
'''  <param name="pnaindex">[out][optional] - index of sorted order into original array</param>
'''  <param name="copyflag">[in] - L_COPY, L_CLONE</param>
'''   <returns>pixad sorted version of pixas, or NULL on error</returns>
Public Shared Function pixaSort(
				ByVal pixas as Pixa, 
				ByVal sorttype as Enumerations.L_SORT_BY, 
				ByVal sortorder as Enumerations.L_SORT_CREASING, 
				ByRef pnaindex as Numa, 
				ByVal copyflag as Enumerations.L_access_storage) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")

Dim pnaindexPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaindex) Then pnaindexPTR = pnaindex.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaSort( pixas.Pointer, sorttype, sortorder, pnaindexPTR, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnaindexPTR <> IntPtr.Zero then pnaindex = new Numa(pnaindexPTR)

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (1474, 1)
' pixaBinSort()
' pixaBinSort(PIXA *, l_int32, l_int32, NUMA **, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) This sorts based on the data in the boxa.  If the boxa
''' count is not the same as the pixa count, this returns an error.
''' (2) The copyflag refers to the pix and box copies that are
''' inserted into the sorted pixa.  These are either L_COPY
''' or L_CLONE.
''' (3) For a large number of boxes (say, greater than 1000), this
''' O(n) binsort is much faster than the O(nlogn) shellsort.
''' For 5000 components, this is over 20x faster than boxaSort().
''' (4) Consequently, pixaSort() calls this function if it will
''' likely go much faster.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="sorttype">[in] - L_SORT_BY_X, L_SORT_BY_Y, L_SORT_BY_WIDTH, L_SORT_BY_HEIGHT, L_SORT_BY_PERIMETER</param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING, L_SORT_DECREASING</param>
'''  <param name="pnaindex">[out][optional] - index of sorted order into original array</param>
'''  <param name="copyflag">[in] - L_COPY, L_CLONE</param>
'''   <returns>pixad sorted version of pixas, or NULL on error</returns>
Public Shared Function pixaBinSort(
				ByVal pixas as Pixa, 
				ByVal sorttype as Enumerations.L_SORT_BY, 
				ByVal sortorder as Enumerations.L_SORT_CREASING, 
				ByRef pnaindex as Numa, 
				ByVal copyflag as Enumerations.L_access_storage) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")

Dim pnaindexPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaindex) Then pnaindexPTR = pnaindex.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaBinSort( pixas.Pointer, sorttype, sortorder, pnaindexPTR, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnaindexPTR <> IntPtr.Zero then pnaindex = new Numa(pnaindexPTR)

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (1562, 1)
' pixaSortByIndex()
' pixaSortByIndex(PIXA *, NUMA *, l_int32) as PIXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="naindex">[in] - na that maps from the new pixa to the input pixa</param>
'''  <param name="copyflag">[in] - L_COPY, L_CLONE</param>
'''   <returns>pixad sorted, or NULL on error</returns>
Public Shared Function pixaSortByIndex(
				ByVal pixas as Pixa, 
				ByVal naindex as Numa, 
				ByVal copyflag as Enumerations.L_access_storage) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (naindex) then Throw New ArgumentNullException  ("naindex cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaSortByIndex( pixas.Pointer, naindex.Pointer, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (1603, 1)
' pixaSort2dByIndex()
' pixaSort2dByIndex(PIXA *, NUMAA *, l_int32) as PIXAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="naa">[in] - numaa that maps from the new pixaa to the input pixas</param>
'''  <param name="copyflag">[in] - L_CLONE or L_COPY</param>
'''   <returns>paa sorted, or NULL on error</returns>
Public Shared Function pixaSort2dByIndex(
				ByVal pixas as Pixa, 
				ByVal naa as Numaa, 
				ByVal copyflag as Enumerations.L_access_storage) as Pixaa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaSort2dByIndex( pixas.Pointer, naa.Pointer, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixaa(_Result)
End Function

' SRC\pixafunc1.c (1668, 1)
' pixaSelectRange()
' pixaSelectRange(PIXA *, l_int32, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) The copyflag specifies what we do with each pix from pixas.
''' Specifically, L_CLONE inserts a clone into pixad of each
''' selected pix from pixas.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="first">[in] - use 0 to select from the beginning</param>
'''  <param name="last">[in] - use 0 to select to the end</param>
'''  <param name="copyflag">[in] - L_COPY, L_CLONE</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaSelectRange(
				ByVal pixas as Pixa, 
				ByVal first as Integer, 
				ByVal last as Integer, 
				ByVal copyflag as Enumerations.L_access_storage) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaSelectRange( pixas.Pointer, first, last, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (1718, 1)
' pixaaSelectRange()
' pixaaSelectRange(PIXAA *, l_int32, l_int32, l_int32) as PIXAA *
'''  <summary>
''' Notes
''' (1) The copyflag specifies what we do with each pixa from paas.
''' Specifically, L_CLONE inserts a clone into paad of each
''' selected pixa from paas.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paas">[in] - </param>
'''  <param name="first">[in] - use 0 to select from the beginning</param>
'''  <param name="last">[in] - use 0 to select to the end</param>
'''  <param name="copyflag">[in] - L_COPY, L_CLONE</param>
'''   <returns>paad, or NULL on error</returns>
Public Shared Function pixaaSelectRange(
				ByVal paas as Pixaa, 
				ByVal first as Integer, 
				ByVal last as Integer, 
				ByVal copyflag as Enumerations.L_access_storage) as Pixaa

	If IsNothing (paas) then Throw New ArgumentNullException  ("paas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaSelectRange( paas.Pointer, first, last, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixaa(_Result)
End Function

' SRC\pixafunc1.c (1774, 1)
' pixaaScaleToSize()
' pixaaScaleToSize(PIXAA *, l_int32, l_int32) as PIXAA *
'''  <summary>
''' Notes
''' (1) This guarantees that each output scaled image has the
''' dimension(s) you specify.
''' ~ To specify the width with isotropic scaling, set %hd = 0.
''' ~ To specify the height with isotropic scaling, set %wd = 0.
''' ~ If both %wd and %hd are specified, the image is scaled
''' (in general, anisotropically) to that size.
''' ~ It is an error to set both %wd and %hd to 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paas">[in] - </param>
'''  <param name="wd">[in] - target width; use 0 if using height as target</param>
'''  <param name="hd">[in] - target height; use 0 if using width as target</param>
'''   <returns>paad, or NULL on error</returns>
Public Shared Function pixaaScaleToSize(
				ByVal paas as Pixaa, 
				ByVal wd as Integer, 
				ByVal hd as Integer) as Pixaa

	If IsNothing (paas) then Throw New ArgumentNullException  ("paas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaScaleToSize( paas.Pointer, wd, hd)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixaa(_Result)
End Function

' SRC\pixafunc1.c (1823, 1)
' pixaaScaleToSizeVar()
' pixaaScaleToSizeVar(PIXAA *, NUMA *, NUMA *) as PIXAA *
'''  <summary>
''' Notes
''' (1) This guarantees that the scaled images in each pixa have the
''' dimension(s) you specify in the numas.
''' ~ To specify the width with isotropic scaling, set %nahd = NULL.
''' ~ To specify the height with isotropic scaling, set %nawd = NULL.
''' ~ If both %nawd and %nahd are specified, the image is scaled
''' (in general, anisotropically) to that size.
''' ~ It is an error to set both %nawd and %nahd to NULL.
''' (2) If either nawd and/or nahd is defined, it must have the same
''' count as the number of pixa in paas.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paas">[in] - </param>
'''  <param name="nawd">[in][optional] - target widths; use NULL if using height</param>
'''  <param name="nahd">[in][optional] - target height; use NULL if using width</param>
'''   <returns>paad, or NULL on error</returns>
Public Shared Function pixaaScaleToSizeVar(
				ByVal paas as Pixaa, 
				ByVal nawd as Numa, 
				ByVal nahd as Numa) as Pixaa

	If IsNothing (paas) then Throw New ArgumentNullException  ("paas cannot be Nothing")

	Dim nawdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nawd) Then nawdPTR = nawd.Pointer
	Dim nahdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nahd) Then nahdPTR = nahd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaScaleToSizeVar( paas.Pointer, nawdPTR, nahdPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixaa(_Result)
End Function

' SRC\pixafunc1.c (1871, 1)
' pixaScaleToSize()
' pixaScaleToSize(PIXA *, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) See pixaaScaleToSize()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="wd">[in] - target width; use 0 if using height as target</param>
'''  <param name="hd">[in] - target height; use 0 if using width as target</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaScaleToSize(
				ByVal pixas as Pixa, 
				ByVal wd as Integer, 
				ByVal hd as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaScaleToSize( pixas.Pointer, wd, hd)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (1916, 1)
' pixaScaleToSizeRel()
' pixaScaleToSizeRel(PIXA *, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) If a requested change in a pix is not possible because
''' either the requested width or height is LT= 0, issue a
''' warning and return a copy.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="delw">[in] - change in width, in pixels; 0 means no change</param>
'''  <param name="delh">[in] - change in height, in pixels; 0 means no change return  pixad, or NULL on error</param>
'''   <returns></returns>
Public Shared Function pixaScaleToSizeRel(
				ByVal pixas as Pixa, 
				ByVal delw as Integer, 
				ByVal delh as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaScaleToSizeRel( pixas.Pointer, delw, delh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (1960, 1)
' pixaScale()
' pixaScale(PIXA *, l_float32, l_float32) as PIXA *
'''  <summary>
''' Notes
''' (1) If pixas has a full boxes, it is scaled as well.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="scalex">[in] - </param>
'''  <param name="scaley">[in] - </param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaScale(
				ByVal pixas as Pixa, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaScale( pixas.Pointer, scalex, scaley)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (2011, 1)
' pixaScaleBySampling()
' pixaScaleBySampling(PIXA *, l_float32, l_float32) as PIXA *
'''  <summary>
''' Notes
''' (1) If pixas has a full boxes, it is scaled as well.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="scalex">[in] - </param>
'''  <param name="scaley">[in] - </param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaScaleBySampling(
				ByVal pixas as Pixa, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaScaleBySampling( pixas.Pointer, scalex, scaley)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (2076, 1)
' pixaRotate()
' pixaRotate(PIXA *, l_float32, l_int32, l_int32, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) Each pix is rotated about its center.  See pixRotate() for details.
''' (2) The boxa array is copied.  Why is it not rotated?
''' If a boxa exists, the array of boxes is in 1-to-1
''' correspondence with the array of pix, and each box typically
''' represents the location of the pix relative to an image from
''' which it has been extracted.  Like the pix, we could rotate
''' each box around its center, and then generate a box that
''' contains all four corners, as is done in boxaRotate(), but
''' this seems unnecessary.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - 1, 2, 4, 8, 32 bpp rgb</param>
'''  <param name="angle">[in] - rotation angle in radians; clockwise is positive</param>
'''  <param name="type">[in] - L_ROTATE_AREA_MAP, L_ROTATE_SHEAR, L_ROTATE_SAMPLING</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''  <param name="width">[in] - original width; use 0 to avoid embedding</param>
'''  <param name="height">[in] - original height; use 0 to avoid embedding</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaRotate(
				ByVal pixas as Pixa, 
				ByVal angle as Single, 
				ByVal type as Enumerations.L_ROTATE, 
				ByVal incolor as Enumerations.L_BRING_IN, 
				ByVal width as Integer, 
				ByVal height as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaRotate( pixas.Pointer, angle, type, incolor, width, height)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (2134, 1)
' pixaRotateOrth()
' pixaRotateOrth(PIXA *, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) Rotates each pix in the pixa.  Rotates and saves the boxes in
''' the boxa if the boxa is full.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="rotation">[in] - 0 = noop, 1 = 90 deg, 2 = 180 deg, 3 = 270 deg; all rotations are clockwise</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaRotateOrth(
				ByVal pixas as Pixa, 
				ByVal rotation as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaRotateOrth( pixas.Pointer, rotation)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (2186, 1)
' pixaTranslate()
' pixaTranslate(PIXA *, l_int32, l_int32, l_int32) as PIXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="hshift">[in] - horizontal shift; hshift GT 0 is to right</param>
'''  <param name="vshift">[in] - vertical shift; vshift GT 0 is down</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixad, or NULL on error.</returns>
Public Shared Function pixaTranslate(
				ByVal pixas as Pixa, 
				ByVal hshift as Integer, 
				ByVal vshift as Integer, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaTranslate( pixas.Pointer, hshift, vshift, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (2260, 1)
' pixaAddBorderGeneral()
' pixaAddBorderGeneral(PIXA *, PIXA *, l_int32, l_int32, l_int32, l_int32, l_uint32) as PIXA *
'''  <summary>
''' Notes
''' (1) For binary images
''' white  val = 0
''' black  val = 1
''' For grayscale images
''' white  val = 2  d - 1
''' black  val = 0
''' For rgb color images
''' white  val = 0xffffff00
''' black  val = 0
''' For colormapped images, use 'index' found this way
''' white pixcmapGetRankIntensity(cmap, 1.0, index);
''' black pixcmapGetRankIntensity(cmap, 0.0, index);
''' (2) For in-place replacement of each pix with a bordered version,
''' use %pixad = %pixas.  To make a new pixa, use %pixad = NULL.
''' (3) In both cases, the boxa has sides adjusted as if it were
''' expanded by the border.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixad">[in]can be null - or equal to pixas</param>
'''  <param name="pixas">[in] - containing pix of all depths; colormap ok</param>
'''  <param name="left">[in] - number of pixels added</param>
'''  <param name="right">[in] - number of pixels added</param>
'''  <param name="top">[in] - number of pixels added</param>
'''  <param name="bot">[in] - number of pixels added</param>
'''  <param name="val">[in] - value of added border pixels</param>
'''   <returns>pixad with border added to each pix, including on error</returns>
Public Shared Function pixaAddBorderGeneral(
				ByVal pixad as Pixa, 
				ByVal pixas as Pixa, 
				ByVal left as Integer, 
				ByVal right as Integer, 
				ByVal top as Integer, 
				ByVal bot as Integer, 
				ByVal val as UInteger) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")

	Dim pixadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixad) Then pixadPTR = pixad.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaAddBorderGeneral( pixadPTR, pixas.Pointer, left, right, top, bot, val)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (2331, 1)
' pixaaFlattenToPixa()
' pixaaFlattenToPixa(PIXAA *, NUMA **, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) This 'flattens' the pixaa to a pixa, taking the pix in
''' order in the first pixa, then the second, etc.
''' (2) If naindex is defined, we generate a Numa that gives, for
''' each pix in the pixaa, the index of the pixa to which it belongs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''  <param name="pnaindex">[out][optional] - the pixa index in the pixaa</param>
'''  <param name="copyflag">[in] - L_COPY or L_CLONE</param>
'''   <returns>pixa, or NULL on error</returns>
Public Shared Function pixaaFlattenToPixa(
				ByVal paa as Pixaa, 
				ByRef pnaindex as Numa, 
				ByVal copyflag as Enumerations.L_access_storage) as Pixa

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")

Dim pnaindexPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaindex) Then pnaindexPTR = pnaindex.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaFlattenToPixa( paa.Pointer, pnaindexPTR, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnaindexPTR <> IntPtr.Zero then pnaindex = new Numa(pnaindexPTR)

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (2386, 1)
' pixaaSizeRange()
' pixaaSizeRange(PIXAA *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''  <param name="pminw">[out][optional] - range of dimensions of all boxes</param>
'''  <param name="pminh">[out][optional] - range of dimensions of all boxes</param>
'''  <param name="pmaxw">[out][optional] - range of dimensions of all boxes</param>
'''  <param name="pmaxh">[out][optional] - range of dimensions of all boxes</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaaSizeRange(
				ByVal paa as Pixaa, 
				ByRef pminw as Integer, 
				ByRef pminh as Integer, 
				ByRef pmaxw as Integer, 
				ByRef pmaxh as Integer) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaaSizeRange( paa.Pointer, pminw, pminh, pmaxw, pmaxh)

	Return _Result
End Function

' SRC\pixafunc1.c (2440, 1)
' pixaSizeRange()
' pixaSizeRange(PIXA *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="pminw">[out][optional] - range of dimensions of pix in the array</param>
'''  <param name="pminh">[out][optional] - range of dimensions of pix in the array</param>
'''  <param name="pmaxw">[out][optional] - range of dimensions of pix in the array</param>
'''  <param name="pmaxh">[out][optional] - range of dimensions of pix in the array</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaSizeRange(
				ByVal pixa as Pixa, 
				ByRef pminw as Integer, 
				ByRef pminh as Integer, 
				ByRef pmaxw as Integer, 
				ByRef pmaxh as Integer) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaSizeRange( pixa.Pointer, pminw, pminh, pmaxw, pmaxh)

	Return _Result
End Function

' SRC\pixafunc1.c (2510, 1)
' pixaClipToPix()
' pixaClipToPix(PIXA *, PIX *) as PIXA *
'''  <summary>
''' Notes
''' (1) This is intended for use in situations where pixas
''' was originally generated from the input pixs.
''' (2) Returns a pixad where each pix in pixas is ANDed
''' with its associated region of the input pixs.  This
''' region is specified by the the box that is associated
''' with the pix.
''' (3) In a typical application of this function, pixas has
''' a set of region masks, so this generates a pixa of
''' the parts of pixs that correspond to each region
''' mask component, along with the bounding box for
''' the region.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="pixs">[in] - </param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaClipToPix(
				ByVal pixas as Pixa, 
				ByVal pixs as Pix) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaClipToPix( pixas.Pointer, pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (2559, 1)
' pixaClipToForeground()
' pixaClipToForeground(PIXA *, PIXA **, BOXA **) as l_ok
'''  <summary>
''' Notes
''' (1) At least one of [pixd, boxa] must be specified.
''' (2) Any pix with no fg pixels is skipped.
''' (3) See pixClipToForeground().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="ppixad">[out][optional] - pixa of clipped pix returned</param>
'''  <param name="pboxa">[out][optional] - clipping boxes returned</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaClipToForeground(
				ByVal pixas as Pixa, 
				ByRef ppixad as Pixa, 
				ByRef pboxa as Boxa) as Integer

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")

Dim ppixadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixad) Then ppixadPTR = ppixad.Pointer
Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaClipToForeground( pixas.Pointer, ppixadPTR, pboxaPTR)
	if ppixadPTR <> IntPtr.Zero then ppixad = new Pixa(ppixadPTR)
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)

	Return _Result
End Function

' SRC\pixafunc1.c (2605, 1)
' pixaGetRenderingDepth()
' pixaGetRenderingDepth(PIXA *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="pdepth">[out] - depth required to render if all colormaps are removed</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixaGetRenderingDepth(
				ByVal pixa as Pixa, 
				ByRef pdepth as Integer) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaGetRenderingDepth( pixa.Pointer, pdepth)

	Return _Result
End Function

' SRC\pixafunc1.c (2642, 1)
' pixaHasColor()
' pixaHasColor(PIXA *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="phascolor">[out] - 1 if any pix is rgb or has a colormap with color; 0 otherwise</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixaHasColor(
				ByVal pixa as Pixa, 
				ByRef phascolor as Integer) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaHasColor( pixa.Pointer, phascolor)

	Return _Result
End Function

' SRC\pixafunc1.c (2683, 1)
' pixaAnyColormaps()
' pixaAnyColormaps(PIXA *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="phascmap">[out] - 1 if any pix has a colormap; 0 otherwise</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixaAnyColormaps(
				ByVal pixa as Pixa, 
				ByRef phascmap as Integer) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaAnyColormaps( pixa.Pointer, phascmap)

	Return _Result
End Function

' SRC\pixafunc1.c (2722, 1)
' pixaGetDepthInfo()
' pixaGetDepthInfo(PIXA *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="pmaxdepth">[out][optional] - max pixel depth of pix in pixa</param>
'''  <param name="psame">[out][optional] - true if all depths are equal</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixaGetDepthInfo(
				ByVal pixa as Pixa, 
				ByRef pmaxdepth as Integer, 
				ByRef psame as Integer) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaGetDepthInfo( pixa.Pointer, pmaxdepth, psame)

	Return _Result
End Function

' SRC\pixafunc1.c (2771, 1)
' pixaConvertToSameDepth()
' pixaConvertToSameDepth(PIXA *) as PIXA *
'''  <summary>
''' Notes
''' (1) If any pix has a colormap, they are all converted to rgb.
''' Otherwise, they are all converted to the maximum depth of
''' all the pix.
''' (2) This can be used to allow lossless rendering onto a single pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaConvertToSameDepth(
				ByVal pixas as Pixa) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaConvertToSameDepth( pixas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc1.c (2851, 1)
' pixaEqual()
' pixaEqual(PIXA *, PIXA *, l_int32, NUMA **, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The two pixa are the "same" if they contain the same
''' boxa and the same ordered set of pix.  However, if they
''' have boxa, the pix in each pixa can differ in ordering
''' by an amount given by the parameter %maxdist.  If they
''' don't have a boxa, the %maxdist parameter is ignored,
''' and the ordering must be identical.
''' (2) This applies only to boxa geometry, pixels and ordering;
''' other fields in the pix are ignored.
''' (3) naindex[i] gives the position of the box in pixa2 that
''' corresponds to box i in pixa1.  It is only returned if the
''' pixa have boxa and the boxa are equal.
''' (4) In situations where the ordering is very different, so that
''' a large %maxdist is required for "equality", this should be
''' implemented with a hash function for efficiency.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa1">[in] - </param>
'''  <param name="pixa2">[in] - </param>
'''  <param name="maxdist">[in] - </param>
'''  <param name="pnaindex">[out][optional] - index array of correspondences</param>
'''  <param name="psame">[out] - 1 if equal; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaEqual(
				ByVal pixa1 as Pixa, 
				ByVal pixa2 as Pixa, 
				ByVal maxdist as Integer, 
				ByRef pnaindex as Numa, 
				ByRef psame as Integer) as Integer

	If IsNothing (pixa1) then Throw New ArgumentNullException  ("pixa1 cannot be Nothing")
	If IsNothing (pixa2) then Throw New ArgumentNullException  ("pixa2 cannot be Nothing")

Dim pnaindexPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaindex) Then pnaindexPTR = pnaindex.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaEqual( pixa1.Pointer, pixa2.Pointer, maxdist, pnaindexPTR, psame)
	if pnaindexPTR <> IntPtr.Zero then pnaindex = new Numa(pnaindexPTR)

	Return _Result
End Function

' SRC\pixafunc1.c (2936, 1)
' pixaSetFullSizeBoxa()
' pixaSetFullSizeBoxa(PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) Replaces the existing boxa.  Each box gives the dimensions
''' of the corresponding pix.  This is needed for functions
''' like pixaSort() that sort based on the boxes.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaSetFullSizeBoxa(
				ByVal pixa as Pixa) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaSetFullSizeBoxa( pixa.Pointer)

	Return _Result
End Function

#End Region
#Region "SRC\pixafunc2.c"
' SRC\pixafunc2.c (179, 1)
' pixaDisplay()
' pixaDisplay(PIXA *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This uses the boxes to place each pix in the rendered composite.
''' (2) Set w = h = 0 to use the b.b. of the components to determine
''' the size of the returned pix.
''' (3) Uses the first pix in pixa to determine the depth.
''' (4) The background is written "white".  On 1 bpp, each successive
''' pix is "painted" (adding foreground), whereas for grayscale
''' or color each successive pix is blitted with just the src.
''' (5) If the pixa is empty, returns an empty 1 bpp pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="w">[in] - if set to 0, the size is determined from the bounding box of the components in pixa</param>
'''  <param name="h">[in] - if set to 0, the size is determined from the bounding box of the components in pixa</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixaDisplay(
				ByVal pixa as Pixa, 
				ByVal w as Integer, 
				ByVal h as Integer) as Pix

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaDisplay( pixa.Pointer, w, h)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc2.c (259, 1)
' pixaDisplayOnColor()
' pixaDisplayOnColor(PIXA *, l_int32, l_int32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) This uses the boxes to place each pix in the rendered composite.
''' (2) Set w = h = 0 to use the b.b. of the components to determine
''' the size of the returned pix.
''' (3) If any pix in %pixa are colormapped, or if the pix have
''' different depths, it returns a 32 bpp pix.  Otherwise,
''' the depth of the returned pixa equals that of the pix in %pixa.
''' (4) If the pixa is empty, return null.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="w">[in] - if set to 0, the size is determined from the bounding box of the components in pixa</param>
'''  <param name="h">[in] - if set to 0, the size is determined from the bounding box of the components in pixa</param>
'''  <param name="bgcolor">[in] - background color to use</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixaDisplayOnColor(
				ByVal pixa as Pixa, 
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal bgcolor as UInteger) as Pix

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaDisplayOnColor( pixa.Pointer, w, h, bgcolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc2.c (354, 1)
' pixaDisplayRandomCmap()
' pixaDisplayRandomCmap(PIXA *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This uses the boxes to place each pix in the rendered composite.
''' The fg of each pix in %pixa, such as a single connected
''' component or a line of text, is given a random color.
''' (2) By default, the background color is black (cmap index 0).
''' This can be changed by pixcmapResetColor()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - 1 bpp regions, with boxa delineating those regions</param>
'''  <param name="w">[in] - if set to 0, the size is determined from the bounding box of the components in pixa</param>
'''  <param name="h">[in] - if set to 0, the size is determined from the bounding box of the components in pixa</param>
'''   <returns>pix   8 bpp, cmapped, with random colors assigned to each region, or NULL on error.</returns>
Public Shared Function pixaDisplayRandomCmap(
				ByVal pixa as Pixa, 
				ByVal w as Integer, 
				ByVal h as Integer) as Pix

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaDisplayRandomCmap( pixa.Pointer, w, h)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc2.c (428, 1)
' pixaDisplayLinearly()
' pixaDisplayLinearly(PIXA *, l_int32, l_float32, l_int32, l_int32, l_int32, BOXA **) as PIX *
'''  <summary>
''' Notes
''' (1) This puts each pix, sequentially, in a line, either horizontally
''' or vertically.
''' (2) If any pix has a colormap, all pix are rendered in rgb.
''' (3) The boxa gives the location of each image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="direction">[in] - L_HORIZ or L_VERT</param>
'''  <param name="scalefactor">[in] - applied to every pix; use 1.0 for no scaling</param>
'''  <param name="background">[in] - 0 for white, 1 for black; this is the color of the spacing between the images</param>
'''  <param name="spacing">[in] - between images, and on outside</param>
'''  <param name="border">[in] - width of black border added to each image; use 0 for no border</param>
'''  <param name="pboxa">[out][optional] - location of images in output pix</param>
'''   <returns>pix of composite images, or NULL on error</returns>
Public Shared Function pixaDisplayLinearly(
				ByVal pixas as Pixa, 
				ByVal direction as Enumerations.L_direction, 
				ByVal scalefactor as Single, 
				ByVal background as Integer, 
				ByVal spacing as Integer, 
				ByVal border as Integer, 
				ByRef pboxa as Boxa) as Pix

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")

Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaDisplayLinearly( pixas.Pointer, direction, scalefactor, background, spacing, border, pboxaPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)

	Return  new Pix(_Result)
End Function

' SRC\pixafunc2.c (522, 1)
' pixaDisplayOnLattice()
' pixaDisplayOnLattice(PIXA *, l_int32, l_int32, l_int32 *, BOXA **) as PIX *
'''  <summary>
''' Notes
''' (1) This places each pix on sequentially on a regular lattice
''' in the rendered composite.  If a pix is too large to fit in the
''' allocated lattice space, it is not rendered.
''' (2) If any pix has a colormap, all pix are rendered in rgb.
''' (3) This is useful when putting bitmaps of components,
''' such as characters, into a single image.
''' (4) The boxa gives the location of each image.  The UL corner
''' of each image is on a lattice cell corner.  Omitted images
''' (due to size) are assigned an invalid width and height of 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="cellw">[in] - lattice cell width</param>
'''  <param name="cellh">[in] - lattice cell height</param>
'''  <param name="pncols">[out][optional] - number of columns in output lattice</param>
'''  <param name="pboxa">[out][optional] - location of images in lattice</param>
'''   <returns>pix of composite images, or NULL on error</returns>
Public Shared Function pixaDisplayOnLattice(
				ByVal pixa as Pixa, 
				ByVal cellw as Integer, 
				ByVal cellh as Integer, 
				ByRef pncols as Integer, 
				ByRef pboxa as Boxa) as Pix

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")

Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaDisplayOnLattice( pixa.Pointer, cellw, cellh, pncols, pboxaPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)

	Return  new Pix(_Result)
End Function

' SRC\pixafunc2.c (633, 1)
' pixaDisplayUnsplit()
' pixaDisplayUnsplit(PIXA *, l_int32, l_int32, l_int32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a logical inverse of pixaSplitPix().  It
''' constructs a pix from a mosaic of tiles, all of equal size.
''' (2) For added generality, a border of arbitrary color can
''' be added to each of the tiles.
''' (3) In use, pixa will typically have either been generated
''' from pixaSplitPix() or will derived from a pixa that
''' was so generated.
''' (4) All pix in the pixa must be of equal depth, and, if
''' colormapped, have the same colormap.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="nx">[in] - number of mosaic cells horizontally</param>
'''  <param name="ny">[in] - number of mosaic cells vertically</param>
'''  <param name="borderwidth">[in] - of added border on all sides</param>
'''  <param name="bordercolor">[in] - in our RGBA format 0xrrggbbaa</param>
'''   <returns>pix of tiled images, or NULL on error</returns>
Public Shared Function pixaDisplayUnsplit(
				ByVal pixa as Pixa, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByVal borderwidth as Integer, 
				ByVal bordercolor as UInteger) as Pix

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaDisplayUnsplit( pixa.Pointer, nx, ny, borderwidth, bordercolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc2.c (708, 1)
' pixaDisplayTiled()
' pixaDisplayTiled(PIXA *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This renders a pixa to a single image of width not to
''' exceed maxwidth, with background color either white or black,
''' and with each subimage spaced on a regular lattice.
''' (2) The lattice size is determined from the largest width and height,
''' separately, of all pix in the pixa.
''' (3) All pix in the pixa must be of equal depth.
''' (4) If any pix has a colormap, all pix are rendered in rgb.
''' (5) Careful because no components are omitted, this is
''' dangerous if there are thousands of small components and
''' one or more very large one, because the size of the
''' resulting pix can be huge!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="maxwidth">[in] - of output image</param>
'''  <param name="background">[in] - 0 for white, 1 for black</param>
'''  <param name="spacing">[in] - </param>
'''   <returns>pix of tiled images, or NULL on error</returns>
Public Shared Function pixaDisplayTiled(
				ByVal pixa as Pixa, 
				ByVal maxwidth as Integer, 
				ByVal background as Integer, 
				ByVal spacing as Integer) as Pix

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaDisplayTiled( pixa.Pointer, maxwidth, background, spacing)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc2.c (822, 1)
' pixaDisplayTiledInRows()
' pixaDisplayTiledInRows(PIXA *, l_int32, l_int32, l_float32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This renders a pixa to a single image of width not to
''' exceed maxwidth, with background color either white or black,
''' and with each row tiled such that the top of each pix is
''' aligned and separated by 'spacing' from the next one.
''' A black border can be added to each pix.
''' (2) All pix are converted to outdepth; existing colormaps are removed.
''' (3) This does a reasonably spacewise-efficient job of laying
''' out the individual pix images into a tiled composite.
''' (4) A serialized boxa giving the location in pixd of each input
''' pix (without added border) is stored in the text string of pixd.
''' This allows, e.g., regeneration of a pixa from pixd, using
''' pixaCreateFromBoxa().  If there is no scaling and the depth of
''' each input pix in the pixa is the same, this tiling operation
''' can be inverted using the boxa (except for loss of text in
''' each of the input pix)
''' pix1 = pixaDisplayTiledInRows(pixa1, 1, 1500, 1.0, 0, 30, 0);
''' char boxatxt = pixGetText(pix1);
''' boxa1 = boxaReadMem((l_uint8 )boxatxt, strlen(boxatxt));
''' pixa2 = pixaCreateFromBoxa(pix1, boxa1, NULL);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="outdepth">[in] - output depth 1, 8 or 32 bpp</param>
'''  <param name="maxwidth">[in] - of output image</param>
'''  <param name="scalefactor">[in] - applied to every pix; use 1.0 for no scaling</param>
'''  <param name="background">[in] - 0 for white, 1 for black; this is the color of the spacing between the images</param>
'''  <param name="spacing">[in] - between images, and on outside</param>
'''  <param name="border">[in] - width of black border added to each image; use 0 for no border</param>
'''   <returns>pixd of tiled images, or NULL on error</returns>
Public Shared Function pixaDisplayTiledInRows(
				ByVal pixa as Pixa, 
				ByVal outdepth as Integer, 
				ByVal maxwidth as Integer, 
				ByVal scalefactor as Single, 
				ByVal background as Integer, 
				ByVal spacing as Integer, 
				ByVal border as Integer) as Pix

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaDisplayTiledInRows( pixa.Pointer, outdepth, maxwidth, scalefactor, background, spacing, border)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc2.c (1006, 1)
' pixaDisplayTiledInColumns()
' pixaDisplayTiledInColumns(PIXA *, l_int32, l_float32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This renders a pixa to a single image with nx columns of
''' subimages.  The background color is white, and each row
''' is tiled such that the top of each pix is aligned and
''' each pix is separated by 'spacing' from the next one.
''' A black border can be added to each pix.
''' (2) The output depth is determined by the largest depth
''' required by the pix in the pixa.  Colormaps are removed.
''' (3) A serialized boxa giving the location in pixd of each input
''' pix (without added border) is stored in the text string of pixd.
''' This allows, e.g., regeneration of a pixa from pixd, using
''' pixaCreateFromBoxa().  If there is no scaling and the depth of
''' each input pix in the pixa is the same, this tiling operation
''' can be inverted using the boxa (except for loss of text in
''' each of the input pix)
''' pix1 = pixaDisplayTiledInColumns(pixa1, 3, 1.0, 0, 30, 2);
''' char boxatxt = pixGetText(pix1);
''' boxa1 = boxaReadMem((l_uint8 )boxatxt, strlen(boxatxt));
''' pixa2 = pixaCreateFromBoxa(pix1, boxa1, NULL);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="nx">[in] - number of columns in output image</param>
'''  <param name="scalefactor">[in] - applied to every pix; use 1.0 for no scaling</param>
'''  <param name="spacing">[in] - between images, and on outside</param>
'''  <param name="border">[in] - width of black border added to each image; use 0 for no border</param>
'''   <returns>pixd of tiled images, or NULL on error</returns>
Public Shared Function pixaDisplayTiledInColumns(
				ByVal pixas as Pixa, 
				ByVal nx as Integer, 
				ByVal scalefactor as Single, 
				ByVal spacing as Integer, 
				ByVal border as Integer) as Pix

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaDisplayTiledInColumns( pixas.Pointer, nx, scalefactor, spacing, border)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc2.c (1123, 1)
' pixaDisplayTiledAndScaled()
' pixaDisplayTiledAndScaled(PIXA *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This can be used to tile a number of renderings of
''' an image that are at different scales and depths.
''' (2) Each image, after scaling and optionally adding the
''' black border, has width 'tilewidth'.  Thus, the border does
''' not affect the spacing between the image tiles.  The
''' maximum allowed border width is tilewidth / 5.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="outdepth">[in] - output depth 1, 8 or 32 bpp</param>
'''  <param name="tilewidth">[in] - each pix is scaled to this width</param>
'''  <param name="ncols">[in] - number of tiles in each row</param>
'''  <param name="background">[in] - 0 for white, 1 for black; this is the color of the spacing between the images</param>
'''  <param name="spacing">[in] - between images, and on outside</param>
'''  <param name="border">[in] - width of additional black border on each image; use 0 for no border</param>
'''   <returns>pix of tiled images, or NULL on error</returns>
Public Shared Function pixaDisplayTiledAndScaled(
				ByVal pixa as Pixa, 
				ByVal outdepth as Integer, 
				ByVal tilewidth as Integer, 
				ByVal ncols as Integer, 
				ByVal background as Integer, 
				ByVal spacing as Integer, 
				ByVal border as Integer) as Pix

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaDisplayTiledAndScaled( pixa.Pointer, outdepth, tilewidth, ncols, background, spacing, border)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc2.c (1278, 1)
' pixaDisplayTiledWithText()
' pixaDisplayTiledWithText(PIXA *, l_int32, l_float32, l_int32, l_int32, l_int32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a version of pixaDisplayTiledInRows() that prints, below
''' each pix, the text in the pix text field.  Up to 127 chars
''' of text in the pix text field are rendered below each pix.
''' (2) It renders a pixa to a single image of width not to
''' exceed %maxwidth, with white background color, with each row
''' tiled such that the top of each pix is aligned and separated
''' by %spacing from the next one.
''' (3) All pix are converted to 32 bpp.
''' (4) This does a reasonably spacewise-efficient job of laying
''' out the individual pix images into a tiled composite.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="maxwidth">[in] - of output image</param>
'''  <param name="scalefactor">[in] - applied to every pix; use 1.0 for no scaling</param>
'''  <param name="spacing">[in] - between images, and on outside</param>
'''  <param name="border">[in] - width of black border added to each image; use 0 for no border</param>
'''  <param name="fontsize">[in] - 4, 6, ... 20</param>
'''  <param name="textcolor">[in] - 0xrrggbb00</param>
'''   <returns>pixd of tiled images, or NULL on error</returns>
Public Shared Function pixaDisplayTiledWithText(
				ByVal pixa as Pixa, 
				ByVal maxwidth as Integer, 
				ByVal scalefactor as Single, 
				ByVal spacing as Integer, 
				ByVal border as Integer, 
				ByVal fontsize as Integer, 
				ByVal textcolor as UInteger) as Pix

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaDisplayTiledWithText( pixa.Pointer, maxwidth, scalefactor, spacing, border, fontsize, textcolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc2.c (1377, 1)
' pixaDisplayTiledByIndex()
' pixaDisplayTiledByIndex(PIXA *, NUMA *, l_int32, l_int32, l_int32, l_int32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) This renders a pixa to a single image with white
''' background color, where the pix are placed in columns
''' given by the index value in the numa.  Each pix
''' is separated by %spacing from the adjacent ones, and
''' an optional border is placed around them.
''' (2) Up to 127 chars of text in the pix text field are rendered
''' below each pix.  Use newlines in the text field to write
''' the text in multiple lines that fit within the pix width.
''' (3) To avoid having empty columns, if there are N different
''' index values, they should be in [0 ... N-1].
''' (4) All pix are converted to 32 bpp.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="na">[in] - numa with indices corresponding to the pix in pixa</param>
'''  <param name="width">[in] - each pix is scaled to this width</param>
'''  <param name="spacing">[in] - between images, and on outside</param>
'''  <param name="border">[in] - width of black border added to each image; use 0 for no border</param>
'''  <param name="fontsize">[in] - 4, 6, ... 20</param>
'''  <param name="textcolor">[in] - 0xrrggbb00</param>
'''   <returns>pixd of tiled images, or NULL on error</returns>
Public Shared Function pixaDisplayTiledByIndex(
				ByVal pixa as Pixa, 
				ByVal na as Numa, 
				ByVal width as Integer, 
				ByVal spacing as Integer, 
				ByVal border as Integer, 
				ByVal fontsize as Integer, 
				ByVal textcolor as UInteger) as Pix

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaDisplayTiledByIndex( pixa.Pointer, na.Pointer, width, spacing, border, fontsize, textcolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc2.c (1480, 1)
' pixaaDisplay()
' pixaaDisplay(PIXAA *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Each pix of the paa is displayed at the location given by
''' its box, translated by the box of the containing pixa
''' if it exists.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''  <param name="w">[in] - if set to 0, the size is determined from the bounding box of the components in pixa</param>
'''  <param name="h">[in] - if set to 0, the size is determined from the bounding box of the components in pixa</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixaaDisplay(
				ByVal paa as Pixaa, 
				ByVal w as Integer, 
				ByVal h as Integer) as Pix

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaDisplay( paa.Pointer, w, h)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc2.c (1574, 1)
' pixaaDisplayByPixa()
' pixaaDisplayByPixa(PIXAA *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Displays each pixa on a line (or set of lines),
''' in order from top to bottom.  Within each pixa,
''' the pix are displayed in order from left to right.
''' (2) The sizes and depths of each pix can differ.  The output pix
''' has a depth equal to the max depth of all the pix.
''' (3) This ignores the boxa of the paa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - with pix that may have different depths</param>
'''  <param name="xspace">[in] - between pix in pixa</param>
'''  <param name="yspace">[in] - between pixa</param>
'''  <param name="maxw">[in] - max width of output pix</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixaaDisplayByPixa(
				ByVal paa as Pixaa, 
				ByVal xspace as Integer, 
				ByVal yspace as Integer, 
				ByVal maxw as Integer) as Pix

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaDisplayByPixa( paa.Pointer, xspace, yspace, maxw)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixafunc2.c (1711, 1)
' pixaaDisplayTiledAndScaled()
' pixaaDisplayTiledAndScaled(PIXAA *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) For each pixa, this generates from all the pix a
''' tiled/scaled output pix, and puts it in the output pixa.
''' (2) See comments in pixaDisplayTiledAndScaled().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''  <param name="outdepth">[in] - output depth 1, 8 or 32 bpp</param>
'''  <param name="tilewidth">[in] - each pix is scaled to this width</param>
'''  <param name="ncols">[in] - number of tiles in each row</param>
'''  <param name="background">[in] - 0 for white, 1 for black; this is the color of the spacing between the images</param>
'''  <param name="spacing">[in] - between images, and on outside</param>
'''  <param name="border">[in] - width of additional black border on each image; use 0 for no border</param>
'''   <returns>pixa of tiled images, one image for each pixa in the paa, or NULL on error</returns>
Public Shared Function pixaaDisplayTiledAndScaled(
				ByVal paa as Pixaa, 
				ByVal outdepth as Integer, 
				ByVal tilewidth as Integer, 
				ByVal ncols as Integer, 
				ByVal background as Integer, 
				ByVal spacing as Integer, 
				ByVal border as Integer) as Pixa

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaaDisplayTiledAndScaled( paa.Pointer, outdepth, tilewidth, ncols, background, spacing, border)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc2.c (1761, 1)
' pixaConvertTo1()
' pixaConvertTo1(PIXA *, l_int32) as PIXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="thresh">[in] - threshold for final binarization from 8 bpp gray</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaConvertTo1(
				ByVal pixas as Pixa, 
				ByVal thresh as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaConvertTo1( pixas.Pointer, thresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc2.c (1802, 1)
' pixaConvertTo8()
' pixaConvertTo8(PIXA *, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) See notes for pixConvertTo8(), applied to each pix in pixas.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="cmapflag">[in] - 1 to give pixd a colormap; 0 otherwise</param>
'''   <returns>pixad each pix is 8 bpp, or NULL on error</returns>
Public Shared Function pixaConvertTo8(
				ByVal pixas as Pixa, 
				ByVal cmapflag as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaConvertTo8( pixas.Pointer, cmapflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc2.c (1843, 1)
' pixaConvertTo8Colormap()
' pixaConvertTo8Colormap(PIXA *, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) See notes for pixConvertTo8Colormap(), applied to each pix in pixas.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="dither">[in] - 1 to dither if necessary; 0 otherwise</param>
'''   <returns>pixad each pix is 8 bpp, or NULL on error</returns>
Public Shared Function pixaConvertTo8Colormap(
				ByVal pixas as Pixa, 
				ByVal dither as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaConvertTo8Colormap( pixas.Pointer, dither)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc2.c (1885, 1)
' pixaConvertTo32()
' pixaConvertTo32(PIXA *) as PIXA *
'''  <summary>
''' Notes
''' (1) See notes for pixConvertTo32(), applied to each pix in pixas.
''' (2) This can be used to allow 1 bpp pix in a pixa to be displayed
''' with color.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''   <returns>pixad 32 bpp rgb, or NULL on error</returns>
Public Shared Function pixaConvertTo32(
				ByVal pixas as Pixa) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaConvertTo32( pixas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc2.c (1938, 1)
' pixaConstrainedSelect()
' pixaConstrainedSelect(PIXA *, l_int32, l_int32, l_int32, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) See notes in genConstrainedNumaInRange() for how selection
''' is made.
''' (2) This returns a selection of the pix in the input pixa.
''' (3) Use copyflag == L_COPY if you don't want changes in the pix
''' in the returned pixa to affect those in the input pixa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="first">[in] - first index to choose; GT= 0</param>
'''  <param name="last">[in] - biggest possible index to reach; use -1 to go to the end; otherwise, last GT= first</param>
'''  <param name="nmax">[in] - maximum number of pix to select; GT 0</param>
'''  <param name="use_pairs">[in] - 1 = select pairs of adjacent pix; 0 = select individual pix</param>
'''  <param name="copyflag">[in] - L_COPY, L_CLONE</param>
'''   <returns>pixad if OK, NULL on error</returns>
Public Shared Function pixaConstrainedSelect(
				ByVal pixas as Pixa, 
				ByVal first as Integer, 
				ByVal last as Integer, 
				ByVal nmax as Integer, 
				ByVal use_pairs as Integer, 
				ByVal copyflag as Enumerations.L_access_storage) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaConstrainedSelect( pixas.Pointer, first, last, nmax, use_pairs, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc2.c (2006, 1)
' pixaSelectToPdf()
' pixaSelectToPdf(PIXA *, l_int32, l_int32, l_int32, l_float32, l_int32, l_int32, l_uint32, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This writes a pdf of the selected images from %pixas, one to
''' a page.  They are optionally scaled and annotated with the
''' index printed to the left of the image.
''' (2) If the input images are 1 bpp and you want the numbers to be
''' in color, first promote each pix to 8 bpp with a colormap
''' pixa1 = pixaConvertTo8(pixas, 1);
''' and then call this function with the specified color
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="first">[in] - first index to choose; GT= 0</param>
'''  <param name="last">[in] - biggest possible index to reach; use -1 to go to the end; otherwise, last GT= first</param>
'''  <param name="res">[in] - override the resolution of each input image, in ppi; use 0 to respect the resolution embedded in the input</param>
'''  <param name="scalefactor">[in] - scaling factor applied to each image; GT 0.0</param>
'''  <param name="type">[in] - encoding type (L_JPEG_ENCODE, L_G4_ENCODE, L_FLATE_ENCODE, or 0 for default</param>
'''  <param name="quality">[in] - used for JPEG only; 0 for default (75)</param>
'''  <param name="color">[in] - of numbers added to each image (e.g., 0xff000000)</param>
'''  <param name="fontsize">[in] - to print number below each image.  The valid set is {4,6,8,10,12,14,16,18,20}.  Use 0 to disable.</param>
'''  <param name="fileout">[in] - pdf file of all images</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaSelectToPdf(
				ByVal pixas as Pixa, 
				ByVal first as Integer, 
				ByVal last as Integer, 
				ByVal res as Integer, 
				ByVal scalefactor as Single, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByVal color as UInteger, 
				ByVal fontsize as Integer, 
				ByVal fileout as String) as Integer

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaSelectToPdf( pixas.Pointer, first, last, res, scalefactor, type, quality, color, fontsize, fileout)

	Return _Result
End Function

' SRC\pixafunc2.c (2086, 1)
' pixaDisplayMultiTiled()
' pixaDisplayMultiTiled(PIXA *, l_int32, l_int32, l_int32, l_int32, l_float32, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) Each set of %nx  %ny images is optionally scaled and saved
''' into a new pix, and then aggregated.
''' (2) Set %maxw = %maxh = 0 if you want to include all pix from %pixs.
''' (3) This is useful for generating a pdf from the output pixa, where
''' each page is a tile of (%nx  %ny) images from the input pixa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="nx">[in] - in [1, ... 50], tiling factors in each direction</param>
'''  <param name="ny">[in] - in [1, ... 50], tiling factors in each direction</param>
'''  <param name="maxw">[in] - max sizes to keep</param>
'''  <param name="maxh">[in] - max sizes to keep</param>
'''  <param name="scalefactor">[in] - scale each image by this</param>
'''  <param name="spacing">[in] - between images, and on outside</param>
'''  <param name="border">[in] - width of additional black border on each image; use 0 for no border</param>
'''   <returns>pixad if OK, NULL on error</returns>
Public Shared Function pixaDisplayMultiTiled(
				ByVal pixas as Pixa, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByVal maxw as Integer, 
				ByVal maxh as Integer, 
				ByVal scalefactor as Single, 
				ByVal spacing as Integer, 
				ByVal border as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaDisplayMultiTiled( pixas.Pointer, nx, ny, maxw, maxh, scalefactor, spacing, border)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc2.c (2165, 1)
' pixaSplitIntoFiles()
' pixaSplitIntoFiles(PIXA *, l_int32, l_float32, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) For each requested output, %nsplit files are written into
''' directory /tmp/lept/split/.
''' (2) This is useful when a pixa is so large that the images
''' are not conveniently displayed as a single tiled image at
''' full resolution.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="nsplit">[in] - split pixas into this number of pixa; GT= 2</param>
'''  <param name="scale">[in] - scalefactor applied to each pix</param>
'''  <param name="outwidth">[in] - the maxwidth parameter of tiled images for write_pix</param>
'''  <param name="write_pixa">[in] - 1 to write the split pixa as separate files</param>
'''  <param name="write_pix">[in] - 1 to write tiled images of the split pixa</param>
'''  <param name="write_pdf">[in] - 1 to write pdfs of the split pixa</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaSplitIntoFiles(
				ByVal pixas as Pixa, 
				ByVal nsplit as Integer, 
				ByVal scale as Single, 
				ByVal outwidth as Integer, 
				ByVal write_pixa as Integer, 
				ByVal write_pix as Integer, 
				ByVal write_pdf as Integer) as Integer

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaSplitIntoFiles( pixas.Pointer, nsplit, scale, outwidth, write_pixa, write_pix, write_pdf)

	Return _Result
End Function

' SRC\pixafunc2.c (2254, 1)
' convertToNUpFiles()
' convertToNUpFiles(const char *, const char *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) Each set of %nx  %ny images is scaled and tiled into a single
''' image, that is written out to %outdir.
''' (2) All images in each %nx  %ny set are scaled to the same
''' width, %tw.  This is typically used when all images are
''' roughly the same size.
''' (3) This is useful for generating a pdf from the set of input
''' files, where each page is a tile of (%nx  %ny) input images.
''' Typical values for %nx and %ny are in the range [2 ... 5].
''' (4) If %fontsize != 0, each image has the tail of its filename
''' rendered below it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dir">[in] - full path to directory of images</param>
'''  <param name="substr">[in][optional] - can be null</param>
'''  <param name="nx">[in] - in [1, ... 50], tiling factors in each direction</param>
'''  <param name="ny">[in] - in [1, ... 50], tiling factors in each direction</param>
'''  <param name="tw">[in] - target width, in pixels; must be GT= 20</param>
'''  <param name="spacing">[in] - between images, and on outside</param>
'''  <param name="border">[in] - width of additional black border on each image; use 0 for no border</param>
'''  <param name="fontsize">[in] - to print tail of filename with image.  Valid set is {4,6,8,10,12,14,16,18,20}.  Use 0 to disable.</param>
'''  <param name="outdir">[in] - subdirectory of /tmp to put N-up tiled images</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertToNUpFiles(
				ByVal dir as String, 
				ByVal substr as String, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByVal tw as Integer, 
				ByVal spacing as Integer, 
				ByVal border as Integer, 
				ByVal fontsize as Integer, 
				ByVal outdir as String) as Integer

	If IsNothing (dir) then Throw New ArgumentNullException  ("dir cannot be Nothing")
	If IsNothing (outdir) then Throw New ArgumentNullException  ("outdir cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertToNUpFiles( dir, substr, nx, ny, tw, spacing, border, fontsize, outdir)

	Return _Result
End Function

' SRC\pixafunc2.c (2316, 1)
' convertToNUpPixa()
' convertToNUpPixa(const char *, const char *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) See notes for convertToNUpFiles()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dir">[in] - full path to directory of images</param>
'''  <param name="substr">[in][optional] - can be null</param>
'''  <param name="nx">[in] - in [1, ... 50], tiling factors in each direction</param>
'''  <param name="ny">[in] - in [1, ... 50], tiling factors in each direction</param>
'''  <param name="tw">[in] - target width, in pixels; must be GT= 20</param>
'''  <param name="spacing">[in] - between images, and on outside</param>
'''  <param name="border">[in] - width of additional black border on each image; use 0 for no border</param>
'''  <param name="fontsize">[in] - to print tail of filename with image.  Valid set is {4,6,8,10,12,14,16,18,20}.  Use 0 to disable.</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function convertToNUpPixa(
				ByVal dir as String, 
				ByVal substr as String, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByVal tw as Integer, 
				ByVal spacing as Integer, 
				ByVal border as Integer, 
				ByVal fontsize as Integer) as Pixa

	If IsNothing (dir) then Throw New ArgumentNullException  ("dir cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.convertToNUpPixa( dir, substr, nx, ny, tw, spacing, border, fontsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc2.c (2382, 1)
' pixaConvertToNUpPixa()
' pixaConvertToNUpPixa(PIXA *, SARRAY *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) This takes an input pixa and an optional array of strings, and
''' generates a pixa of NUp tiles from the input, labeled with
''' the strings if they exist and %fontsize != 0.
''' (2) See notes for convertToNUpFiles()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - </param>
'''  <param name="sa">[in][optional] - array of strings associated with each pix</param>
'''  <param name="nx">[in] - in [1, ... 50], tiling factors in each direction</param>
'''  <param name="ny">[in] - in [1, ... 50], tiling factors in each direction</param>
'''  <param name="tw">[in] - target width, in pixels; must be GT= 20</param>
'''  <param name="spacing">[in] - between images, and on outside</param>
'''  <param name="border">[in] - width of additional black border on each image; use 0 for no border</param>
'''  <param name="fontsize">[in] - to print string with each image.  Valid set is {4,6,8,10,12,14,16,18,20}.  Use 0 to disable.</param>
'''   <returns>pixad, or NULL on error</returns>
Public Shared Function pixaConvertToNUpPixa(
				ByVal pixas as Pixa, 
				ByVal sa as Sarray, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByVal tw as Integer, 
				ByVal spacing as Integer, 
				ByVal border as Integer, 
				ByVal fontsize as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")

	Dim saPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sa) Then saPTR = sa.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaConvertToNUpPixa( pixas.Pointer, saPTR, nx, ny, tw, spacing, border, fontsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixafunc2.c (2495, 1)
' pixaCompareInPdf()
' pixaCompareInPdf(PIXA *, PIXA *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This takes two pixa and renders them interleaved, side-by-side
''' in a pdf.  A warning is issued if the input pixa arrays
''' have different lengths.
''' (2) %nx and %ny specify how many side-by-side pairs are displayed
''' on each pdf page.  For example, if %nx = 1 and %ny = 2, then
''' two pairs are shown, one above the other, on each page.
''' (3) The input pix are scaled to a target width of %tw, and
''' then paired with optional %spacing between and optional
''' black border of width %border.
''' (4) After a pixa is generated of these tiled images, it is
''' written to %fileout as a pdf.
''' (5) Typical numbers for the input parameters are
''' %nx = small integer (1 - 4)
''' %ny = 2  %nx
''' %tw = 200 - 500 pixels
''' %spacing = 10
''' %border = 2
''' %fontsize = 10
''' (6) If %fontsize != 0, the index of the pix pair in their pixa
''' is printed out below each pair.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa1">[in] - </param>
'''  <param name="pixa2">[in] - </param>
'''  <param name="nx">[in] - in [1, ... 20], tiling factors in each direction</param>
'''  <param name="ny">[in] - in [1, ... 20], tiling factors in each direction</param>
'''  <param name="tw">[in] - target width, in pixels; must be GT= 20</param>
'''  <param name="spacing">[in] - between images, and on outside</param>
'''  <param name="border">[in] - width of additional black border on each image and on each pair; use 0 for no border</param>
'''  <param name="fontsize">[in] - to print index of each pair of images.  Valid set is {4,6,8,10,12,14,16,18,20}.  Use 0 to disable.</param>
'''  <param name="fileout">[in] - output pdf file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaCompareInPdf(
				ByVal pixa1 as Pixa, 
				ByVal pixa2 as Pixa, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByVal tw as Integer, 
				ByVal spacing as Integer, 
				ByVal border as Integer, 
				ByVal fontsize as Integer, 
				ByVal fileout as String) as Integer

	If IsNothing (pixa1) then Throw New ArgumentNullException  ("pixa1 cannot be Nothing")
	If IsNothing (pixa2) then Throw New ArgumentNullException  ("pixa2 cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaCompareInPdf( pixa1.Pointer, pixa2.Pointer, nx, ny, tw, spacing, border, fontsize, fileout)

	Return _Result
End Function

#End Region
#Region "SRC\pixalloc.c"
' SRC\pixalloc.c (168, 1)
' pmsCreate()
' pmsCreate(size_t, size_t, NUMA *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This computes the size of the block of memory required
''' and allocates it.  Each chunk starts on a 32-bit word boundary.
''' The chunk sizes are in powers of 2, starting at %smallest,
''' and the number of levels and chunks at each level is
''' specified by %numalloc.
''' (2) This is intended to manage the image data for a small number
''' of relatively large pix.  The system malloc is expected to
''' handle very large numbers of small chunks efficiently.
''' (3) Important set the allocators and call this function
''' before any pix have been allocated.  Destroy all the pix
''' in the normal way before calling pmsDestroy().
''' (4) The pms struct is stored in a static global, so this function
''' is not thread-safe.  When used, there must be only one thread
''' per process.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="minsize">[in] - of data chunk that can be supplied by pms</param>
'''  <param name="smallest">[in] - bytes of the smallest pre-allocated data chunk.</param>
'''  <param name="numalloc">[in] - array with the number of data chunks for each size that are in the memory store</param>
'''  <param name="logfile">[in] - use for debugging; null otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pmsCreate(
				ByVal minsize as UInteger, 
				ByVal smallest as UInteger, 
				ByVal numalloc as Numa, 
				ByVal logfile as String) as Integer

	If IsNothing (numalloc) then Throw New ArgumentNullException  ("numalloc cannot be Nothing")
	If IsNothing (logfile) then Throw New ArgumentNullException  ("logfile cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pmsCreate( minsize, smallest, numalloc.Pointer, logfile)

	Return _Result
End Function

' SRC\pixalloc.c (267, 1)
' pmsDestroy()
' pmsDestroy() as void
'''  <summary>
''' Notes
''' (1) Important call this function at the end of the program, after
''' the last pix has been destroyed.
'''  </summary>
'''  <remarks>
'''  </remarks>
Public Shared Sub pmsDestroy()



	LeptonicaSharp.Natives.pmsDestroy( )

End Sub

' SRC\pixalloc.c (311, 1)
' pmsCustomAlloc()
' pmsCustomAlloc(size_t) as void *
'''  <summary>
''' Notes
''' (1) This attempts to find a suitable pre-allocated chunk.
''' If not found, it dynamically allocates the chunk.
''' (2) If logging is turned on, the allocations that are not taken
''' from the memory store, and are at least as large as the
''' minimum size the store can handle, are logged to file.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nbytes">[in] - min number of bytes in the chunk to be retrieved</param>
'''   <returns>data ptr to chunk</returns>
Public Shared Function pmsCustomAlloc(
				ByVal nbytes as UInteger) as Object



	Dim _Result as IntPtr = LeptonicaSharp.Natives.pmsCustomAlloc( nbytes)

	Return _Result
End Function

' SRC\pixalloc.c (355, 1)
' pmsCustomDealloc()
' pmsCustomDealloc(void *) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - to be freed or returned to the storage</param>
Public Shared Sub pmsCustomDealloc(
				ByVal data as Object)

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")

Dim dataPTR As IntPtr = Marshal.AllocHGlobal(0)

	LeptonicaSharp.Natives.pmsCustomDealloc( dataPTR)

End Sub

' SRC\pixalloc.c (406, 1)
' pmsGetAlloc()
' pmsGetAlloc(size_t) as void *
'''  <summary>
''' Notes
''' (1) This is called when a request for pix data cannot be
''' obtained from the preallocated memory store.  After use it
''' is freed like normal memory.
''' (2) If logging is on, only write out allocs that are as large as
''' the minimum size handled by the memory store.
''' (3) size_t is %lu on 64 bit platforms and %u on 32 bit platforms.
''' The C99 platform-independent format specifier for size_t is %zu,
''' but windows hasn't conformed, so we are forced to go back to
''' C89, use %lu, and cast to get platform-independence.  Ugh.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nbytes">[in] - </param>
'''   <returns>data</returns>
Public Shared Function pmsGetAlloc(
				ByVal nbytes as UInteger) as Object



	Dim _Result as IntPtr = LeptonicaSharp.Natives.pmsGetAlloc( nbytes)

	Return _Result
End Function

' SRC\pixalloc.c (437, 1)
' pmsGetLevelForAlloc()
' pmsGetLevelForAlloc(size_t, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nbytes">[in] - min number of bytes in the chunk to be retrieved</param>
'''  <param name="plevel">[out] - -1 if either too small or too large</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pmsGetLevelForAlloc(
				ByVal nbytes as UInteger, 
				ByRef plevel as Integer) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.pmsGetLevelForAlloc( nbytes, plevel)

	Return _Result
End Function

' SRC\pixalloc.c (476, 1)
' pmsGetLevelForDealloc()
' pmsGetLevelForDealloc(void *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - ptr to memory chunk</param>
'''  <param name="plevel">[out] - level in memory store; -1 if allocated outside the store</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pmsGetLevelForDealloc(
				ByVal data as Object, 
				ByRef plevel as Integer) as Integer

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")

Dim dataPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.pmsGetLevelForDealloc( dataPTR, plevel)

	Return _Result
End Function

' SRC\pixalloc.c (511, 1)
' pmsLogInfo()
' pmsLogInfo() as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
Public Shared Sub pmsLogInfo()



	LeptonicaSharp.Natives.pmsLogInfo( )

End Sub

#End Region
#Region "SRC\pixarith.c"
' SRC\pixarith.c (115, 1)
' pixAddConstantGray()
' pixAddConstantGray(PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) In-place operation.
''' (2) No clipping for 32 bpp.
''' (3) For 8 and 16 bpp, if val GT 0 the result is clipped
''' to 0xff and 0xffff, rsp.
''' (4) For 8 and 16 bpp, if val LT 0 the result is clipped to 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8, 16 or 32 bpp</param>
'''  <param name="val">[in] - amount to add to each pixel</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixAddConstantGray(
				ByVal pixs as Pix, 
				ByVal val as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixAddConstantGray( pixs.Pointer, val)

	Return _Result
End Function

' SRC\pixarith.c (186, 1)
' pixMultConstantGray()
' pixMultConstantGray(PIX *, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) In-place operation; val must be GT= 0.
''' (2) No clipping for 32 bpp.
''' (3) For 8 and 16 bpp, the result is clipped to 0xff and 0xffff, rsp.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8, 16 or 32 bpp</param>
'''  <param name="val">[in] - GT= 0.0; amount to multiply by each pixel</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixMultConstantGray(
				ByVal pixs as Pix, 
				ByVal val as Single) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixMultConstantGray( pixs.Pointer, val)

	Return _Result
End Function

' SRC\pixarith.c (261, 1)
' pixAddGray()
' pixAddGray(PIX *, PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) Arithmetic addition of two 8, 16 or 32 bpp images.
''' (2) For 8 and 16 bpp, we do explicit clipping to 0xff and 0xffff,
''' respectively.
''' (3) Alignment is to UL corner.
''' (4) There are 3 cases.  The result can go to a new dest,
''' in-place to pixs1, or to an existing input dest
''' pixd == null   (src1 + src2) --GT new pixd
''' pixd == pixs1  (src1 + src2) --GT src1  (in-place)
''' pixd != pixs1  (src1 + src2) --GT input pixd
''' (5) pixs2 must be different from both pixd and pixs1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs1, or different from pixs1</param>
'''  <param name="pixs1">[in] - can be == to pixd</param>
'''  <param name="pixs2">[in] - </param>
'''   <returns>pixd always</returns>
Public Shared Function pixAddGray(
				ByVal pixd as Pix, 
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAddGray( pixdPTR, pixs1.Pointer, pixs2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixarith.c (353, 1)
' pixSubtractGray()
' pixSubtractGray(PIX *, PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) Arithmetic subtraction of two 8, 16 or 32 bpp images.
''' (2) Source pixs2 is always subtracted from source pixs1.
''' (3) Do explicit clipping to 0.
''' (4) Alignment is to UL corner.
''' (5) There are 3 cases.  The result can go to a new dest,
''' in-place to pixs1, or to an existing input dest
''' (a) pixd == null   (src1 - src2) --GT new pixd
''' (b) pixd == pixs1  (src1 - src2) --GT src1  (in-place)
''' (d) pixd != pixs1  (src1 - src2) --GT input pixd
''' (6) pixs2 must be different from both pixd and pixs1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs1, or different from pixs1</param>
'''  <param name="pixs1">[in] - can be == to pixd</param>
'''  <param name="pixs2">[in] - </param>
'''   <returns>pixd always</returns>
Public Shared Function pixSubtractGray(
				ByVal pixd as Pix, 
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSubtractGray( pixdPTR, pixs1.Pointer, pixs2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixarith.c (442, 1)
' pixThresholdToValue()
' pixThresholdToValue(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' ~ operation can be in-place (pixs == pixd) or to a new pixd
''' ~ if setval GT threshval, sets pixels with a value GT= threshval to setval
''' ~ if setval LT threshval, sets pixels with a value LT= threshval to setval
''' ~ if setval == threshval, no-op
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; if not null, must be equal to pixs</param>
'''  <param name="pixs">[in] - 8, 16, 32 bpp</param>
'''  <param name="threshval">[in] - </param>
'''  <param name="setval">[in] - </param>
'''   <returns>pixd always</returns>
Public Shared Function pixThresholdToValue(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal threshval as Integer, 
				ByVal setval as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixThresholdToValue( pixdPTR, pixs.Pointer, threshval, setval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixarith.c (551, 1)
' pixInitAccumulate()
' pixInitAccumulate(l_int32, l_int32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) The offset must be GT= 0.
''' (2) The offset is used so that we can do arithmetic
''' with negative number results on l_uint32 data; it
''' prevents the l_uint32 data from going negative.
''' (3) Because we use l_int32 intermediate data results,
''' these should never exceed the max of l_int32 (0x7fffffff).
''' We do not permit the offset to be above 0x40000000,
''' which is half way between 0 and the max of l_int32.
''' (4) The same offset should be used for initialization,
''' multiplication by a constant, and final extraction!
''' (5) If you're only adding positive values, offset can be 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="w">[in] - of accumulate array</param>
'''  <param name="h">[in] - of accumulate array</param>
'''  <param name="offset">[in] - initialize the 32 bpp to have this value; not more than 0x40000000</param>
'''   <returns>pixd 32 bpp, or NULL on error</returns>
Public Shared Function pixInitAccumulate(
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal offset as UInteger) as Pix



	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixInitAccumulate( w, h, offset)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixarith.c (585, 1)
' pixFinalAccumulate()
' pixFinalAccumulate(PIX *, l_uint32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The offset must be GT= 0 and should not exceed 0x40000000.
''' (2) The offset is subtracted from the src 32 bpp image
''' (3) For 8 bpp dest, the result is clipped to [0, 0xff]
''' (4) For 16 bpp dest, the result is clipped to [0, 0xffff]
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="offset">[in] - same as used for initialization</param>
'''  <param name="depth">[in] - 8, 16 or 32 bpp, of destination</param>
'''   <returns>pixd 8, 16 or 32 bpp, or NULL on error</returns>
Public Shared Function pixFinalAccumulate(
				ByVal pixs as Pix, 
				ByVal offset as UInteger, 
				ByVal depth as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFinalAccumulate( pixs.Pointer, offset, depth)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixarith.c (662, 1)
' pixFinalAccumulateThreshold()
' pixFinalAccumulateThreshold(PIX *, l_uint32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) The offset must be GT= 0 and should not exceed 0x40000000.
''' (2) The offset is subtracted from the src 32 bpp image
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="offset">[in] - same as used for initialization</param>
'''  <param name="threshold">[in] - values less than this are set in the destination</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixFinalAccumulateThreshold(
				ByVal pixs as Pix, 
				ByVal offset as UInteger, 
				ByVal threshold as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFinalAccumulateThreshold( pixs.Pointer, offset, threshold)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixarith.c (719, 1)
' pixAccumulate()
' pixAccumulate(PIX *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This adds or subtracts each pixs value from pixd.
''' (2) This clips to the minimum of pixs and pixd, so they
''' do not need to be the same size.
''' (3) The alignment is to the origin [UL corner] of pixs  pixd.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - 32 bpp</param>
'''  <param name="pixs">[in] - 1, 8, 16 or 32 bpp</param>
'''  <param name="op">[in] - L_ARITH_ADD or L_ARITH_SUBTRACT</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixAccumulate(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal op as Enumerations.L_arithmetic_logical_operator) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixAccumulate( pixd.Pointer, pixs.Pointer, op)

	Return _Result
End Function

' SRC\pixarith.c (818, 1)
' pixMultConstAccumulate()
' pixMultConstAccumulate(PIX *, l_float32, l_uint32) as l_ok
'''  <summary>
''' Notes
''' (1) The offset must be GT= 0 and should not exceed 0x40000000.
''' (2) This multiplies each pixel, relative to offset, by the input factor
''' (3) The result is returned with the offset back in place.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="factor">[in] - </param>
'''  <param name="offset">[in] - same as used for initialization</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixMultConstAccumulate(
				ByVal pixs as Pix, 
				ByVal factor as Single, 
				ByVal offset as UInteger) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixMultConstAccumulate( pixs.Pointer, factor, offset)

	Return _Result
End Function

' SRC\pixarith.c (872, 1)
' pixAbsDifference()
' pixAbsDifference(PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) The depth of pixs1 and pixs2 must be equal.
''' (2) Clips computation to the min size, aligning the UL corners
''' (3) For 8 and 16 bpp, assumes one gray component.
''' (4) For 32 bpp, assumes 3 color components, and ignores the
''' LSB of each word (the alpha channel)
''' (5) Computes the absolute value of the difference between
''' each component value.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs1">[in] - both either 8 or 16 bpp gray, or 32 bpp RGB</param>
'''  <param name="pixs2">[in] - both either 8 or 16 bpp gray, or 32 bpp RGB</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAbsDifference(
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAbsDifference( pixs1.Pointer, pixs2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixarith.c (969, 1)
' pixAddRGB()
' pixAddRGB(PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) Clips computation to the minimum size, aligning the UL corners.
''' (2) Removes any colormap to RGB, and ignores the LSB of each
''' pixel word (the alpha channel).
''' (3) Adds each component value, pixelwise, clipping to 255.
''' (4) This is useful to combine two images where most of the
''' pixels are essentially black, such as in pixPerceptualDiff().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs1">[in] - 32 bpp RGB, or colormapped</param>
'''  <param name="pixs2">[in] - 32 bpp RGB, or colormapped</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixAddRGB(
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAddRGB( pixs1.Pointer, pixs2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixarith.c (1054, 1)
' pixMinOrMax()
' pixMinOrMax(PIX *, PIX *, PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This gives the min or max of two images, component-wise.
''' (2) The depth can be 8 or 16 bpp for 1 component, and 32 bpp
''' for a 3 component image.  For 32 bpp, ignore the LSB
''' of each word (the alpha channel)
''' (3) There are 3 cases
''' ~  if pixd == null,   Min(src1, src2) --GT new pixd
''' ~  if pixd == pixs1,  Min(src1, src2) --GT src1  (in-place)
''' ~  if pixd != pixs1,  Min(src1, src2) --GT input pixd
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - destination this can be null, equal to pixs1, or different from pixs1</param>
'''  <param name="pixs1">[in] - can be == to pixd</param>
'''  <param name="pixs2">[in] - </param>
'''  <param name="type">[in] - L_CHOOSE_MIN, L_CHOOSE_MAX</param>
'''   <returns>pixd always</returns>
Public Shared Function pixMinOrMax(
				ByVal pixd as Pix, 
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix, 
				ByVal type as Enumerations.L_CHOOSE_M) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMinOrMax( pixdPTR, pixs1.Pointer, pixs2.Pointer, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixarith.c (1155, 1)
' pixMaxDynamicRange()
' pixMaxDynamicRange(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Scales pixel values to fit maximally within the dest 8 bpp pixd
''' (2) Assumes the source 'pixels' are a 1-component scalar.  For
''' a 32 bpp source, each pixel is treated as a single number --
''' not as a 3-component rgb pixel value.
''' (3) Uses a LUT for log scaling.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 4, 8, 16 or 32 bpp source</param>
'''  <param name="type">[in] - L_LINEAR_SCALE or L_LOG_SCALE</param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function pixMaxDynamicRange(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.L_L_SCALE) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMaxDynamicRange( pixs.Pointer, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixarith.c (1343, 1)
' pixMaxDynamicRangeRGB()
' pixMaxDynamicRangeRGB(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Scales pixel values to fit maximally within a 32 bpp dest pixd
''' (2) All color components are scaled with the same factor, based
''' on the maximum r,g or b component in the image.  This should
''' not be used if the 32-bit value is a single number (e.g., a
''' count in a histogram generated by pixMakeHistoHS()).
''' (3) Uses a LUT for log scaling.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb source</param>
'''  <param name="type">[in] - L_LINEAR_SCALE or L_LOG_SCALE</param>
'''   <returns>pixd 32 bpp, or NULL on error</returns>
Public Shared Function pixMaxDynamicRangeRGB(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.L_L_SCALE) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMaxDynamicRangeRGB( pixs.Pointer, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixarith.c (1430, 1)
' linearScaleRGBVal()
' linearScaleRGBVal(l_uint32, l_float32) as l_uint32
'''  <summary>
''' Notes
''' (1) %factor must be chosen to be not greater than (255 / maxcomp),
''' where maxcomp is the maximum value of the pixel components.
''' Otherwise, the product will overflow a uint8.  In use, factor
''' is the same for all pixels in a pix.
''' (2) No scaling is performed on the transparency ("A") component.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sval">[in] - 32-bit rgb pixel value</param>
'''  <param name="factor">[in] - multiplication factor on each component</param>
'''   <returns>dval  linearly scaled version of %sval</returns>
Public Shared Function linearScaleRGBVal(
				ByVal sval as UInteger, 
				ByVal factor as Single) as UInteger

	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")


	Dim _Result as UInteger = LeptonicaSharp.Natives.linearScaleRGBVal( sval, factor)

	Return _Result
End Function

' SRC\pixarith.c (1463, 1)
' logScaleRGBVal()
' logScaleRGBVal(l_uint32, l_float32 *, l_float32) as l_uint32
'''  <summary>
''' Notes
''' (1) %tab is made with makeLogBase2Tab().
''' (2) %factor must be chosen to be not greater than
''' 255.0 / log[base2](maxcomp), where maxcomp is the maximum
''' value of the pixel components.  Otherwise, the product
''' will overflow a uint8.  In use, factor is the same for
''' all pixels in a pix.
''' (3) No scaling is performed on the transparency ("A") component.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sval">[in] - 32-bit rgb pixel value</param>
'''  <param name="tab">[in] - 256 entry log-base-2 table</param>
'''  <param name="factor">[in] - multiplication factor on each component</param>
'''   <returns>dval  log scaled version of %sval</returns>
Public Shared Function logScaleRGBVal(
				ByVal sval as UInteger, 
				ByVal tab as Single(), 
				ByVal factor as Single) as UInteger

	If IsNothing (tab) then Throw New ArgumentNullException  ("tab cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")


	Dim _Result as UInteger = LeptonicaSharp.Natives.logScaleRGBVal( sval, tab, factor)

	Return _Result
End Function

' SRC\pixarith.c (1488, 1)
' 
' makeLogBase2Tab() as l_float32 *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function makeLogBase2Tab() as Single()



	Dim _Result as Single() = LeptonicaSharp.Natives.makeLogBase2Tab( )

	Return _Result
End Function

' SRC\pixarith.c (1515, 1)
' 
' getLogBase2(l_int32, l_float32 *) as l_float32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function getLogBase2(
				ByRef val as Integer, 
				ByRef logtab as Single()) as Single

	If IsNothing (logtab) then Throw New ArgumentNullException  ("logtab cannot be Nothing")


	Dim _Result as Single = LeptonicaSharp.Natives.getLogBase2( val, logtab)

	Return _Result
End Function

#End Region
#Region "SRC\pixcomp.c"
' SRC\pixcomp.c (185, 1)
' pixcompCreateFromPix()
' pixcompCreateFromPix(PIX *, l_int32) as PIXC *
'''  <summary>
''' Notes
''' (1) Use %comptype == IFF_DEFAULT to have the compression
''' type automatically determined.
''' (2) To compress jpeg with a quality other than the default (75), use
''' l_jpegSetQuality()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="comptype">[in] - IFF_DEFAULT, IFF_TIFF_G4, IFF_PNG, IFF_JFIF_JPEG</param>
'''   <returns>pixc, or NULL on error</returns>
Public Shared Function pixcompCreateFromPix(
				ByVal pix as Pix, 
				ByVal comptype as Enumerations.IFF) as PixComp

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcompCreateFromPix( pix.Pointer, comptype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixComp(_Result)
End Function

' SRC\pixcomp.c (242, 1)
' pixcompCreateFromString()
' pixcompCreateFromString(l_uint8 *, size_t, l_int32) as PIXC *
'''  <summary>
''' Notes
''' (1) This works when the compressed string is png, jpeg or tiffg4.
''' (2) The copyflag determines if the data in the new Pixcomp is
''' a copy of the input data.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - compressed string</param>
'''  <param name="size">[in] - number of bytes</param>
'''  <param name="copyflag">[in] - L_INSERT or L_COPY</param>
'''   <returns>pixc, or NULL on error</returns>
Public Shared Function pixcompCreateFromString(
				ByVal data as Byte(), 
				ByVal size as UInteger, 
				ByVal copyflag as Enumerations.L_access_storage) as PixComp

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcompCreateFromString( data, size, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixComp(_Result)
End Function

' SRC\pixcomp.c (291, 1)
' pixcompCreateFromFile()
' pixcompCreateFromFile(const char *, l_int32) as PIXC *
'''  <summary>
''' Notes
''' (1) Use %comptype == IFF_DEFAULT to have the compression
''' type automatically determined.
''' (2) If the comptype is invalid for this file, the default will
''' be substituted.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="comptype">[in] - IFF_DEFAULT, IFF_TIFF_G4, IFF_PNG, IFF_JFIF_JPEG</param>
'''   <returns>pixc, or NULL on error</returns>
Public Shared Function pixcompCreateFromFile(
				ByVal filename as String, 
				ByVal comptype as Enumerations.IFF) as PixComp

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcompCreateFromFile( filename, comptype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixComp(_Result)
End Function

' SRC\pixcomp.c (354, 1)
' pixcompDestroy()
' pixcompDestroy(PIXC **) as void
'''  <summary>
''' Notes
''' (1) Always nulls the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ppixc">[in,out] - will be nulled</param>
Public Shared Sub pixcompDestroy(
				ByRef ppixc as PixComp)


	Dim ppixcPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixc) Then ppixcPTR = ppixc.Pointer

	LeptonicaSharp.Natives.pixcompDestroy( ppixcPTR)
	if ppixcPTR <> IntPtr.Zero then ppixc = new PixComp(ppixcPTR)

End Sub

' SRC\pixcomp.c (384, 1)
' pixcompCopy()
' pixcompCopy(PIXC *) as PIXC *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixcs">[in] - </param>
'''   <returns>pixcd, or NULL on error</returns>
Public Shared Function pixcompCopy(
				ByVal pixcs as PixComp) as PixComp

	If IsNothing (pixcs) then Throw New ArgumentNullException  ("pixcs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixcompCopy( pixcs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixComp(_Result)
End Function

' SRC\pixcomp.c (429, 1)
' pixcompGetDimensions()
' pixcompGetDimensions(PIXC *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixc">[in] - </param>
'''  <param name="pw">[out][optional] - </param>
'''  <param name="ph">[out][optional] - </param>
'''  <param name="pd">[out][optional] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcompGetDimensions(
				ByVal pixc as PixComp, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pd as Integer) as Integer

	If IsNothing (pixc) then Throw New ArgumentNullException  ("pixc cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcompGetDimensions( pixc.Pointer, pw, ph, pd)

	Return _Result
End Function

' SRC\pixcomp.c (453, 1)
' pixcompGetParameters()
' pixcompGetParameters(PIXC *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixc">[in] - </param>
'''  <param name="pxres">[out][all optional] - </param>
'''  <param name="pyres">[out][all optional] - </param>
'''  <param name="pcomptype">[out][all optional] - </param>
'''  <param name="pcmapflag">[out][all optional] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcompGetParameters(
				ByVal pixc as PixComp, 
				ByRef pxres as Integer, 
				ByRef pyres as Integer, 
				ByRef pcomptype as Integer, 
				ByRef pcmapflag as Integer) as Integer

	If IsNothing (pixc) then Throw New ArgumentNullException  ("pixc cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcompGetParameters( pixc.Pointer, pxres, pyres, pcomptype, pcmapflag)

	Return _Result
End Function

' SRC\pixcomp.c (495, 1)
' pixcompDetermineFormat()
' pixcompDetermineFormat(l_int32, l_int32, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This determines the best format for a pix, given both
''' the request (%comptype) and the image characteristics.
''' (2) If %comptype == IFF_DEFAULT, this does not necessarily result
''' in png encoding.  Instead, it returns one of the three formats
''' that is both valid and most likely to give best compression.
''' (3) If the pix cannot be compressed by the input value of
''' %comptype, this selects IFF_PNG, which can compress all pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="comptype">[in] - IFF_DEFAULT, IFF_TIFF_G4, IFF_PNG, IFF_JFIF_JPEG</param>
'''  <param name="d">[in] - pix depth</param>
'''  <param name="cmapflag">[in] - 1 if pix to be compressed as a colormap; 0 otherwise</param>
'''  <param name="pformat">[out] - return IFF_TIFF, IFF_PNG or IFF_JFIF_JPEG</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixcompDetermineFormat(
				ByVal comptype as Enumerations.IFF, 
				ByVal d as Integer, 
				ByVal cmapflag as Integer, 
				ByRef pformat as Integer) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.pixcompDetermineFormat( comptype, d, cmapflag, pformat)

	Return _Result
End Function

' SRC\pixcomp.c (537, 1)
' pixCreateFromPixcomp()
' pixCreateFromPixcomp(PIXC *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixc">[in] - </param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixCreateFromPixcomp(
				ByVal pixc as PixComp) as Pix

	If IsNothing (pixc) then Throw New ArgumentNullException  ("pixc cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixCreateFromPixcomp( pixc.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixcomp.c (590, 1)
' pixacompCreate()
' pixacompCreate(l_int32) as PIXAC *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - initial number of ptrs</param>
'''   <returns>pixac, or NULL on error</returns>
Public Shared Function pixacompCreate(
				ByVal n as Integer) as PixaComp



	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixacompCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixaComp(_Result)
End Function

' SRC\pixcomp.c (657, 1)
' pixacompCreateWithInit()
' pixacompCreateWithInit(l_int32, l_int32, PIX *, l_int32) as PIXAC *
'''  <summary>
''' Notes
''' (1) Initializes a pixacomp to be fully populated with %pix,
''' compressed using %comptype.  If %pix == NULL, %comptype
''' is ignored.
''' (2) Typically, the array is initialized with a tiny pix.
''' This is most easily done by setting %pix == NULL, causing
''' initialization of each array element with a tiny placeholder
''' pix (w = h = d = 1), using comptype = IFF_TIFF_G4 .
''' (3) Example usage
''' // Generate pixacomp for pages 30 - 49.  This has an array
''' // size of 20 and the page number offset is 30.
''' PixaComp pixac = pixacompCreateWithInit(20, 30, NULL,
''' IFF_TIFF_G4);
''' // Now insert png-compressed images into the initialized array
''' for (pageno = 30; pageno LT 50; pageno++) {
''' Pix pixt = ...   // derived from image[pageno]
''' if (pixt)
''' pixacompReplacePix(pixac, pageno, pixt, IFF_PNG);
''' pixDestroy(pixt);
''' }
''' The result is a pixac with 20 compressed strings, and with
''' selected pixt replacing the placeholders.
''' To extract the image for page 38, which is decompressed
''' from element 8 in the array, use
''' pixt = pixacompGetPix(pixac, 38);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - initial number of ptrs</param>
'''  <param name="offset">[in] - difference accessor index - pixacomp array index</param>
'''  <param name="pix">[in][optional] - initialize each ptr in pixacomp to this pix; can be NULL</param>
'''  <param name="comptype">[in] - IFF_DEFAULT, IFF_TIFF_G4, IFF_PNG, IFF_JFIF_JPEG</param>
'''   <returns>pixac, or NULL on error</returns>
Public Shared Function pixacompCreateWithInit(
				ByVal n as Integer, 
				ByVal offset as Integer, 
				ByVal pix as Pix, 
				ByVal comptype as Enumerations.IFF) as PixaComp


	Dim pixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix) Then pixPTR = pix.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixacompCreateWithInit( n, offset, pixPTR, comptype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixaComp(_Result)
End Function

' SRC\pixcomp.c (721, 1)
' pixacompCreateFromPixa()
' pixacompCreateFromPixa(PIXA *, l_int32, l_int32) as PIXAC *
'''  <summary>
''' Notes
''' (1) If %format == IFF_DEFAULT, the conversion format for each
''' image is chosen automatically.  Otherwise, we use the
''' specified format unless it can't be done (e.g., jpeg
''' for a 1, 2 or 4 bpp pix, or a pix with a colormap),
''' in which case we use the default (assumed best) compression.
''' (2) %accesstype is used to extract a boxa from %pixa.
''' (3) To compress jpeg with a quality other than the default (75), use
''' l_jpegSetQuality()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="comptype">[in] - IFF_DEFAULT, IFF_TIFF_G4, IFF_PNG, IFF_JFIF_JPEG</param>
'''  <param name="accesstype">[in] - L_COPY, L_CLONE, L_COPY_CLONE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixacompCreateFromPixa(
				ByVal pixa as Pixa, 
				ByVal comptype as Enumerations.IFF, 
				ByVal accesstype as Enumerations.L_access_storage) as PixaComp

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixacompCreateFromPixa( pixa.Pointer, comptype, accesstype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixaComp(_Result)
End Function

' SRC\pixcomp.c (780, 1)
' pixacompCreateFromFiles()
' pixacompCreateFromFiles(const char *, const char *, l_int32) as PIXAC *
'''  <summary>
''' Notes
''' (1) %dirname is the full path for the directory.
''' (2) %substr is the part of the file name (excluding
''' the directory) that is to be matched.  All matching
''' filenames are read into the Pixa.  If substr is NULL,
''' all filenames are read into the Pixa.
''' (3) Use %comptype == IFF_DEFAULT to have the compression
''' type automatically determined for each file.
''' (4) If the comptype is invalid for a file, the default will
''' be substituted.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirname">[in] - </param>
'''  <param name="substr">[in][optional] - substring filter on filenames; can be null</param>
'''  <param name="comptype">[in] - IFF_DEFAULT, IFF_TIFF_G4, IFF_PNG, IFF_JFIF_JPEG</param>
'''   <returns>pixac, or NULL on error</returns>
Public Shared Function pixacompCreateFromFiles(
				ByVal dirname as String, 
				ByVal substr as String, 
				ByVal comptype as Enumerations.IFF) as PixaComp

	If IsNothing (dirname) then Throw New ArgumentNullException  ("dirname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixacompCreateFromFiles( dirname, substr, comptype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixaComp(_Result)
End Function

' SRC\pixcomp.c (819, 1)
' pixacompCreateFromSA()
' pixacompCreateFromSA(SARRAY *, l_int32) as PIXAC *
'''  <summary>
''' Notes
''' (1) Use %comptype == IFF_DEFAULT to have the compression
''' type automatically determined for each file.
''' (2) If the comptype is invalid for a file, the default will
''' be substituted.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - full pathnames for all files</param>
'''  <param name="comptype">[in] - IFF_DEFAULT, IFF_TIFF_G4, IFF_PNG, IFF_JFIF_JPEG</param>
'''   <returns>pixac, or NULL on error</returns>
Public Shared Function pixacompCreateFromSA(
				ByVal sa as Sarray, 
				ByVal comptype as Enumerations.IFF) as PixaComp

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixacompCreateFromSA( sa.Pointer, comptype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixaComp(_Result)
End Function

' SRC\pixcomp.c (861, 1)
' pixacompDestroy()
' pixacompDestroy(PIXAC **) as void
'''  <summary>
''' Notes
''' (1) Always nulls the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ppixac">[in,out] - to be nulled</param>
Public Shared Sub pixacompDestroy(
				ByRef ppixac as PixaComp)


	Dim ppixacPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixac) Then ppixacPTR = ppixac.Pointer

	LeptonicaSharp.Natives.pixacompDestroy( ppixacPTR)
	if ppixacPTR <> IntPtr.Zero then ppixac = new PixaComp(ppixacPTR)

End Sub

' SRC\pixcomp.c (908, 1)
' pixacompAddPix()
' pixacompAddPix(PIXAC *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) The array is filled up to the (n-1)-th element, and this
''' converts the input pix to a pixc and adds it at
''' the n-th position.
''' (2) The pixc produced from the pix is owned by the pixac.
''' The input pix is not affected.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''  <param name="pix">[in] - to be added</param>
'''  <param name="comptype">[in] - IFF_DEFAULT, IFF_TIFF_G4, IFF_PNG, IFF_JFIF_JPEG</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixacompAddPix(
				ByVal pixac as PixaComp, 
				ByVal pix as Pix, 
				ByVal comptype as Enumerations.IFF) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompAddPix( pixac.Pointer, pix.Pointer, comptype)

	Return _Result
End Function

' SRC\pixcomp.c (950, 1)
' pixacompAddPixcomp()
' pixacompAddPixcomp(PIXAC *, PIXC *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Anything added to a pixac is owned by the pixac.
''' So do not L_INSERT a pixc that is owned by another pixac,
''' or destroy a pixc that has been L_INSERTed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''  <param name="pixc">[in] - to be added by insertion</param>
'''  <param name="copyflag">[in] - L_INSERT, L_COPY</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixacompAddPixcomp(
				ByVal pixac as PixaComp, 
				ByVal pixc as PixComp, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")
	If IsNothing (pixc) then Throw New ArgumentNullException  ("pixc cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompAddPixcomp( pixac.Pointer, pixc.Pointer, copyflag)

	Return _Result
End Function

' SRC\pixcomp.c (1028, 1)
' pixacompReplacePix()
' pixacompReplacePix(PIXAC *, l_int32, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) The %index includes the offset, which must be subtracted
''' to get the actual index into the ptr array.
''' (2) The input %pix is converted to a pixc, which is then inserted
''' into the pixac.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''  <param name="index">[in] - caller's view of index within pixac; includes offset</param>
'''  <param name="pix">[in] - owned by the caller</param>
'''  <param name="comptype">[in] - IFF_DEFAULT, IFF_TIFF_G4, IFF_PNG, IFF_JFIF_JPEG</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixacompReplacePix(
				ByVal pixac as PixaComp, 
				ByVal index as Integer, 
				ByVal pix as Pix, 
				ByVal comptype as Enumerations.IFF) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompReplacePix( pixac.Pointer, index, pix.Pointer, comptype)

	Return _Result
End Function

' SRC\pixcomp.c (1073, 1)
' pixacompReplacePixcomp()
' pixacompReplacePixcomp(PIXAC *, l_int32, PIXC *) as l_ok
'''  <summary>
''' Notes
''' (1) The %index includes the offset, which must be subtracted
''' to get the actual index into the ptr array.
''' (2) The inserted %pixc is now owned by the pixac.  The caller
''' must not destroy it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''  <param name="index">[in] - caller's view of index within pixac; includes offset</param>
'''  <param name="pixc">[in] - to replace existing one, which is destroyed</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixacompReplacePixcomp(
				ByVal pixac as PixaComp, 
				ByVal index as Integer, 
				ByVal pixc as PixComp) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")
	If IsNothing (pixc) then Throw New ArgumentNullException  ("pixc cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompReplacePixcomp( pixac.Pointer, index, pixc.Pointer)

	Return _Result
End Function

' SRC\pixcomp.c (1108, 1)
' pixacompAddBox()
' pixacompAddBox(PIXAC *, BOX *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''  <param name="box">[in] - </param>
'''  <param name="copyflag">[in] - L_INSERT, L_COPY</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixacompAddBox(
				ByVal pixac as PixaComp, 
				ByVal box as Box, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompAddBox( pixac.Pointer, box.Pointer, copyflag)

	Return _Result
End Function

' SRC\pixcomp.c (1136, 1)
' pixacompGetCount()
' pixacompGetCount(PIXAC *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''   <returns>count, or 0 if no pixa</returns>
Public Shared Function pixacompGetCount(
				ByVal pixac as PixaComp) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompGetCount( pixac.Pointer)

	Return _Result
End Function

' SRC\pixcomp.c (1164, 1)
' pixacompGetPixcomp()
' pixacompGetPixcomp(PIXAC *, l_int32, l_int32) as PIXC *
'''  <summary>
''' Notes
''' (1) The %index includes the offset, which must be subtracted
''' to get the actual index into the ptr array.
''' (2) If copyflag == L_NOCOPY, the pixc is owned by %pixac; do
''' not destroy.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''  <param name="index">[in] - caller's view of index within pixac; includes offset</param>
'''  <param name="copyflag">[in] - L_NOCOPY, L_COPY</param>
'''   <returns>pixc, or NULL on error</returns>
Public Shared Function pixacompGetPixcomp(
				ByVal pixac as PixaComp, 
				ByVal index as Integer, 
				ByVal copyflag as Enumerations.L_access_storage) as PixComp

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixacompGetPixcomp( pixac.Pointer, index, copyflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixComp(_Result)
End Function

' SRC\pixcomp.c (1201, 1)
' pixacompGetPix()
' pixacompGetPix(PIXAC *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The %index includes the offset, which must be subtracted
''' to get the actual index into the ptr array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''  <param name="index">[in] - caller's view of index within pixac; includes offset</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixacompGetPix(
				ByVal pixac as PixaComp, 
				ByVal index as Integer) as Pix

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixacompGetPix( pixac.Pointer, index)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixcomp.c (1235, 1)
' pixacompGetPixDimensions()
' pixacompGetPixDimensions(PIXAC *, l_int32, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The %index includes the offset, which must be subtracted
''' to get the actual index into the ptr array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''  <param name="index">[in] - caller's view of index within pixac; includes offset</param>
'''  <param name="pw">[out][optional] - each can be null</param>
'''  <param name="ph">[out][optional] - each can be null</param>
'''  <param name="pd">[out][optional] - each can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixacompGetPixDimensions(
				ByVal pixac as PixaComp, 
				ByVal index as Integer, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pd as Integer) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompGetPixDimensions( pixac.Pointer, index, pw, ph, pd)

	Return _Result
End Function

' SRC\pixcomp.c (1267, 1)
' pixacompGetBoxa()
' pixacompGetBoxa(PIXAC *, l_int32) as BOXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''  <param name="accesstype">[in] - L_COPY, L_CLONE, L_COPY_CLONE</param>
'''   <returns>boxa, or NULL on error</returns>
Public Shared Function pixacompGetBoxa(
				ByVal pixac as PixaComp, 
				ByVal accesstype as Enumerations.L_access_storage) as Boxa

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixacompGetBoxa( pixac.Pointer, accesstype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxa(_Result)
End Function

' SRC\pixcomp.c (1291, 1)
' pixacompGetBoxaCount()
' pixacompGetBoxaCount(PIXAC *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''   <returns>count, or 0 on error</returns>
Public Shared Function pixacompGetBoxaCount(
				ByVal pixac as PixaComp) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompGetBoxaCount( pixac.Pointer)

	Return _Result
End Function

' SRC\pixcomp.c (1325, 1)
' pixacompGetBox()
' pixacompGetBox(PIXAC *, l_int32, l_int32) as BOX *
'''  <summary>
''' Notes
''' (1) The %index includes the offset, which must be subtracted
''' to get the actual index into the ptr array.
''' (2) There is always a boxa with a pixac, and it is initialized so
''' that each box ptr is NULL.
''' (3) In general, we expect that there is either a box associated
''' with each pixc, or no boxes at all in the boxa.
''' (4) Having no boxes is thus not an automatic error.  Whether it
''' is an actual error is determined by the calling program.
''' If the caller expects to get a box, it is an error; see, e.g.,
''' pixacGetBoxGeometry().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''  <param name="index">[in] - caller's view of index within pixac; includes offset</param>
'''  <param name="accesstype">[in] - L_COPY or L_CLONE</param>
'''   <returns>box if null, not automatically an error, or NULL on error</returns>
Public Shared Function pixacompGetBox(
				ByVal pixac as PixaComp, 
				ByVal index as Integer, 
				ByVal accesstype as Enumerations.L_access_storage) as Box

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixacompGetBox( pixac.Pointer, index, accesstype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\pixcomp.c (1371, 1)
' pixacompGetBoxGeometry()
' pixacompGetBoxGeometry(PIXAC *, l_int32, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The %index includes the offset, which must be subtracted
''' to get the actual index into the ptr array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''  <param name="index">[in] - caller's view of index within pixac; includes offset</param>
'''  <param name="px">[out][optional] - each can be null</param>
'''  <param name="py">[out][optional] - each can be null</param>
'''  <param name="pw">[out][optional] - each can be null</param>
'''  <param name="ph">[out][optional] - each can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixacompGetBoxGeometry(
				ByVal pixac as PixaComp, 
				ByVal index as Integer, 
				ByRef px as Integer, 
				ByRef py as Integer, 
				ByRef pw as Integer, 
				ByRef ph as Integer) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompGetBoxGeometry( pixac.Pointer, index, px, py, pw, ph)

	Return _Result
End Function

' SRC\pixcomp.c (1411, 1)
' pixacompGetOffset()
' pixacompGetOffset(PIXAC *) as l_int32
'''  <summary>
''' Notes
''' (1) The offset is the difference between the caller's view of
''' the index into the array and the actual array index.
''' By default it is 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''   <returns>offset, or 0 on error</returns>
Public Shared Function pixacompGetOffset(
				ByVal pixac as PixaComp) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompGetOffset( pixac.Pointer)

	Return _Result
End Function

' SRC\pixcomp.c (1436, 1)
' pixacompSetOffset()
' pixacompSetOffset(PIXAC *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) The offset is the difference between the caller's view of
''' the index into the array and the actual array index.
''' By default it is 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''  <param name="offset">[in] - non-negative</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixacompSetOffset(
				ByVal pixac as PixaComp, 
				ByVal offset as Integer) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompSetOffset( pixac.Pointer, offset)

	Return _Result
End Function

' SRC\pixcomp.c (1466, 1)
' pixaCreateFromPixacomp()
' pixaCreateFromPixacomp(PIXAC *, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) Because the pixa has no notion of offset, the offset must
''' be set to 0 before the conversion, so that pixacompGetPix()
''' fetches all the pixcomps.  It is reset at the end.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''  <param name="accesstype">[in] - L_COPY, L_CLONE, L_COPY_CLONE; for boxa</param>
'''   <returns>pixa if OK, or NULL on error</returns>
Public Shared Function pixaCreateFromPixacomp(
				ByVal pixac as PixaComp, 
				ByVal accesstype as Enumerations.L_access_storage) as Pixa

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaCreateFromPixacomp( pixac.Pointer, accesstype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\pixcomp.c (1524, 1)
' pixacompJoin()
' pixacompJoin(PIXAC *, PIXAC *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This appends a clone of each indicated pixc in pixcas to pixcad
''' (2) istart LT 0 is taken to mean 'read from the start' (istart = 0)
''' (3) iend LT 0 means 'read to the end'
''' (4) If pixacs is NULL or contains no pixc, this is a no-op.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixacd">[in] - dest pixac; add to this one</param>
'''  <param name="pixacs">[in][optional] - source pixac; add from this one</param>
'''  <param name="istart">[in] - starting index in pixacs</param>
'''  <param name="iend">[in] - ending index in pixacs; use -1 to cat all</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixacompJoin(
				ByVal pixacd as PixaComp, 
				ByVal pixacs as PixaComp, 
				ByVal istart as Integer, 
				ByVal iend as Integer) as Integer

	If IsNothing (pixacd) then Throw New ArgumentNullException  ("pixacd cannot be Nothing")

	Dim pixacsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixacs) Then pixacsPTR = pixacs.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompJoin( pixacd.Pointer, pixacsPTR, istart, iend)

	Return _Result
End Function

' SRC\pixcomp.c (1577, 1)
' pixacompInterleave()
' pixacompInterleave(PIXAC *, PIXAC *) as PIXAC *
'''  <summary>
''' Notes
''' (1) If the two pixac have different sizes, a warning is issued,
''' and the number of pairs returned is the minimum size.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac1">[in] - first src pixac</param>
'''  <param name="pixac2">[in] - second src pixac</param>
'''   <returns>pixacd  interleaved from sources, or NULL on error.</returns>
Public Shared Function pixacompInterleave(
				ByVal pixac1 as PixaComp, 
				ByVal pixac2 as PixaComp) as PixaComp

	If IsNothing (pixac1) then Throw New ArgumentNullException  ("pixac1 cannot be Nothing")
	If IsNothing (pixac2) then Throw New ArgumentNullException  ("pixac2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixacompInterleave( pixac1.Pointer, pixac2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixaComp(_Result)
End Function

' SRC\pixcomp.c (1639, 1)
' pixacompRead()
' pixacompRead(const char *) as PIXAC *
'''  <summary>
''' Notes
''' (1) Unlike the situation with serialized Pixa, where the image
''' data is stored in png format, the Pixacomp image data
''' can be stored in tiffg4, png and jpg formats.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>pixac, or NULL on error</returns>
Public Shared Function pixacompRead(
				ByVal filename as String) as PixaComp

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixacompRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixaComp(_Result)
End Function

' SRC\pixcomp.c (1666, 1)
' pixacompReadStream()
' pixacompReadStream(FILE *) as PIXAC *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>pixac, or NULL on error</returns>
Public Shared Function pixacompReadStream(
				ByVal fp as FILE) as PixaComp

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixacompReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixaComp(_Result)
End Function

' SRC\pixcomp.c (1764, 1)
' pixacompReadMem()
' pixacompReadMem(const l_uint8 *, size_t) as PIXAC *
'''  <summary>
''' Notes
''' (1) Deseralizes a buffer of pixacomp data into a pixac in memory.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - const; pixacomp format</param>
'''  <param name="size">[in] - of data</param>
'''   <returns>pixac, or NULL on error</returns>
Public Shared Function pixacompReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as PixaComp

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixacompReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixaComp(_Result)
End Function

' SRC\pixcomp.c (1799, 1)
' pixacompWrite()
' pixacompWrite(const char *, PIXAC *) as l_ok
'''  <summary>
''' Notes
''' (1) Unlike the situation with serialized Pixa, where the image
''' data is stored in png format, the Pixacomp image data
''' can be stored in tiffg4, png and jpg formats.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pixac">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixacompWrite(
				ByVal filename as String, 
				ByVal pixac as PixaComp) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompWrite( filename, pixac.Pointer)

	Return _Result
End Function

' SRC\pixcomp.c (1830, 1)
' pixacompWriteStream()
' pixacompWriteStream(FILE *, PIXAC *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pixac">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixacompWriteStream(
				ByVal fp as FILE, 
				ByVal pixac as PixaComp) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompWriteStream( fp.Pointer, pixac.Pointer)

	Return _Result
End Function

' SRC\pixcomp.c (1878, 1)
' pixacompWriteMem()
' pixacompWriteMem(l_uint8 **, size_t *, PIXAC *) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a pixac in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - serialized data of pixac</param>
'''  <param name="psize">[out] - size of serialized data</param>
'''  <param name="pixac">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixacompWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal pixac as PixaComp) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompWriteMem( pdataPTR, psize, pixac.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pixcomp.c (1952, 1)
' pixacompConvertToPdf()
' pixacompConvertToPdf(PIXAC *, l_int32, l_float32, l_int32, l_int32, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This follows closely the function pixaConvertToPdf() in pdfio.c.
''' (2) The images are encoded with G4 if 1 bpp; JPEG if 8 bpp without
''' colormap and many colors, or 32 bpp; FLATE for anything else.
''' (3) The scalefactor must be GT 0.0; otherwise it is set to 1.0.
''' (4) Specifying one of the three encoding types for %type forces
''' all images to be compressed with that type.  Use 0 to have
''' the type determined for each image based on depth and whether
''' or not it has a colormap.
''' (5) If all images are jpeg compressed, don't require scaling
''' and have the same resolution, it is much faster to skip
''' transcoding with pixacompFastConvertToPdfData(), and then
''' write the data out to file.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - containing images all at the same resolution</param>
'''  <param name="res">[in] - override the resolution of each input image, in ppi; use 0 to respect the resolution embedded in the input</param>
'''  <param name="scalefactor">[in] - scaling factor applied to each image; GT 0.0</param>
'''  <param name="type">[in] - encoding type (L_JPEG_ENCODE, L_G4_ENCODE, L_FLATE_ENCODE, or L_DEFAULT_ENCODE for default</param>
'''  <param name="quality">[in] - used for JPEG only; 0 for default (75)</param>
'''  <param name="title">[in][optional] - pdf title</param>
'''  <param name="fileout">[in] - pdf file of all images</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixacompConvertToPdf(
				ByVal pixac as PixaComp, 
				ByVal res as Integer, 
				ByVal scalefactor as Single, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByVal title as String, 
				ByVal fileout as String) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompConvertToPdf( pixac.Pointer, res, scalefactor, type, quality, title, fileout)

	Return _Result
End Function

' SRC\pixcomp.c (2004, 1)
' pixacompConvertToPdfData()
' pixacompConvertToPdfData(PIXAC *, l_int32, l_float32, l_int32, l_int32, const char *, l_uint8 **, size_t *) as l_ok
'''  <summary>
''' Notes
''' (1) See pixacompConvertToPdf().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - containing images all at the same resolution</param>
'''  <param name="res">[in] - input resolution of all images</param>
'''  <param name="scalefactor">[in] - scaling factor applied to each image; GT 0.0</param>
'''  <param name="type">[in] - encoding type (L_JPEG_ENCODE, L_G4_ENCODE, L_FLATE_ENCODE, or L_DEFAULT_ENCODE for default</param>
'''  <param name="quality">[in] - used for JPEG only; 0 for default (75)</param>
'''  <param name="title">[in][optional] - pdf title</param>
'''  <param name="pdata">[out] - output pdf data (of all images</param>
'''  <param name="pnbytes">[out] - size of output pdf data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixacompConvertToPdfData(
				ByVal pixac as PixaComp, 
				ByVal res as Integer, 
				ByVal scalefactor as Single, 
				ByVal type as Enumerations.L_ENCODE, 
				ByVal quality as Integer, 
				ByVal title as String, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompConvertToPdfData( pixac.Pointer, res, scalefactor, type, quality, title, pdataPTR, pnbytes)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pixcomp.c (2115, 1)
' pixacompFastConvertToPdfData()
' pixacompFastConvertToPdfData(PIXAC *, const char *, l_uint8 **, size_t *) as l_ok
'''  <summary>
''' Notes
''' (1) This generates the pdf without transcoding if all the
''' images in %pixac are compressed with jpeg.
''' Images not jpeg compressed are skipped.
''' (2) It assumes all images have the same resolution, and that
''' the resolution embedded in each jpeg file is correct.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - containing images all at the same resolution</param>
'''  <param name="title">[in][optional] - pdf title</param>
'''  <param name="pdata">[out] - output pdf data (of all images</param>
'''  <param name="pnbytes">[out] - size of output pdf data</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixacompFastConvertToPdfData(
				ByVal pixac as PixaComp, 
				ByVal title as String, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompFastConvertToPdfData( pixac.Pointer, title, pdataPTR, pnbytes)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pixcomp.c (2240, 1)
' pixacompWriteStreamInfo()
' pixacompWriteStreamInfo(FILE *, PIXAC *, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pixac">[in] - </param>
'''  <param name="text">[in][optional] - identifying string; can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixacompWriteStreamInfo(
				ByVal fp as FILE, 
				ByVal pixac as PixaComp, 
				ByVal text as String) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompWriteStreamInfo( fp.Pointer, pixac.Pointer, text)

	Return _Result
End Function

' SRC\pixcomp.c (2284, 1)
' pixcompWriteStreamInfo()
' pixcompWriteStreamInfo(FILE *, PIXC *, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pixc">[in] - </param>
'''  <param name="text">[in][optional] - identifying string; can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcompWriteStreamInfo(
				ByVal fp as FILE, 
				ByVal pixc as PixComp, 
				ByVal text as String) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pixc) then Throw New ArgumentNullException  ("pixc cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcompWriteStreamInfo( fp.Pointer, pixc.Pointer, text)

	Return _Result
End Function

' SRC\pixcomp.c (2340, 1)
' pixacompDisplayTiledAndScaled()
' pixacompDisplayTiledAndScaled(PIXAC *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is the same function as pixaDisplayTiledAndScaled(),
''' except it works on a Pixacomp instead of a Pix.  It is particularly
''' useful for showing the images in a Pixacomp at reduced resolution.
''' (2) See pixaDisplayTiledAndScaled() for details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''  <param name="outdepth">[in] - output depth 1, 8 or 32 bpp</param>
'''  <param name="tilewidth">[in] - each pix is scaled to this width</param>
'''  <param name="ncols">[in] - number of tiles in each row</param>
'''  <param name="background">[in] - 0 for white, 1 for black; this is the color of the spacing between the images</param>
'''  <param name="spacing">[in] - between images, and on outside</param>
'''  <param name="border">[in] - width of additional black border on each image; use 0 for no border</param>
'''   <returns>pix of tiled images, or NULL on error</returns>
Public Shared Function pixacompDisplayTiledAndScaled(
				ByVal pixac as PixaComp, 
				ByVal outdepth as Integer, 
				ByVal tilewidth as Integer, 
				ByVal ncols as Integer, 
				ByVal background as Integer, 
				ByVal spacing as Integer, 
				ByVal border as Integer) as Pix

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixacompDisplayTiledAndScaled( pixac.Pointer, outdepth, tilewidth, ncols, background, spacing, border)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixcomp.c (2374, 1)
' pixacompWriteFiles()
' pixacompWriteFiles(PIXAC *, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixac">[in] - </param>
'''  <param name="subdir">[in] - (subdirectory of /tmp)</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixacompWriteFiles(
				ByVal pixac as PixaComp, 
				ByVal subdir as String) as Integer

	If IsNothing (pixac) then Throw New ArgumentNullException  ("pixac cannot be Nothing")
	If IsNothing (subdir) then Throw New ArgumentNullException  ("subdir cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixacompWriteFiles( pixac.Pointer, subdir)

	Return _Result
End Function

' SRC\pixcomp.c (2414, 1)
' pixcompWriteFile()
' pixcompWriteFile(const char *, PIXC *) as l_ok
'''  <summary>
''' Notes
''' (1) The compressed data is written to file, and the filename is
''' generated by appending the format extension to %rootname.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rootname">[in] - </param>
'''  <param name="pixc">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixcompWriteFile(
				ByVal rootname as String, 
				ByVal pixc as PixComp) as Integer

	If IsNothing (rootname) then Throw New ArgumentNullException  ("rootname cannot be Nothing")
	If IsNothing (pixc) then Throw New ArgumentNullException  ("pixc cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixcompWriteFile( rootname, pixc.Pointer)

	Return _Result
End Function

#End Region
#Region "SRC\pixconv.c"
' SRC\pixconv.c (204, 1)
' pixThreshold8()
' pixThreshold8(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This uses, by default, equally spaced "target" values
''' that depend on the number of levels, with thresholds
''' halfway between.  For N levels, with separation (N-1)/255,
''' there are N-1 fixed thresholds.
''' (2) For 1 bpp destination, the number of levels can only be 2
''' and if a cmap is made, black is (0,0,0) and white
''' is (255,255,255), which is opposite to the convention
''' without a colormap.
''' (3) For 1, 2 and 4 bpp, the nlevels arg is used if a colormap
''' is made; otherwise, we take the most significant bits
''' from the src that will fit in the dest.
''' (4) For 8 bpp, the input pixs is quantized to nlevels.  The
''' dest quantized with that mapping, either through a colormap
''' table or directly with 8 bit values.
''' (5) Typically you should not use make a colormap for 1 bpp dest.
''' (6) This is not dithering.  Each pixel is treated independently.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale</param>
'''  <param name="d">[in] - destination depth 1, 2, 4 or 8</param>
'''  <param name="nlevels">[in] - number of levels to be used for colormap</param>
'''  <param name="cmapflag">[in] - 1 if makes colormap; 0 otherwise</param>
'''   <returns>pixd thresholded with standard dest thresholds, or NULL on error</returns>
Public Shared Function pixThreshold8(
				ByVal pixs as Pix, 
				ByVal d as Integer, 
				ByVal nlevels as Integer, 
				ByVal cmapflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixThreshold8( pixs.Pointer, d, nlevels, cmapflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (272, 1)
' pixRemoveColormapGeneral()
' pixRemoveColormapGeneral(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Convenience function that allows choice between returning
''' a clone or a copy if pixs does not have a colormap.
''' (2) See pixRemoveColormap().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth, with or without colormap</param>
'''  <param name="type">[in] - REMOVE_CMAP_TO_BINARY, REMOVE_CMAP_TO_GRAYSCALE, REMOVE_CMAP_TO_FULL_COLOR, REMOVE_CMAP_WITH_ALPHA, REMOVE_CMAP_BASED_ON_SRC</param>
'''  <param name="ifnocmap">[in] - L_CLONE, L_COPY</param>
'''   <returns>pixd always a new pix; without colormap, or NULL on error</returns>
Public Shared Function pixRemoveColormapGeneral(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.REMOVE_CMAP, 
				ByVal ifnocmap as Enumerations.L_access_storage) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRemoveColormapGeneral( pixs.Pointer, type, ifnocmap)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (322, 1)
' pixRemoveColormap()
' pixRemoveColormap(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If pixs does not have a colormap, a clone is returned.
''' (2) Otherwise, the input pixs is restricted to 1, 2, 4 or 8 bpp.
''' (3) Use REMOVE_CMAP_TO_BINARY only on 1 bpp pix.
''' (4) For grayscale conversion from RGB, use a weighted average
''' of RGB values, and always return an 8 bpp pix, regardless
''' of whether the input pixs depth is 2, 4 or 8 bpp.
''' (5) REMOVE_CMAP_TO_FULL_COLOR ignores the alpha component and
''' returns a 32 bpp pix with spp == 3 and the alpha bytes are 0.
''' (6) For REMOVE_CMAP_BASED_ON_SRC, if there is no color, this
''' returns either a 1 bpp or 8 bpp grayscale pix.
''' If there is color, this returns a 32 bpp pix, with either
''' 3 spp, if the alpha values are all 255 (opaque), or
''' 4 spp (preserving the alpha), if any alpha values are not 255.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - see restrictions below</param>
'''  <param name="type">[in] - REMOVE_CMAP_TO_BINARY, REMOVE_CMAP_TO_GRAYSCALE, REMOVE_CMAP_TO_FULL_COLOR, REMOVE_CMAP_WITH_ALPHA, REMOVE_CMAP_BASED_ON_SRC</param>
'''   <returns>pixd without colormap, or NULL on error</returns>
Public Shared Function pixRemoveColormap(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.REMOVE_CMAP) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRemoveColormap( pixs.Pointer, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (613, 1)
' pixAddGrayColormap8()
' pixAddGrayColormap8(PIX *) as l_ok
'''  <summary>
''' Notes
''' (1) If pixs has a colormap, this is a no-op.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixAddGrayColormap8(
				ByVal pixs as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixAddGrayColormap8( pixs.Pointer)

	Return _Result
End Function

' SRC\pixconv.c (644, 1)
' pixAddMinimalGrayColormap8()
' pixAddMinimalGrayColormap8(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This generates a colormapped version of the input image
''' that has the same number of colormap entries as the
''' input image has unique gray levels.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixAddMinimalGrayColormap8(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAddMinimalGrayColormap8( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (733, 1)
' pixConvertRGBToLuminance()
' pixConvertRGBToLuminance(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) Use a standard luminance conversion.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp RGB</param>
'''   <returns>8 bpp pix, or NULL on error</returns>
Public Shared Function pixConvertRGBToLuminance(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp RGB")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertRGBToLuminance( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (753, 1)
' pixConvertRGBToGray()
' pixConvertRGBToGray(PIX *, l_float32, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) Use a weighted average of the RGB values.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp RGB</param>
'''  <param name="rwt">[in] - non-negative; these should add to 1.0, or use 0.0 for default</param>
'''  <param name="gwt">[in] - non-negative; these should add to 1.0, or use 0.0 for default</param>
'''  <param name="bwt">[in] - non-negative; these should add to 1.0, or use 0.0 for default</param>
'''   <returns>8 bpp pix, or NULL on error</returns>
Public Shared Function pixConvertRGBToGray(
				ByVal pixs as Pix, 
				ByVal rwt as Single, 
				ByVal gwt as Single, 
				ByVal bwt as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rwt) then Throw New ArgumentNullException  ("rwt cannot be Nothing")
	If IsNothing (gwt) then Throw New ArgumentNullException  ("gwt cannot be Nothing")
	If IsNothing (bwt) then Throw New ArgumentNullException  ("bwt cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp RGB")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertRGBToGray( pixs.Pointer, rwt, gwt, bwt)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (831, 1)
' pixConvertRGBToGrayFast()
' pixConvertRGBToGrayFast(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This function should be used if speed of conversion
''' is paramount, and the green channel can be used as
''' a fair representative of the RGB intensity.  It is
''' several times faster than pixConvertRGBToGray().
''' (2) To combine RGB to gray conversion with subsampling,
''' use pixScaleRGBToGrayFast() instead.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp RGB</param>
'''   <returns>8 bpp pix, or NULL on error</returns>
Public Shared Function pixConvertRGBToGrayFast(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp RGB")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertRGBToGrayFast( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (887, 1)
' pixConvertRGBToGrayMinMax()
' pixConvertRGBToGrayMinMax(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This chooses various components or combinations of them,
''' from the three RGB sample values.  In addition to choosing
''' the min, max, and maxdiff (difference between max and min),
''' this also allows boosting the min and max about a reference
''' value.
''' (2) The default reference value for boosting the min and max
''' is 200.  This can be changed with l_setNeutralBoostVal()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp RGB</param>
'''  <param name="type">[in] - L_CHOOSE_MIN, L_CHOOSE_MAX, L_CHOOSE_MAXDIFF, L_CHOOSE_MIN_BOOST, L_CHOOSE_MAX_BOOST</param>
'''   <returns>8 bpp pix, or NULL on error</returns>
Public Shared Function pixConvertRGBToGrayMinMax(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.L_CHOOSE_M) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp RGB")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertRGBToGrayMinMax( pixs.Pointer, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (974, 1)
' pixConvertRGBToGraySatBoost()
' pixConvertRGBToGraySatBoost(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This returns the max component value, boosted by
''' the saturation. The maximum boost occurs where
''' the maximum component value is equal to some reference value.
''' This particular weighting is due to Dany Qumsiyeh.
''' (2) For gray pixels (zero saturation), this returns
''' the intensity of any component.
''' (3) For fully saturated pixels ('fullsat'), this rises linearly
''' with the max value and has a slope equal to 255 divided
''' by the reference value; for a max value greater than
''' the reference value, it is clipped to 255.
''' (4) For saturation values in between, the output is a linear
''' combination of (2) and (3), weighted by saturation.
''' It falls between these two curves, and does not exceed 255.
''' (5) This can be useful for distinguishing an object that has nonzero
''' saturation from a gray background.  For this, the refval
''' should be chosen near the expected value of the background,
''' to achieve maximum saturation boost there.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="refval">[in] - between 1 and 255; typ. less than 128</param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function pixConvertRGBToGraySatBoost(
				ByVal pixs as Pix, 
				ByVal refval as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertRGBToGraySatBoost( pixs.Pointer, refval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (1052, 1)
' pixConvertRGBToGrayArb()
' pixConvertRGBToGrayArb(PIX *, l_float32, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This converts to gray using an arbitrary linear combination
''' of the rgb color components.  It differs from pixConvertToGray(),
''' which uses only positive coefficients that sum to 1.
''' (2) The gray output values are clipped to 0 and 255.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp RGB</param>
'''  <param name="rc">[in] - arithmetic factors; can be negative</param>
'''  <param name="gc">[in] - arithmetic factors; can be negative</param>
'''  <param name="bc">[in] - arithmetic factors; can be negative</param>
'''   <returns>8 bpp pix, or NULL on error</returns>
Public Shared Function pixConvertRGBToGrayArb(
				ByVal pixs as Pix, 
				ByVal rc as Single, 
				ByVal gc as Single, 
				ByVal bc as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rc) then Throw New ArgumentNullException  ("rc cannot be Nothing")
	If IsNothing (gc) then Throw New ArgumentNullException  ("gc cannot be Nothing")
	If IsNothing (bc) then Throw New ArgumentNullException  ("bc cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp RGB")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertRGBToGrayArb( pixs.Pointer, rc, gc, bc)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (1114, 1)
' pixConvertRGBToBinaryArb()
' pixConvertRGBToBinaryArb(PIX *, l_float32, l_float32, l_float32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This makes a 1 bpp mask from an RGB image, using an arbitrary
''' linear combination of the rgb color components, along with
''' a threshold and a selection choice of the gray value relative
''' to %thresh.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp RGB</param>
'''  <param name="rc">[in] - arithmetic factors; can be negative</param>
'''  <param name="gc">[in] - arithmetic factors; can be negative</param>
'''  <param name="bc">[in] - arithmetic factors; can be negative</param>
'''  <param name="thresh">[in] - binarization threshold</param>
'''  <param name="relation">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''   <returns>1 bpp pix, or NULL on error</returns>
Public Shared Function pixConvertRGBToBinaryArb(
				ByVal pixs as Pix, 
				ByVal rc as Single, 
				ByVal gc as Single, 
				ByVal bc as Single, 
				ByVal thresh as Integer, 
				ByVal relation as Enumerations.L_SELECT_IF) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rc) then Throw New ArgumentNullException  ("rc cannot be Nothing")
	If IsNothing (gc) then Throw New ArgumentNullException  ("gc cannot be Nothing")
	If IsNothing (bc) then Throw New ArgumentNullException  ("bc cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp RGB")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertRGBToBinaryArb( pixs.Pointer, rc, gc, bc, thresh, relation)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (1171, 1)
' pixConvertGrayToColormap()
' pixConvertGrayToColormap(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This is a simple interface for adding a colormap to a
''' 2, 4 or 8 bpp grayscale image without causing any
''' quantization.  There is some similarity to operations
''' in grayquant.c, such as pixThresholdOn8bpp(), where
''' the emphasis is on quantization with an arbitrary number
''' of levels, and a colormap is an option.
''' (2) Returns a copy if pixs already has a colormap.
''' (3) For 8 bpp src, this is a lossless transformation.
''' (4) For 2 and 4 bpp src, this generates a colormap that
''' assumes full coverage of the gray space, with equally spaced
''' levels 4 levels for d = 2 and 16 levels for d = 4.
''' (5) In all cases, the depth of the dest is the same as the src.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2, 4 or 8 bpp grayscale</param>
'''   <returns>pixd 2, 4 or 8 bpp with colormap, or NULL on error</returns>
Public Shared Function pixConvertGrayToColormap(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {2,4,8}.contains (pixs.d) = false then Throw New ArgumentException ("2, 4 or 8 bpp grayscale")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertGrayToColormap( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (1226, 1)
' pixConvertGrayToColormap8()
' pixConvertGrayToColormap8(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Returns a copy if pixs already has a colormap.
''' (2) This is a lossless transformation; there is no quantization.
''' We compute the number of different gray values in pixs,
''' and construct a colormap that has exactly these values.
''' (3) 'mindepth' is the minimum depth of pixd.  If mindepth == 8,
''' pixd will always be 8 bpp.  Let the number of different
''' gray values in pixs be ngray.  If mindepth == 4, we attempt
''' to save pixd as a 4 bpp image, but if ngray GT 16,
''' pixd must be 8 bpp.  Likewise, if mindepth == 2,
''' the depth of pixd will be 2 if ngray LT= 4 and 4 if ngray GT 4
''' but LT= 16.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale</param>
'''  <param name="mindepth">[in] - of pixd; valid values are 2, 4 and 8</param>
'''   <returns>pixd 2, 4 or 8 bpp with colormap, or NULL on error</returns>
Public Shared Function pixConvertGrayToColormap8(
				ByVal pixs as Pix, 
				ByVal mindepth as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertGrayToColormap8( pixs.Pointer, mindepth)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (1323, 1)
' pixColorizeGray()
' pixColorizeGray(PIX *, l_uint32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This applies the specific color to the grayscale image.
''' (2) If pixs already has a colormap, it is removed to gray
''' before colorizing.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp gray; 2, 4 or 8 bpp colormapped</param>
'''  <param name="color">[in] - 32 bit rgba pixel</param>
'''  <param name="cmapflag">[in] - 1 for result to have colormap; 0 for RGB</param>
'''   <returns>pixd 8 bpp colormapped or 32 bpp rgb, or NULL on error</returns>
Public Shared Function pixColorizeGray(
				ByVal pixs as Pix, 
				ByVal color as UInteger, 
				ByVal cmapflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {2,4,8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp gray; 2, 4 or 8 bpp colormapped")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixColorizeGray( pixs.Pointer, color, cmapflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (1412, 1)
' pixConvertRGBToColormap()
' pixConvertRGBToColormap(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This function has two relatively simple modes of color
''' quantization
''' (a) If the image is made orthographically and has not more
''' than 256 'colors' at the level 4 octcube leaves,
''' it is quantized nearly exactly.  The ditherflag
''' is ignored.
''' (b) Most natural images have more than 256 different colors;
''' in that case we use adaptive octree quantization,
''' with dithering if requested.
''' (2) If there are not more than 256 occupied level 4 octcubes,
''' the color in the colormap that represents all pixels in
''' one of those octcubes is given by the first pixel that
''' falls into that octcube.
''' (3) If there are more than 256 colors, we use adaptive octree
''' color quantization.
''' (4) Dithering gives better visual results on images where
''' there is a color wash (a slow variation of color), but it
''' is about twice as slow and results in significantly larger
''' files when losslessly compressed (e.g., into png).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="ditherflag">[in] - 1 to dither, 0 otherwise</param>
'''   <returns>pixd 2, 4 or 8 bpp with colormap, or NULL on error</returns>
Public Shared Function pixConvertRGBToColormap(
				ByVal pixs as Pix, 
				ByVal ditherflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertRGBToColormap( pixs.Pointer, ditherflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (1477, 1)
' pixConvertCmapTo1()
' pixConvertCmapTo1(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This is an extreme color quantizer.  It decides which
''' colors map to FG (black) and which to BG (white).
''' (2) This uses two heuristics to make the decision
''' (a) colors similar to each other are likely to be in the same class
''' (b) there is usually much less FG than BG.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - cmapped</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixConvertCmapTo1(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertCmapTo1( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (1588, 1)
' pixQuantizeIfFewColors()
' pixQuantizeIfFewColors(PIX *, l_int32, l_int32, l_int32, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This is a wrapper that tests if the pix can be quantized
''' with good quality using a small number of colors.  If so,
''' it does the quantization, defining a colormap and using
''' pixels whose value is an index into the colormap.
''' (2) If the image has color, it is quantized with 8 bpp pixels.
''' If the image is essentially grayscale, the pixels are
''' either 4 or 8 bpp, depending on the size of the required
''' colormap.
''' (3) %octlevel = 4 generates a larger colormap and larger
''' compressed image than %octlevel = 3.  If image quality is
''' important, you should use %octlevel = 4.
''' (4) If the image already has a colormap, it returns a clone.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp gray or 32 bpp rgb</param>
'''  <param name="maxcolors">[in] - max number of colors allowed to be returned from pixColorsForQuantization(); use 0 for default</param>
'''  <param name="mingraycolors">[in] - min number of gray levels that a grayscale image is quantized to; use 0 for default</param>
'''  <param name="octlevel">[in] - for octcube quantization 3 or 4</param>
'''  <param name="ppixd">[out] - 2,4 or 8 bpp quantized; null if too many colors</param>
'''   <returns>0 if OK, 1 on error or if pixs can't be quantized into a small number of colors.</returns>
Public Shared Function pixQuantizeIfFewColors(
				ByVal pixs as Pix, 
				ByVal maxcolors as Integer, 
				ByVal mingraycolors as Integer, 
				ByVal octlevel as Integer, 
				ByRef ppixd as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixQuantizeIfFewColors( pixs.Pointer, maxcolors, mingraycolors, octlevel, ppixdPTR)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return _Result
End Function

' SRC\pixconv.c (1689, 1)
' pixConvert16To8()
' pixConvert16To8(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) With L_AUTO_BYTE, if the max pixel value is greater than 255,
''' use the MSB; otherwise, use the LSB.
''' (2) With L_CLIP_TO_FF, use min(pixel-value, 0xff) for each
''' 16-bit src pixel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 16 bpp</param>
'''  <param name="type">[in] - L_LS_BYTE, L_MS_BYTE, L_AUTO_BYTE, L_CLIP_TO_FF</param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function pixConvert16To8(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.L_16_bit_conversion) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {16}.contains (pixs.d) = false then Throw New ArgumentException ("16 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert16To8( pixs.Pointer, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (1786, 1)
' pixConvertGrayToFalseColor()
' pixConvertGrayToFalseColor(PIX *, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) For 8 bpp input, this simply adds a colormap to the input image.
''' (2) For 16 bpp input, it first converts to 8 bpp, using the MSB,
''' and then adds the colormap.
''' (3) The colormap is modeled after the Matlab "jet" configuration.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 or 16 bpp grayscale</param>
'''  <param name="gamma">[in] - (factor) 0.0 or 1.0 for default; GT 1.0 for brighter; 2.0 is quite nice</param>
'''   <returns>pixd 8 bpp with colormap, or NULL on error</returns>
Public Shared Function pixConvertGrayToFalseColor(
				ByVal pixs as Pix, 
				ByVal gamma as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (gamma) then Throw New ArgumentNullException  ("gamma cannot be Nothing")
	If {8,16}.contains (pixs.d) = false then Throw New ArgumentException ("8 or 16 bpp grayscale")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertGrayToFalseColor( pixs.Pointer, gamma)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (1878, 1)
' pixUnpackBinary()
' pixUnpackBinary(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This function calls special cases of pixConvert1To(),
''' for 2, 4, 8, 16 and 32 bpp destinations.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="depth">[in] - of destination 2, 4, 8, 16 or 32 bpp</param>
'''  <param name="invert">[in] - 0  binary 0 --GT grayscale 0 binary 1 --GT grayscale 0xff... 1  binary 0 --GT grayscale 0xff... binary 1 --GT grayscale 0</param>
'''   <returns>pixd 2, 4, 8, 16 or 32 bpp, or NULL on error</returns>
Public Shared Function pixUnpackBinary(
				ByVal pixs as Pix, 
				ByVal depth as Integer, 
				ByVal invert as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixUnpackBinary( pixs.Pointer, depth, invert)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (1943, 1)
' pixConvert1To16()
' pixConvert1To16(PIX *, PIX *, l_uint16, l_uint16) as PIX *
'''  <summary>
''' Notes
''' (1) If pixd is null, a new pix is made.
''' (2) If pixd is not null, it must be of equal width and height
''' as pixs.  It is always returned.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - 16 bpp, can be null</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="val0">[in] - 16 bit value to be used for 0s in pixs</param>
'''  <param name="val1">[in] - 16 bit value to be used for 1s in pixs</param>
'''   <returns>pixd 16 bpp</returns>
Public Shared Function pixConvert1To16(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal val0 as UShort, 
				ByVal val1 as UShort) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (val0) then Throw New ArgumentNullException  ("val0 cannot be Nothing")
	If IsNothing (val1) then Throw New ArgumentNullException  ("val1 cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert1To16( pixdPTR, pixs.Pointer, val0, val1)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2017, 1)
' pixConvert1To32()
' pixConvert1To32(PIX *, PIX *, l_uint32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) If pixd is null, a new pix is made.
''' (2) If pixd is not null, it must be of equal width and height
''' as pixs.  It is always returned.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - 32 bpp, can be null</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="val0">[in] - 32 bit value to be used for 0s in pixs</param>
'''  <param name="val1">[in] - 32 bit value to be used for 1s in pixs</param>
'''   <returns>pixd 32 bpp</returns>
Public Shared Function pixConvert1To32(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal val0 as UInteger, 
				ByVal val1 as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert1To32( pixdPTR, pixs.Pointer, val0, val1)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2080, 1)
' pixConvert1To2Cmap()
' pixConvert1To2Cmap(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) Input 0 is mapped to (255, 255, 255); 1 is mapped to (0, 0, 0)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>pixd 2 bpp, cmapped</returns>
Public Shared Function pixConvert1To2Cmap(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert1To2Cmap( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2123, 1)
' pixConvert1To2()
' pixConvert1To2(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If pixd is null, a new pix is made.
''' (2) If pixd is not null, it must be of equal width and height
''' as pixs.  It is always returned.
''' (3) A simple unpacking might use val0 = 0 and val1 = 3.
''' (4) If you want a colormapped pixd, use pixConvert1To2Cmap().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - 2 bpp, can be null</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="val0">[in] - 2 bit value to be used for 0s in pixs</param>
'''  <param name="val1">[in] - 2 bit value to be used for 1s in pixs</param>
'''   <returns>pixd 2 bpp</returns>
Public Shared Function pixConvert1To2(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal val0 as Integer, 
				ByVal val1 as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert1To2( pixdPTR, pixs.Pointer, val0, val1)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2202, 1)
' pixConvert1To4Cmap()
' pixConvert1To4Cmap(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) Input 0 is mapped to (255, 255, 255); 1 is mapped to (0, 0, 0)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>pixd 4 bpp, cmapped</returns>
Public Shared Function pixConvert1To4Cmap(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert1To4Cmap( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2245, 1)
' pixConvert1To4()
' pixConvert1To4(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If pixd is null, a new pix is made.
''' (2) If pixd is not null, it must be of equal width and height
''' as pixs.  It is always returned.
''' (3) A simple unpacking might use val0 = 0 and val1 = 15, or v.v.
''' (4) If you want a colormapped pixd, use pixConvert1To4Cmap().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - 4 bpp, can be null</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="val0">[in] - 4 bit value to be used for 0s in pixs</param>
'''  <param name="val1">[in] - 4 bit value to be used for 1s in pixs</param>
'''   <returns>pixd 4 bpp</returns>
Public Shared Function pixConvert1To4(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal val0 as Integer, 
				ByVal val1 as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {4}.contains (pixd.d) = false then Throw New ArgumentException ("4 bpp, can be null")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert1To4( pixdPTR, pixs.Pointer, val0, val1)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2323, 1)
' pixConvert1To8Cmap()
' pixConvert1To8Cmap(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) Input 0 is mapped to (255, 255, 255); 1 is mapped to (0, 0, 0)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>pixd 8 bpp, cmapped</returns>
Public Shared Function pixConvert1To8Cmap(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert1To8Cmap( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2366, 1)
' pixConvert1To8()
' pixConvert1To8(PIX *, PIX *, l_uint8, l_uint8) as PIX *
'''  <summary>
''' Notes
''' (1) If pixd is null, a new pix is made.
''' (2) If pixd is not null, it must be of equal width and height
''' as pixs.  It is always returned.
''' (3) A simple unpacking might use val0 = 0 and val1 = 255, or v.v.
''' (4) To have a colormap associated with the 8 bpp pixd,
''' use pixConvert1To8Cmap().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - 8 bpp, can be null</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="val0">[in] - 8 bit value to be used for 0s in pixs</param>
'''  <param name="val1">[in] - 8 bit value to be used for 1s in pixs</param>
'''   <returns>pixd 8 bpp</returns>
Public Shared Function pixConvert1To8(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal val0 as Byte, 
				ByVal val1 as Byte) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (val0) then Throw New ArgumentNullException  ("val0 cannot be Nothing")
	If IsNothing (val1) then Throw New ArgumentNullException  ("val1 cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert1To8( pixdPTR, pixs.Pointer, val0, val1)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2456, 1)
' pixConvert2To8()
' pixConvert2To8(PIX *, l_uint8, l_uint8, l_uint8, l_uint8, l_int32) as PIX *
'''  <summary>
''' Notes
''' ~ A simple unpacking might use val0 = 0,
''' val1 = 85 (0x55), val2 = 170 (0xaa), val3 = 255.
''' ~ If cmapflag is TRUE
''' ~ The 8 bpp image is made with a colormap.
''' ~ If pixs has a colormap, the input values are ignored and
''' the 8 bpp image is made using the colormap
''' ~ If pixs does not have a colormap, the input values are
''' used to build the colormap.
''' ~ If cmapflag is FALSE
''' ~ The 8 bpp image is made without a colormap.
''' ~ If pixs has a colormap, the input values are ignored,
''' the colormap is removed, and the values stored in the 8 bpp
''' image are from the colormap.
''' ~ If pixs does not have a colormap, the input values are
''' used to populate the 8 bpp image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2 bpp</param>
'''  <param name="val0">[in] - 8 bit value to be used for 00 in pixs</param>
'''  <param name="val1">[in] - 8 bit value to be used for 01 in pixs</param>
'''  <param name="val2">[in] - 8 bit value to be used for 10 in pixs</param>
'''  <param name="val3">[in] - 8 bit value to be used for 11 in pixs</param>
'''  <param name="cmapflag">[in] - TRUE if pixd is to have a colormap; FALSE otherwise</param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function pixConvert2To8(
				ByVal pixs as Pix, 
				ByVal val0 as Byte, 
				ByVal val1 as Byte, 
				ByVal val2 as Byte, 
				ByVal val3 as Byte, 
				ByVal cmapflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (val0) then Throw New ArgumentNullException  ("val0 cannot be Nothing")
	If IsNothing (val1) then Throw New ArgumentNullException  ("val1 cannot be Nothing")
	If IsNothing (val2) then Throw New ArgumentNullException  ("val2 cannot be Nothing")
	If IsNothing (val3) then Throw New ArgumentNullException  ("val3 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert2To8( pixs.Pointer, val0, val1, val2, val3, cmapflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2567, 1)
' pixConvert4To8()
' pixConvert4To8(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' ~ If cmapflag is TRUE
''' ~ pixd is made with a colormap.
''' ~ If pixs has a colormap, it is copied and the colormap
''' index values are placed in pixd.
''' ~ If pixs does not have a colormap, a colormap with linear
''' trc is built and the pixel values in pixs are placed in
''' pixd as colormap index values.
''' ~ If cmapflag is FALSE
''' ~ pixd is made without a colormap.
''' ~ If pixs has a colormap, it is removed and the values stored
''' in pixd are from the colormap (converted to gray).
''' ~ If pixs does not have a colormap, the pixel values in pixs
''' are used, with shift replication, to populate pixd.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 4 bpp</param>
'''  <param name="cmapflag">[in] - TRUE if pixd is to have a colormap; FALSE otherwise</param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function pixConvert4To8(
				ByVal pixs as Pix, 
				ByVal cmapflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert4To8( pixs.Pointer, cmapflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2652, 1)
' pixConvert8To16()
' pixConvert8To16(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) For left shift of 8, the 8 bit value is replicated in both
''' the MSB and the LSB of the pixels in pixd.  That way, we get
''' proportional mapping, with a correct map from 8 bpp white
''' (0xff) to 16 bpp white (0xffff).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; colormap removed to gray</param>
'''  <param name="leftshift">[in] - number of bits 0 is no shift; 8 replicates in MSB and LSB of dest</param>
'''   <returns>pixd 16 bpp, or NULL on error</returns>
Public Shared Function pixConvert8To16(
				ByVal pixs as Pix, 
				ByVal leftshift as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert8To16( pixs.Pointer, leftshift)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2718, 1)
' pixConvertTo2()
' pixConvertTo2(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This is a top-level function, with simple default values
''' used in pixConvertTo8() if unpacking is necessary.
''' (2) Any existing colormap is removed; the result is always gray.
''' (3) If the input image has 2 bpp and no colormap, the operation is
''' lossless and a copy is returned.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 32 bpp; colormap OK but will be removed</param>
'''   <returns>pixd   2 bpp, or NULL on error</returns>
Public Shared Function pixConvertTo2(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertTo2( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2770, 1)
' pixConvert8To2()
' pixConvert8To2(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) Any existing colormap is removed to gray.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 bpp; colormap OK</param>
'''   <returns>pixd  2 bpp, or NULL on error</returns>
Public Shared Function pixConvert8To2(
				ByVal pix as Pix) as Pix

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {8}.contains (pix.d) = false then Throw New ArgumentException ("8 bpp; colormap OK")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert8To2( pix.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2826, 1)
' pixConvertTo4()
' pixConvertTo4(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This is a top-level function, with simple default values
''' used in pixConvertTo8() if unpacking is necessary.
''' (2) Any existing colormap is removed; the result is always gray.
''' (3) If the input image has 4 bpp and no colormap, the operation is
''' lossless and a copy is returned.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 32 bpp; colormap OK but will be removed</param>
'''   <returns>pixd   4 bpp, or NULL on error</returns>
Public Shared Function pixConvertTo4(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertTo4( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2878, 1)
' pixConvert8To4()
' pixConvert8To4(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) Any existing colormap is removed to gray.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 8 bpp; colormap OK</param>
'''   <returns>pixd  4 bpp, or NULL on error</returns>
Public Shared Function pixConvert8To4(
				ByVal pix as Pix) as Pix

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {8}.contains (pix.d) = false then Throw New ArgumentException ("8 bpp; colormap OK")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert8To4( pix.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2933, 1)
' pixConvertTo1()
' pixConvertTo1(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a top-level function, with simple default values
''' used in pixConvertTo8() if unpacking is necessary.
''' (2) Any existing colormap is removed.
''' (3) If the input image has 1 bpp and no colormap, the operation is
''' lossless and a copy is returned.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 or 32 bpp</param>
'''  <param name="threshold">[in] - for final binarization, relative to 8 bpp</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixConvertTo1(
				ByVal pixs as Pix, 
				ByVal threshold as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8,16,24,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16 or 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertTo1( pixs.Pointer, threshold)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (2989, 1)
' pixConvertTo1BySampling()
' pixConvertTo1BySampling(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a quick and dirty, top-level converter.
''' (2) See pixConvertTo1() for default values.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 or 32 bpp</param>
'''  <param name="factor">[in] - submsampling factor; integer GT= 1</param>
'''  <param name="threshold">[in] - for final binarization, relative to 8 bpp</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixConvertTo1BySampling(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByVal threshold as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8,16,24,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16 or 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertTo1BySampling( pixs.Pointer, factor, threshold)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3041, 1)
' pixConvertTo8()
' pixConvertTo8(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a top-level function, with simple default values
''' for unpacking.
''' (2) The result, pixd, is made with a colormap if specified.
''' It is always a new image -- never a clone.  For example,
''' if d == 8, and cmapflag matches the existence of a cmap
''' in pixs, the operation is lossless and it returns a copy.
''' (3) The default values used are
''' ~ 1 bpp val0 = 255, val1 = 0
''' ~ 2 bpp 4 bpp  even increments over dynamic range
''' ~ 8 bpp lossless if cmap matches cmapflag
''' ~ 16 bpp use most significant byte
''' (4) If 32 bpp RGB, this is converted to gray.  If you want
''' to do color quantization, you must specify the type
''' explicitly, using the color quantization code.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 or 32 bpp</param>
'''  <param name="cmapflag">[in] - TRUE if pixd is to have a colormap; FALSE otherwise</param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function pixConvertTo8(
				ByVal pixs as Pix, 
				ByVal cmapflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8,16,24,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16 or 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertTo8( pixs.Pointer, cmapflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3105, 1)
' pixConvertTo8BySampling()
' pixConvertTo8BySampling(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a fast, quick/dirty, top-level converter.
''' (2) See pixConvertTo8() for default values.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 or 32 bpp</param>
'''  <param name="factor">[in] - submsampling factor; integer GT= 1</param>
'''  <param name="cmapflag">[in] - TRUE if pixd is to have a colormap; FALSE otherwise</param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function pixConvertTo8BySampling(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByVal cmapflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8,16,24,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16 or 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertTo8BySampling( pixs.Pointer, factor, cmapflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3149, 1)
' pixConvertTo8Colormap()
' pixConvertTo8Colormap(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a top-level function, with simple default values
''' for unpacking.
''' (2) The result, pixd, is always made with a colormap.
''' (3) If d == 8, the operation is lossless and it returns a copy.
''' (4) The default values used for increasing depth are
''' ~ 1 bpp val0 = 255, val1 = 0
''' ~ 2 bpp 4 bpp  even increments over dynamic range
''' (5) For 16 bpp, use the most significant byte.
''' (6) For 32 bpp RGB, use octcube quantization with optional dithering.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 or 32 bpp</param>
'''  <param name="dither">[in] - 1 to dither if necessary; 0 otherwise</param>
'''   <returns>pixd 8 bpp, cmapped, or NULL on error</returns>
Public Shared Function pixConvertTo8Colormap(
				ByVal pixs as Pix, 
				ByVal dither as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8,16,24,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16 or 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertTo8Colormap( pixs.Pointer, dither)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3184, 1)
' pixConvertTo16()
' pixConvertTo16(PIX *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 8 bpp</param>
'''   <returns>pixd 16 bpp, or NULL on error Usage Top-level function, with simple default values for unpacking. 1 bpp  val0 = 0xffff, val1 = 0 8 bpp  replicates the 8 bit value in both the MSB and LSB of the 16 bit pixel.</returns>
Public Shared Function pixConvertTo16(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertTo16( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3233, 1)
' pixConvertTo32()
' pixConvertTo32(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) Never returns a clone of pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 or 32 bpp</param>
'''   <returns>pixd 32 bpp, or NULL on error Usage Top-level function, with simple default values for unpacking. 1 bpp  val0 = 255, val1 = 0 and then replication into R, G and B components 2 bpp  if colormapped, use the colormap values; otherwise, use val0 = 0, val1 = 0x55, val2 = 0xaa, val3 = 255 and replicate gray into R, G and B components 4 bpp  if colormapped, use the colormap values; otherwise, replicate 2 nybs into a byte, and then into R,G,B components 8 bpp  if colormapped, use the colormap values; otherwise, replicate gray values into R, G and B components 16 bpp replicate MSB into R, G and B components 24 bpp unpack the pixels, maintaining word alignment on each scanline 32 bpp makes a copy</returns>
Public Shared Function pixConvertTo32(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8,16,24,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16 or 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertTo32( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3288, 1)
' pixConvertTo32BySampling()
' pixConvertTo32BySampling(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a fast, quick/dirty, top-level converter.
''' (2) See pixConvertTo32() for default values.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 or 32 bpp</param>
'''  <param name="factor">[in] - submsampling factor; integer GT= 1</param>
'''   <returns>pixd 32 bpp, or NULL on error</returns>
Public Shared Function pixConvertTo32BySampling(
				ByVal pixs as Pix, 
				ByVal factor as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8,16,24,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16 or 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertTo32BySampling( pixs.Pointer, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3323, 1)
' pixConvert8To32()
' pixConvert8To32(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) If there is no colormap, replicates the gray value
''' into the 3 MSB of the dest pixel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''   <returns>32 bpp rgb pix, or NULL on error</returns>
Public Shared Function pixConvert8To32(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert8To32( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3393, 1)
' pixConvertTo8Or32()
' pixConvertTo8Or32(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If there is a colormap, the colormap is removed to 8 or 32 bpp,
''' depending on whether the colors in the colormap are all gray.
''' (2) If the input is either rgb or 8 bpp without a colormap,
''' this returns either a clone or a copy, depending on %copyflag.
''' (3) Otherwise, the pix is converted to 8 bpp grayscale.
''' In all cases, pixd does not have a colormap.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16, with or without colormap; or 32 bpp rgb</param>
'''  <param name="copyflag">[in] - L_CLONE or L_COPY</param>
'''  <param name="warnflag">[in] - 1 to issue warning if colormap is removed; else 0</param>
'''   <returns>pixd 8 bpp grayscale or 32 bpp rgb, or NULL on error</returns>
Public Shared Function pixConvertTo8Or32(
				ByVal pixs as Pix, 
				ByVal copyflag as Enumerations.L_access_storage, 
				ByVal warnflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertTo8Or32( pixs.Pointer, copyflag, warnflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3456, 1)
' pixConvert24To32()
' pixConvert24To32(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) 24 bpp rgb pix are not supported in leptonica, except for a small
''' number of formatted write operations.  The data is a byte array,
''' with pixels in order r,g,b, and padded to 32 bit boundaries
''' in each line.
''' (2) Because 24 bpp rgb pix are conveniently generated by programs
''' such as xpdf (which has SplashBitmaps that store the raster
''' data in consecutive 24-bit rgb pixels), it is useful to provide
''' 24 bpp pix that simply incorporate that data.  The only things
''' we can do with these are
''' (a) write them to file in png, jpeg, tiff and pnm
''' (b) interconvert between 24 and 32 bpp in memory (for testing).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 24 bpp rgb</param>
'''   <returns>pixd 32 bpp rgb, or NULL on error</returns>
Public Shared Function pixConvert24To32(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert24To32( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3506, 1)
' pixConvert32To24()
' pixConvert32To24(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) See pixconvert24To32().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''   <returns>pixd 24 bpp rgb, or NULL on error</returns>
Public Shared Function pixConvert32To24(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert32To24( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3559, 1)
' pixConvert32To16()
' pixConvert32To16(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The data in pixs is typically used for labelling.
''' It is an array of l_uint32 values, not rgb or rgba.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp, single component</param>
'''  <param name="type">[in] - L_LS_TWO_BYTES, L_MS_TWO_BYTES, L_CLIP_TO_FFFF</param>
'''   <returns>pixd 16 bpp , or NULL on error</returns>
Public Shared Function pixConvert32To16(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.L_16_bit_conversion) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp, single component")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert32To16( pixs.Pointer, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3623, 1)
' pixConvert32To8()
' pixConvert32To8(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp, single component</param>
'''  <param name="type16">[in] - L_LS_TWO_BYTES, L_MS_TWO_BYTES, L_CLIP_TO_FFFF</param>
'''  <param name="type8">[in] - L_LS_BYTE, L_MS_BYTE, L_CLIP_TO_FF</param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function pixConvert32To8(
				ByVal pixs as Pix, 
				ByVal type16 as Enumerations.L_16_bit_conversion, 
				ByVal type8 as Enumerations.L_16_bit_conversion) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp, single component")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvert32To8( pixs.Pointer, type16, type8)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3662, 1)
' pixRemoveAlpha()
' pixRemoveAlpha(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This is a wrapper on pixAlphaBlendUniform()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth</param>
'''   <returns>pixd        if 32 bpp rgba, pixs blended over a white background; a clone of pixs otherwise, and NULL on error</returns>
Public Shared Function pixRemoveAlpha(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRemoveAlpha( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3699, 1)
' pixAddAlphaTo1bpp()
' pixAddAlphaTo1bpp(PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) We don't use 1 bpp colormapped images with alpha in leptonica,
''' but we support generating them (here), writing to png, and reading
''' the png.  On reading, they are converted to 32 bpp RGBA.
''' (2) The background (0) pixels in pixs become fully transparent, and the
''' foreground (1) pixels are fully opaque.  Thus, pixd is a 1 bpp
''' representation of a stencil, that can be used to paint over pixels
''' of a backing image that are masked by the foreground in pixs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - 1 bpp, can be null or equal to pixs</param>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>pixd 1 bpp with colormap and non-opaque alpha, or NULL on error</returns>
Public Shared Function pixAddAlphaTo1bpp(
				ByVal pixd as Pix, 
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAddAlphaTo1bpp( pixdPTR, pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3741, 1)
' pixConvertLossless()
' pixConvertLossless(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a lossless unpacking (depth-increasing)
''' conversion.  If ds is the depth of pixs, then
''' ~ if d LT ds, returns NULL
''' ~ if d == ds, returns a copy
''' ~ if d GT ds, does the unpacking conversion
''' (2) If pixs has a colormap, this is an error.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8 bpp, not cmapped</param>
'''  <param name="d">[in] - destination depth 2, 4 or 8</param>
'''   <returns>pixd 2, 4 or 8 bpp, or NULL on error</returns>
Public Shared Function pixConvertLossless(
				ByVal pixs as Pix, 
				ByVal d as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8 bpp, not cmapped")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertLossless( pixs.Pointer, d)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3832, 1)
' pixConvertForPSWrap()
' pixConvertForPSWrap(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) For wrapping in PostScript, we convert pixs to
''' 1 bpp, 8 bpp (gray) and 32 bpp (RGB color).
''' (2) Colormaps are removed.  For pixs with colormaps, the
''' images are converted to either 8 bpp gray or 32 bpp
''' RGB, depending on whether the colormap has color content.
''' (3) Images without colormaps, that are not 1 bpp or 32 bpp,
''' are converted to 8 bpp gray.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16, 32 bpp</param>
'''   <returns>pixd    1, 8, or 32 bpp, or NULL on error</returns>
Public Shared Function pixConvertForPSWrap(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8,16,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16, 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertForPSWrap( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3911, 1)
' pixConvertToSubpixelRGB()
' pixConvertToSubpixelRGB(PIX *, l_float32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If pixs has a colormap, it is removed based on its contents
''' to either 8 bpp gray or rgb.
''' (2) For horizontal subpixel splitting, the input image
''' is rescaled by %scaley vertically and by 3.0 times
''' %scalex horizontally.  Then each horizontal triplet
''' of pixels is mapped back to a single rgb pixel, with the
''' r, g and b values being assigned based on the pixel triplet.
''' For gray triplets, the r, g, and b values are set equal to
''' the three gray values.  For color triplets, the r, g and b
''' values are set equal to the components from the appropriate
''' subpixel.  Vertical subpixel splitting is handled similarly.
''' (3) See pixConvertGrayToSubpixelRGB() and
''' pixConvertColorToSubpixelRGB() for further details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale, 32 bpp rgb, or colormapped</param>
'''  <param name="scalex">[in] - anisotropic scaling permitted between source and destination</param>
'''  <param name="scaley">[in] - anisotropic scaling permitted between source and destination</param>
'''  <param name="order">[in] - of subpixel rgb color components in composition of pixd L_SUBPIXEL_ORDER_RGB, L_SUBPIXEL_ORDER_BGR, L_SUBPIXEL_ORDER_VRGB, L_SUBPIXEL_ORDER_VBGR</param>
'''   <returns>pixd 32 bpp, or NULL on error</returns>
Public Shared Function pixConvertToSubpixelRGB(
				ByVal pixs as Pix, 
				ByVal scalex as Single, 
				ByVal scaley as Single, 
				ByVal order as Enumerations.L_SUBPIXEL_ORDER) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8,16}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale, 32 bpp rgb, or colormapped")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertToSubpixelRGB( pixs.Pointer, scalex, scaley, order)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (3981, 1)
' pixConvertGrayToSubpixelRGB()
' pixConvertGrayToSubpixelRGB(PIX *, l_float32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If pixs has a colormap, it is removed to 8 bpp.
''' (2) For horizontal subpixel splitting, the input gray image
''' is rescaled by %scaley vertically and by 3.0 times
''' %scalex horizontally.  Then each horizontal triplet
''' of pixels is mapped back to a single rgb pixel, with the
''' r, g and b values being assigned from the triplet of gray values.
''' Similar operations are used for vertical subpixel splitting.
''' (3) This is a form of subpixel rendering that tends to give the
''' resulting text a sharper and somewhat chromatic display.
''' For horizontal subpixel splitting, the observable difference
''' between %order=L_SUBPIXEL_ORDER_RGB and
''' %order=L_SUBPIXEL_ORDER_BGR is reduced by optical diffusers
''' in the display that make the pixel color appear to emerge
''' from the entire pixel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp or colormapped</param>
'''  <param name="scalex">[in] - </param>
'''  <param name="scaley">[in] - </param>
'''  <param name="order">[in] - of subpixel rgb color components in composition of pixd L_SUBPIXEL_ORDER_RGB, L_SUBPIXEL_ORDER_BGR, L_SUBPIXEL_ORDER_VRGB, L_SUBPIXEL_ORDER_VBGR</param>
'''   <returns>pixd 32 bpp, or NULL on error</returns>
Public Shared Function pixConvertGrayToSubpixelRGB(
				ByVal pixs as Pix, 
				ByVal scalex as Single, 
				ByVal scaley as Single, 
				ByVal order as Enumerations.L_SUBPIXEL_ORDER) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertGrayToSubpixelRGB( pixs.Pointer, scalex, scaley, order)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (4086, 1)
' pixConvertColorToSubpixelRGB()
' pixConvertColorToSubpixelRGB(PIX *, l_float32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If pixs has a colormap, it is removed to 32 bpp rgb.
''' If the colormap has no color, pixConvertGrayToSubpixelRGB()
''' should be called instead, because it will give the same result
''' more efficiently.  The function pixConvertToSubpixelRGB()
''' will do the best thing for all cases.
''' (2) For horizontal subpixel splitting, the input rgb image
''' is rescaled by %scaley vertically and by 3.0 times
''' %scalex horizontally.  Then for each horizontal triplet
''' of pixels, the r component of the final pixel is selected
''' from the r component of the appropriate pixel in the triplet,
''' and likewise for g and b.  Vertical subpixel splitting is
''' handled similarly.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp or colormapped</param>
'''  <param name="scalex">[in] - </param>
'''  <param name="scaley">[in] - </param>
'''  <param name="order">[in] - of subpixel rgb color components in composition of pixd L_SUBPIXEL_ORDER_RGB, L_SUBPIXEL_ORDER_BGR, L_SUBPIXEL_ORDER_VRGB, L_SUBPIXEL_ORDER_VBGR</param>
'''   <returns>pixd 32 bpp, or NULL on error</returns>
Public Shared Function pixConvertColorToSubpixelRGB(
				ByVal pixs as Pix, 
				ByVal scalex as Single, 
				ByVal scaley as Single, 
				ByVal order as Enumerations.L_SUBPIXEL_ORDER) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConvertColorToSubpixelRGB( pixs.Pointer, scalex, scaley, order)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixconv.c (4189, 1)
' l_setNeutralBoostVal()
' l_setNeutralBoostVal(l_int32) as void
'''  <summary>
''' Notes
''' (1) This raises or lowers the selected min or max RGB component value,
''' depending on if that component is above or below this value.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="val">[in] - between 1 and 255; typical value is 180</param>
Public Shared Sub l_setNeutralBoostVal(
				ByVal val as Integer)



	LeptonicaSharp.Natives.l_setNeutralBoostVal( val)

End Sub

#End Region
#Region "SRC\pixlabel.c"
' SRC\pixlabel.c (114, 1)
' pixConnCompTransform()
' pixConnCompTransform(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) pixd is 8, 16 or 32 bpp, and the pixel values label the
''' fg component, starting with 1.  Pixels in the bg are labelled 0.
''' (2) If %depth = 0, the depth of pixd is 8 if the number of c.c.
''' is less than 254, 16 if the number of c.c is less than 0xfffe,
''' and 32 otherwise.
''' (3) If %depth = 8, the assigned label for the n-th component is
''' 1 + n % 254.  We use mod 254 because 0 is uniquely assigned
''' to black e.g., see pixcmapCreateRandom().  Likewise,
''' if %depth = 16, the assigned label uses mod(2^16 - 2), and
''' if %depth = 32, no mod is taken.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="connect">[in] - connectivity 4 or 8</param>
'''  <param name="depth">[in] - of pixd 8 or 16 bpp; use 0 for auto determination</param>
'''   <returns>pixd 8, 16 or 32 bpp, or NULL on error</returns>
Public Shared Function pixConnCompTransform(
				ByVal pixs as Pix, 
				ByVal connect as Integer, 
				ByVal depth as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConnCompTransform( pixs.Pointer, connect, depth)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixlabel.c (194, 1)
' pixConnCompAreaTransform()
' pixConnCompAreaTransform(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The pixel values in pixd label the area of the fg component
''' to which the pixel belongs.  Pixels in the bg are labelled 0.
''' (2) For purposes of visualization, the output can be converted
''' to 8 bpp, using pixConvert32To8() or pixMaxDynamicRange().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="connect">[in] - connectivity 4 or 8</param>
'''   <returns>pixd 32 bpp, 1 spp, or NULL on error</returns>
Public Shared Function pixConnCompAreaTransform(
				ByVal pixs as Pix, 
				ByVal connect as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixConnCompAreaTransform( pixs.Pointer, connect)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixlabel.c (267, 1)
' pixConnCompIncrInit()
' pixConnCompIncrInit(PIX *, l_int32, PIX **, PTAA **, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This labels the connected components in a 1 bpp pix, and
''' additionally sets up a ptaa that lists the locations of pixels
''' in each of the components.
''' (2) It can be used to initialize the output image and arrays for
''' an application that maintains information about connected
''' components incrementally as pixels are added.
''' (3) pixs can be empty or have some foreground pixels.
''' (4) The connectivity is stored in pixd-GTspecial.
''' (5) Always initialize with the first pta in ptaa being empty
''' and representing the background value (index 0) in the pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="conn">[in] - connectivity 4 or 8</param>
'''  <param name="ppixd">[out] - 32 bpp, with c.c. labelled</param>
'''  <param name="pptaa">[out] - with pixel locations indexed by c.c.</param>
'''  <param name="pncc">[out] - initial number of c.c.</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixConnCompIncrInit(
				ByVal pixs as Pix, 
				ByVal conn as Integer, 
				ByRef ppixd as Pix, 
				ByRef pptaa as Ptaa, 
				ByRef pncc as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer
	Dim pptaaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pptaa) Then pptaaPTR = pptaa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixConnCompIncrInit( pixs.Pointer, conn, ppixdPTR, pptaaPTR, pncc)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)
	if pptaaPTR <> IntPtr.Zero then pptaa = new Ptaa(pptaaPTR)

	Return _Result
End Function

' SRC\pixlabel.c (351, 1)
' pixConnCompIncrAdd()
' pixConnCompIncrAdd(PIX *, PTAA *, l_int32 *, l_float32, l_float32, l_int32) as l_int32
'''  <summary>
''' Notes
''' (1) This adds a pixel and updates the labeled connected components.
''' Before calling this function, initialize the process using
''' pixConnCompIncrInit().
''' (2) As a result of adding a pixel, one of the following can happen,
''' depending on the number of neighbors with non-zero value
''' (a) nothing the pixel is already a member of a c.c.
''' (b) no neighbors a new component is added, increasing the
''' number of c.c.
''' (c) one neighbor the pixel is added to an existing c.c.
''' (d) more than one neighbor the added pixel causes joining of
''' two or more c.c., reducing the number of c.c.  A maximum
''' of 4 c.c. can be joined.
''' (3) When two c.c. are joined, the pixels in the larger index are
''' relabeled to those of the smaller in pixs, and their locations
''' are transferred to the pta with the smaller index in the ptaa.
''' The pta corresponding to the larger index is then deleted.
''' (4) This is an efficient implementation of a "union-find" operation,
''' which supports the generation and merging of disjoint sets
''' of pixels.  This function can be called about 1.3 million times
''' per second.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp, with pixels labeled by c.c.</param>
'''  <param name="ptaa">[in] - with each pta of pixel locations indexed by c.c.</param>
'''  <param name="pncc">[out] - number of c.c</param>
'''  <param name="x">[in] - ,y location of added pixel</param>
'''  <param name="debug">[in] - 0 for no output; otherwise output whenever debug LT= nvals, up to debug == 3</param>
'''   <returns>-1 if nothing happens; 0 if a pixel is added; 1 on error</returns>
Public Shared Function pixConnCompIncrAdd(
				ByVal pixs as Pix, 
				ByVal ptaa as Ptaa, 
				ByRef pncc as Integer, 
				ByVal x as Single, 
				ByRef y as Single, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")
	If IsNothing (x) then Throw New ArgumentNullException  ("x cannot be Nothing")
	If IsNothing (y) then Throw New ArgumentNullException  ("y cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixConnCompIncrAdd( pixs.Pointer, ptaa.Pointer, pncc, x, y, debug)

	Return _Result
End Function

' SRC\pixlabel.c (481, 1)
' pixGetSortedNeighborValues()
' pixGetSortedNeighborValues(PIX *, l_int32, l_int32, l_int32, l_int32 **, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The returned %neigh array is the unique set of neighboring
''' pixel values, of size nvals, sorted from smallest to largest.
''' The value 0, which represents background pixels that do
''' not belong to any set of connected components, is discarded.
''' (2) If there are no neighbors, this returns %neigh = NULL; otherwise,
''' the caller must free the array.
''' (3) For either 4 or 8 connectivity, the maximum number of unique
''' neighbor values is 4.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8, 16 or 32 bpp, with pixels labeled by c.c.</param>
'''  <param name="x">[in] - location of pixel</param>
'''  <param name="y">[in] - location of pixel</param>
'''  <param name="conn">[in] - 4 or 8 connected neighbors</param>
'''  <param name="pneigh">[out] - array of integers, to be filled with the values of the neighbors, if any</param>
'''  <param name="pnvals">[out] - the number of unique neighbor values found</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetSortedNeighborValues(
				ByVal pixs as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal conn as Integer, 
				ByRef pneigh as List (of Integer()), 
				ByRef pnvals as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim pneighPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetSortedNeighborValues( pixs.Pointer, x, y, conn, pneighPTR, pnvals)

	Return _Result
End Function

' SRC\pixlabel.c (567, 1)
' pixLocToColorTransform()
' pixLocToColorTransform(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This generates an RGB image where each component value
''' is coded depending on the (x.y) location and the size
''' of the fg connected component that the pixel in pixs belongs to.
''' It is independent of the 4-fold orthogonal orientation, and
''' only weakly depends on translations and small angle rotations.
''' Background pixels are black.
''' (2) Such encodings can be compared between two 1 bpp images
''' by performing this transform and calculating the
''' "earth-mover" distance on the resulting R,G,B histograms.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>pixd 32 bpp rgb, or NULL on error</returns>
Public Shared Function pixLocToColorTransform(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixLocToColorTransform( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\pixtiling.c"
' SRC\pixtiling.c (121, 1)
' pixTilingCreate()
' pixTilingCreate(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as PIXTILING *
'''  <summary>
''' Notes
''' (1) We put a clone of pixs in the PixTiling.
''' (2) The input to pixTilingCreate() for horizontal tiling can be
''' either the number of tiles across the image or the approximate
''' width of the tiles.  If the latter, the actual width will be
''' determined by making all tiles but the last of equal width, and
''' making the last as close to the others as possible.  The same
''' consideration is applied independently to the vertical tiling.
''' To specify tile width, set nx = 0; to specify the number of
''' tiles horizontally across the image, set w = 0.
''' (3) If pixs is to be tiled in one-dimensional strips, use ny = 1 for
''' vertical strips and nx = 1 for horizontal strips.
''' (4) The overlap must not be larger than the width or height of
''' the leftmost or topmost tile(s).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - pix to be tiled; any depth; colormap OK</param>
'''  <param name="nx">[in] - number of tiles across image</param>
'''  <param name="ny">[in] - number of tiles down image</param>
'''  <param name="w">[in] - desired width of each tile</param>
'''  <param name="h">[in] - desired height of each tile</param>
'''  <param name="xoverlap">[in] - overlap into neighboring tiles on each side</param>
'''  <param name="yoverlap">[in] - overlap into neighboring tiles above and below</param>
'''   <returns>pixtiling, or NULL on error</returns>
Public Shared Function pixTilingCreate(
				ByVal pixs as Pix, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal xoverlap as Integer, 
				ByVal yoverlap as Integer) as PixTiling

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixTilingCreate( pixs.Pointer, nx, ny, w, h, xoverlap, yoverlap)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new PixTiling(_Result)
End Function

' SRC\pixtiling.c (178, 1)
' pixTilingDestroy()
' pixTilingDestroy(PIXTILING **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ppt">[in,out] - will be set to null before returning</param>
Public Shared Sub pixTilingDestroy(
				ByRef ppt as PixTiling)


	Dim pptPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppt) Then pptPTR = ppt.Pointer

	LeptonicaSharp.Natives.pixTilingDestroy( pptPTR)
	if pptPTR <> IntPtr.Zero then ppt = new PixTiling(pptPTR)

End Sub

' SRC\pixtiling.c (208, 1)
' pixTilingGetCount()
' pixTilingGetCount(PIXTILING *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pt">[in] - pixtiling</param>
'''  <param name="pnx">[out][optional] - nx; can be null</param>
'''  <param name="pny">[out][optional] - ny; can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixTilingGetCount(
				ByVal pt as PixTiling, 
				ByRef pnx as Integer, 
				ByRef pny as Integer) as Integer

	If IsNothing (pt) then Throw New ArgumentNullException  ("pt cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixTilingGetCount( pt.Pointer, pnx, pny)

	Return _Result
End Function

' SRC\pixtiling.c (231, 1)
' pixTilingGetSize()
' pixTilingGetSize(PIXTILING *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pt">[in] - pixtiling</param>
'''  <param name="pw">[out][optional] - tile width; can be null</param>
'''  <param name="ph">[out][optional] - tile height; can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixTilingGetSize(
				ByVal pt as PixTiling, 
				ByRef pw as Integer, 
				ByRef ph as Integer) as Integer

	If IsNothing (pt) then Throw New ArgumentNullException  ("pt cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixTilingGetSize( pt.Pointer, pw, ph)

	Return _Result
End Function

' SRC\pixtiling.c (255, 1)
' pixTilingGetTile()
' pixTilingGetTile(PIXTILING *, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pt">[in] - pixtiling</param>
'''  <param name="i">[in] - tile row index</param>
'''  <param name="j">[in] - tile column index</param>
'''   <returns>pixd tile with appropriate boundary (overlap) pixels added, or NULL on error</returns>
Public Shared Function pixTilingGetTile(
				ByVal pt as PixTiling, 
				ByVal i as Integer, 
				ByVal j as Integer) as Pix

	If IsNothing (pt) then Throw New ArgumentNullException  ("pt cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixTilingGetTile( pt.Pointer, i, j)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pixtiling.c (368, 1)
' pixTilingNoStripOnPaint()
' pixTilingNoStripOnPaint(PIXTILING *) as l_ok
'''  <summary>
''' Notes
''' (1) The default for paint is to strip out the overlap pixels
''' that are added by pixTilingGetTile().  However, some
''' operations will generate an image with these pixels
''' stripped off.  This tells the paint operation not
''' to strip the added boundary pixels when painting.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pt">[in] - pixtiling</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixTilingNoStripOnPaint(
				ByVal pt as PixTiling) as Integer

	If IsNothing (pt) then Throw New ArgumentNullException  ("pt cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixTilingNoStripOnPaint( pt.Pointer)

	Return _Result
End Function

' SRC\pixtiling.c (390, 1)
' pixTilingPaintTile()
' pixTilingPaintTile(PIX *, l_int32, l_int32, PIX *, PIXTILING *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - dest paint tile onto this, without overlap</param>
'''  <param name="i">[in] - tile row index</param>
'''  <param name="j">[in] - tile column index</param>
'''  <param name="pixs">[in] - source tile to be painted from</param>
'''  <param name="pt">[in] - pixtiling struct</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixTilingPaintTile(
				ByVal pixd as Pix, 
				ByVal i as Integer, 
				ByVal j as Integer, 
				ByVal pixs as Pix, 
				ByVal pt as PixTiling) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pt) then Throw New ArgumentNullException  ("pt cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixTilingPaintTile( pixd.Pointer, i, j, pixs.Pointer, pt.Pointer)

	Return _Result
End Function

#End Region
#Region "SRC\pngio.c"
' SRC\pngio.c (185, 1)
' pixReadStreamPng()
' pixReadStreamPng(FILE *) as PIX *
'''  <summary>
''' Notes
''' (1) If called from pixReadStream(), the stream is positioned
''' at the beginning of the file.
''' (2) To do sequential reads of png format images from a stream,
''' use pixReadStreamPng()
''' (3) Any image with alpha is converted to RGBA (spp = 4, with
''' equal red, green and blue channels) on reading.
''' There are three important cases with alpha
''' (a) grayscale-with-alpha (spp = 2), where bpp = 8, and each
''' pixel has an associated alpha (transparency) value
''' in the second component of the image data.
''' (b) spp = 1, d = 1 with colormap and alpha in the trans array.
''' Transparency is usually associated with the white background.
''' (c) spp = 1, d = 8 with colormap and alpha in the trans array.
''' Each color in the colormap has a separate transparency value.
''' (4) We use the high level png interface, where the transforms are set
''' up in advance and the header and image are read with a single
''' call.  The more complicated interface, where the header is
''' read first and the buffers for the raster image are user-
''' allocated before reading the image, works for single images,
''' but I could not get it to work properly for the successive
''' png reads that are required by pixaReadStream().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixReadStreamPng(
				ByVal fp as FILE) as Pix

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadStreamPng( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pngio.c (517, 1)
' readHeaderPng()
' readHeaderPng(const char *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If there is a colormap, iscmap is returned as 1; else 0.
''' (2) For gray+alpha, although the png records bps = 16, we
''' consider this as two 8 bpp samples (gray and alpha).
''' When a gray+alpha is read, it is converted to 32 bpp RGBA.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pw">[out][optional] - </param>
'''  <param name="ph">[out][optional] - </param>
'''  <param name="pbps">[out][optional] - bits/sample</param>
'''  <param name="pspp">[out][optional] - samples/pixel</param>
'''  <param name="piscmap">[out][optional] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function readHeaderPng(
				ByVal filename as String, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer, 
				ByRef piscmap as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.readHeaderPng( filename, pw, ph, pbps, pspp, piscmap)

	Return _Result
End Function

' SRC\pngio.c (561, 1)
' freadHeaderPng()
' freadHeaderPng(FILE *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) See readHeaderPng().  We only need the first 40 bytes in the file.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pw">[out][optional] - </param>
'''  <param name="ph">[out][optional] - </param>
'''  <param name="pbps">[out][optional] - bits/sample</param>
'''  <param name="pspp">[out][optional] - samples/pixel</param>
'''  <param name="piscmap">[out][optional] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function freadHeaderPng(
				ByVal fp as FILE, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer, 
				ByRef piscmap as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.freadHeaderPng( fp.Pointer, pw, ph, pbps, pspp, piscmap)

	Return _Result
End Function

' SRC\pngio.c (618, 1)
' readHeaderMemPng()
' readHeaderMemPng(const l_uint8 *, size_t, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) See readHeaderPng().
''' (2) png colortypes (see png.h PNG_COLOR_TYPE_)
''' 0  gray; fully transparent (with tRNS) (1 spp)
''' 2  RGB (3 spp)
''' 3  colormap; colormap+alpha (with tRNS) (1 spp)
''' 4  gray + alpha (2 spp)
''' 6  RGBA (4 spp)
''' Note
''' 0 and 3 have the alpha information in a tRNS chunk
''' 4 and 6 have separate alpha samples with each pixel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - </param>
'''  <param name="size">[in] - 40 bytes is sufficient</param>
'''  <param name="pw">[out][optional] - </param>
'''  <param name="ph">[out][optional] - </param>
'''  <param name="pbps">[out][optional] - bits/sample</param>
'''  <param name="pspp">[out][optional] - samples/pixel</param>
'''  <param name="piscmap">[out][optional] - input NULL to ignore</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function readHeaderMemPng(
				ByVal data as Byte(), 
				ByVal size as UInteger, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer, 
				ByRef piscmap as Integer) as Integer

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.readHeaderMemPng( data, size, pw, ph, pbps, pspp, piscmap)

	Return _Result
End Function

' SRC\pngio.c (704, 1)
' 
' fgetPngResolution(FILE *, l_int32 *, l_int32 *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function fgetPngResolution(
				ByRef fp as FILE, 
				ByRef pxres as Object, 
				ByRef pyres as Object) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pxres) then Throw New ArgumentNullException  ("pxres cannot be Nothing")
	If IsNothing (pyres) then Throw New ArgumentNullException  ("pyres cannot be Nothing")

Dim fpPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fp) Then fpPTR = fp.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.fgetPngResolution( fp.Pointer, pxres, pyres)

	Return _Result
End Function

' SRC\pngio.c (761, 1)
' isPngInterlaced()
' isPngInterlaced(const char *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pinterlaced">[out] - 1 if interlaced png; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function isPngInterlaced(
				ByVal filename as String, 
				ByRef pinterlaced as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.isPngInterlaced( filename, pinterlaced)

	Return _Result
End Function

' SRC\pngio.c (805, 1)
' 
' fgetPngColormapInfo(FILE *, PIXCMAP **, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function fgetPngColormapInfo(
				ByRef fp as FILE, 
				ByRef pcmap as PixColormap, 
				ByRef ptransparency as Object) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pcmap) then Throw New ArgumentNullException  ("pcmap cannot be Nothing")
	If IsNothing (ptransparency) then Throw New ArgumentNullException  ("ptransparency cannot be Nothing")

Dim fpPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fp) Then fpPTR = fp.Pointer
	Dim pcmapPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pcmap) Then pcmapPTR = pcmap.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.fgetPngColormapInfo( fp.Pointer, pcmapPTR, ptransparency)

	Return _Result
End Function

' SRC\pngio.c (906, 1)
' pixWritePng()
' pixWritePng(const char *, PIX *, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) Special version for writing png with a specified gamma.
''' When using pixWrite(), no field is given for gamma.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pix">[in] - </param>
'''  <param name="gamma">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixWritePng(
				ByVal filename as String, 
				ByVal pix as Pix, 
				ByVal gamma as Single) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (gamma) then Throw New ArgumentNullException  ("gamma cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWritePng( filename, pix.Pointer, gamma)

	Return _Result
End Function

' SRC\pngio.c (1006, 1)
' pixWriteStreamPng()
' pixWriteStreamPng(FILE *, PIX *, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) If called from pixWriteStream(), the stream is positioned
''' at the beginning of the file.
''' (2) To do sequential writes of png format images to a stream,
''' use pixWriteStreamPng() directly.
''' (3) gamma is an optional png chunk.  If no gamma value is to be
''' placed into the file, use gamma = 0.0.  Otherwise, if
''' gamma GT 0.0, its value is written into the header.
''' (4) The use of gamma in png is highly problematic.  For an illuminating
''' discussion, see  http//hsivonen.iki.fi/png-gamma/
''' (5) What is the effect/meaning of gamma in the png file?  This
''' gamma, which we can call the 'source' gamma, is the
''' inverse of the gamma that was used in enhance.c to brighten
''' or darken images.  The 'source' gamma is supposed to indicate
''' the intensity mapping that was done at the time the
''' image was captured.  Display programs typically apply a
''' 'display' gamma of 2.2 to the output, which is intended
''' to linearize the intensity based on the response of
''' thermionic tubes (CRTs).  Flat panel LCDs have typically
''' been designed to give a similar response as CRTs (call it
''' "backward compatibility").  The 'display' gamma is
''' in some sense the inverse of the 'source' gamma.
''' jpeg encoders attached to scanners and cameras will lighten
''' the pixels, applying a gamma corresponding to approximately
''' a square-root relation of output vs input
''' output = input^(gamma)
''' where gamma is often set near 0.4545  (1/gamma is 2.2).
''' This is stored in the image file.  Then if the display
''' program reads the gamma, it will apply a display gamma,
''' typically about 2.2; the product is 1.0, and the
''' display program produces a linear output.  This works because
''' the dark colors were appropriately boosted by the scanner,
''' as described by the 'source' gamma, so they should not
''' be further boosted by the display program.
''' (6) As an example, with xv and display, if no gamma is stored,
''' the program acts as if gamma were 0.4545, multiplies this by 2.2,
''' and does a linear rendering.  Taking this as a baseline
''' brightness, if the stored gamma is
''' GT 0.4545, the image is rendered lighter than baseline
''' LT 0.4545, the image is rendered darker than baseline
''' In contrast, gqview seems to ignore the gamma chunk in png.
''' (7) The only valid pixel depths in leptonica are 1, 2, 4, 8, 16
''' and 32.  However, it is possible, and in some cases desirable,
''' to write out a png file using an rgb pix that has 24 bpp.
''' For example, the open source xpdf SplashBitmap class generates
''' 24 bpp rgb images.  Consequently, we enable writing 24 bpp pix.
''' To generate such a pix, you can make a 24 bpp pix without data
''' and assign the data array to the pix; e.g.,
''' pix = pixCreateHeader(w, h, 24);
''' pixSetData(pix, rgbdata);
''' See pixConvert32To24() for an example, where we get rgbdata
''' from the 32 bpp pix.  Caution do not call pixSetPadBits(),
''' because the alignment is wrong and you may erase part of the
''' last pixel on each line.
''' (8) If the pix has a colormap, it is written to file.  In most
''' situations, the alpha component is 255 for each colormap entry,
''' which is opaque and indicates that it should be ignored.
''' However, if any alpha component is not 255, it is assumed that
''' the alpha values are valid, and they are written to the png
''' file in a tRNS segment.  On readback, the tRNS segment is
''' identified, and the colormapped image with alpha is converted
''' to a 4 spp rgba image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pix">[in] - </param>
'''  <param name="gamma">[in] - use 0.0 if gamma is not defined</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixWriteStreamPng(
				ByVal fp as FILE, 
				ByVal pix as Pix, 
				ByVal gamma as Single) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (gamma) then Throw New ArgumentNullException  ("gamma cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteStreamPng( fp.Pointer, pix.Pointer, gamma)

	Return _Result
End Function

' SRC\pngio.c (1250, 1)
' pixSetZlibCompression()
' pixSetZlibCompression(PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Valid zlib compression values are in the interval [0 ... 9],
''' where, as defined in zlib.h
''' 0   Z_NO_COMPRESSION
''' 1   Z_BEST_SPEED (poorest compression)
''' 9   Z_BEST_COMPRESSION
''' For the default value, use either of these
''' 6   Z_DEFAULT_COMPRESSION
''' -1   (resolves to Z_DEFAULT_COMPRESSION)
''' (2) If you use the defined constants in zlib.h instead of the
''' compression integers given above, you must include zlib.h.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="compval">[in] - zlib compression value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSetZlibCompression(
				ByVal pix as Pix, 
				ByVal compval as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetZlibCompression( pix.Pointer, compval)

	Return _Result
End Function

' SRC\pngio.c (1277, 1)
' l_pngSetReadStrip16To8()
' l_pngSetReadStrip16To8(l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="flag">[in] - 1 for stripping 16 bpp to 8 bpp on reading; 0 for leaving 16 bpp</param>
Public Shared Sub l_pngSetReadStrip16To8(
				ByVal flag as Integer)



	LeptonicaSharp.Natives.l_pngSetReadStrip16To8( flag)

End Sub

' SRC\pngio.c (1520, 1)
' pixReadMemPng()
' pixReadMemPng(const l_uint8 *, size_t) as PIX *
'''  <summary>
''' Notes
''' (1) See pixReastreamPng().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filedata">[in] - png compressed data in memory</param>
'''  <param name="filesize">[in] - number of bytes in data</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixReadMemPng(
				ByVal filedata as Byte(), 
				ByVal filesize as UInteger) as Pix

	If IsNothing (filedata) then Throw New ArgumentNullException  ("filedata cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadMemPng( filedata, filesize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pngio.c (1858, 1)
' pixWriteMemPng()
' pixWriteMemPng(l_uint8 **, size_t *, PIX *, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) See pixWriteStreamPng()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pfiledata">[out] - png encoded data of pix</param>
'''  <param name="pfilesize">[out] - size of png encoded data</param>
'''  <param name="pix">[in] - </param>
'''  <param name="gamma">[in] - use 0.0 if gamma is not defined</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixWriteMemPng(
				ByRef pfiledata as Byte(), 
				ByRef pfilesize as UInteger, 
				ByVal pix as Pix, 
				ByVal gamma as Single) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (gamma) then Throw New ArgumentNullException  ("gamma cannot be Nothing")

	Dim pfiledataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteMemPng( pfiledataPTR, pfilesize, pix.Pointer, gamma)
	ReDim pfiledata(IIf(pfilesize > 0, pfilesize, 1) - 1) : If pfiledataPTR <> IntPtr.Zero Then Marshal.Copy(pfiledataPTR, pfiledata, 0, pfiledata.count)

	Return _Result
End Function

#End Region
#Region "SRC\pnmio.c"
' SRC\pnmio.c (145, 1)
' pixReadStreamPnm()
' pixReadStreamPnm(FILE *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for read</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixReadStreamPnm(
				ByVal fp as FILE) as Pix

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadStreamPnm( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pnmio.c (447, 1)
' readHeaderPnm()
' readHeaderPnm(const char *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pw">[out][optional] - </param>
'''  <param name="ph">[out][optional] - </param>
'''  <param name="pd">[out][optional] - </param>
'''  <param name="ptype">[out][optional] - pnm type</param>
'''  <param name="pbps">[out][optional] - bits/sample</param>
'''  <param name="pspp">[out][optional] - samples/pixel</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function readHeaderPnm(
				ByVal filename as String, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pd as Integer, 
				ByRef ptype as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.readHeaderPnm( filename, pw, ph, pd, ptype, pbps, pspp)

	Return _Result
End Function

' SRC\pnmio.c (490, 1)
' freadHeaderPnm()
' freadHeaderPnm(FILE *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for read</param>
'''  <param name="pw">[out][optional] - </param>
'''  <param name="ph">[out][optional] - </param>
'''  <param name="pd">[out][optional] - </param>
'''  <param name="ptype">[out][optional] - pnm type</param>
'''  <param name="pbps">[out][optional] - bits/sample</param>
'''  <param name="pspp">[out][optional] - samples/pixel</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function freadHeaderPnm(
				ByVal fp as FILE, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pd as Integer, 
				ByRef ptype as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.freadHeaderPnm( fp.Pointer, pw, ph, pd, ptype, pbps, pspp)

	Return _Result
End Function

' SRC\pnmio.c (667, 1)
' pixWriteStreamPnm()
' pixWriteStreamPnm(FILE *, PIX *) as l_ok
'''  <summary>
''' Notes
''' (1) This writes "raw" packed format only
''' 1 bpp --GT pbm (P4)
''' 2, 4, 8, 16 bpp, no colormap or grayscale colormap --GT pgm (P5)
''' 2, 4, 8 bpp with color-valued colormap, or rgb --GT rgb ppm (P6)
''' (2) 24 bpp rgb are not supported in leptonica, but this will
''' write them out as a packed array of bytes (3 to a pixel).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for write</param>
'''  <param name="pix">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixWriteStreamPnm(
				ByVal fp as FILE, 
				ByVal pix as Pix) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteStreamPnm( fp.Pointer, pix.Pointer)

	Return _Result
End Function

' SRC\pnmio.c (786, 1)
' pixWriteStreamAsciiPnm()
' pixWriteStreamAsciiPnm(FILE *, PIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for write</param>
'''  <param name="pix">[in] - </param>
'''   <returns>0 if OK; 1 on error Writes "ASCII" format only 1 bpp --GT pbm P1 2, 4, 8, 16 bpp, no colormap or grayscale colormap --GT pgm P2 2, 4, 8 bpp with color-valued colormap, or rgb --GT rgb ppm P3</returns>
Public Shared Function pixWriteStreamAsciiPnm(
				ByVal fp as FILE, 
				ByVal pix as Pix) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteStreamAsciiPnm( fp.Pointer, pix.Pointer)

	Return _Result
End Function

' SRC\pnmio.c (908, 1)
' pixWriteStreamPam()
' pixWriteStreamPam(FILE *, PIX *) as l_ok
'''  <summary>
''' Notes
''' (1) This writes arbitrary PAM (P7) packed format.
''' (2) 24 bpp rgb are not supported in leptonica, but this will
''' write them out as a packed array of bytes (3 to a pixel).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for write</param>
'''  <param name="pix">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixWriteStreamPam(
				ByVal fp as FILE, 
				ByVal pix as Pix) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteStreamPam( fp.Pointer, pix.Pointer)

	Return _Result
End Function

' SRC\pnmio.c (1084, 1)
' pixReadMemPnm()
' pixReadMemPnm(const l_uint8 *, size_t) as PIX *
'''  <summary>
''' Notes
''' (1) The %size byte of %data must be a null character.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - const; pnm-encoded</param>
'''  <param name="size">[in] - of data</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixReadMemPnm(
				ByVal data as Byte(), 
				ByVal size as UInteger) as Pix

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadMemPnm( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\pnmio.c (1117, 1)
' readHeaderMemPnm()
' readHeaderMemPnm(const l_uint8 *, size_t, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - const; pnm-encoded</param>
'''  <param name="size">[in] - of data</param>
'''  <param name="pw">[out][optional] - </param>
'''  <param name="ph">[out][optional] - </param>
'''  <param name="pd">[out][optional] - </param>
'''  <param name="ptype">[out][optional] - pnm type</param>
'''  <param name="pbps">[out][optional] - bits/sample</param>
'''  <param name="pspp">[out][optional] - samples/pixel</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function readHeaderMemPnm(
				ByVal data as Byte(), 
				ByVal size as UInteger, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pd as Integer, 
				ByRef ptype as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer) as Integer

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.readHeaderMemPnm( data, size, pw, ph, pd, ptype, pbps, pspp)

	Return _Result
End Function

' SRC\pnmio.c (1159, 1)
' pixWriteMemPnm()
' pixWriteMemPnm(l_uint8 **, size_t *, PIX *) as l_ok
'''  <summary>
''' Notes
''' (1) See pixWriteStreamPnm() for usage.  This version writes to
''' memory instead of to a file stream.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of PNM image</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="pix">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWriteMemPnm(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteMemPnm( pdataPTR, psize, pix.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\pnmio.c (1214, 1)
' pixWriteMemPam()
' pixWriteMemPam(l_uint8 **, size_t *, PIX *) as l_ok
'''  <summary>
''' Notes
''' (1) See pixWriteStreamPnm() for usage.  This version writes to
''' memory instead of to a file stream.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of PAM image</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="pix">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWriteMemPam(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteMemPam( pdataPTR, psize, pix.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

#End Region
#Region "SRC\projective.c"
' SRC\projective.c (141, 1)
' pixProjectiveSampledPta()
' pixProjectiveSampledPta(PIX *, PTA *, PTA *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Brings in either black or white pixels from the boundary.
''' (2) Retains colormap, which you can do for a sampled transform..
''' (3) No 3 of the 4 points may be collinear.
''' (4) For 8 and 32 bpp pix, better quality is obtained by the
''' somewhat slower pixProjectivePta().  See that
''' function for relative timings between sampled and interpolated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths</param>
'''  <param name="ptad">[in] - 4 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 4 pts of initial coordinate space</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixProjectiveSampledPta(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixProjectiveSampledPta( pixs.Pointer, ptad.Pointer, ptas.Pointer, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\projective.c (191, 1)
' pixProjectiveSampled()
' pixProjectiveSampled(PIX *, l_float32 *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Brings in either black or white pixels from the boundary.
''' (2) Retains colormap, which you can do for a sampled transform..
''' (3) For 8 or 32 bpp, much better quality is obtained by the
''' somewhat slower pixProjective().  See that function
''' for relative timings between sampled and interpolated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths</param>
'''  <param name="vc">[in] - vector of 8 coefficients for projective transformation</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixProjectiveSampled(
				ByVal pixs as Pix, 
				ByVal vc as Single(), 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixProjectiveSampled( pixs.Pointer, vc, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\projective.c (284, 1)
' pixProjectivePta()
' pixProjectivePta(PIX *, PTA *, PTA *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Brings in either black or white pixels from the boundary
''' (2) Removes any existing colormap, if necessary, before transforming
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="ptad">[in] - 4 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 4 pts of initial coordinate space</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixProjectivePta(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixProjectivePta( pixs.Pointer, ptad.Pointer, ptas.Pointer, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\projective.c (354, 1)
' pixProjective()
' pixProjective(PIX *, l_float32 *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Brings in either black or white pixels from the boundary
''' (2) Removes any existing colormap, if necessary, before transforming
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; colormap ok</param>
'''  <param name="vc">[in] - vector of 8 coefficients for projective transformation</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixProjective(
				ByVal pixs as Pix, 
				ByVal vc as Single(), 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixProjective( pixs.Pointer, vc, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\projective.c (410, 1)
' pixProjectivePtaColor()
' pixProjectivePtaColor(PIX *, PTA *, PTA *, l_uint32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="ptad">[in] - 4 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 4 pts of initial coordinate space</param>
'''  <param name="colorval">[in] - e.g., 0 to bring in BLACK, 0xffffff00 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixProjectivePtaColor(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal colorval as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixProjectivePtaColor( pixs.Pointer, ptad.Pointer, ptas.Pointer, colorval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\projective.c (451, 1)
' pixProjectiveColor()
' pixProjectiveColor(PIX *, l_float32 *, l_uint32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="vc">[in] - vector of 8 coefficients for projective transformation</param>
'''  <param name="colorval">[in] - e.g., 0 to bring in BLACK, 0xffffff00 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixProjectiveColor(
				ByVal pixs as Pix, 
				ByVal vc as Single(), 
				ByVal colorval as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixProjectiveColor( pixs.Pointer, vc, colorval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\projective.c (513, 1)
' pixProjectivePtaGray()
' pixProjectivePtaGray(PIX *, PTA *, PTA *, l_uint8) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="ptad">[in] - 4 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 4 pts of initial coordinate space</param>
'''  <param name="grayval">[in] - 0 to bring in BLACK, 255 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixProjectivePtaGray(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal grayval as Byte) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (grayval) then Throw New ArgumentNullException  ("grayval cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixProjectivePtaGray( pixs.Pointer, ptad.Pointer, ptas.Pointer, grayval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\projective.c (555, 1)
' pixProjectiveGray()
' pixProjectiveGray(PIX *, l_float32 *, l_uint8) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="vc">[in] - vector of 8 coefficients for projective transformation</param>
'''  <param name="grayval">[in] - 0 to bring in BLACK, 255 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixProjectiveGray(
				ByVal pixs as Pix, 
				ByVal vc as Single(), 
				ByVal grayval as Byte) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")
	If IsNothing (grayval) then Throw New ArgumentNullException  ("grayval cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixProjectiveGray( pixs.Pointer, vc, grayval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\projective.c (644, 1)
' pixProjectivePtaWithAlpha()
' pixProjectivePtaWithAlpha(PIX *, PTA *, PTA *, PIX *, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The alpha channel is transformed separately from pixs,
''' and aligns with it, being fully transparent outside the
''' boundary of the transformed pixs.  For pixels that are fully
''' transparent, a blending function like pixBlendWithGrayMask()
''' will give zero weight to corresponding pixels in pixs.
''' (2) If pixg is NULL, it is generated as an alpha layer that is
''' partially opaque, using %fract.  Otherwise, it is cropped
''' to pixs if required and %fract is ignored.  The alpha channel
''' in pixs is never used.
''' (3) Colormaps are removed.
''' (4) When pixs is transformed, it doesn't matter what color is brought
''' in because the alpha channel will be transparent (0) there.
''' (5) To avoid losing source pixels in the destination, it may be
''' necessary to add a border to the source pix before doing
''' the projective transformation.  This can be any non-negative
''' number.
''' (6) The input %ptad and %ptas are in a coordinate space before
''' the border is added.  Internally, we compensate for this
''' before doing the projective transform on the image after
''' the border is added.
''' (7) The default setting for the border values in the alpha channel
''' is 0 (transparent) for the outermost ring of pixels and
''' (0.5  fract  255) for the second ring.  When blended over
''' a second image, this
''' (a) shrinks the visible image to make a clean overlap edge
''' with an image below, and
''' (b) softens the edges by weakening the aliasing there.
''' Use l_setAlphaMaskBorder() to change these values.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="ptad">[in] - 4 pts of final coordinate space</param>
'''  <param name="ptas">[in] - 4 pts of initial coordinate space</param>
'''  <param name="pixg">[in][optional] - 8 bpp, for alpha channel, can be null</param>
'''  <param name="fract">[in] - between 0.0 and 1.0, with 0.0 fully transparent and 1.0 fully opaque</param>
'''  <param name="border">[in] - of pixels added to capture transformed source pixels</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixProjectivePtaWithAlpha(
				ByVal pixs as Pix, 
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal pixg as Pix, 
				ByVal fract as Single, 
				ByVal border as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")

	Dim pixgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixg) Then pixgPTR = pixg.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixProjectivePtaWithAlpha( pixs.Pointer, ptad.Pointer, ptas.Pointer, pixgPTR, fract, border)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\projective.c (775, 1)
' getProjectiveXformCoeffs()
' getProjectiveXformCoeffs(PTA *, PTA *, l_float32 **) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - source 4 points; unprimed</param>
'''  <param name="ptad">[in] - transformed 4 points; primed</param>
'''  <param name="pvc">[out] - vector of coefficients of transform</param>
'''   <returns>0 if OK; 1 on error We have a set of 8 equations, describing the projective transformation that takes 4 points ptas into 4 other points ptad.  These equations are x1' = c[0]x1 + c[1]y1 + c[2]) / (c[6]x1 + c[7]y1 + 1 y1' = c[3]x1 + c[4]y1 + c[5]) / (c[6]x1 + c[7]y1 + 1 x2' = c[0]x2 + c[1]y2 + c[2]) / (c[6]x2 + c[7]y2 + 1 y2' = c[3]x2 + c[4]y2 + c[5]) / (c[6]x2 + c[7]y2 + 1 x3' = c[0]x3 + c[1]y3 + c[2]) / (c[6]x3 + c[7]y3 + 1 y3' = c[3]x3 + c[4]y3 + c[5]) / (c[6]x3 + c[7]y3 + 1 x4' = c[0]x4 + c[1]y4 + c[2]) / (c[6]x4 + c[7]y4 + 1 y4' = c[3]x4 + c[4]y4 + c[5]) / (c[6]x4 + c[7]y4 + 1 Multiplying both sides of each eqn by the denominator, we get AC = B where B and C are column vectors B = [ x1' y1' x2' y2' x3' y3' x4' y4' ] C = [ c[0] c[1] c[2] c[3] c[4] c[5] c[6] c[7] ] and A is the 8x8 matrix x1   y1     1     0   0    0   -x1x1'  -y1x1' 0    0     0    x1   y1   1   -x1y1'  -y1y1' x2   y2     1     0   0    0   -x2x2'  -y2x2' 0    0     0    x2   y2   1   -x2y2'  -y2y2' x3   y3     1     0   0    0   -x3x3'  -y3x3' 0    0     0    x3   y3   1   -x3y3'  -y3y3' x4   y4     1     0   0    0   -x4x4'  -y4x4' 0    0     0    x4   y4   1   -x4y4'  -y4y4' These eight equations are solved here for the coefficients C. These eight coefficients can then be used to find the mapping x,y) --GT (x',y' x' = c[0]x + c[1]y + c[2]) / (c[6]x + c[7]y + 1 y' = c[3]x + c[4]y + c[5]) / (c[6]x + c[7]y + 1 that is implemented in projectiveXformSampled and projectiveXFormInterpolated.</returns>
Public Shared Function getProjectiveXformCoeffs(
				ByVal ptas as Pta, 
				ByVal ptad as Pta, 
				ByRef pvc as List(Of Single())) as Integer

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")

Dim pvcPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.getProjectiveXformCoeffs( ptas.Pointer, ptad.Pointer, pvcPTR)

	Return _Result
End Function

' SRC\projective.c (876, 1)
' projectiveXformSampledPt()
' projectiveXformSampledPt(l_float32 *, l_int32, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This finds the nearest pixel coordinates of the transformed point.
''' (2) It does not check ptrs for returned data!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="vc">[in] - vector of 8 coefficients</param>
'''  <param name="x">[in] - initial point</param>
'''  <param name="y">[in] - initial point</param>
'''  <param name="pxp">[out] - transformed point</param>
'''  <param name="pyp">[out] - transformed point</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function projectiveXformSampledPt(
				ByVal vc as Single(), 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByRef pxp as Integer, 
				ByRef pyp as Integer) as Integer

	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.projectiveXformSampledPt( vc, x, y, pxp, pyp)

	Return _Result
End Function

' SRC\projective.c (911, 1)
' projectiveXformPt()
' projectiveXformPt(l_float32 *, l_int32, l_int32, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This computes the floating point location of the transformed point.
''' (2) It does not check ptrs for returned data!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="vc">[in] - vector of 8 coefficients</param>
'''  <param name="x">[in] - initial point</param>
'''  <param name="y">[in] - initial point</param>
'''  <param name="pxp">[out] - transformed point</param>
'''  <param name="pyp">[out] - transformed point</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function projectiveXformPt(
				ByVal vc as Single(), 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByRef pxp as Single(), 
				ByRef pyp as Single()) as Integer

	If IsNothing (vc) then Throw New ArgumentNullException  ("vc cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.projectiveXformPt( vc, x, y, pxp, pyp)

	Return _Result
End Function

#End Region
#Region "SRC\psio1.c"
' SRC\psio1.c (154, 1)
' 
' convertFilesToPS(const char *, const char *, l_int32, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function convertFilesToPS(
				ByRef dirin as String, 
				ByRef substr as String, 
				ByRef res as Integer, 
				ByRef fileout as String) as Integer

	If IsNothing (dirin) then Throw New ArgumentNullException  ("dirin cannot be Nothing")
	If IsNothing (substr) then Throw New ArgumentNullException  ("substr cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertFilesToPS( dirin, substr, res, fileout)

	Return _Result
End Function

' SRC\psio1.c (201, 1)
' 
' sarrayConvertFilesToPS(SARRAY *, l_int32, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function sarrayConvertFilesToPS(
				ByRef sa as Sarray, 
				ByRef res as Integer, 
				ByRef fileout as String) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")

Dim saPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sa) Then saPTR = sa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayConvertFilesToPS( sa.Pointer, res, fileout)

	Return _Result
End Function

' SRC\psio1.c (269, 1)
' 
' convertFilesFittedToPS(const char *, const char *, l_float32, l_float32, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function convertFilesFittedToPS(
				ByRef dirin as String, 
				ByRef substr as String, 
				ByRef xpts as Single, 
				ByRef ypts as Single, 
				ByRef fileout as String) as Integer

	If IsNothing (dirin) then Throw New ArgumentNullException  ("dirin cannot be Nothing")
	If IsNothing (substr) then Throw New ArgumentNullException  ("substr cannot be Nothing")
	If IsNothing (xpts) then Throw New ArgumentNullException  ("xpts cannot be Nothing")
	If IsNothing (ypts) then Throw New ArgumentNullException  ("ypts cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertFilesFittedToPS( dirin, substr, xpts, ypts, fileout)

	Return _Result
End Function

' SRC\psio1.c (321, 1)
' 
' sarrayConvertFilesFittedToPS(SARRAY *, l_float32, l_float32, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function sarrayConvertFilesFittedToPS(
				ByRef sa as Sarray, 
				ByRef xpts as Single, 
				ByRef ypts as Single, 
				ByRef fileout as String) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If IsNothing (xpts) then Throw New ArgumentNullException  ("xpts cannot be Nothing")
	If IsNothing (ypts) then Throw New ArgumentNullException  ("ypts cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")

Dim saPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sa) Then saPTR = sa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayConvertFilesFittedToPS( sa.Pointer, xpts, ypts, fileout)

	Return _Result
End Function

' SRC\psio1.c (391, 1)
' 
' writeImageCompressedToPSFile(const char *, const char *, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function writeImageCompressedToPSFile(
				ByRef filein as String, 
				ByRef fileout as String, 
				ByRef res as Integer, 
				ByRef pfirstfile as Object, 
				ByRef pindex as Object) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")
	If IsNothing (pfirstfile) then Throw New ArgumentNullException  ("pfirstfile cannot be Nothing")
	If IsNothing (pindex) then Throw New ArgumentNullException  ("pindex cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.writeImageCompressedToPSFile( filein, fileout, res, pfirstfile, pindex)

	Return _Result
End Function

' SRC\psio1.c (498, 1)
' 
' convertSegmentedPagesToPS(const char *, const char *, l_int32, const char *, const char *, l_int32, l_int32, l_int32, l_float32, l_float32, l_int32, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function convertSegmentedPagesToPS(
				ByRef pagedir as String, 
				ByRef pagestr as String, 
				ByRef page_numpre as Integer, 
				ByRef maskdir as String, 
				ByRef maskstr as String, 
				ByRef mask_numpre as Integer, 
				ByRef numpost as Integer, 
				ByRef maxnum as Integer, 
				ByRef textscale as Single, 
				ByRef imagescale as Single, 
				ByRef threshold as Integer, 
				ByRef fileout as String) as Integer

	If IsNothing (pagedir) then Throw New ArgumentNullException  ("pagedir cannot be Nothing")
	If IsNothing (pagestr) then Throw New ArgumentNullException  ("pagestr cannot be Nothing")
	If IsNothing (maskdir) then Throw New ArgumentNullException  ("maskdir cannot be Nothing")
	If IsNothing (maskstr) then Throw New ArgumentNullException  ("maskstr cannot be Nothing")
	If IsNothing (textscale) then Throw New ArgumentNullException  ("textscale cannot be Nothing")
	If IsNothing (imagescale) then Throw New ArgumentNullException  ("imagescale cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertSegmentedPagesToPS( pagedir, pagestr, page_numpre, maskdir, maskstr, mask_numpre, numpost, maxnum, textscale, imagescale, threshold, fileout)

	Return _Result
End Function

' SRC\psio1.c (596, 1)
' 
' pixWriteSegmentedPageToPS(PIX *, PIX *, l_float32, l_float32, l_int32, l_int32, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixWriteSegmentedPageToPS(
				ByRef pixs as Pix, 
				ByRef pixm as Pix, 
				ByRef textscale as Single, 
				ByRef imagescale as Single, 
				ByRef threshold as Integer, 
				ByRef pageno as Integer, 
				ByRef fileout as String) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")
	If IsNothing (textscale) then Throw New ArgumentNullException  ("textscale cannot be Nothing")
	If IsNothing (imagescale) then Throw New ArgumentNullException  ("imagescale cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")

Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer
Dim pixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixm) Then pixmPTR = pixm.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteSegmentedPageToPS( pixs.Pointer, pixm.Pointer, textscale, imagescale, threshold, pageno, fileout)

	Return _Result
End Function

' SRC\psio1.c (747, 1)
' 
' pixWriteMixedToPS(PIX *, PIX *, l_float32, l_int32, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixWriteMixedToPS(
				ByRef pixb as Pix, 
				ByRef pixc as Pix, 
				ByRef scale as Single, 
				ByRef pageno as Integer, 
				ByRef fileout as String) as Integer

	If IsNothing (pixb) then Throw New ArgumentNullException  ("pixb cannot be Nothing")
	If IsNothing (pixc) then Throw New ArgumentNullException  ("pixc cannot be Nothing")
	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")

Dim pixbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixb) Then pixbPTR = pixb.Pointer
Dim pixcPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixc) Then pixcPTR = pixc.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteMixedToPS( pixb.Pointer, pixc.Pointer, scale, pageno, fileout)

	Return _Result
End Function

' SRC\psio1.c (834, 1)
' 
' convertToPSEmbed(const char *, const char *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function convertToPSEmbed(
				ByRef filein as String, 
				ByRef fileout as String, 
				ByRef level as Integer) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertToPSEmbed( filein, fileout, level)

	Return _Result
End Function

' SRC\psio1.c (935, 1)
' 
' pixaWriteCompressedToPS(PIXA *, const char *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixaWriteCompressedToPS(
				ByRef pixa as Pixa, 
				ByRef fileout as String, 
				ByRef res as Integer, 
				ByRef level as Integer) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")

Dim pixaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixa) Then pixaPTR = pixa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaWriteCompressedToPS( pixa.Pointer, fileout, res, level)

	Return _Result
End Function

#End Region
#Region "SRC\psio2.c"
' SRC\psio2.c (152, 1)
' pixWritePSEmbed()
' pixWritePSEmbed(const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This is a simple wrapper function that generates an
''' uncompressed PS file, with a bounding box.
''' (2) The bounding box is required when a program such as TeX
''' (through epsf) places and rescales the image.
''' (3) The bounding box is sized for fitting the image to an
''' 8.5 x 11.0 inch page.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - input file, all depths, colormap OK</param>
'''  <param name="fileout">[in] - output ps file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWritePSEmbed(
				ByVal filein as String, 
				ByVal fileout as String) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWritePSEmbed( filein, fileout)

	Return _Result
End Function

' SRC\psio2.c (205, 1)
' pixWriteStreamPS()
' pixWriteStreamPS(FILE *, PIX *, BOX *, l_int32, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This writes image in PS format, optionally scaled,
''' adjusted for the printer resolution, and with
''' a bounding box.
''' (2) For details on use of parameters, see pixWriteStringPS().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pix">[in] - </param>
'''  <param name="box">[in][optional] - </param>
'''  <param name="res">[in] - can use 0 for default of 300 ppi</param>
'''  <param name="scale">[in] - to prevent scaling, use either 1.0 or 0.0</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixWriteStreamPS(
				ByVal fp as FILE, 
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByVal res as Integer, 
				ByVal scale as Single) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteStreamPS( fp.Pointer, pix.Pointer, boxPTR, res, scale)

	Return _Result
End Function

' SRC\psio2.c (303, 1)
' pixWriteStringPS()
' pixWriteStringPS(PIX *, BOX *, l_int32, l_float32) as char *
'''  <summary>
''' a) If %box == NULL, image is placed, optionally scaled,
''' in a standard b.b. at the center of the page.
''' This is to be used when another program like
''' TeX through epsf places the image.
''' b) If %box != NULL, image is placed without a
''' b.b. at the specified page location and with
''' optional scaling.  This is to be used when
''' you want to specify exactly where and optionally
''' how big you want the image to be.
''' Note that all coordinates are in PS convention,
''' with 0,0 at LL corner of the page
''' x,y location of LL corner of image, in mils.
''' w,h scaled size, in mils.  Use 0 to
''' scale with "scale" and "res" input.
''' %scale If no scaling is desired, use either 1.0 or 0.0.
''' Scaling just resets the resolution parameter; the actual
''' scaling is done in the interpreter at rendering time.
''' This is important  it allows you to scale the image up
''' without increasing the file size.
''' Notes
''' (1) OK, this seems a bit complicated, because there are various
''' ways to scale and not to scale.  Here's a summary
''' (2) If you don't want any scaling at all
''' if you are using a box
''' set w = 0, h = 0, and use scale = 1.0; it will print
''' each pixel unscaled at printer resolution
''' if you are not using a box
''' set scale = 1.0; it will print at printer resolution
''' (3) If you want the image to be a certain size in inches
''' you must use a box and set the box (w,h) in mils
''' (4) If you want the image to be scaled by a scale factor != 1.0
''' if you are using a box
''' set w = 0, h = 0, and use the desired scale factor;
''' the higher the printer resolution, the smaller the
''' image will actually appear.
''' if you are not using a box
''' set the desired scale factor; the higher the printer
''' resolution, the smaller the image will actually appear.
''' (5) Another complication is the proliferation of distance units
''' The interface distances are in milli-inches.
''' Three different units are used internally
''' ~ pixels  (units of 1/res inch)
''' ~ printer pts (units of 1/72 inch)
''' ~ inches
''' Here is a quiz on volume units from a reviewer
''' How many UK milli-cups in a US kilo-teaspoon?
''' (Hint 1.0 US cup = 0.75 UK cup + 0.2 US gill;
''' 1.0 US gill = 24.0 US teaspoons)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths, colormap OK</param>
'''  <param name="box">[in] - bounding box; can be NULL</param>
'''  <param name="res">[in] - resolution, in printer ppi.  Use 0 for default 300 ppi.</param>
'''  <param name="scale">[in] - scale factor.  If no scaling is desired, use either 1.0 or 0.0.   Scaling just resets the resolution parameter; the actual scaling is done in the interpreter at rendering time.  This is important it allows you to scale the image up without increasing the file size.</param>
'''   <returns>ps string if OK, or NULL on error</returns>
Public Shared Function pixWriteStringPS(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal res as Integer, 
				ByVal scale as Single) as String

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.pixWriteStringPS( pixs.Pointer, box.Pointer, res, scale)

	Return _Result
End Function

' SRC\psio2.c (413, 1)
' generateUncompressedPS()
' generateUncompressedPS(char *, l_int32, l_int32, l_int32, l_int32, l_int32, l_float32, l_float32, l_float32, l_float32, l_int32) as char *
'''  <summary>
''' Notes
''' (1) Low-level function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="hexdata">[in] - </param>
'''  <param name="w">[in] - raster image size in pixels</param>
'''  <param name="h">[in] - raster image size in pixels</param>
'''  <param name="d">[in] - image depth in bpp; rgb is 32</param>
'''  <param name="psbpl">[in] - raster bytes/line, when packed to the byte boundary</param>
'''  <param name="bps">[in] - bits/sample either 1 or 8</param>
'''  <param name="xpt">[in] - location of LL corner of image, in pts, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="ypt">[in] - location of LL corner of image, in pts, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="wpt">[in] - rendered image size in pts</param>
'''  <param name="hpt">[in] - rendered image size in pts</param>
'''  <param name="boxflag">[in] - 1 to print out bounding box hint; 0 to skip</param>
'''   <returns>PS string, or NULL on error</returns>
Public Shared Function generateUncompressedPS(
				ByVal hexdata as String, 
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal d as Integer, 
				ByVal psbpl as Integer, 
				ByVal bps as Integer, 
				ByVal xpt as Single, 
				ByVal ypt as Single, 
				ByVal wpt as Single, 
				ByVal hpt as Single, 
				ByVal boxflag as Integer) as String

	If IsNothing (hexdata) then Throw New ArgumentNullException  ("hexdata cannot be Nothing")
	If IsNothing (xpt) then Throw New ArgumentNullException  ("xpt cannot be Nothing")
	If IsNothing (ypt) then Throw New ArgumentNullException  ("ypt cannot be Nothing")
	If IsNothing (wpt) then Throw New ArgumentNullException  ("wpt cannot be Nothing")
	If IsNothing (hpt) then Throw New ArgumentNullException  ("hpt cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.generateUncompressedPS( hexdata, w, h, d, psbpl, bps, xpt, ypt, wpt, hpt, boxflag)

	Return _Result
End Function

' SRC\psio2.c (522, 1)
' getScaledParametersPS()
' getScaledParametersPS(BOX *, l_int32, l_int32, l_int32, l_float32, l_float32 *, l_float32 *, l_float32 *, l_float32 *) as void
'''  <summary>
''' Notes
''' (1) The image is always scaled, depending on res and scale.
''' (2) If no box, the image is centered on the page.
''' (3) If there is a box, the image is placed within it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="box">[in][optional] - location of image in mils; with x,y being the LL corner</param>
'''  <param name="wpix">[in] - pix width in pixels</param>
'''  <param name="hpix">[in] - pix height in pixels</param>
'''  <param name="res">[in] - of printer; use 0 for default</param>
'''  <param name="scale">[in] - use 1.0 or 0.0 for no scaling</param>
'''  <param name="pxpt">[out] - location of llx in pts</param>
'''  <param name="pypt">[out] - location of lly in pts</param>
'''  <param name="pwpt">[out] - image width in pts</param>
'''  <param name="phpt">[out] - image height in pts</param>
Public Shared Sub getScaledParametersPS(
				ByVal box as Box, 
				ByVal wpix as Integer, 
				ByVal hpix as Integer, 
				ByVal res as Integer, 
				ByVal scale as Single, 
				ByRef pxpt as Single(), 
				ByRef pypt as Single(), 
				ByRef pwpt as Single(), 
				ByRef phpt as Single())

	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	LeptonicaSharp.Natives.getScaledParametersPS( boxPTR, wpix, hpix, res, scale, pxpt, pypt, pwpt, phpt)

End Sub

' SRC\psio2.c (601, 1)
' convertByteToHexAscii()
' convertByteToHexAscii(l_uint8, char *, char *) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="byteval">[in] - input byte</param>
'''  <param name="pnib1">[out] - two hex ascii characters</param>
'''  <param name="pnib2">[out] - two hex ascii characters</param>
Public Shared Sub convertByteToHexAscii(
				ByVal byteval as Byte, 
				ByRef pnib1 as String, 
				ByRef pnib2 as String)

	If IsNothing (byteval) then Throw New ArgumentNullException  ("byteval cannot be Nothing")


	LeptonicaSharp.Natives.convertByteToHexAscii( byteval, pnib1, pnib2)

End Sub

' SRC\psio2.c (643, 1)
' convertJpegToPSEmbed()
' convertJpegToPSEmbed(const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This function takes a jpeg file as input and generates a DCT
''' compressed, ascii85 encoded PS file, with a bounding box.
''' (2) The bounding box is required when a program such as TeX
''' (through epsf) places and rescales the image.
''' (3) The bounding box is sized for fitting the image to an
''' 8.5 x 11.0 inch page.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - input jpeg file</param>
'''  <param name="fileout">[in] - output ps file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertJpegToPSEmbed(
				ByVal filein as String, 
				ByVal fileout as String) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertJpegToPSEmbed( filein, fileout)

	Return _Result
End Function

' SRC\psio2.c (758, 1)
' convertJpegToPS()
' convertJpegToPS(const char *, const char *, const char *, l_int32, l_int32, l_int32, l_float32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is simpler to use than pixWriteStringPS(), and
''' it outputs in level 2 PS as compressed DCT (overlaid
''' with ascii85 encoding).
''' (2) An output file can contain multiple pages, each with
''' multiple images.  The arguments to convertJpegToPS()
''' allow you to control placement of jpeg images on multiple
''' pages within a PostScript file.
''' (3) For the first image written to a file, use "w", which
''' opens for write and clears the file.  For all subsequent
''' images written to that file, use "a".
''' (4) The (x, y) parameters give the LL corner of the image
''' relative to the LL corner of the page.  They are in
''' units of pixels if scale = 1.0.  If you use (e.g.)
''' scale = 2.0, the image is placed at (2x, 2y) on the page,
''' and the image dimensions are also doubled.
''' (5) Display vs printed resolution
''' If your display is 75 ppi and your image was created
''' at a resolution of 300 ppi, you can get the image
''' to print at the same size as it appears on your display
''' by either setting scale = 4.0 or by setting  res = 75.
''' Both tell the printer to make a 4x enlarged image.
''' If your image is generated at 150 ppi and you use scale = 1,
''' it will be rendered such that 150 pixels correspond
''' to 72 pts (1 inch on the printer).  This function does
''' the conversion from pixels (with or without scaling) to
''' pts, which are the units that the printer uses.
''' The printer will choose its own resolution to use
''' in rendering the image, which will not affect the size
''' of the rendered image.  That is because the output
''' PostScript file describes the geometry in terms of pts,
''' which are defined to be 1/72 inch.  The printer will
''' only see the size of the image in pts, through the
''' scale and translate parameters and the affine
''' transform (the ImageMatrix) of the image.
''' (6) To render multiple images on the same page, set
''' endpage = FALSE for each image until you get to the
''' last, for which you set endpage = TRUE.  This causes the
''' "showpage" command to be invoked.  Showpage outputs
''' the entire page and clears the raster buffer for the
''' next page to be added.  Without a "showpage",
''' subsequent images from the next page will overlay those
''' previously put down.
''' (7) For multiple pages, increment the page number, starting
''' with page 1.  This allows PostScript (and PDF) to build
''' a page directory, which viewers use for navigation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - input jpeg file</param>
'''  <param name="fileout">[in] - output ps file</param>
'''  <param name="operation">[in] - "w" for write; "a" for append</param>
'''  <param name="x">[in] - location of LL corner of image, in pixels, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="y">[in] - location of LL corner of image, in pixels, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="res">[in] - resolution of the input image, in ppi; use 0 for default</param>
'''  <param name="scale">[in] - scaling by printer; use 0.0 or 1.0 for no scaling</param>
'''  <param name="pageno">[in] - page number; must start with 1; you can use 0 if there is only one page</param>
'''  <param name="endpage">[in] - boolean use TRUE if this is the last image to be added to the page; FALSE otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertJpegToPS(
				ByVal filein as String, 
				ByVal fileout as String, 
				ByVal operation as String, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal res as Integer, 
				ByVal scale as Single, 
				ByVal pageno as Integer, 
				ByVal endpage as Integer) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")
	If IsNothing (operation) then Throw New ArgumentNullException  ("operation cannot be Nothing")
	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertJpegToPS( filein, fileout, operation, x, y, res, scale, pageno, endpage)

	Return _Result
End Function

' SRC\psio2.c (817, 1)
' convertJpegToPSString() Generates PS string in jpeg format from jpeg file
' convertJpegToPSString(const char *, char **, l_int32 *, l_int32, l_int32, l_int32, l_float32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) For usage, see convertJpegToPS()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - input jpeg file</param>
'''  <param name="poutstr">[out] - PS string</param>
'''  <param name="pnbytes">[out] - number of bytes in PS string</param>
'''  <param name="x">[in] - location of LL corner of image, in pixels, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="y">[in] - location of LL corner of image, in pixels, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="res">[in] - resolution of the input image, in ppi; use 0 for default</param>
'''  <param name="scale">[in] - scaling by printer; use 0.0 or 1.0 for no scaling</param>
'''  <param name="pageno">[in] - page number; must start with 1; you can use 0 if there is only one page</param>
'''  <param name="endpage">[in] - boolean use TRUE if this is the last image to be added to the page; FALSE otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertJpegToPSString(
				ByVal filein as String, 
				ByRef poutstr as String(), 
				ByRef pnbytes as Integer, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal res as Integer, 
				ByVal scale as Single, 
				ByVal pageno as Integer, 
				ByVal endpage as Integer) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")

Dim poutstrPTR As IntPtr = poutstrPTR = Marshal.AllocHGlobal(Marshal.sizeOf(poutstr.toArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.convertJpegToPSString( filein, poutstrPTR, pnbytes, x, y, res, scale, pageno, endpage)

	Return _Result
End Function

' SRC\psio2.c (911, 1)
' generateJpegPS()
' generateJpegPS(const char *, L_COMP_DATA *, l_float32, l_float32, l_float32, l_float32, l_int32, l_int32) as char *
'''  <summary>
''' Notes
''' (1) Low-level function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in][optional] - input jpeg filename; can be null</param>
'''  <param name="cid">[in] - jpeg compressed image data</param>
'''  <param name="xpt">[in] - location of LL corner of image, in pts, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="ypt">[in] - location of LL corner of image, in pts, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="wpt">[in] - rendered image size in pts</param>
'''  <param name="hpt">[in] - rendered image size in pts</param>
'''  <param name="pageno">[in] - page number; must start with 1; you can use 0 if there is only one page.</param>
'''  <param name="endpage">[in] - boolean use TRUE if this is the last image to be added to the page; FALSE otherwise</param>
'''   <returns>PS string, or NULL on error</returns>
Public Shared Function generateJpegPS(
				ByVal filein as String, 
				ByVal cid as L_Compressed_Data, 
				ByVal xpt as Single, 
				ByVal ypt as Single, 
				ByVal wpt as Single, 
				ByVal hpt as Single, 
				ByVal pageno as Integer, 
				ByVal endpage as Integer) as String

	If IsNothing (cid) then Throw New ArgumentNullException  ("cid cannot be Nothing")
	If IsNothing (xpt) then Throw New ArgumentNullException  ("xpt cannot be Nothing")
	If IsNothing (ypt) then Throw New ArgumentNullException  ("ypt cannot be Nothing")
	If IsNothing (wpt) then Throw New ArgumentNullException  ("wpt cannot be Nothing")
	If IsNothing (hpt) then Throw New ArgumentNullException  ("hpt cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.generateJpegPS( filein, cid.Pointer, xpt, ypt, wpt, hpt, pageno, endpage)

	Return _Result
End Function

' SRC\psio2.c (1039, 1)
' convertG4ToPSEmbed()
' convertG4ToPSEmbed(const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This function takes a g4 compressed tif file as input and
''' generates a g4 compressed, ascii85 encoded PS file, with
''' a bounding box.
''' (2) The bounding box is required when a program such as TeX
''' (through epsf) places and rescales the image.
''' (3) The bounding box is sized for fitting the image to an
''' 8.5 x 11.0 inch page.
''' (4) We paint this through a mask, over whatever is below.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - input tiff file</param>
'''  <param name="fileout">[in] - output ps file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertG4ToPSEmbed(
				ByVal filein as String, 
				ByVal fileout as String) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertG4ToPSEmbed( filein, fileout)

	Return _Result
End Function

' SRC\psio2.c (1145, 1)
' convertG4ToPS()
' convertG4ToPS(const char *, const char *, const char *, l_int32, l_int32, l_int32, l_float32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) See the usage comments in convertJpegToPS(), some of
''' which are repeated here.
''' (2) This is a wrapper for tiff g4.  The PostScript that
''' is generated is expanded by about 5/4 (due to the
''' ascii85 encoding.  If you convert to pdf (ps2pdf), the
''' ascii85 decoder is automatically invoked, so that the
''' pdf wrapped g4 file is essentially the same size as
''' the original g4 file.  It's useful to have the PS
''' file ascii85 encoded, because many printers will not
''' print binary PS files.
''' (3) For the first image written to a file, use "w", which
''' opens for write and clears the file.  For all subsequent
''' images written to that file, use "a".
''' (4) To render multiple images on the same page, set
''' endpage = FALSE for each image until you get to the
''' last, for which you set endpage = TRUE.  This causes the
''' "showpage" command to be invoked.  Showpage outputs
''' the entire page and clears the raster buffer for the
''' next page to be added.  Without a "showpage",
''' subsequent images from the next page will overlay those
''' previously put down.
''' (5) For multiple images to the same page, where you are writing
''' both jpeg and tiff-g4, you have two options
''' (a) write the g4 first, as either image (maskflag == FALSE)
''' or imagemask (maskflag == TRUE), and then write the
''' jpeg over it.
''' (b) write the jpeg first and as the last item, write
''' the g4 as an imagemask (maskflag == TRUE), to paint
''' through the foreground only.
''' We have this flexibility with the tiff-g4 because it is 1 bpp.
''' (6) For multiple pages, increment the page number, starting
''' with page 1.  This allows PostScript (and PDF) to build
''' a page directory, which viewers use for navigation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - input tiff g4 file</param>
'''  <param name="fileout">[in] - output ps file</param>
'''  <param name="operation">[in] - "w" for write; "a" for append</param>
'''  <param name="x">[in] - location of LL corner of image, in pixels, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="y">[in] - location of LL corner of image, in pixels, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="res">[in] - resolution of the input image, in ppi; typ. values are 300 and 600; use 0 for automatic determination based on image size</param>
'''  <param name="scale">[in] - scaling by printer; use 0.0 or 1.0 for no scaling</param>
'''  <param name="pageno">[in] - page number; must start with 1; you can use 0 if there is only one page.</param>
'''  <param name="maskflag">[in] - boolean use TRUE if just painting through fg; FALSE if painting both fg and bg.</param>
'''  <param name="endpage">[in] - boolean use TRUE if this is the last image to be added to the page; FALSE otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertG4ToPS(
				ByVal filein as String, 
				ByVal fileout as String, 
				ByVal operation as String, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal res as Integer, 
				ByVal scale as Single, 
				ByVal pageno as Integer, 
				ByVal maskflag as Integer, 
				ByVal endpage as Integer) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")
	If IsNothing (operation) then Throw New ArgumentNullException  ("operation cannot be Nothing")
	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertG4ToPS( filein, fileout, operation, x, y, res, scale, pageno, maskflag, endpage)

	Return _Result
End Function

' SRC\psio2.c (1208, 1)
' convertG4ToPSString()
' convertG4ToPSString(const char *, char **, l_int32 *, l_int32, l_int32, l_int32, l_float32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Generates PS string in G4 compressed tiff format from G4 tiff file.
''' (2) For usage, see convertG4ToPS().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - input tiff g4 file</param>
'''  <param name="poutstr">[out] - PS string</param>
'''  <param name="pnbytes">[out] - number of bytes in PS string</param>
'''  <param name="x">[in] - location of LL corner of image, in pixels, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="y">[in] - location of LL corner of image, in pixels, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="res">[in] - resolution of the input image, in ppi; typ. values are 300 and 600; use 0 for automatic determination based on image size</param>
'''  <param name="scale">[in] - scaling by printer; use 0.0 or 1.0 for no scaling</param>
'''  <param name="pageno">[in] - page number; must start with 1; you can use 0 if there is only one page.</param>
'''  <param name="maskflag">[in] - boolean use TRUE if just painting through fg; FALSE if painting both fg and bg.</param>
'''  <param name="endpage">[in] - boolean use TRUE if this is the last image to be added to the page; FALSE otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertG4ToPSString(
				ByVal filein as String, 
				ByRef poutstr as String(), 
				ByRef pnbytes as Integer, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal res as Integer, 
				ByVal scale as Single, 
				ByVal pageno as Integer, 
				ByVal maskflag as Integer, 
				ByVal endpage as Integer) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")

Dim poutstrPTR As IntPtr = poutstrPTR = Marshal.AllocHGlobal(Marshal.sizeOf(poutstr.toArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.convertG4ToPSString( filein, poutstrPTR, pnbytes, x, y, res, scale, pageno, maskflag, endpage)

	Return _Result
End Function

' SRC\psio2.c (1304, 1)
' generateG4PS()
' generateG4PS(const char *, L_COMP_DATA *, l_float32, l_float32, l_float32, l_float32, l_int32, l_int32, l_int32) as char *
'''  <summary>
''' Notes
''' (1) Low-level function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in][optional] - input tiff g4 file; can be null</param>
'''  <param name="cid">[in] - g4 compressed image data</param>
'''  <param name="xpt">[in] - location of LL corner of image, in pts, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="ypt">[in] - location of LL corner of image, in pts, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="wpt">[in] - rendered image size in pts</param>
'''  <param name="hpt">[in] - rendered image size in pts</param>
'''  <param name="maskflag">[in] - boolean use TRUE if just painting through fg; FALSE if painting both fg and bg.</param>
'''  <param name="pageno">[in] - page number; must start with 1; you can use 0 if there is only one page.</param>
'''  <param name="endpage">[in] - boolean use TRUE if this is the last image to be added to the page; FALSE otherwise</param>
'''   <returns>PS string, or NULL on error</returns>
Public Shared Function generateG4PS(
				ByVal filein as String, 
				ByVal cid as L_Compressed_Data, 
				ByVal xpt as Single, 
				ByVal ypt as Single, 
				ByVal wpt as Single, 
				ByVal hpt as Single, 
				ByVal maskflag as Integer, 
				ByVal pageno as Integer, 
				ByVal endpage as Integer) as String

	If IsNothing (cid) then Throw New ArgumentNullException  ("cid cannot be Nothing")
	If IsNothing (xpt) then Throw New ArgumentNullException  ("xpt cannot be Nothing")
	If IsNothing (ypt) then Throw New ArgumentNullException  ("ypt cannot be Nothing")
	If IsNothing (wpt) then Throw New ArgumentNullException  ("wpt cannot be Nothing")
	If IsNothing (hpt) then Throw New ArgumentNullException  ("hpt cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.generateG4PS( filein, cid.Pointer, xpt, ypt, wpt, hpt, maskflag, pageno, endpage)

	Return _Result
End Function

' SRC\psio2.c (1438, 1)
' convertTiffMultipageToPS()
' convertTiffMultipageToPS(const char *, const char *, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This converts a multipage tiff file of binary page images
''' into a ccitt g4 compressed PS file.
''' (2) If the images are generated from a standard resolution fax,
''' the vertical resolution is doubled to give a normal-looking
''' aspect ratio.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - input tiff multipage file</param>
'''  <param name="fileout">[in] - output ps file</param>
'''  <param name="fillfract">[in] - factor for filling 8.5 x 11 inch page; use 0.0 for DEFAULT_FILL_FRACTION</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertTiffMultipageToPS(
				ByVal filein as String, 
				ByVal fileout as String, 
				ByVal fillfract as Single) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")
	If IsNothing (fillfract) then Throw New ArgumentNullException  ("fillfract cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertTiffMultipageToPS( filein, fileout, fillfract)

	Return _Result
End Function

' SRC\psio2.c (1518, 1)
' convertFlateToPSEmbed()
' convertFlateToPSEmbed(const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This function takes any image file as input and generates a
''' flate-compressed, ascii85 encoded PS file, with a bounding box.
''' (2) The bounding box is required when a program such as TeX
''' (through epsf) places and rescales the image.
''' (3) The bounding box is sized for fitting the image to an
''' 8.5 x 11.0 inch page.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - input file -- any format</param>
'''  <param name="fileout">[in] - output ps file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertFlateToPSEmbed(
				ByVal filein as String, 
				ByVal fileout as String) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertFlateToPSEmbed( filein, fileout)

	Return _Result
End Function

' SRC\psio2.c (1631, 1)
' convertFlateToPS()
' convertFlateToPS(const char *, const char *, const char *, l_int32, l_int32, l_int32, l_float32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This outputs level 3 PS as flate compressed (overlaid
''' with ascii85 encoding).
''' (2) An output file can contain multiple pages, each with
''' multiple images.  The arguments to convertFlateToPS()
''' allow you to control placement of png images on multiple
''' pages within a PostScript file.
''' (3) For the first image written to a file, use "w", which
''' opens for write and clears the file.  For all subsequent
''' images written to that file, use "a".
''' (4) The (x, y) parameters give the LL corner of the image
''' relative to the LL corner of the page.  They are in
''' units of pixels if scale = 1.0.  If you use (e.g.)
''' scale = 2.0, the image is placed at (2x, 2y) on the page,
''' and the image dimensions are also doubled.
''' (5) Display vs printed resolution
''' If your display is 75 ppi and your image was created
''' at a resolution of 300 ppi, you can get the image
''' to print at the same size as it appears on your display
''' by either setting scale = 4.0 or by setting  res = 75.
''' Both tell the printer to make a 4x enlarged image.
''' If your image is generated at 150 ppi and you use scale = 1,
''' it will be rendered such that 150 pixels correspond
''' to 72 pts (1 inch on the printer).  This function does
''' the conversion from pixels (with or without scaling) to
''' pts, which are the units that the printer uses.
''' The printer will choose its own resolution to use
''' in rendering the image, which will not affect the size
''' of the rendered image.  That is because the output
''' PostScript file describes the geometry in terms of pts,
''' which are defined to be 1/72 inch.  The printer will
''' only see the size of the image in pts, through the
''' scale and translate parameters and the affine
''' transform (the ImageMatrix) of the image.
''' (6) To render multiple images on the same page, set
''' endpage = FALSE for each image until you get to the
''' last, for which you set endpage = TRUE.  This causes the
''' "showpage" command to be invoked.  Showpage outputs
''' the entire page and clears the raster buffer for the
''' next page to be added.  Without a "showpage",
''' subsequent images from the next page will overlay those
''' previously put down.
''' (7) For multiple pages, increment the page number, starting
''' with page 1.  This allows PostScript (and PDF) to build
''' a page directory, which viewers use for navigation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - input file -- any format</param>
'''  <param name="fileout">[in] - output ps file</param>
'''  <param name="operation">[in] - "w" for write; "a" for append</param>
'''  <param name="x">[in] - location of LL corner of image, in pixels, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="y">[in] - location of LL corner of image, in pixels, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="res">[in] - resolution of the input image, in ppi; use 0 for default</param>
'''  <param name="scale">[in] - scaling by printer; use 0.0 or 1.0 for no scaling</param>
'''  <param name="pageno">[in] - page number; must start with 1; you can use 0 if there is only one page.</param>
'''  <param name="endpage">[in] - boolean use TRUE if this is the last image to be added to the page; FALSE otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertFlateToPS(
				ByVal filein as String, 
				ByVal fileout as String, 
				ByVal operation as String, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal res as Integer, 
				ByVal scale as Single, 
				ByVal pageno as Integer, 
				ByVal endpage as Integer) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")
	If IsNothing (operation) then Throw New ArgumentNullException  ("operation cannot be Nothing")
	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertFlateToPS( filein, fileout, operation, x, y, res, scale, pageno, endpage)

	Return _Result
End Function

' SRC\psio2.c (1697, 1)
' convertFlateToPSString() Generates level 3 PS string in flate compressed format.
' convertFlateToPSString(const char *, char **, l_int32 *, l_int32, l_int32, l_int32, l_float32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) The returned PS character array is a null-terminated
''' ascii string.  All the raster data is ascii85 encoded, so
''' there are no null bytes embedded in it.
''' (2) The raster encoding is made with gzip, the same as that
''' in a png file that is compressed without prediction.
''' The raster data itself is 25% larger than that in the
''' binary form, due to the ascii85 encoding.
''' Usage  See convertFlateToPS()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - input image file</param>
'''  <param name="poutstr">[out] - PS string</param>
'''  <param name="pnbytes">[out] - number of bytes in PS string</param>
'''  <param name="x">[in] - location of LL corner of image, in pixels, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="y">[in] - location of LL corner of image, in pixels, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="res">[in] - resolution of the input image, in ppi; use 0 for default</param>
'''  <param name="scale">[in] - scaling by printer; use 0.0 or 1.0 for no scaling</param>
'''  <param name="pageno">[in] - page number; must start with 1; you can use 0 if there is only one page.</param>
'''  <param name="endpage">[in] - boolean use TRUE if this is the last image to be added to the page; FALSE otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertFlateToPSString(
				ByVal filein as String, 
				ByRef poutstr as String(), 
				ByRef pnbytes as Integer, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal res as Integer, 
				ByVal scale as Single, 
				ByVal pageno as Integer, 
				ByVal endpage as Integer) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")

Dim poutstrPTR As IntPtr = poutstrPTR = Marshal.AllocHGlobal(Marshal.sizeOf(poutstr.toArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.convertFlateToPSString( filein, poutstrPTR, pnbytes, x, y, res, scale, pageno, endpage)

	Return _Result
End Function

' SRC\psio2.c (1781, 1)
' generateFlatePS()
' generateFlatePS(const char *, L_COMP_DATA *, l_float32, l_float32, l_float32, l_float32, l_int32, l_int32) as char *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in][optional] - input filename; can be null</param>
'''  <param name="cid">[in] - flate compressed image data</param>
'''  <param name="xpt">[in] - location of LL corner of image, in pts, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="ypt">[in] - location of LL corner of image, in pts, relative to the PostScript origin (0,0) at the LL corner of the page</param>
'''  <param name="wpt">[in] - rendered image size in pts</param>
'''  <param name="hpt">[in] - rendered image size in pts</param>
'''  <param name="pageno">[in] - page number; must start with 1; you can use 0 if there is only one page</param>
'''  <param name="endpage">[in] - boolean use TRUE if this is the last image to be added to the page; FALSE otherwise</param>
'''   <returns>PS string, or NULL on error</returns>
Public Shared Function generateFlatePS(
				ByVal filein as String, 
				ByVal cid as L_Compressed_Data, 
				ByVal xpt as Single, 
				ByVal ypt as Single, 
				ByVal wpt as Single, 
				ByVal hpt as Single, 
				ByVal pageno as Integer, 
				ByVal endpage as Integer) as String

	If IsNothing (cid) then Throw New ArgumentNullException  ("cid cannot be Nothing")
	If IsNothing (xpt) then Throw New ArgumentNullException  ("xpt cannot be Nothing")
	If IsNothing (ypt) then Throw New ArgumentNullException  ("ypt cannot be Nothing")
	If IsNothing (wpt) then Throw New ArgumentNullException  ("wpt cannot be Nothing")
	If IsNothing (hpt) then Throw New ArgumentNullException  ("hpt cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.generateFlatePS( filein, cid.Pointer, xpt, ypt, wpt, hpt, pageno, endpage)

	Return _Result
End Function

' SRC\psio2.c (1922, 1)
' pixWriteMemPS()
' pixWriteMemPS(l_uint8 **, size_t *, PIX *, BOX *, l_int32, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) See pixWriteStringPS() for usage.
''' (2) This is just a wrapper for pixWriteStringPS(), which
''' writes uncompressed image data to memory.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of tiff compressed image</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="pix">[in] - </param>
'''  <param name="box">[in][optional] - </param>
'''  <param name="res">[in] - can use 0 for default of 300 ppi</param>
'''  <param name="scale">[in] - to prevent scaling, use either 1.0 or 0.0</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWriteMemPS(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal pix as Pix, 
				ByVal box as Box, 
				ByVal res as Integer, 
				ByVal scale as Single) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero
	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteMemPS( pdataPTR, psize, pix.Pointer, boxPTR, res, scale)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\psio2.c (1957, 1)
' getResLetterPage()
' getResLetterPage(l_int32, l_int32, l_float32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="w">[in] - image width, pixels</param>
'''  <param name="h">[in] - image height, pixels</param>
'''  <param name="fillfract">[in] - fraction in linear dimension of full page, not to be exceeded; use 0 for default</param>
'''   <returns>resolution</returns>
Public Shared Function getResLetterPage(
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal fillfract as Single) as Integer

	If IsNothing (fillfract) then Throw New ArgumentNullException  ("fillfract cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.getResLetterPage( w, h, fillfract)

	Return _Result
End Function

' SRC\psio2.c (1982, 1)
' getResA4Page()
' getResA4Page(l_int32, l_int32, l_float32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="w">[in] - image width, pixels</param>
'''  <param name="h">[in] - image height, pixels</param>
'''  <param name="fillfract">[in] - fraction in linear dimension of full page, not to be exceeded; use 0 for default</param>
'''   <returns>resolution</returns>
Public Shared Function getResA4Page(
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal fillfract as Single) as Integer

	If IsNothing (fillfract) then Throw New ArgumentNullException  ("fillfract cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.getResA4Page( w, h, fillfract)

	Return _Result
End Function

' SRC\psio2.c (2001, 1)
' 
' l_psWriteBoundingBox(l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
Public Shared Sub l_psWriteBoundingBox(
				ByRef flag as Integer)



	LeptonicaSharp.Natives.l_psWriteBoundingBox( flag)

End Sub

#End Region
#Region "SRC\ptabasic.c"
' SRC\ptabasic.c (116, 1)
' ptaCreate()
' ptaCreate(l_int32) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - initial array sizes</param>
'''   <returns>pta, or NULL on error.</returns>
Public Shared Function ptaCreate(
				ByVal n as Integer) as Pta



	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptabasic.c (149, 1)
' ptaCreateFromNuma()
' ptaCreateFromNuma(NUMA *, NUMA *) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nax">[in][optional] - can be null</param>
'''  <param name="nay">[in] - </param>
'''   <returns>pta, or NULL on error.</returns>
Public Shared Function ptaCreateFromNuma(
				ByVal nax as Numa, 
				ByVal nay as Numa) as Pta

	If IsNothing (nay) then Throw New ArgumentNullException  ("nay cannot be Nothing")

	Dim naxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nax) Then naxPTR = nax.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaCreateFromNuma( naxPTR, nay.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptabasic.c (192, 1)
' ptaDestroy()
' ptaDestroy(PTA **) as void
'''  <summary>
''' Notes
''' (1) Decrements the ref count and, if 0, destroys the pta.
''' (2) Always nulls the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ppta">[in,out] - to be nulled</param>
Public Shared Sub ptaDestroy(
				ByRef ppta as Pta)


	Dim pptaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppta) Then pptaPTR = ppta.Pointer

	LeptonicaSharp.Natives.ptaDestroy( pptaPTR)
	if pptaPTR <> IntPtr.Zero then ppta = new Pta(pptaPTR)

End Sub

' SRC\ptabasic.c (225, 1)
' ptaCopy()
' ptaCopy(PTA *) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''   <returns>copy of pta, or NULL on error</returns>
Public Shared Function ptaCopy(
				ByVal pta as Pta) as Pta

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaCopy( pta.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptabasic.c (257, 1)
' ptaCopyRange()
' ptaCopyRange(PTA *, l_int32, l_int32) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - </param>
'''  <param name="istart">[in] - starting index in ptas</param>
'''  <param name="iend">[in] - ending index in ptas; use 0 to copy to end</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaCopyRange(
				ByVal ptas as Pta, 
				ByVal istart as Integer, 
				ByVal iend as Integer) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaCopyRange( ptas.Pointer, istart, iend)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptabasic.c (296, 1)
' ptaClone()
' ptaClone(PTA *) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''   <returns>ptr to same pta, or NULL on error</returns>
Public Shared Function ptaClone(
				ByVal pta as Pta) as Pta

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaClone( pta.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptabasic.c (320, 1)
' ptaEmpty()
' ptaEmpty(PTA *) as l_ok
'''  <summary>
''' Notes
''' This only resets the Ptan field, for reuse
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaEmpty(
				ByVal pta as Pta) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaEmpty( pta.Pointer)

	Return _Result
End Function

' SRC\ptabasic.c (342, 1)
' ptaAddPt()
' ptaAddPt(PTA *, l_float32, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="x">[in] - </param>
'''  <param name="y">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaAddPt(
				ByVal pta as Pta, 
				ByVal x as Single, 
				ByVal y as Single) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")
	If IsNothing (x) then Throw New ArgumentNullException  ("x cannot be Nothing")
	If IsNothing (y) then Throw New ArgumentNullException  ("y cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaAddPt( pta.Pointer, x, y)

	Return _Result
End Function

' SRC\ptabasic.c (404, 1)
' ptaInsertPt()
' ptaInsertPt(PTA *, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="index">[in] - at which pt is to be inserted</param>
'''  <param name="x">[in] - point values</param>
'''  <param name="y">[in] - point values</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ptaInsertPt(
				ByVal pta as Pta, 
				ByVal index as Integer, 
				ByVal x as Integer, 
				ByVal y as Integer) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaInsertPt( pta.Pointer, index, x, y)

	Return _Result
End Function

' SRC\ptabasic.c (447, 1)
' ptaRemovePt()
' ptaRemovePt(PTA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This shifts pta[i] --GT pta[i - 1] for all i GT index.
''' (2) It should not be used repeatedly on large arrays,
''' because the function is O(n).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="index">[in] - of point to be removed</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaRemovePt(
				ByVal pta as Pta, 
				ByVal index as Integer) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaRemovePt( pta.Pointer, index)

	Return _Result
End Function

' SRC\ptabasic.c (474, 1)
' 
' ptaGetRefcount(PTA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function ptaGetRefcount(
				ByRef pta as Pta) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")

Dim ptaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pta) Then ptaPTR = pta.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.ptaGetRefcount( pta.Pointer)

	Return _Result
End Function

' SRC\ptabasic.c (485, 1)
' 
' ptaChangeRefcount(PTA *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function ptaChangeRefcount(
				ByRef pta as Pta, 
				ByRef delta as Integer) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")

Dim ptaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pta) Then ptaPTR = pta.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.ptaChangeRefcount( pta.Pointer, delta)

	Return _Result
End Function

' SRC\ptabasic.c (504, 1)
' ptaGetCount()
' ptaGetCount(PTA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''   <returns>count, or 0 if no pta</returns>
Public Shared Function ptaGetCount(
				ByVal pta as Pta) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaGetCount( pta.Pointer)

	Return _Result
End Function

' SRC\ptabasic.c (525, 1)
' ptaGetPt()
' ptaGetPt(PTA *, l_int32, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="index">[in] - into arrays</param>
'''  <param name="px">[out][optional] - float x value</param>
'''  <param name="py">[out][optional] - float y value</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ptaGetPt(
				ByVal pta as Pta, 
				ByVal index as Integer, 
				ByRef px as Single(), 
				ByRef py as Single()) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaGetPt( pta.Pointer, index, px, py)

	Return _Result
End Function

' SRC\ptabasic.c (555, 1)
' ptaGetIPt()
' ptaGetIPt(PTA *, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="index">[in] - into arrays</param>
'''  <param name="px">[out][optional] - integer x value</param>
'''  <param name="py">[out][optional] - integer y value</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ptaGetIPt(
				ByVal pta as Pta, 
				ByVal index as Integer, 
				ByRef px as Integer, 
				ByRef py as Integer) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaGetIPt( pta.Pointer, index, px, py)

	Return _Result
End Function

' SRC\ptabasic.c (584, 1)
' ptaSetPt()
' ptaSetPt(PTA *, l_int32, l_float32, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="index">[in] - into arrays</param>
'''  <param name="x">[in] - </param>
'''  <param name="y">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ptaSetPt(
				ByVal pta as Pta, 
				ByVal index as Integer, 
				ByVal x as Single, 
				ByVal y as Single) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")
	If IsNothing (x) then Throw New ArgumentNullException  ("x cannot be Nothing")
	If IsNothing (y) then Throw New ArgumentNullException  ("y cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaSetPt( pta.Pointer, index, x, y)

	Return _Result
End Function

' SRC\ptabasic.c (616, 1)
' ptaGetArrays()
' ptaGetArrays(PTA *, NUMA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) This copies the internal arrays into new Numas.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="pnax">[out][optional] - numa of x array</param>
'''  <param name="pnay">[out][optional] - numa of y array</param>
'''   <returns>0 if OK; 1 on error or if pta is empty</returns>
Public Shared Function ptaGetArrays(
				ByVal pta as Pta, 
				ByRef pnax as Numa, 
				ByRef pnay as Numa) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")

Dim pnaxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnax) Then pnaxPTR = pnax.Pointer
Dim pnayPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnay) Then pnayPTR = pnay.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.ptaGetArrays( pta.Pointer, pnaxPTR, pnayPTR)
	if pnaxPTR <> IntPtr.Zero then pnax = new Numa(pnaxPTR)
	if pnayPTR <> IntPtr.Zero then pnay = new Numa(pnayPTR)

	Return _Result
End Function

' SRC\ptabasic.c (664, 1)
' ptaRead()
' ptaRead(const char *) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>pta, or NULL on error</returns>
Public Shared Function ptaRead(
				ByVal filename as String) as Pta

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptabasic.c (691, 1)
' ptaReadStream()
' ptaReadStream(FILE *) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>pta, or NULL on error</returns>
Public Shared Function ptaReadStream(
				ByVal fp as FILE) as Pta

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptabasic.c (744, 1)
' ptaReadMem()
' ptaReadMem(const l_uint8 *, size_t) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - serialization in ascii</param>
'''  <param name="size">[in] - of data in bytes; can use strlen to get it</param>
'''   <returns>pta, or NULL on error</returns>
Public Shared Function ptaReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as Pta

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptabasic.c (782, 1)
' ptaWriteDebug()
' ptaWriteDebug(const char *, PTA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Debug version, intended for use in the library when writing
''' to files in a temp directory with names that are compiled in.
''' This is used instead of ptaWrite() for all such library calls.
''' (2) The global variable LeptDebugOK defaults to 0, and can be set
''' or cleared by the function setLeptDebugOK().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pta">[in] - </param>
'''  <param name="type">[in] - 0 for float values; 1 for integer values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaWriteDebug(
				ByVal filename as String, 
				ByVal pta as Pta, 
				ByVal type as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaWriteDebug( filename, pta.Pointer, type)

	Return _Result
End Function

' SRC\ptabasic.c (806, 1)
' ptaWrite()
' ptaWrite(const char *, PTA *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pta">[in] - </param>
'''  <param name="type">[in] - 0 for float values; 1 for integer values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaWrite(
				ByVal filename as String, 
				ByVal pta as Pta, 
				ByVal type as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaWrite( filename, pta.Pointer, type)

	Return _Result
End Function

' SRC\ptabasic.c (839, 1)
' ptaWriteStream()
' ptaWriteStream(FILE *, PTA *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pta">[in] - </param>
'''  <param name="type">[in] - 0 for float values; 1 for integer values</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ptaWriteStream(
				ByVal fp as FILE, 
				ByVal pta as Pta, 
				ByVal type as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaWriteStream( fp.Pointer, pta.Pointer, type)

	Return _Result
End Function

' SRC\ptabasic.c (888, 1)
' ptaWriteMem()
' ptaWriteMem(l_uint8 **, size_t *, PTA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a pta in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized pta; ascii</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="pta">[in] - </param>
'''  <param name="type">[in] - 0 for float values; 1 for integer values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal pta as Pta, 
				ByVal type as Integer) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.ptaWriteMem( pdataPTR, psize, pta.Pointer, type)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\ptabasic.c (939, 1)
' ptaaCreate()
' ptaaCreate(l_int32) as PTAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - initial number of ptrs</param>
'''   <returns>ptaa, or NULL on error</returns>
Public Shared Function ptaaCreate(
				ByVal n as Integer) as Ptaa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaaCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Ptaa(_Result)
End Function

' SRC\ptabasic.c (967, 1)
' ptaaDestroy()
' ptaaDestroy(PTAA **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pptaa">[in,out] - to be nulled</param>
Public Shared Sub ptaaDestroy(
				ByRef pptaa as Ptaa)


	Dim pptaaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pptaa) Then pptaaPTR = pptaa.Pointer

	LeptonicaSharp.Natives.ptaaDestroy( pptaaPTR)
	if pptaaPTR <> IntPtr.Zero then pptaa = new Ptaa(pptaaPTR)

End Sub

' SRC\ptabasic.c (1004, 1)
' ptaaAddPta()
' ptaaAddPta(PTAA *, PTA *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptaa">[in] - </param>
'''  <param name="pta">[in] - to be added</param>
'''  <param name="copyflag">[in] - L_INSERT, L_COPY, L_CLONE</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaaAddPta(
				ByVal ptaa as Ptaa, 
				ByVal pta as Pta, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")
	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaaAddPta( ptaa.Pointer, pta.Pointer, copyflag)

	Return _Result
End Function

' SRC\ptabasic.c (1074, 1)
' ptaaGetCount()
' ptaaGetCount(PTAA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptaa">[in] - </param>
'''   <returns>count, or 0 if no ptaa</returns>
Public Shared Function ptaaGetCount(
				ByVal ptaa as Ptaa) as Integer

	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaaGetCount( ptaa.Pointer)

	Return _Result
End Function

' SRC\ptabasic.c (1094, 1)
' ptaaGetPta()
' ptaaGetPta(PTAA *, l_int32, l_int32) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptaa">[in] - </param>
'''  <param name="index">[in] - to the i-th pta</param>
'''  <param name="accessflag">[in] - L_COPY or L_CLONE</param>
'''   <returns>pta, or NULL on error</returns>
Public Shared Function ptaaGetPta(
				ByVal ptaa as Ptaa, 
				ByVal index as Integer, 
				ByVal accessflag as Enumerations.L_access_storage) as Pta

	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaaGetPta( ptaa.Pointer, index, accessflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptabasic.c (1125, 1)
' ptaaGetPt()
' ptaaGetPt(PTAA *, l_int32, l_int32, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptaa">[in] - </param>
'''  <param name="ipta">[in] - to the i-th pta</param>
'''  <param name="jpt">[in] - index to the j-th pt in the pta</param>
'''  <param name="px">[out][optional] - float x value</param>
'''  <param name="py">[out][optional] - float y value</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ptaaGetPt(
				ByVal ptaa as Ptaa, 
				ByVal ipta as Integer, 
				ByVal jpt as Integer, 
				ByRef px as Single(), 
				ByRef py as Single()) as Integer

	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaaGetPt( ptaa.Pointer, ipta, jpt, px, py)

	Return _Result
End Function

' SRC\ptabasic.c (1165, 1)
' ptaaInitFull()
' ptaaInitFull(PTAA *, PTA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptaa">[in] - can have non-null ptrs in the ptr array</param>
'''  <param name="pta">[in] - to be replicated into the entire ptr array</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ptaaInitFull(
				ByVal ptaa as Ptaa, 
				ByVal pta as Pta) as Integer

	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")
	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaaInitFull( ptaa.Pointer, pta.Pointer)

	Return _Result
End Function

' SRC\ptabasic.c (1204, 1)
' ptaaReplacePta()
' ptaaReplacePta(PTAA *, l_int32, PTA *) as l_ok
'''  <summary>
''' Notes
''' (1) Any existing pta is destroyed, and the input one
''' is inserted in its place.
''' (2) If the index is invalid, return 1 (error)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptaa">[in] - </param>
'''  <param name="index">[in] - to the index-th pta</param>
'''  <param name="pta">[in] - insert and replace any existing one</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaaReplacePta(
				ByVal ptaa as Ptaa, 
				ByVal index as Integer, 
				ByVal pta as Pta) as Integer

	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")
	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaaReplacePta( ptaa.Pointer, index, pta.Pointer)

	Return _Result
End Function

' SRC\ptabasic.c (1235, 1)
' ptaaAddPt()
' ptaaAddPt(PTAA *, l_int32, l_float32, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptaa">[in] - </param>
'''  <param name="ipta">[in] - to the i-th pta</param>
'''  <param name="x">[in] - ,y point coordinates</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ptaaAddPt(
				ByVal ptaa as Ptaa, 
				ByVal ipta as Integer, 
				ByVal x as Single, 
				ByRef y as Single) as Integer

	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")
	If IsNothing (x) then Throw New ArgumentNullException  ("x cannot be Nothing")
	If IsNothing (y) then Throw New ArgumentNullException  ("y cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaaAddPt( ptaa.Pointer, ipta, x, y)

	Return _Result
End Function

' SRC\ptabasic.c (1270, 1)
' ptaaTruncate()
' ptaaTruncate(PTAA *) as l_ok
'''  <summary>
''' Notes
''' (1) This identifies the largest index containing a pta that
''' has any points within it, destroys all pta above that index,
''' and resets the count.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptaa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaaTruncate(
				ByVal ptaa as Ptaa) as Integer

	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaaTruncate( ptaa.Pointer)

	Return _Result
End Function

' SRC\ptabasic.c (1310, 1)
' ptaaRead()
' ptaaRead(const char *) as PTAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>ptaa, or NULL on error</returns>
Public Shared Function ptaaRead(
				ByVal filename as String) as Ptaa

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaaRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Ptaa(_Result)
End Function

' SRC\ptabasic.c (1337, 1)
' ptaaReadStream()
' ptaaReadStream(FILE *) as PTAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>ptaa, or NULL on error</returns>
Public Shared Function ptaaReadStream(
				ByVal fp as FILE) as Ptaa

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaaReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Ptaa(_Result)
End Function

' SRC\ptabasic.c (1377, 1)
' ptaaReadMem()
' ptaaReadMem(const l_uint8 *, size_t) as PTAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - serialization in ascii</param>
'''  <param name="size">[in] - of data in bytes; can use strlen to get it</param>
'''   <returns>ptaa, or NULL on error</returns>
Public Shared Function ptaaReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as Ptaa

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaaReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Ptaa(_Result)
End Function

' SRC\ptabasic.c (1415, 1)
' ptaaWriteDebug()
' ptaaWriteDebug(const char *, PTAA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Debug version, intended for use in the library when writing
''' to files in a temp directory with names that are compiled in.
''' This is used instead of ptaaWrite() for all such library calls.
''' (2) The global variable LeptDebugOK defaults to 0, and can be set
''' or cleared by the function setLeptDebugOK().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="ptaa">[in] - </param>
'''  <param name="type">[in] - 0 for float values; 1 for integer values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaaWriteDebug(
				ByVal filename as String, 
				ByVal ptaa as Ptaa, 
				ByVal type as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaaWriteDebug( filename, ptaa.Pointer, type)

	Return _Result
End Function

' SRC\ptabasic.c (1439, 1)
' ptaaWrite()
' ptaaWrite(const char *, PTAA *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="ptaa">[in] - </param>
'''  <param name="type">[in] - 0 for float values; 1 for integer values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaaWrite(
				ByVal filename as String, 
				ByVal ptaa as Ptaa, 
				ByVal type as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaaWrite( filename, ptaa.Pointer, type)

	Return _Result
End Function

' SRC\ptabasic.c (1472, 1)
' ptaaWriteStream()
' ptaaWriteStream(FILE *, PTAA *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="ptaa">[in] - </param>
'''  <param name="type">[in] - 0 for float values; 1 for integer values</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ptaaWriteStream(
				ByVal fp as FILE, 
				ByVal ptaa as Ptaa, 
				ByVal type as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaaWriteStream( fp.Pointer, ptaa.Pointer, type)

	Return _Result
End Function

' SRC\ptabasic.c (1514, 1)
' ptaaWriteMem()
' ptaaWriteMem(l_uint8 **, size_t *, PTAA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a ptaa in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized ptaa; ascii</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="ptaa">[in] - </param>
'''  <param name="type">[in] - 0 for float values; 1 for integer values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaaWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal ptaa as Ptaa, 
				ByVal type as Integer) as Integer

	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.ptaaWriteMem( pdataPTR, psize, ptaa.Pointer, type)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

#End Region
#Region "SRC\ptafunc1.c"
' SRC\ptafunc1.c (111, 1)
' ptaSubsample()
' ptaSubsample(PTA *, l_int32) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - </param>
'''  <param name="subfactor">[in] - subsample factor, GT= 1</param>
'''   <returns>ptad evenly sampled pt values from ptas, or NULL on error</returns>
Public Shared Function ptaSubsample(
				ByVal ptas as Pta, 
				ByVal subfactor as Integer) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaSubsample( ptas.Pointer, subfactor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (154, 1)
' ptaJoin()
' ptaJoin(PTA *, PTA *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) istart LT 0 is taken to mean 'read from the start' (istart = 0)
''' (2) iend LT 0 means 'read to the end'
''' (3) if ptas == NULL, this is a no-op
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptad">[in] - dest pta; add to this one</param>
'''  <param name="ptas">[in] - source pta; add from this one</param>
'''  <param name="istart">[in] - starting index in ptas</param>
'''  <param name="iend">[in] - ending index in ptas; use -1 to cat all</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaJoin(
				ByVal ptad as Pta, 
				ByVal ptas as Pta, 
				ByVal istart as Integer, 
				ByVal iend as Integer) as Integer

	If IsNothing (ptad) then Throw New ArgumentNullException  ("ptad cannot be Nothing")
	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaJoin( ptad.Pointer, ptas.Pointer, istart, iend)

	Return _Result
End Function

' SRC\ptafunc1.c (202, 1)
' ptaaJoin()
' ptaaJoin(PTAA *, PTAA *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) istart LT 0 is taken to mean 'read from the start' (istart = 0)
''' (2) iend LT 0 means 'read to the end'
''' (3) if ptas == NULL, this is a no-op
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptaad">[in] - dest ptaa; add to this one</param>
'''  <param name="ptaas">[in] - source ptaa; add from this one</param>
'''  <param name="istart">[in] - starting index in ptaas</param>
'''  <param name="iend">[in] - ending index in ptaas; use -1 to cat all</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaaJoin(
				ByVal ptaad as Ptaa, 
				ByVal ptaas as Ptaa, 
				ByVal istart as Integer, 
				ByVal iend as Integer) as Integer

	If IsNothing (ptaad) then Throw New ArgumentNullException  ("ptaad cannot be Nothing")
	If IsNothing (ptaas) then Throw New ArgumentNullException  ("ptaas cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaaJoin( ptaad.Pointer, ptaas.Pointer, istart, iend)

	Return _Result
End Function

' SRC\ptafunc1.c (242, 1)
' ptaReverse()
' ptaReverse(PTA *, l_int32) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - </param>
'''  <param name="type">[in] - 0 for float values; 1 for integer values</param>
'''   <returns>ptad reversed pta, or NULL on error</returns>
Public Shared Function ptaReverse(
				ByVal ptas as Pta, 
				ByVal type as Integer) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaReverse( ptas.Pointer, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (278, 1)
' ptaTranspose()
' ptaTranspose(PTA *) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - </param>
'''   <returns>ptad with x and y values swapped, or NULL on error</returns>
Public Shared Function ptaTranspose(
				ByVal ptas as Pta) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaTranspose( ptas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (318, 1)
' ptaCyclicPerm()
' ptaCyclicPerm(PTA *, l_int32, l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) Check to insure that (a) ptas is a closed path where
''' the first and last points are identical, and (b) the
''' resulting pta also starts and ends on the same point
''' (which in this case is (xs, ys).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - </param>
'''  <param name="xs">[in] - start point; must be in ptas</param>
'''  <param name="ys">[in] - start point; must be in ptas</param>
'''   <returns>ptad cyclic permutation, starting and ending at (xs, ys, or NULL on error</returns>
Public Shared Function ptaCyclicPerm(
				ByVal ptas as Pta, 
				ByVal xs as Integer, 
				ByVal ys as Integer) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaCyclicPerm( ptas.Pointer, xs, ys)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (374, 1)
' ptaSelectRange()
' ptaSelectRange(PTA *, l_int32, l_int32) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - </param>
'''  <param name="first">[in] - use 0 to select from the beginning</param>
'''  <param name="last">[in] - use 0 to select to the end</param>
'''   <returns>ptad, or NULL on error</returns>
Public Shared Function ptaSelectRange(
				ByVal ptas as Pta, 
				ByVal first as Integer, 
				ByVal last as Integer) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaSelectRange( ptas.Pointer, first, last)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (424, 1)
' ptaGetBoundingRegion()
' ptaGetBoundingRegion(PTA *) as BOX *
'''  <summary>
''' Notes
''' (1) This is used when the pta represents a set of points in
''' a two-dimensional image.  It returns the box of minimum
''' size containing the pts in the pta.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''   <returns>box, or NULL on error</returns>
Public Shared Function ptaGetBoundingRegion(
				ByVal pta as Pta) as Box

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaGetBoundingRegion( pta.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Box(_Result)
End Function

' SRC\ptafunc1.c (468, 1)
' ptaGetRange()
' ptaGetRange(PTA *, l_float32 *, l_float32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) We can use pts to represent pairs of floating values, that
''' are not necessarily tied to a two-dimension region.  For
''' example, the pts can represent a general function y(x).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="pminx">[out][optional] - min value of x</param>
'''  <param name="pmaxx">[out][optional] - max value of x</param>
'''  <param name="pminy">[out][optional] - min value of y</param>
'''  <param name="pmaxy">[out][optional] - max value of y</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaGetRange(
				ByVal pta as Pta, 
				ByRef pminx as Single(), 
				ByRef pmaxx as Single(), 
				ByRef pminy as Single(), 
				ByRef pmaxy as Single()) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaGetRange( pta.Pointer, pminx, pmaxx, pminy, pmaxy)

	Return _Result
End Function

' SRC\ptafunc1.c (518, 1)
' ptaGetInsideBox()
' ptaGetInsideBox(PTA *, BOX *) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - input pts</param>
'''  <param name="box">[in] - </param>
'''   <returns>ptad of pts in ptas that are inside the box, or NULL on error</returns>
Public Shared Function ptaGetInsideBox(
				ByVal ptas as Pta, 
				ByVal box as Box) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaGetInsideBox( ptas.Pointer, box.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (558, 1)
' pixFindCornerPixels()
' pixFindCornerPixels(PIX *) as PTA *
'''  <summary>
''' Notes
''' (1) Finds the 4 corner-most pixels, as defined by a search
''' inward from each corner, using a 45 degree line.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>pta, or NULL on error</returns>
Public Shared Function pixFindCornerPixels(
				ByVal pixs as Pix) as Pta

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFindCornerPixels( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (650, 1)
' ptaContainsPt()
' ptaContainsPt(PTA *, l_int32, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="x">[in] - point</param>
'''  <param name="y">[in] - point</param>
'''   <returns>1 if contained, 0 otherwise or on error</returns>
Public Shared Function ptaContainsPt(
				ByVal pta as Pta, 
				ByVal x as Integer, 
				ByVal y as Integer) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaContainsPt( pta.Pointer, x, y)

	Return _Result
End Function

' SRC\ptafunc1.c (679, 1)
' ptaTestIntersection()
' ptaTestIntersection(PTA *, PTA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta1">[in] - </param>
'''  <param name="pta2">[in] - </param>
'''   <returns>bval which is 1 if they have any elements in common; 0 otherwise or on error.</returns>
Public Shared Function ptaTestIntersection(
				ByVal pta1 as Pta, 
				ByVal pta2 as Pta) as Integer

	If IsNothing (pta1) then Throw New ArgumentNullException  ("pta1 cannot be Nothing")
	If IsNothing (pta2) then Throw New ArgumentNullException  ("pta2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaTestIntersection( pta1.Pointer, pta2.Pointer)

	Return _Result
End Function

' SRC\ptafunc1.c (720, 1)
' ptaTransform()
' ptaTransform(PTA *, l_int32, l_int32, l_float32, l_float32) as PTA *
'''  <summary>
''' Notes
''' (1) Shift first, then scale.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - </param>
'''  <param name="shiftx">[in] - </param>
'''  <param name="shifty">[in] - </param>
'''  <param name="scalex">[in] - </param>
'''  <param name="scaley">[in] - </param>
'''   <returns>pta, or NULL on error</returns>
Public Shared Function ptaTransform(
				ByVal ptas as Pta, 
				ByVal shiftx as Integer, 
				ByVal shifty as Integer, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaTransform( ptas.Pointer, shiftx, shifty, scalex, scaley)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (760, 1)
' ptaPtInsidePolygon()
' ptaPtInsidePolygon(PTA *, l_float32, l_float32, l_int32 *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - vertices of a polygon</param>
'''  <param name="x">[in] - point to be tested</param>
'''  <param name="y">[in] - point to be tested</param>
'''  <param name="pinside">[out] - 1 if inside; 0 if outside or on boundary</param>
'''   <returns>1 if OK, 0 on error The abs value of the sum of the angles subtended from a point by the sides of a polygon, when taken in order traversing the polygon, is 0 if the point is outside the polygon and 2pi if inside. The sign will be positive if traversed cw and negative if ccw.</returns>
Public Shared Function ptaPtInsidePolygon(
				ByVal pta as Pta, 
				ByVal x as Single, 
				ByVal y as Single, 
				ByRef pinside as Integer) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")
	If IsNothing (x) then Throw New ArgumentNullException  ("x cannot be Nothing")
	If IsNothing (y) then Throw New ArgumentNullException  ("y cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaPtInsidePolygon( pta.Pointer, x, y, pinside)

	Return _Result
End Function

' SRC\ptafunc1.c (812, 1)
' l_angleBetweenVectors()
' l_angleBetweenVectors(l_float32, l_float32, l_float32, l_float32) as l_float32
'''  <summary>
''' Notes
''' (1) This gives the angle between two vectors, going between
''' vector1 (x1,y1) and vector2 (x2,y2).  The angle is swept
''' out from 1 --GT 2.  If this is clockwise, the angle is
''' positive, but the result is folded into the interval [-pi, pi].
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="x1">[in] - end point of first vector</param>
'''  <param name="y1">[in] - end point of first vector</param>
'''  <param name="x2">[in] - end point of second vector</param>
'''  <param name="y2">[in] - end point of second vector</param>
'''   <returns>angle radians, or 0.0 on error</returns>
Public Shared Function l_angleBetweenVectors(
				ByVal x1 as Single, 
				ByVal y1 as Single, 
				ByVal x2 as Single, 
				ByVal y2 as Single) as Single

	If IsNothing (x1) then Throw New ArgumentNullException  ("x1 cannot be Nothing")
	If IsNothing (y1) then Throw New ArgumentNullException  ("y1 cannot be Nothing")
	If IsNothing (x2) then Throw New ArgumentNullException  ("x2 cannot be Nothing")
	If IsNothing (y2) then Throw New ArgumentNullException  ("y2 cannot be Nothing")


	Dim _Result as Single = LeptonicaSharp.Natives.l_angleBetweenVectors( x1, y1, x2, y2)

	Return _Result
End Function

' SRC\ptafunc1.c (841, 1)
' ptaGetMinMax()
' ptaGetMinMax(PTA *, l_float32 *, l_float32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="pxmin">[out][optional] - min of x</param>
'''  <param name="pymin">[out][optional] - min of y</param>
'''  <param name="pxmax">[out][optional] - max of x</param>
'''  <param name="pymax">[out][optional] - max of y</param>
'''   <returns>0 if OK, 1 on error.  If pta is empty, requested values are returned as -1.0.</returns>
Public Shared Function ptaGetMinMax(
				ByVal pta as Pta, 
				ByRef pxmin as Single(), 
				ByRef pymin as Single(), 
				ByRef pxmax as Single(), 
				ByRef pymax as Single()) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaGetMinMax( pta.Pointer, pxmin, pymin, pxmax, pymax)

	Return _Result
End Function

' SRC\ptafunc1.c (894, 1)
' ptaSelectByValue()
' ptaSelectByValue(PTA *, l_float32, l_float32, l_int32, l_int32) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - </param>
'''  <param name="xth">[in] - threshold values</param>
'''  <param name="yth">[in] - threshold values</param>
'''  <param name="type">[in] - L_SELECT_XVAL, L_SELECT_YVAL, L_SELECT_IF_EITHER, L_SELECT_IF_BOTH</param>
'''  <param name="relation">[in] - L_SELECT_IF_LT, L_SELECT_IF_GT, L_SELECT_IF_LTE, L_SELECT_IF_GTE</param>
'''   <returns>ptad filtered set, or NULL on error</returns>
Public Shared Function ptaSelectByValue(
				ByVal ptas as Pta, 
				ByVal xth as Single, 
				ByVal yth as Single, 
				ByVal type as Enumerations.L_SELECT, 
				ByVal relation as Enumerations.L_SELECT_IF) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (xth) then Throw New ArgumentNullException  ("xth cannot be Nothing")
	If IsNothing (yth) then Throw New ArgumentNullException  ("yth cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaSelectByValue( ptas.Pointer, xth, yth, type, relation)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (962, 1)
' ptaCropToMask()
' ptaCropToMask(PTA *, PIX *) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - input pta</param>
'''  <param name="pixm">[in] - 1 bpp mask</param>
'''   <returns>ptad  with only pts under the mask fg, or NULL on error</returns>
Public Shared Function ptaCropToMask(
				ByVal ptas as Pta, 
				ByVal pixm as Pix) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaCropToMask( ptas.Pointer, pixm.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (1029, 1)
' ptaGetLinearLSF()
' ptaGetLinearLSF(PTA *, l_float32 *, l_float32 *, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) Either or both a and b must be input.  They determine the
''' type of line that is fit.
''' (2) If both a and b are defined, this returns a and b that minimize
''' sum (yi - axi -b)^2
''' i
''' The method is simple differentiate this expression w/rt a and b,
''' and solve the resulting two equations for a and b in terms of
''' various sums over the input data (xi, yi).
''' (3) We also allow two special cases, where either a = 0 or b = 0
''' (a) If a is given and b = null, find the linear LSF that
''' goes through the origin (b = 0).
''' (b) If b is given and a = null, find the linear LSF with
''' zero slope (a = 0).
''' (4) If nafit is defined, this returns an array of fitted values,
''' corresponding to the two implicit Numa arrays (nax and nay) in pta.
''' Thus, just as you can plot the data in pta as nay vs. nax,
''' you can plot the linear least square fit as nafit vs. nax.
''' Get the nax array using ptaGetArrays(pta, nax, NULL);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="pa">[out][optional] - slope a of least square fit y = ax + b</param>
'''  <param name="pb">[out][optional] - intercept b of least square fit</param>
'''  <param name="pnafit">[out][optional] - numa of least square fit</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaGetLinearLSF(
				ByVal pta as Pta, 
				ByRef pa as Single(), 
				ByRef pb as Single(), 
				ByRef pnafit as Numa) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")

Dim pnafitPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnafit) Then pnafitPTR = pnafit.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.ptaGetLinearLSF( pta.Pointer, pa, pb, pnafitPTR)
	if pnafitPTR <> IntPtr.Zero then pnafit = new Numa(pnafitPTR)

	Return _Result
End Function

' SRC\ptafunc1.c (1130, 1)
' ptaGetQuadraticLSF()
' ptaGetQuadraticLSF(PTA *, l_float32 *, l_float32 *, l_float32 *, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) This does a quadratic least square fit to the set of points
''' in %pta.  That is, it finds coefficients a, b and c that minimize
''' sum (yi - axixi -bxi -c)^2
''' i
''' The method is simple differentiate this expression w/rt
''' a, b and c, and solve the resulting three equations for these
''' coefficients in terms of various sums over the input data (xi, yi).
''' The three equations are in the form
''' f[0][0]a + f[0][1]b + f[0][2]c = g[0]
''' f[1][0]a + f[1][1]b + f[1][2]c = g[1]
''' f[2][0]a + f[2][1]b + f[2][2]c = g[2]
''' (2) If nafit is defined, this returns an array of fitted values,
''' corresponding to the two implicit Numa arrays (nax and nay) in pta.
''' Thus, just as you can plot the data in pta as nay vs. nax,
''' you can plot the linear least square fit as nafit vs. nax.
''' Get the nax array using ptaGetArrays(pta, nax, NULL);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="pa">[out][optional] - coeff a of LSF y = ax^2 + bx + c</param>
'''  <param name="pb">[out][optional] - coeff b of LSF y = ax^2 + bx + c</param>
'''  <param name="pc">[out][optional] - coeff c of LSF y = ax^2 + bx + c</param>
'''  <param name="pnafit">[out][optional] - numa of least square fit</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaGetQuadraticLSF(
				ByVal pta as Pta, 
				ByRef pa as Single(), 
				ByRef pb as Single(), 
				ByRef pc as Single(), 
				ByRef pnafit as Numa) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")

Dim pnafitPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnafit) Then pnafitPTR = pnafit.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.ptaGetQuadraticLSF( pta.Pointer, pa, pb, pc, pnafitPTR)
	if pnafitPTR <> IntPtr.Zero then pnafit = new Numa(pnafitPTR)

	Return _Result
End Function

' SRC\ptafunc1.c (1243, 1)
' ptaGetCubicLSF()
' ptaGetCubicLSF(PTA *, l_float32 *, l_float32 *, l_float32 *, l_float32 *, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) This does a cubic least square fit to the set of points
''' in %pta.  That is, it finds coefficients a, b, c and d
''' that minimize
''' sum (yi - axixixi -bxixi -cxi - d)^2
''' i
''' Differentiate this expression w/rt a, b, c and d, and solve
''' the resulting four equations for these coefficients in
''' terms of various sums over the input data (xi, yi).
''' The four equations are in the form
''' f[0][0]a + f[0][1]b + f[0][2]c + f[0][3] = g[0]
''' f[1][0]a + f[1][1]b + f[1][2]c + f[1][3] = g[1]
''' f[2][0]a + f[2][1]b + f[2][2]c + f[2][3] = g[2]
''' f[3][0]a + f[3][1]b + f[3][2]c + f[3][3] = g[3]
''' (2) If nafit is defined, this returns an array of fitted values,
''' corresponding to the two implicit Numa arrays (nax and nay) in pta.
''' Thus, just as you can plot the data in pta as nay vs. nax,
''' you can plot the linear least square fit as nafit vs. nax.
''' Get the nax array using ptaGetArrays(pta, nax, NULL);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="pa">[out][optional] - coeff a of LSF y = ax^3 + bx^2 + cx + d</param>
'''  <param name="pb">[out][optional] - coeff b of LSF</param>
'''  <param name="pc">[out][optional] - coeff c of LSF</param>
'''  <param name="pd">[out][optional] - coeff d of LSF</param>
'''  <param name="pnafit">[out][optional] - numa of least square fit</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaGetCubicLSF(
				ByVal pta as Pta, 
				ByRef pa as Single(), 
				ByRef pb as Single(), 
				ByRef pc as Single(), 
				ByRef pd as Single(), 
				ByRef pnafit as Numa) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")

Dim pnafitPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnafit) Then pnafitPTR = pnafit.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.ptaGetCubicLSF( pta.Pointer, pa, pb, pc, pd, pnafitPTR)
	if pnafitPTR <> IntPtr.Zero then pnafit = new Numa(pnafitPTR)

	Return _Result
End Function

' SRC\ptafunc1.c (1373, 1)
' ptaGetQuarticLSF()
' ptaGetQuarticLSF(PTA *, l_float32 *, l_float32 *, l_float32 *, l_float32 *, l_float32 *, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) This does a quartic least square fit to the set of points
''' in %pta.  That is, it finds coefficients a, b, c, d and 3
''' that minimize
''' sum (yi - axixixixi -bxixixi -cxixi - dxi - e)^2
''' i
''' Differentiate this expression w/rt a, b, c, d and e, and solve
''' the resulting five equations for these coefficients in
''' terms of various sums over the input data (xi, yi).
''' The five equations are in the form
''' f[0][0]a + f[0][1]b + f[0][2]c + f[0][3] + f[0][4] = g[0]
''' f[1][0]a + f[1][1]b + f[1][2]c + f[1][3] + f[1][4] = g[1]
''' f[2][0]a + f[2][1]b + f[2][2]c + f[2][3] + f[2][4] = g[2]
''' f[3][0]a + f[3][1]b + f[3][2]c + f[3][3] + f[3][4] = g[3]
''' f[4][0]a + f[4][1]b + f[4][2]c + f[4][3] + f[4][4] = g[4]
''' (2) If nafit is defined, this returns an array of fitted values,
''' corresponding to the two implicit Numa arrays (nax and nay) in pta.
''' Thus, just as you can plot the data in pta as nay vs. nax,
''' you can plot the linear least square fit as nafit vs. nax.
''' Get the nax array using ptaGetArrays(pta, nax, NULL);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="pa">[out][optional] - coeff a of LSF y = ax^4 + bx^3 + cx^2 + dx + e</param>
'''  <param name="pb">[out][optional] - coeff b of LSF</param>
'''  <param name="pc">[out][optional] - coeff c of LSF</param>
'''  <param name="pd">[out][optional] - coeff d of LSF</param>
'''  <param name="pe">[out][optional] - coeff e of LSF</param>
'''  <param name="pnafit">[out][optional] - numa of least square fit</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaGetQuarticLSF(
				ByVal pta as Pta, 
				ByRef pa as Single(), 
				ByRef pb as Single(), 
				ByRef pc as Single(), 
				ByRef pd as Single(), 
				ByRef pe as Single(), 
				ByRef pnafit as Numa) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")

Dim pnafitPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnafit) Then pnafitPTR = pnafit.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.ptaGetQuarticLSF( pta.Pointer, pa, pb, pc, pd, pe, pnafitPTR)
	if pnafitPTR <> IntPtr.Zero then pnafit = new Numa(pnafitPTR)

	Return _Result
End Function

' SRC\ptafunc1.c (1509, 1)
' ptaNoisyLinearLSF()
' ptaNoisyLinearLSF(PTA *, l_float32, PTA **, l_float32 *, l_float32 *, l_float32 *, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) This does a linear least square fit to the set of points
''' in %pta.  It then evaluates the errors and removes points
''' whose error is GT= factor  median_error.  It then re-runs
''' the linear LSF on the resulting points.
''' (2) Either or both a and b must be input.  They determine the
''' type of line that is fit.
''' (3) The median error can give an indication of how good the fit
''' is likely to be.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="factor">[in] - reject outliers with error greater than this number of medians; typically ~ 3</param>
'''  <param name="pptad">[out][optional] - with outliers removed</param>
'''  <param name="pa">[out][optional] - slope a of least square fit y = ax + b</param>
'''  <param name="pb">[out][optional] - intercept b of least square fit</param>
'''  <param name="pmederr">[out][optional] - median error</param>
'''  <param name="pnafit">[out][optional] - numa of least square fit to ptad</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaNoisyLinearLSF(
				ByVal pta as Pta, 
				ByVal factor as Single, 
				ByRef pptad as Pta, 
				ByRef pa as Single(), 
				ByRef pb as Single(), 
				ByRef pmederr as Single(), 
				ByRef pnafit as Numa) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")

Dim pptadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pptad) Then pptadPTR = pptad.Pointer
Dim pnafitPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnafit) Then pnafitPTR = pnafit.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.ptaNoisyLinearLSF( pta.Pointer, factor, pptadPTR, pa, pb, pmederr, pnafitPTR)
	if pptadPTR <> IntPtr.Zero then pptad = new Pta(pptadPTR)
	if pnafitPTR <> IntPtr.Zero then pnafit = new Numa(pnafitPTR)

	Return _Result
End Function

' SRC\ptafunc1.c (1596, 1)
' ptaNoisyQuadraticLSF()
' ptaNoisyQuadraticLSF(PTA *, l_float32, PTA **, l_float32 *, l_float32 *, l_float32 *, l_float32 *, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) This does a quadratic least square fit to the set of points
''' in %pta.  It then evaluates the errors and removes points
''' whose error is GT= factor  median_error.  It then re-runs
''' a quadratic LSF on the resulting points.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="factor">[in] - reject outliers with error greater than this number of medians; typically ~ 3</param>
'''  <param name="pptad">[out][optional] - with outliers removed</param>
'''  <param name="pa">[out][optional] - coeff a of LSF y = ax^2 + bx + c</param>
'''  <param name="pb">[out][optional] - coeff b of LSF y = ax^2 + bx + c</param>
'''  <param name="pc">[out][optional] - coeff c of LSF y = ax^2 + bx + c</param>
'''  <param name="pmederr">[out][optional] - median error</param>
'''  <param name="pnafit">[out][optional] - numa of least square fit to ptad</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaNoisyQuadraticLSF(
				ByVal pta as Pta, 
				ByVal factor as Single, 
				ByRef pptad as Pta, 
				ByRef pa as Single(), 
				ByRef pb as Single(), 
				ByRef pc as Single(), 
				ByRef pmederr as Single(), 
				ByRef pnafit as Numa) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")
	If IsNothing (factor) then Throw New ArgumentNullException  ("factor cannot be Nothing")

Dim pptadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pptad) Then pptadPTR = pptad.Pointer
Dim pnafitPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnafit) Then pnafitPTR = pnafit.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.ptaNoisyQuadraticLSF( pta.Pointer, factor, pptadPTR, pa, pb, pc, pmederr, pnafitPTR)
	if pptadPTR <> IntPtr.Zero then pptad = new Pta(pptadPTR)
	if pnafitPTR <> IntPtr.Zero then pnafit = new Numa(pnafitPTR)

	Return _Result
End Function

' SRC\ptafunc1.c (1676, 1)
' applyLinearFit()
' applyLinearFit(l_float32, l_float32, l_float32, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="a">[in] - linear fit coefficients</param>
'''  <param name="b">[in] - linear fit coefficients</param>
'''  <param name="x">[in] - </param>
'''  <param name="py">[out] - y = a  x + b</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function applyLinearFit(
				ByVal a as Single, 
				ByVal b as Single, 
				ByVal x as Single, 
				ByRef py as Single()) as Integer

	If IsNothing (a) then Throw New ArgumentNullException  ("a cannot be Nothing")
	If IsNothing (b) then Throw New ArgumentNullException  ("b cannot be Nothing")
	If IsNothing (x) then Throw New ArgumentNullException  ("x cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.applyLinearFit( a, b, x, py)

	Return _Result
End Function

' SRC\ptafunc1.c (1700, 1)
' applyQuadraticFit()
' applyQuadraticFit(l_float32, l_float32, l_float32, l_float32, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="a">[in] - quadratic fit coefficients</param>
'''  <param name="b">[in] - quadratic fit coefficients</param>
'''  <param name="c">[in] - quadratic fit coefficients</param>
'''  <param name="x">[in] - </param>
'''  <param name="py">[out] - y = a  x^2 + b  x + c</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function applyQuadraticFit(
				ByVal a as Single, 
				ByVal b as Single, 
				ByVal c as Single, 
				ByVal x as Single, 
				ByRef py as Single()) as Integer

	If IsNothing (a) then Throw New ArgumentNullException  ("a cannot be Nothing")
	If IsNothing (b) then Throw New ArgumentNullException  ("b cannot be Nothing")
	If IsNothing (c) then Throw New ArgumentNullException  ("c cannot be Nothing")
	If IsNothing (x) then Throw New ArgumentNullException  ("x cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.applyQuadraticFit( a, b, c, x, py)

	Return _Result
End Function

' SRC\ptafunc1.c (1725, 1)
' applyCubicFit()
' applyCubicFit(l_float32, l_float32, l_float32, l_float32, l_float32, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="a">[in] - cubic fit coefficients</param>
'''  <param name="b">[in] - cubic fit coefficients</param>
'''  <param name="c">[in] - cubic fit coefficients</param>
'''  <param name="d">[in] - cubic fit coefficients</param>
'''  <param name="x">[in] - </param>
'''  <param name="py">[out] - y = a  x^3 + b  x^2  + c  x + d</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function applyCubicFit(
				ByVal a as Single, 
				ByVal b as Single, 
				ByVal c as Single, 
				ByVal d as Single, 
				ByVal x as Single, 
				ByRef py as Single()) as Integer

	If IsNothing (a) then Throw New ArgumentNullException  ("a cannot be Nothing")
	If IsNothing (b) then Throw New ArgumentNullException  ("b cannot be Nothing")
	If IsNothing (c) then Throw New ArgumentNullException  ("c cannot be Nothing")
	If IsNothing (d) then Throw New ArgumentNullException  ("d cannot be Nothing")
	If IsNothing (x) then Throw New ArgumentNullException  ("x cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.applyCubicFit( a, b, c, d, x, py)

	Return _Result
End Function

' SRC\ptafunc1.c (1751, 1)
' applyQuarticFit()
' applyQuarticFit(l_float32, l_float32, l_float32, l_float32, l_float32, l_float32, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="a">[in] - quartic fit coefficients</param>
'''  <param name="b">[in] - quartic fit coefficients</param>
'''  <param name="c">[in] - quartic fit coefficients</param>
'''  <param name="d">[in] - quartic fit coefficients</param>
'''  <param name="e">[in] - quartic fit coefficients</param>
'''  <param name="x">[in] - </param>
'''  <param name="py">[out] - y = a  x^4 + b  x^3  + c  x^2 + d  x + e</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function applyQuarticFit(
				ByVal a as Single, 
				ByVal b as Single, 
				ByVal c as Single, 
				ByVal d as Single, 
				ByVal e as Single, 
				ByVal x as Single, 
				ByRef py as Single()) as Integer

	If IsNothing (a) then Throw New ArgumentNullException  ("a cannot be Nothing")
	If IsNothing (b) then Throw New ArgumentNullException  ("b cannot be Nothing")
	If IsNothing (c) then Throw New ArgumentNullException  ("c cannot be Nothing")
	If IsNothing (d) then Throw New ArgumentNullException  ("d cannot be Nothing")
	If IsNothing (e) then Throw New ArgumentNullException  ("e cannot be Nothing")
	If IsNothing (x) then Throw New ArgumentNullException  ("x cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.applyQuarticFit( a, b, c, d, e, x, py)

	Return _Result
End Function

' SRC\ptafunc1.c (1792, 1)
' pixPlotAlongPta()
' pixPlotAlongPta(PIX *, PTA *, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This is a debugging function.
''' (2) Removes existing colormaps and clips the pta to the input %pixs.
''' (3) If the image is RGB, three separate plots are generated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth</param>
'''  <param name="pta">[in] - set of points on which to plot</param>
'''  <param name="outformat">[in] - GPLOT_PNG, GPLOT_PS, GPLOT_EPS, GPLOT_LATEX</param>
'''  <param name="title">[in][optional] - for plot; can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixPlotAlongPta(
				ByVal pixs as Pix, 
				ByVal pta as Pta, 
				ByVal outformat as Enumerations.GPLOT_OUTPUT, 
				ByVal title as String) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixPlotAlongPta( pixs.Pointer, pta.Pointer, outformat, title)

	Return _Result
End Function

' SRC\ptafunc1.c (1893, 1)
' ptaGetPixelsFromPix()
' ptaGetPixelsFromPix(PIX *, BOX *) as PTA *
'''  <summary>
''' Notes
''' (1) Generates a pta of fg pixels in the pix, within the box.
''' If box == NULL, it uses the entire pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="box">[in][optional] - can be null</param>
'''   <returns>pta, or NULL on error</returns>
Public Shared Function ptaGetPixelsFromPix(
				ByVal pixs as Pix, 
				ByVal box as Box) as Pta

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaGetPixelsFromPix( pixs.Pointer, boxPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (1946, 1)
' pixGenerateFromPta()
' pixGenerateFromPta(PTA *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Points are rounded to nearest ints.
''' (2) Any points outside (w,h) are silently discarded.
''' (3) Output 1 bpp pix has values 1 for each point in the pta.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="w">[in] - of pix</param>
'''  <param name="h">[in] - of pix</param>
'''   <returns>pix 1 bpp, or NULL on error</returns>
Public Shared Function pixGenerateFromPta(
				ByVal pta as Pta, 
				ByVal w as Integer, 
				ByVal h as Integer) as Pix

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGenerateFromPta( pta.Pointer, w, h)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\ptafunc1.c (1987, 1)
' ptaGetBoundaryPixels()
' ptaGetBoundaryPixels(PIX *, l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) This generates a pta of either fg or bg boundary pixels.
''' (2) See also pixGeneratePtaBoundary() for rendering of
''' fg boundary pixels.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="type">[in] - L_BOUNDARY_FG, L_BOUNDARY_BG</param>
'''   <returns>pta, or NULL on error</returns>
Public Shared Function ptaGetBoundaryPixels(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.L_BOUNDARY_G) as Pta

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaGetBoundaryPixels( pixs.Pointer, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (2036, 1)
' ptaaGetBoundaryPixels()
' ptaaGetBoundaryPixels(PIX *, l_int32, l_int32, BOXA **, PIXA **) as PTAA *
'''  <summary>
''' Notes
''' (1) This generates a ptaa of either fg or bg boundary pixels,
''' where each pta has the boundary pixels for a connected
''' component.
''' (2) We can't simply find all the boundary pixels and then select
''' those within the bounding box of each component, because
''' bounding boxes can overlap.  It is necessary to extract and
''' dilate or erode each component separately.  Note also that
''' special handling is required for bg pixels when the
''' component touches the pix boundary.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="type">[in] - L_BOUNDARY_FG, L_BOUNDARY_BG</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="pboxa">[out][optional] - bounding boxes of the c.c.</param>
'''  <param name="ppixa">[out][optional] - pixa of the c.c.</param>
'''   <returns>ptaa, or NULL on error</returns>
Public Shared Function ptaaGetBoundaryPixels(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.L_BOUNDARY_G, 
				ByVal connectivity as Integer, 
				ByRef pboxa as Boxa, 
				ByRef ppixa as Pixa) as Ptaa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer
Dim ppixaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixa) Then ppixaPTR = ppixa.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaaGetBoundaryPixels( pixs.Pointer, type, connectivity, pboxaPTR, ppixaPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)
	if ppixaPTR <> IntPtr.Zero then ppixa = new Pixa(ppixaPTR)

	Return  new Ptaa(_Result)
End Function

' SRC\ptafunc1.c (2119, 1)
' ptaaIndexLabeledPixels()
' ptaaIndexLabeledPixels(PIX *, l_int32 *) as PTAA *
'''  <summary>
''' Notes
''' (1) The pixel values in %pixs are the index of the connected component
''' to which the pixel belongs; %pixs is typically generated from
''' a 1 bpp pix by pixConnCompTransform().  Background pixels in
''' the generating 1 bpp pix are represented in %pixs by 0.
''' We do not check that the pixel values are correctly labelled.
''' (2) Each pta in the returned ptaa gives the pixel locations
''' correspnding to a connected component, with the label of each
''' given by the index of the pta into the ptaa.
''' (3) Initialize with the first pta in ptaa being empty and
''' representing the background value (index 0) in the pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp, of indices of c.c.</param>
'''  <param name="pncc">[out][optional] - number of connected components</param>
'''   <returns>ptaa, or NULL on error</returns>
Public Shared Function ptaaIndexLabeledPixels(
				ByVal pixs as Pix, 
				ByRef pncc as Integer) as Ptaa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaaIndexLabeledPixels( pixs.Pointer, pncc)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Ptaa(_Result)
End Function

' SRC\ptafunc1.c (2176, 1)
' ptaGetNeighborPixLocs()
' ptaGetNeighborPixLocs(PIX *, l_int32, l_int32, l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) Generates a pta of all valid neighbor pixel locations,
''' or NULL on error.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth</param>
'''  <param name="x">[in] - pixel from which we search for nearest neighbors</param>
'''  <param name="y">[in] - pixel from which we search for nearest neighbors</param>
'''  <param name="conn">[in] - 4 or 8 connectivity</param>
'''   <returns>pta, or NULL on error</returns>
Public Shared Function ptaGetNeighborPixLocs(
				ByVal pixs as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal conn as Integer) as Pta

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaGetNeighborPixLocs( pixs.Pointer, x, y, conn)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (2232, 1)
' numaConvertToPta1()
' numaConvertToPta1(NUMA *) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="na">[in] - numa with implicit y(x)</param>
'''   <returns>pta if OK; null on error</returns>
Public Shared Function numaConvertToPta1(
				ByVal na as Numa) as Pta

	If IsNothing (na) then Throw New ArgumentNullException  ("na cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaConvertToPta1( na.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (2262, 1)
' numaConvertToPta2()
' numaConvertToPta2(NUMA *, NUMA *) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nax">[in] - </param>
'''  <param name="nay">[in] - </param>
'''   <returns>pta if OK; null on error</returns>
Public Shared Function numaConvertToPta2(
				ByVal nax as Numa, 
				ByVal nay as Numa) as Pta

	If IsNothing (nax) then Throw New ArgumentNullException  ("nax cannot be Nothing")
	If IsNothing (nay) then Throw New ArgumentNullException  ("nay cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaConvertToPta2( nax.Pointer, nay.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (2298, 1)
' ptaConvertToNuma()
' ptaConvertToNuma(PTA *, NUMA **, NUMA **) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="pnax">[out] - addr of nax</param>
'''  <param name="pnay">[out] - addr of nay</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaConvertToNuma(
				ByVal pta as Pta, 
				ByRef pnax as Numa, 
				ByRef pnay as Numa) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")

	Dim pnaxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnax) Then pnaxPTR = pnax.Pointer
	Dim pnayPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnay) Then pnayPTR = pnay.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.ptaConvertToNuma( pta.Pointer, pnaxPTR, pnayPTR)
	if pnaxPTR <> IntPtr.Zero then pnax = new Numa(pnaxPTR)
	if pnayPTR <> IntPtr.Zero then pnay = new Numa(pnayPTR)

	Return _Result
End Function

' SRC\ptafunc1.c (2349, 1)
' pixDisplayPta()
' pixDisplayPta(PIX *, PIX *, PTA *) as PIX *
'''  <summary>
''' Notes
''' (1) To write on an existing pixs, pixs must be 32 bpp and
''' call with pixd == pixs
''' pixDisplayPta(pixs, pixs, pta);
''' To write to a new pix, use pixd == NULL and call
''' pixd = pixDisplayPta(NULL, pixs, pta);
''' (2) On error, returns pixd to avoid losing pixs if called as
''' pixs = pixDisplayPta(pixs, pixs, pta);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - can be same as pixs or NULL; 32 bpp if in-place</param>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 or 32 bpp</param>
'''  <param name="pta">[in] - of path to be plotted</param>
'''   <returns>pixd 32 bpp RGB version of pixs, with path in green.</returns>
Public Shared Function pixDisplayPta(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal pta as Pta) as Pix

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")
	If {1,2,4,8,16,24,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16 or 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDisplayPta( pixd.Pointer, pixs.Pointer, pta.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\ptafunc1.c (2415, 1)
' pixDisplayPtaaPattern()
' pixDisplayPtaaPattern(PIX *, PIX *, PTAA *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) To write on an existing pixs, pixs must be 32 bpp and
''' call with pixd == pixs
''' pixDisplayPtaPattern(pixs, pixs, pta, ...);
''' To write to a new pix, use pixd == NULL and call
''' pixd = pixDisplayPtaPattern(NULL, pixs, pta, ...);
''' (2) Puts a random color on each pattern associated with a pta.
''' (3) On error, returns pixd to avoid losing pixs if called as
''' pixs = pixDisplayPtaPattern(pixs, pixs, pta, ...);
''' (4) A typical pattern to be used is a circle, generated with
''' generatePtaFilledCircle()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - 32 bpp</param>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 or 32 bpp; 32 bpp if in place</param>
'''  <param name="ptaa">[in] - giving locations at which the pattern is displayed</param>
'''  <param name="pixp">[in] - 1 bpp pattern to be placed such that its reference point co-locates with each point in pta</param>
'''  <param name="cx">[in] - reference point in pattern</param>
'''  <param name="cy">[in] - reference point in pattern</param>
'''   <returns>pixd 32 bpp RGB version of pixs.</returns>
Public Shared Function pixDisplayPtaaPattern(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal ptaa as Ptaa, 
				ByVal pixp as Pix, 
				ByVal cx as Integer, 
				ByVal cy as Integer) as Pix

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")
	If IsNothing (pixp) then Throw New ArgumentNullException  ("pixp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDisplayPtaaPattern( pixd.Pointer, pixs.Pointer, ptaa.Pointer, pixp.Pointer, cx, cy)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\ptafunc1.c (2482, 1)
' pixDisplayPtaPattern()
' pixDisplayPtaPattern(PIX *, PIX *, PTA *, PIX *, l_int32, l_int32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) To write on an existing pixs, pixs must be 32 bpp and
''' call with pixd == pixs
''' pixDisplayPtaPattern(pixs, pixs, pta, ...);
''' To write to a new pix, use pixd == NULL and call
''' pixd = pixDisplayPtaPattern(NULL, pixs, pta, ...);
''' (2) On error, returns pixd to avoid losing pixs if called as
''' pixs = pixDisplayPtaPattern(pixs, pixs, pta, ...);
''' (3) A typical pattern to be used is a circle, generated with
''' generatePtaFilledCircle()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - can be same as pixs or NULL; 32 bpp if in-place</param>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 or 32 bpp</param>
'''  <param name="pta">[in] - giving locations at which the pattern is displayed</param>
'''  <param name="pixp">[in] - 1 bpp pattern to be placed such that its reference point co-locates with each point in pta</param>
'''  <param name="cx">[in] - reference point in pattern</param>
'''  <param name="cy">[in] - reference point in pattern</param>
'''  <param name="color">[in] - in 0xrrggbb00 format</param>
'''   <returns>pixd 32 bpp RGB version of pixs.</returns>
Public Shared Function pixDisplayPtaPattern(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal pta as Pta, 
				ByVal pixp as Pix, 
				ByVal cx as Integer, 
				ByVal cy as Integer, 
				ByVal color as UInteger) as Pix

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")
	If IsNothing (pixp) then Throw New ArgumentNullException  ("pixp cannot be Nothing")
	If {1,2,4,8,16,24,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16 or 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDisplayPtaPattern( pixd.Pointer, pixs.Pointer, pta.Pointer, pixp.Pointer, cx, cy, color)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\ptafunc1.c (2542, 1)
' ptaReplicatePattern()
' ptaReplicatePattern(PTA *, PIX *, PTA *, l_int32, l_int32, l_int32, l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) You can use either the image %pixp or the set of pts %ptap.
''' (2) The pattern is placed with its reference point at each point
''' in ptas, and all the fg pixels are colleced into ptad.
''' For %pixp, this is equivalent to blitting pixp at each point
''' in ptas, and then converting the resulting pix to a pta.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - "sparse" input pta</param>
'''  <param name="pixp">[in][optional] - 1 bpp pattern, to be replicated in output pta</param>
'''  <param name="ptap">[in][optional] - set of pts, to be replicated in output pta</param>
'''  <param name="cx">[in] - reference point in pattern</param>
'''  <param name="cy">[in] - reference point in pattern</param>
'''  <param name="w">[in] - clipping sizes for output pta</param>
'''  <param name="h">[in] - clipping sizes for output pta</param>
'''   <returns>ptad with all points of replicated pattern, or NULL on error</returns>
Public Shared Function ptaReplicatePattern(
				ByVal ptas as Pta, 
				ByVal pixp as Pix, 
				ByVal ptap as Pta, 
				ByVal cx as Integer, 
				ByVal cy as Integer, 
				ByVal w as Integer, 
				ByVal h as Integer) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")

	Dim pixpPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixp) Then pixpPTR = pixp.Pointer
	Dim ptapPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ptap) Then ptapPTR = ptap.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaReplicatePattern( ptas.Pointer, pixpPTR, ptapPTR, cx, cy, w, h)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc1.c (2594, 1)
' pixDisplayPtaa()
' pixDisplayPtaa(PIX *, PTAA *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 or 32 bpp</param>
'''  <param name="ptaa">[in] - array of paths to be plotted</param>
'''   <returns>pixd 32 bpp RGB version of pixs, with paths plotted in different colors, or NULL on error</returns>
Public Shared Function pixDisplayPtaa(
				ByVal pixs as Pix, 
				ByVal ptaa as Ptaa) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (ptaa) then Throw New ArgumentNullException  ("ptaa cannot be Nothing")
	If {1,2,4,8,16,24,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16 or 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDisplayPtaa( pixs.Pointer, ptaa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\ptafunc2.c"
' SRC\ptafunc2.c (89, 1)
' ptaSort()
' ptaSort(PTA *, l_int32, l_int32, NUMA **) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - </param>
'''  <param name="sorttype">[in] - L_SORT_BY_X, L_SORT_BY_Y</param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING, L_SORT_DECREASING</param>
'''  <param name="pnaindex">[out][optional] - index of sorted order into original array</param>
'''   <returns>ptad sorted version of ptas, or NULL on error</returns>
Public Shared Function ptaSort(
				ByVal ptas as Pta, 
				ByVal sorttype as Enumerations.L_SORT_BY, 
				ByVal sortorder as Enumerations.L_SORT_CREASING, 
				ByRef pnaindex as Numa) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")

Dim pnaindexPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaindex) Then pnaindexPTR = pnaindex.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaSort( ptas.Pointer, sorttype, sortorder, pnaindexPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnaindexPTR <> IntPtr.Zero then pnaindex = new Numa(pnaindexPTR)

	Return  new Pta(_Result)
End Function

' SRC\ptafunc2.c (132, 1)
' ptaGetSortIndex()
' ptaGetSortIndex(PTA *, l_int32, l_int32, NUMA **) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - </param>
'''  <param name="sorttype">[in] - L_SORT_BY_X, L_SORT_BY_Y</param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING, L_SORT_DECREASING</param>
'''  <param name="pnaindex">[out] - index of sorted order into original array</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaGetSortIndex(
				ByVal ptas as Pta, 
				ByVal sorttype as Enumerations.L_SORT_BY, 
				ByVal sortorder as Enumerations.L_SORT_CREASING, 
				ByRef pnaindex as Numa) as Integer

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")

	Dim pnaindexPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaindex) Then pnaindexPTR = pnaindex.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.ptaGetSortIndex( ptas.Pointer, sorttype, sortorder, pnaindexPTR)
	if pnaindexPTR <> IntPtr.Zero then pnaindex = new Numa(pnaindexPTR)

	Return _Result
End Function

' SRC\ptafunc2.c (182, 1)
' ptaSortByIndex()
' ptaSortByIndex(PTA *, NUMA *) as PTA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - </param>
'''  <param name="naindex">[in] - na that maps from the new pta to the input pta</param>
'''   <returns>ptad sorted, or NULL on  error</returns>
Public Shared Function ptaSortByIndex(
				ByVal ptas as Pta, 
				ByVal naindex as Numa) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")
	If IsNothing (naindex) then Throw New ArgumentNullException  ("naindex cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaSortByIndex( ptas.Pointer, naindex.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc2.c (218, 1)
' ptaaSortByIndex()
' ptaaSortByIndex(PTAA *, NUMA *) as PTAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptaas">[in] - </param>
'''  <param name="naindex">[in] - na that maps from the new ptaa to the input ptaa</param>
'''   <returns>ptaad sorted, or NULL on error</returns>
Public Shared Function ptaaSortByIndex(
				ByVal ptaas as Ptaa, 
				ByVal naindex as Numa) as Ptaa

	If IsNothing (ptaas) then Throw New ArgumentNullException  ("ptaas cannot be Nothing")
	If IsNothing (naindex) then Throw New ArgumentNullException  ("naindex cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaaSortByIndex( ptaas.Pointer, naindex.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Ptaa(_Result)
End Function

' SRC\ptafunc2.c (257, 1)
' ptaGetRankValue()
' ptaGetRankValue(PTA *, l_float32, PTA *, l_int32, l_float32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="fract">[in] - use 0.0 for smallest, 1.0 for largest</param>
'''  <param name="ptasort">[in][optional] - version of %pta sorted by %sorttype</param>
'''  <param name="sorttype">[in] - L_SORT_BY_X, L_SORT_BY_Y</param>
'''  <param name="pval">[out] - rankval the x or y value at %fract</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaGetRankValue(
				ByVal pta as Pta, 
				ByVal fract as Single, 
				ByVal ptasort as Pta, 
				ByVal sorttype as Enumerations.L_SORT_BY, 
				ByRef pval as Single()) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")

	Dim ptasortPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ptasort) Then ptasortPTR = ptasort.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.ptaGetRankValue( pta.Pointer, fract, ptasortPTR, sorttype, pval)

	Return _Result
End Function

' SRC\ptafunc2.c (317, 1)
' ptaUnionByAset()
' ptaUnionByAset(PTA *, PTA *) as PTA *
'''  <summary>
''' Notes
''' (1) See sarrayRemoveDupsByAset() for the approach.
''' (2) The key is a 64-bit hash from the (x,y) pair.
''' (3) This is slower than ptaUnionByHash(), mostly because of the
''' nlogn sort to build up the rbtree.  Do not use for large
''' numbers of points (say, GT 1M).
''' (4) The Aset() functions use the sorted l_Aset, which is just
''' an rbtree in disguise.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta1">[in] - </param>
'''  <param name="pta2">[in] - </param>
'''   <returns>ptad with the union of the set of points, or NULL on error</returns>
Public Shared Function ptaUnionByAset(
				ByVal pta1 as Pta, 
				ByVal pta2 as Pta) as Pta

	If IsNothing (pta1) then Throw New ArgumentNullException  ("pta1 cannot be Nothing")
	If IsNothing (pta2) then Throw New ArgumentNullException  ("pta2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaUnionByAset( pta1.Pointer, pta2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc2.c (354, 1)
' ptaRemoveDupsByAset()
' ptaRemoveDupsByAset(PTA *) as PTA *
'''  <summary>
''' Notes
''' (1) This is slower than ptaRemoveDupsByHash(), mostly because
''' of the nlogn sort to build up the rbtree.  Do not use for
''' large numbers of points (say, GT 1M).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - assumed to be integer values</param>
'''   <returns>ptad with duplicates removed, or NULL on error</returns>
Public Shared Function ptaRemoveDupsByAset(
				ByVal ptas as Pta) as Pta

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaRemoveDupsByAset( ptas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc2.c (401, 1)
' ptaIntersectionByAset()
' ptaIntersectionByAset(PTA *, PTA *) as PTA *
'''  <summary>
''' Notes
''' (1) See sarrayIntersectionByAset() for the approach.
''' (2) The key is a 64-bit hash from the (x,y) pair.
''' (3) This is slower than ptaIntersectionByHash(), mostly because
''' of the nlogn sort to build up the rbtree.  Do not use for
''' large numbers of points (say, GT 1M).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta1">[in] - </param>
'''  <param name="pta2">[in] - </param>
'''   <returns>ptad intersection of the point sets, or NULL on error</returns>
Public Shared Function ptaIntersectionByAset(
				ByVal pta1 as Pta, 
				ByVal pta2 as Pta) as Pta

	If IsNothing (pta1) then Throw New ArgumentNullException  ("pta1 cannot be Nothing")
	If IsNothing (pta2) then Throw New ArgumentNullException  ("pta2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaIntersectionByAset( pta1.Pointer, pta2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc2.c (451, 1)
' l_asetCreateFromPta()
' l_asetCreateFromPta(PTA *) as L_ASET *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''   <returns>set using a 64-bit hash of (x,y) as the key</returns>
Public Shared Function l_asetCreateFromPta(
				ByVal pta as Pta) as L_Rbtree

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_asetCreateFromPta( pta.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree(_Result)
End Function

' SRC\ptafunc2.c (493, 1)
' ptaUnionByHash()
' ptaUnionByHash(PTA *, PTA *) as PTA *
'''  <summary>
''' Notes
''' (1) This is faster than ptaUnionByAset(), because the
''' bucket lookup is O(n).  It should be used if the pts are
''' integers (e.g., representing pixel positions).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta1">[in] - </param>
'''  <param name="pta2">[in] - </param>
'''   <returns>ptad with the union of the set of points, or NULL on error</returns>
Public Shared Function ptaUnionByHash(
				ByVal pta1 as Pta, 
				ByVal pta2 as Pta) as Pta

	If IsNothing (pta1) then Throw New ArgumentNullException  ("pta1 cannot be Nothing")
	If IsNothing (pta2) then Throw New ArgumentNullException  ("pta2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaUnionByHash( pta1.Pointer, pta2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc2.c (543, 1)
' ptaRemoveDupsByHash()
' ptaRemoveDupsByHash(PTA *, PTA **, L_DNAHASH **) as l_ok
'''  <summary>
''' Notes
''' (1) Generates a pta with unique values.
''' (2) The dnahash is built up with ptad to assure uniqueness.
''' It can be used to find if a point is in the set
''' ptaFindPtByHash(ptad, dahash, x, y, index)
''' (3) The hash of the (x,y) location is simple and fast.  It scales
''' up with the number of buckets to insure a fairly random
''' bucket selection for adjacent points.
''' (4) A Dna is used rather than a Numa because we need accurate
''' representation of 32-bit integers that are indices into ptas.
''' Integer --GT float --GT integer conversion makes errors for
''' integers larger than 10M.
''' (5) This is faster than ptaRemoveDupsByAset(), because the
''' bucket lookup is O(n), although there is a double-loop
''' lookup within the dna in each bucket.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptas">[in] - assumed to be integer values</param>
'''  <param name="pptad">[out] - unique set of pts; duplicates removed</param>
'''  <param name="pdahash">[out][optional] - dnahash used for lookup</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaRemoveDupsByHash(
				ByVal ptas as Pta, 
				ByRef pptad as Pta, 
				ByRef pdahash as L_DnaHash) as Integer

	If IsNothing (ptas) then Throw New ArgumentNullException  ("ptas cannot be Nothing")

	Dim pptadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pptad) Then pptadPTR = pptad.Pointer
Dim pdahashPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pdahash) Then pdahashPTR = pdahash.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.ptaRemoveDupsByHash( ptas.Pointer, pptadPTR, pdahashPTR)
	if pptadPTR <> IntPtr.Zero then pptad = new Pta(pptadPTR)
	if pdahashPTR <> IntPtr.Zero then pdahash = new L_DnaHash(pdahashPTR)

	Return _Result
End Function

' SRC\ptafunc2.c (600, 1)
' ptaIntersectionByHash()
' ptaIntersectionByHash(PTA *, PTA *) as PTA *
'''  <summary>
''' Notes
''' (1) This is faster than ptaIntersectionByAset(), because the
''' bucket lookup is O(n).  It should be used if the pts are
''' integers (e.g., representing pixel positions).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta1">[in] - </param>
'''  <param name="pta2">[in] - </param>
'''   <returns>ptad intersection of the point sets, or NULL on error</returns>
Public Shared Function ptaIntersectionByHash(
				ByVal pta1 as Pta, 
				ByVal pta2 as Pta) as Pta

	If IsNothing (pta1) then Throw New ArgumentNullException  ("pta1 cannot be Nothing")
	If IsNothing (pta2) then Throw New ArgumentNullException  ("pta2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptaIntersectionByHash( pta1.Pointer, pta2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\ptafunc2.c (674, 1)
' ptaFindPtByHash()
' ptaFindPtByHash(PTA *, L_DNAHASH *, l_int32, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Fast lookup in dnaHash associated with a pta, to see if a
''' random point (x,y) is already stored in the hash table.
''' (2) We use a strong hash function to minimize the chance that
''' two different points hash to the same key value.
''' (3) We select the number of buckets to be about 5% of the size
''' of the input %pta, so that when fully populated, each
''' bucket (dna) will have about 20 entries, each being an index
''' into %pta.  In lookup, after hashing to the key, and then
''' again to the bucket, we traverse the bucket (dna), using the
''' index into %pta to check if the point (x,y) has been found before.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="dahash">[in] - built from pta</param>
'''  <param name="x">[in] - arbitrary points</param>
'''  <param name="y">[in] - arbitrary points</param>
'''  <param name="pindex">[out] - index into pta if (x,y) is in pta; -1 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptaFindPtByHash(
				ByVal pta as Pta, 
				ByVal dahash as L_DnaHash, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByRef pindex as Integer) as Integer

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")
	If IsNothing (dahash) then Throw New ArgumentNullException  ("dahash cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptaFindPtByHash( pta.Pointer, dahash.Pointer, x, y, pindex)

	Return _Result
End Function

' SRC\ptafunc2.c (720, 1)
' l_dnaHashCreateFromPta()
' l_dnaHashCreateFromPta(PTA *) as L_DNAHASH *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''   <returns>dahash, or NULL on error</returns>
Public Shared Function l_dnaHashCreateFromPta(
				ByVal pta as Pta) as L_DnaHash

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaHashCreateFromPta( pta.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_DnaHash(_Result)
End Function

#End Region
#Region "SRC\ptra.c"
' SRC\ptra.c (139, 1)
' ptraCreate()
' ptraCreate(l_int32) as L_PTRA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - size of ptr array to be alloc'd 0 for default</param>
'''   <returns>pa, or NULL on error</returns>
Public Shared Function ptraCreate(
				ByVal n as Integer) as L_Ptra



	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptraCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Ptra(_Result)
End Function

' SRC\ptra.c (185, 1)
' ptraDestroy()
' ptraDestroy(L_PTRA **, l_int32, l_int32) as void
'''  <summary>
''' Notes
''' (1) If %freeflag == TRUE, frees each item in the array.
''' (2) If %freeflag == FALSE and %warnflag == TRUE, and there are
''' items on the array, this gives a warning and destroys the array.
''' If these items are not owned elsewhere, this will cause
''' a memory leak of all the items that were on the array.
''' So if the items are not owned elsewhere and require their
''' own destroy function, they must be destroyed before the ptra.
''' (3) If %warnflag == FALSE, no warnings will be issued.  This is
''' useful if the items are owned elsewhere, such as a
''' PixMemoryStore().
''' (4) To destroy the ptra, we destroy the ptr array, then
''' the ptra, and then null the contents of the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ppa">[in,out] - ptra to be nulled</param>
'''  <param name="freeflag">[in] - TRUE to free each remaining item in the array</param>
'''  <param name="warnflag">[in] - TRUE to warn if any remaining items are not destroyed</param>
Public Shared Sub ptraDestroy(
				ByRef ppa as L_Ptra, 
				ByVal freeflag as Integer, 
				ByVal warnflag as Integer)


	Dim ppaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppa) Then ppaPTR = ppa.Pointer

	LeptonicaSharp.Natives.ptraDestroy( ppaPTR, freeflag, warnflag)
	if ppaPTR <> IntPtr.Zero then ppa = new L_Ptra(ppaPTR)

End Sub

' SRC\ptra.c (242, 1)
' ptraAdd()
' ptraAdd(L_PTRA *, void *) as l_ok
'''  <summary>
''' Notes
''' (1) This adds the element to the next location beyond imax,
''' which is the largest occupied ptr in the array.  This is
''' what you expect from a stack, where all ptrs up to and
''' including imax are occupied, but here the occuption of
''' items in the array is entirely arbitrary.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pa">[in] - ptra</param>
'''  <param name="item">[in] - generic ptr to a struct</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptraAdd(
				ByVal pa as L_Ptra, 
				ByVal item as Object) as Integer

	If IsNothing (pa) then Throw New ArgumentNullException  ("pa cannot be Nothing")
	If IsNothing (item) then Throw New ArgumentNullException  ("item cannot be Nothing")

Dim itemPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.ptraAdd( pa.Pointer, itemPTR)

	Return _Result
End Function

' SRC\ptra.c (336, 1)
' ptraInsert()
' ptraInsert(L_PTRA *, l_int32, void *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This checks first to see if the location is valid, and
''' then if there is presently an item there.  If there is not,
''' it is simply inserted into that location.
''' (2) If there is an item at the insert location, items must be
''' moved down to make room for the insert.  In the downward
''' shift there are three options, given by %shiftflag.
''' ~ If %shiftflag == L_AUTO_DOWNSHIFT, a decision is made
''' whether, in a cascade of items, to downshift a minimum
''' amount or for all items above %index.  The decision is
''' based on the expectation of finding holes (null ptrs)
''' between %index and the bottom of the array.
''' Assuming the holes are distributed uniformly, if 2 or more
''' holes are expected, we do a minimum shift.
''' ~ If %shiftflag == L_MIN_DOWNSHIFT, the downward shifting
''' cascade of items progresses a minimum amount, until
''' the first empty slot is reached.  This mode requires
''' some computation before the actual shifting is done.
''' ~ If %shiftflag == L_FULL_DOWNSHIFT, a shifting cascade is
''' performed where pa[i] --GT pa[i + 1] for all i GT= index.
''' Then, the item is inserted at pa[index].
''' (3) If you are not using L_AUTO_DOWNSHIFT, the rule of thumb is
''' to use L_FULL_DOWNSHIFT if the array is compacted (each
''' element points to an item), and to use L_MIN_DOWNSHIFT
''' if there are a significant number of null pointers.
''' There is no penalty to using L_MIN_DOWNSHIFT for a
''' compacted array, however, because the full shift is required
''' and we don't do the O(n) computation to look for holes.
''' (4) This should not be used repeatedly on large arrays,
''' because the function is generally O(n).
''' (5) However, it can be used repeatedly if we start with an empty
''' ptr array and insert only once at each location.  For example,
''' you can support an array of Numa, where at each ptr location
''' you store either 0 or 1 Numa, and the Numa can be added
''' randomly to the ptr array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pa">[in] - ptra</param>
'''  <param name="index">[in] - location in ptra to insert new value</param>
'''  <param name="item">[in] - generic ptr to a struct; can be null</param>
'''  <param name="shiftflag">[in] - L_AUTO_DOWNSHIFT, L_MIN_DOWNSHIFT, L_FULL_DOWNSHIFT</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptraInsert(
				ByVal pa as L_Ptra, 
				ByVal index as Integer, 
				ByVal item as Object, 
				ByVal shiftflag as Enumerations.L_DOWNSHIFT) as Integer

	If IsNothing (pa) then Throw New ArgumentNullException  ("pa cannot be Nothing")
	If IsNothing (item) then Throw New ArgumentNullException  ("item cannot be Nothing")

Dim itemPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.ptraInsert( pa.Pointer, index, itemPTR, shiftflag)

	Return _Result
End Function

' SRC\ptra.c (434, 1)
' ptraRemove()
' ptraRemove(L_PTRA *, l_int32, l_int32) as void *
'''  <summary>
''' Notes
''' (1) If flag == L_NO_COMPACTION, this removes the item and
''' nulls the ptr on the array.  If it takes the last item
''' in the array, pa-GTn is reduced to the next item.
''' (2) If flag == L_COMPACTION, this compacts the array for
''' for all i GT= index.  It should not be used repeatedly on
''' large arrays, because compaction is O(n).
''' (3) The ability to remove without automatic compaction allows
''' removal with cost O(1).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pa">[in] - ptra</param>
'''  <param name="index">[in] - element to be removed</param>
'''  <param name="flag">[in] - L_NO_COMPACTION, L_COMPACTION</param>
'''   <returns>item, or NULL on error</returns>
Public Shared Function ptraRemove(
				ByVal pa as L_Ptra, 
				ByVal index as Integer, 
				ByVal flag as Enumerations.L_COMPACTION) as Object

	If IsNothing (pa) then Throw New ArgumentNullException  ("pa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptraRemove( pa.Pointer, index, flag)

	Return _Result
End Function

' SRC\ptra.c (483, 1)
' ptraRemoveLast()
' ptraRemoveLast(L_PTRA *) as void *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pa">[in] - ptra</param>
'''   <returns>item, or NULL on error or if the array is empty</returns>
Public Shared Function ptraRemoveLast(
				ByVal pa as L_Ptra) as Object

	If IsNothing (pa) then Throw New ArgumentNullException  ("pa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptraRemoveLast( pa.Pointer)

	Return _Result
End Function

' SRC\ptra.c (512, 1)
' ptraReplace()
' ptraReplace(L_PTRA *, l_int32, void *, l_int32) as void *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pa">[in] - ptra</param>
'''  <param name="index">[in] - element to be replaced</param>
'''  <param name="item">[in] - new generic ptr to a struct; can be null</param>
'''  <param name="freeflag">[in] - TRUE to free old item; FALSE to return it</param>
'''   <returns>item  old item, if it exists and is not freed, or NULL on error</returns>
Public Shared Function ptraReplace(
				ByVal pa as L_Ptra, 
				ByVal index as Integer, 
				ByVal item as Object, 
				ByVal freeflag as Integer) as Object

	If IsNothing (pa) then Throw New ArgumentNullException  ("pa cannot be Nothing")
	If IsNothing (item) then Throw New ArgumentNullException  ("item cannot be Nothing")

Dim itemPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptraReplace( pa.Pointer, index, itemPTR, freeflag)

	Return _Result
End Function

' SRC\ptra.c (553, 1)
' ptraSwap()
' ptraSwap(L_PTRA *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pa">[in] - ptra</param>
'''  <param name="index1">[in] - </param>
'''  <param name="index2">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptraSwap(
				ByVal pa as L_Ptra, 
				ByVal index1 as Integer, 
				ByVal index2 as Integer) as Integer

	If IsNothing (pa) then Throw New ArgumentNullException  ("pa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptraSwap( pa.Pointer, index1, index2)

	Return _Result
End Function

' SRC\ptra.c (590, 1)
' ptraCompactArray()
' ptraCompactArray(L_PTRA *) as l_ok
'''  <summary>
''' Notes
''' (1) This compacts the items on the array, filling any empty ptrs.
''' (2) This does not change the size of the array of ptrs.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptraCompactArray(
				ByVal pa as L_Ptra) as Integer

	If IsNothing (pa) then Throw New ArgumentNullException  ("pa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptraCompactArray( pa.Pointer)

	Return _Result
End Function

' SRC\ptra.c (625, 1)
' ptraReverse()
' ptraReverse(L_PTRA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pa">[in] - ptra</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptraReverse(
				ByVal pa as L_Ptra) as Integer

	If IsNothing (pa) then Throw New ArgumentNullException  ("pa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptraReverse( pa.Pointer)

	Return _Result
End Function

' SRC\ptra.c (649, 1)
' ptraJoin()
' ptraJoin(L_PTRA *, L_PTRA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pa1">[in] - add to this one</param>
'''  <param name="pa2">[in] - appended to pa1, and emptied of items; can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function ptraJoin(
				ByVal pa1 as L_Ptra, 
				ByVal pa2 as L_Ptra) as Integer

	If IsNothing (pa1) then Throw New ArgumentNullException  ("pa1 cannot be Nothing")
	If IsNothing (pa2) then Throw New ArgumentNullException  ("pa2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptraJoin( pa1.Pointer, pa2.Pointer)

	Return _Result
End Function

' SRC\ptra.c (699, 1)
' ptraGetMaxIndex()
' ptraGetMaxIndex(L_PTRA *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The largest index to an item in the array is %maxindex.
''' %maxindex is one less than the number of items that would be
''' in the array if there were no null pointers between 0
''' and %maxindex - 1.  However, because the internal ptr array
''' need not be compacted, there may be NULL pointers at
''' indices below %maxindex; for example, if items have
''' been removed.
''' (2) When an item is added to the end of the array, it goes
''' into pa-GTarray[maxindex + 1], and maxindex is then
''' incremented by 1.
''' (3) If there are no items in the array, this returns %maxindex = -1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pa">[in] - ptra</param>
'''  <param name="pmaxindex">[out] - index of last item in the array;</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ptraGetMaxIndex(
				ByVal pa as L_Ptra, 
				ByRef pmaxindex as Integer) as Integer

	If IsNothing (pa) then Throw New ArgumentNullException  ("pa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptraGetMaxIndex( pa.Pointer, pmaxindex)

	Return _Result
End Function

' SRC\ptra.c (727, 1)
' ptraGetActualCount()
' ptraGetActualCount(L_PTRA *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The actual number of items on the ptr array, pa-GTnactual,
''' will be smaller than pa-GTn if the array is not compacted.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pa">[in] - ptra</param>
'''  <param name="pcount">[out] - actual number of items on the ptr array</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ptraGetActualCount(
				ByVal pa as L_Ptra, 
				ByRef pcount as Integer) as Integer

	If IsNothing (pa) then Throw New ArgumentNullException  ("pa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptraGetActualCount( pa.Pointer, pcount)

	Return _Result
End Function

' SRC\ptra.c (759, 1)
' ptraGetPtrToItem()
' ptraGetPtrToItem(L_PTRA *, l_int32) as void *
'''  <summary>
''' Notes
''' (1) This returns a ptr to the item.  You must cast it to
''' the type of item.  Do not destroy it; the item belongs
''' to the Ptra.
''' (2) This can access all possible items on the ptr array.
''' If an item doesn't exist, it returns null.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pa">[in] - ptra</param>
'''  <param name="index">[in] - of element to be retrieved</param>
'''   <returns>a ptr to the element, or NULL on error</returns>
Public Shared Function ptraGetPtrToItem(
				ByVal pa as L_Ptra, 
				ByVal index as Integer) as Object

	If IsNothing (pa) then Throw New ArgumentNullException  ("pa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptraGetPtrToItem( pa.Pointer, index)

	Return _Result
End Function

' SRC\ptra.c (790, 1)
' ptraaCreate()
' ptraaCreate(l_int32) as L_PTRAA *
'''  <summary>
''' Notes
''' (1) The ptraa is generated with a fixed size, that can not change.
''' The ptra can be generated and inserted randomly into this array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - size of ptr array to be alloc'd</param>
'''   <returns>paa, or NULL on error</returns>
Public Shared Function ptraaCreate(
				ByVal n as Integer) as L_Ptraa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptraaCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Ptraa(_Result)
End Function

' SRC\ptra.c (826, 1)
' ptraaDestroy()
' ptraaDestroy(L_PTRAA **, l_int32, l_int32) as void
'''  <summary>
''' Notes
''' (1) See ptraDestroy() for use of %freeflag and %warnflag.
''' (2) To destroy the ptraa, we destroy each ptra, then the ptr array,
''' then the ptraa, and then null the contents of the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ppaa">[in,out] - to be nulled</param>
'''  <param name="freeflag">[in] - TRUE to free each remaining item in each ptra</param>
'''  <param name="warnflag">[in] - TRUE to warn if any remaining items are not destroyed</param>
Public Shared Sub ptraaDestroy(
				ByRef ppaa as L_Ptraa, 
				ByVal freeflag as Integer, 
				ByVal warnflag as Integer)


	Dim ppaaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppaa) Then ppaaPTR = ppaa.Pointer

	LeptonicaSharp.Natives.ptraaDestroy( ppaaPTR, freeflag, warnflag)
	if ppaaPTR <> IntPtr.Zero then ppaa = new L_Ptraa(ppaaPTR)

End Sub

' SRC\ptra.c (867, 1)
' ptraaGetSize()
' ptraaGetSize(L_PTRAA *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - </param>
'''  <param name="psize">[out] - size of ptr array</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ptraaGetSize(
				ByVal paa as L_Ptraa, 
				ByRef psize as Integer) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptraaGetSize( paa.Pointer, psize)

	Return _Result
End Function

' SRC\ptra.c (898, 1)
' ptraaInsertPtra()
' ptraaInsertPtra(L_PTRAA *, l_int32, L_PTRA *) as l_ok
'''  <summary>
''' Notes
''' (1) Caller should check return value.  On success, the Ptra
''' is inserted in the Ptraa and is owned by it.  However,
''' on error, the Ptra remains owned by the caller.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - ptraa</param>
'''  <param name="index">[in] - location in array for insertion</param>
'''  <param name="pa">[in] - to be inserted</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function ptraaInsertPtra(
				ByVal paa as L_Ptraa, 
				ByVal index as Integer, 
				ByVal pa as L_Ptra) as Integer

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")
	If IsNothing (pa) then Throw New ArgumentNullException  ("pa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ptraaInsertPtra( paa.Pointer, index, pa.Pointer)

	Return _Result
End Function

' SRC\ptra.c (941, 1)
' ptraaGetPtra()
' ptraaGetPtra(L_PTRAA *, l_int32, l_int32) as L_PTRA *
'''  <summary>
''' Notes
''' (1) This returns the ptra ptr.  If %accessflag == L_HANDLE_ONLY,
''' the ptra is left on the ptraa.  If %accessflag == L_REMOVE,
''' the ptr in the ptraa is set to NULL, and the caller
''' is responsible for disposing of the ptra (either putting it
''' back on the ptraa, or destroying it).
''' (2) This returns NULL if there is no Ptra at the index location.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - ptraa</param>
'''  <param name="index">[in] - location in array</param>
'''  <param name="accessflag">[in] - L_HANDLE_ONLY, L_REMOVE</param>
'''   <returns>ptra at index location, or NULL on error or if there is no ptra there.</returns>
Public Shared Function ptraaGetPtra(
				ByVal paa as L_Ptraa, 
				ByVal index as Integer, 
				ByVal accessflag as Enumerations.L_accessor__l_ptraa) as L_Ptra

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptraaGetPtra( paa.Pointer, index, accessflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Ptra(_Result)
End Function

' SRC\ptra.c (983, 1)
' ptraaFlattenToPtra()
' ptraaFlattenToPtra(L_PTRAA *) as L_PTRA *
'''  <summary>
''' Notes
''' (1) This 'flattens' the ptraa to a ptra, taking the items in
''' each ptra, in order, starting with the first ptra, etc.
''' (2) As a side-effect, the ptra are all removed from the ptraa
''' and destroyed, leaving an empty ptraa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="paa">[in] - ptraa</param>
'''   <returns>ptra, or NULL on error</returns>
Public Shared Function ptraaFlattenToPtra(
				ByVal paa as L_Ptraa) as L_Ptra

	If IsNothing (paa) then Throw New ArgumentNullException  ("paa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.ptraaFlattenToPtra( paa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Ptra(_Result)
End Function

#End Region
#Region "SRC\quadtree.c"
' SRC\quadtree.c (92, 1)
' pixQuadtreeMean()
' pixQuadtreeMean(PIX *, l_int32, PIX *, FPIXA **) as l_ok
'''  <summary>
''' Notes
''' (1) The returned fpixa has %nlevels of fpix, each containing
''' the mean values at its level.  Level 0 has a
''' single value; level 1 has 4 values; level 2 has 16; etc.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, no colormap</param>
'''  <param name="nlevels">[in] - in quadtree; max allowed depends on image size</param>
'''  <param name="pix_ma">[in] - input mean accumulator; can be null</param>
'''  <param name="pfpixa">[out] - mean values in quadtree</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixQuadtreeMean(
				ByVal pixs as Pix, 
				ByVal nlevels as Integer, 
				ByVal pix_ma as Pix, 
				ByRef pfpixa as FPixa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pix_ma) then Throw New ArgumentNullException  ("pix_ma cannot be Nothing")

	Dim pfpixaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pfpixa) Then pfpixaPTR = pfpixa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixQuadtreeMean( pixs.Pointer, nlevels, pix_ma.Pointer, pfpixaPTR)
	if pfpixaPTR <> IntPtr.Zero then pfpixa = new FPixa(pfpixaPTR)

	Return _Result
End Function

' SRC\quadtree.c (169, 1)
' pixQuadtreeVariance()
' pixQuadtreeVariance(PIX *, l_int32, PIX *, DPIX *, FPIXA **, FPIXA **) as l_ok
'''  <summary>
''' Notes
''' (1) The returned fpixav and fpixarv have %nlevels of fpix,
''' each containing at the respective levels the variance
''' and root variance values.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, no colormap</param>
'''  <param name="nlevels">[in] - in quadtree</param>
'''  <param name="pix_ma">[in] - input mean accumulator; can be null</param>
'''  <param name="dpix_msa">[in] - input mean square accumulator; can be null</param>
'''  <param name="pfpixa_v">[out][optional] - variance values in quadtree</param>
'''  <param name="pfpixa_rv">[out][optional] - root variance values in quadtree</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixQuadtreeVariance(
				ByVal pixs as Pix, 
				ByVal nlevels as Integer, 
				ByVal pix_ma as Pix, 
				ByVal dpix_msa as DPix, 
				ByRef pfpixa_v as FPixa, 
				ByRef pfpixa_rv as FPixa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pix_ma) then Throw New ArgumentNullException  ("pix_ma cannot be Nothing")
	If IsNothing (dpix_msa) then Throw New ArgumentNullException  ("dpix_msa cannot be Nothing")

Dim pfpixa_vPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pfpixa_v) Then pfpixa_vPTR = pfpixa_v.Pointer
Dim pfpixa_rvPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pfpixa_rv) Then pfpixa_rvPTR = pfpixa_rv.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixQuadtreeVariance( pixs.Pointer, nlevels, pix_ma.Pointer, dpix_msa.Pointer, pfpixa_vPTR, pfpixa_rvPTR)
	if pfpixa_vPTR <> IntPtr.Zero then pfpixa_v = new FPixa(pfpixa_vPTR)
	if pfpixa_rvPTR <> IntPtr.Zero then pfpixa_rv = new FPixa(pfpixa_rvPTR)

	Return _Result
End Function

' SRC\quadtree.c (265, 1)
' pixMeanInRectangle()
' pixMeanInRectangle(PIX *, BOX *, PIX *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This function is intended to be used for many rectangles
''' on the same image.  It can find the mean within a
''' rectangle in O(1), independent of the size of the rectangle.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="box">[in] - region to compute mean value</param>
'''  <param name="pixma">[in] - mean accumulator</param>
'''  <param name="pval">[out] - mean value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixMeanInRectangle(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal pixma as Pix, 
				ByRef pval as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If IsNothing (pixma) then Throw New ArgumentNullException  ("pixma cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixMeanInRectangle( pixs.Pointer, box.Pointer, pixma.Pointer, pval)

	Return _Result
End Function

' SRC\quadtree.c (341, 1)
' pixVarianceInRectangle()
' pixVarianceInRectangle(PIX *, BOX *, PIX *, DPIX *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This function is intended to be used for many rectangles
''' on the same image.  It can find the variance and/or the
''' square root of the variance within a rectangle in O(1),
''' independent of the size of the rectangle.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="box">[in] - region to compute variance and/or root variance</param>
'''  <param name="pix_ma">[in] - mean accumulator</param>
'''  <param name="dpix_msa">[in] - mean square accumulator</param>
'''  <param name="pvar">[out][optional] - variance</param>
'''  <param name="prvar">[out][optional] - root variance</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixVarianceInRectangle(
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal pix_ma as Pix, 
				ByVal dpix_msa as DPix, 
				ByRef pvar as Single(), 
				ByRef prvar as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")
	If IsNothing (pix_ma) then Throw New ArgumentNullException  ("pix_ma cannot be Nothing")
	If IsNothing (dpix_msa) then Throw New ArgumentNullException  ("dpix_msa cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixVarianceInRectangle( pixs.Pointer, box.Pointer, pix_ma.Pointer, dpix_msa.Pointer, pvar, prvar)

	Return _Result
End Function

' SRC\quadtree.c (449, 1)
' boxaaQuadtreeRegions()
' boxaaQuadtreeRegions(l_int32, l_int32, l_int32) as BOXAA *
'''  <summary>
''' Notes
''' (1) The returned boxaa has %nlevels of boxa, each containing
''' the set of rectangles at that level.  The rectangle at
''' level 0 is the entire region; at level 1 the region is
''' divided into 4 rectangles, and at level n there are n^4
''' rectangles.
''' (2) At each level, the rectangles in the boxa are in "raster"
''' order, with LR (fast scan) and TB (slow scan).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="w">[in] - size of pix that is being quadtree-ized</param>
'''  <param name="h">[in] - size of pix that is being quadtree-ized</param>
'''  <param name="nlevels">[in] - number of levels in quadtree</param>
'''   <returns>baa for quadtree regions at each level, or NULL on error</returns>
Public Shared Function boxaaQuadtreeRegions(
				ByVal w as Integer, 
				ByVal h as Integer, 
				ByVal nlevels as Integer) as Boxaa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.boxaaQuadtreeRegions( w, h, nlevels)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Boxaa(_Result)
End Function

' SRC\quadtree.c (530, 1)
' quadtreeGetParent()
' quadtreeGetParent(FPIXA *, l_int32, l_int32, l_int32, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Check return value for error.  On error, val is returned as 0.0.
''' (2) The parent is located at
''' level - 1
''' (x/2, y/2)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixa">[in] - mean, variance or root variance</param>
'''  <param name="level">[in] - x, y of current pixel</param>
'''  <param name="pval">[out] - parent pixel value, or 0.0 on error</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function quadtreeGetParent(
				ByVal fpixa as FPixa, 
				ByVal level as Integer, 
				ByRef x as Integer, 
				ByRef y as Integer, 
				ByRef pval as Single()) as Integer

	If IsNothing (fpixa) then Throw New ArgumentNullException  ("fpixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.quadtreeGetParent( fpixa.Pointer, level, x, y, pval)

	Return _Result
End Function

' SRC\quadtree.c (573, 1)
' quadtreeGetChildren()
' quadtreeGetChildren(FPIXA *, l_int32, l_int32, l_int32, l_float32 *, l_float32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Check return value for error.  On error, all return vals are 0.0.
''' (2) The returned child pixels are located at
''' level + 1
''' (2x, 2y), (2x+1, 2y), (2x, 2y+1), (2x+1, 2y+1)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixa">[in] - mean, variance or root variance</param>
'''  <param name="level">[in] - x, y of current pixel</param>
'''  <param name="pval00">[out] - four child pixel values</param>
'''  <param name="pval10">[out] - four child pixel values</param>
'''  <param name="pval01">[out] - four child pixel values</param>
'''  <param name="pval11">[out] - four child pixel values</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function quadtreeGetChildren(
				ByVal fpixa as FPixa, 
				ByVal level as Integer, 
				ByRef x as Integer, 
				ByRef y as Integer, 
				ByRef pval00 as Single(), 
				ByRef pval10 as Single(), 
				ByRef pval01 as Single(), 
				ByRef pval11 as Single()) as Integer

	If IsNothing (fpixa) then Throw New ArgumentNullException  ("fpixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.quadtreeGetChildren( fpixa.Pointer, level, x, y, pval00, pval10, pval01, pval11)

	Return _Result
End Function

' SRC\quadtree.c (619, 1)
' quadtreeMaxLevels()
' quadtreeMaxLevels(l_int32, l_int32) as l_int32
'''  <summary>
''' Notes
''' (1) The criterion for maxlevels is that the subdivision not
''' go down below the single pixel level.  The 1.5 factor
''' is intended to keep any rectangle from accidentally
''' having zero dimension due to integer truncation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="w">[in] - dimensions of image</param>
'''  <param name="h">[in] - dimensions of image</param>
'''   <returns>maxlevels maximum number of levels allowed, or -1 on error</returns>
Public Shared Function quadtreeMaxLevels(
				ByVal w as Integer, 
				ByVal h as Integer) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.quadtreeMaxLevels( w, h)

	Return _Result
End Function

' SRC\quadtree.c (654, 1)
' fpixaDisplayQuadtree()
' fpixaDisplayQuadtree(FPIXA *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The mean and root variance fall naturally in the 8 bpp range,
''' but the variance is typically outside the range.  This
''' function displays 8 bpp pix clipped to 255, so the image
''' pixels will mostly be 255 (white).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpixa">[in] - mean, variance or root variance</param>
'''  <param name="factor">[in] - replication factor at lowest level</param>
'''  <param name="fontsize">[in] - 4, ... 20</param>
'''   <returns>pixd 8 bpp, mosaic of quadtree images, or NULL on error</returns>
Public Shared Function fpixaDisplayQuadtree(
				ByVal fpixa as FPixa, 
				ByVal factor as Integer, 
				ByVal fontsize as Integer) as Pix

	If IsNothing (fpixa) then Throw New ArgumentNullException  ("fpixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fpixaDisplayQuadtree( fpixa.Pointer, factor, fontsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\queue.c"
' SRC\queue.c (90, 1)
' lqueueCreate()
' lqueueCreate(l_int32) as L_QUEUE *
'''  <summary>
''' Notes
''' (1) Allocates a ptr array of given size, and initializes counters.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nalloc">[in] - size of ptr array to be alloc'd; 0 for default</param>
'''   <returns>lqueue, or NULL on error</returns>
Public Shared Function lqueueCreate(
				ByVal nalloc as Integer) as L_Queue



	Dim _Result as IntPtr = LeptonicaSharp.Natives.lqueueCreate( nalloc)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Queue(_Result)
End Function

' SRC\queue.c (131, 1)
' lqueueDestroy()
' lqueueDestroy(L_QUEUE **, l_int32) as void
'''  <summary>
''' Notes
''' (1) If freeflag is TRUE, frees each struct in the array.
''' (2) If freeflag is FALSE but there are elements on the array,
''' gives a warning and destroys the array.  This will
''' cause a memory leak of all the items that were on the queue.
''' So if the items require their own destroy function, they
''' must be destroyed before the queue.  The same applies to the
''' auxiliary stack, if it is used.
''' (3) To destroy the L_Queue, we destroy the ptr array, then
''' the lqueue, and then null the contents of the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="plq">[in,out] - to be nulled</param>
'''  <param name="freeflag">[in] - TRUE to free each remaining struct in the array</param>
Public Shared Sub lqueueDestroy(
				ByRef plq as L_Queue, 
				ByVal freeflag as Integer)


	Dim plqPTR As IntPtr = IntPtr.Zero : If Not IsNothing(plq) Then plqPTR = plq.Pointer

	LeptonicaSharp.Natives.lqueueDestroy( plqPTR, freeflag)
	if plqPTR <> IntPtr.Zero then plq = new L_Queue(plqPTR)

End Sub

' SRC\queue.c (187, 1)
' lqueueAdd()
' lqueueAdd(L_QUEUE *, void *) as l_ok
'''  <summary>
''' Notes
''' (1) The algorithm is as follows.  If the queue is populated
''' to the end of the allocated array, shift all ptrs toward
''' the beginning of the array, so that the head of the queue
''' is at the beginning of the array.  Then, if the array is
''' more than 0.75 full, realloc with double the array size.
''' Finally, add the item to the tail of the queue.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="lq">[in] - lqueue</param>
'''  <param name="item">[in] - to be added to the tail of the queue</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function lqueueAdd(
				ByVal lq as L_Queue, 
				ByVal item as Object) as Integer

	If IsNothing (lq) then Throw New ArgumentNullException  ("lq cannot be Nothing")
	If IsNothing (item) then Throw New ArgumentNullException  ("item cannot be Nothing")

Dim itemPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.lqueueAdd( lq.Pointer, itemPTR)

	Return _Result
End Function

' SRC\queue.c (254, 1)
' lqueueRemove()
' lqueueRemove(L_QUEUE *) as void *
'''  <summary>
''' Notes
''' (1) If this is the last item on the queue, so that the queue
''' becomes empty, nhead is reset to the beginning of the array.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="lq">[in] - lqueue</param>
'''   <returns>ptr to item popped from the head of the queue, or NULL if the queue is empty or on error</returns>
Public Shared Function lqueueRemove(
				ByVal lq as L_Queue) as Object

	If IsNothing (lq) then Throw New ArgumentNullException  ("lq cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.lqueueRemove( lq.Pointer)

	Return _Result
End Function

' SRC\queue.c (283, 1)
' lqueueGetCount()
' lqueueGetCount(L_QUEUE *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="lq">[in] - lqueue</param>
'''   <returns>count, or 0 on error</returns>
Public Shared Function lqueueGetCount(
				ByVal lq as L_Queue) as Integer

	If IsNothing (lq) then Throw New ArgumentNullException  ("lq cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lqueueGetCount( lq.Pointer)

	Return _Result
End Function

' SRC\queue.c (305, 1)
' lqueuePrint()
' lqueuePrint(FILE *, L_QUEUE *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="lq">[in] - lqueue</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function lqueuePrint(
				ByVal fp as FILE, 
				ByVal lq as L_Queue) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (lq) then Throw New ArgumentNullException  ("lq cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lqueuePrint( fp.Pointer, lq.Pointer)

	Return _Result
End Function

#End Region
#Region "SRC\rank.c"
' SRC\rank.c (147, 1)
' pixRankFilter()
' pixRankFilter(PIX *, l_int32, l_int32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This defines, for each pixel in pixs, a neighborhood of
''' pixels given by a rectangle "centered" on the pixel.
''' This set of wfhf pixels has a distribution of values.
''' For each component, if the values are sorted in increasing
''' order, we choose the component such that rank(wfhf-1)
''' pixels have a lower or equal value and
''' (1-rank)(wfhf-1) pixels have an equal or greater value.
''' (2) See notes in pixRankFilterGray() for further details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 or 32 bpp; no colormap</param>
'''  <param name="wf">[in] - width and height of filter; each is GT= 1</param>
'''  <param name="hf">[in] - width and height of filter; each is GT= 1</param>
'''  <param name="rank">[in] - in [0.0 ... 1.0]</param>
'''   <returns>pixd of rank values, or NULL on error</returns>
Public Shared Function pixRankFilter(
				ByVal pixs as Pix, 
				ByVal wf as Integer, 
				ByVal hf as Integer, 
				ByVal rank as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rank) then Throw New ArgumentNullException  ("rank cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRankFilter( pixs.Pointer, wf, hf, rank)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rank.c (199, 1)
' pixRankFilterRGB()
' pixRankFilterRGB(PIX *, l_int32, l_int32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This defines, for each pixel in pixs, a neighborhood of
''' pixels given by a rectangle "centered" on the pixel.
''' This set of wfhf pixels has a distribution of values.
''' For each component, if the values are sorted in increasing
''' order, we choose the component such that rank(wfhf-1)
''' pixels have a lower or equal value and
''' (1-rank)(wfhf-1) pixels have an equal or greater value.
''' (2) Apply gray rank filtering to each component independently.
''' (3) See notes in pixRankFilterGray() for further details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="wf">[in] - width and height of filter; each is GT= 1</param>
'''  <param name="hf">[in] - width and height of filter; each is GT= 1</param>
'''  <param name="rank">[in] - in [0.0 ... 1.0]</param>
'''   <returns>pixd of rank values, or NULL on error</returns>
Public Shared Function pixRankFilterRGB(
				ByVal pixs as Pix, 
				ByVal wf as Integer, 
				ByVal hf as Integer, 
				ByVal rank as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rank) then Throw New ArgumentNullException  ("rank cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRankFilterRGB( pixs.Pointer, wf, hf, rank)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rank.c (267, 1)
' pixRankFilterGray()
' pixRankFilterGray(PIX *, l_int32, l_int32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This defines, for each pixel in pixs, a neighborhood of
''' pixels given by a rectangle "centered" on the pixel.
''' This set of wfhf pixels has a distribution of values,
''' and if they are sorted in increasing order, we choose
''' the pixel such that rank(wfhf-1) pixels have a lower
''' or equal value and (1-rank)(wfhf-1) pixels have an equal
''' or greater value.
''' (2) By this definition, the rank = 0.0 pixel has the lowest
''' value, and the rank = 1.0 pixel has the highest value.
''' (3) We add mirrored boundary pixels to avoid boundary effects,
''' and put the filter center at (0, 0).
''' (4) This dispatches to grayscale erosion or dilation if the
''' filter dimensions are odd and the rank is 0.0 or 1.0, rsp.
''' (5) Returns a copy if both wf and hf are 1.
''' (6) Uses row-major or column-major incremental updates to the
''' histograms depending on whether hf GT wf or hv LT= wf, rsp.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; no colormap</param>
'''  <param name="wf">[in] - width and height of filter; each is GT= 1</param>
'''  <param name="hf">[in] - width and height of filter; each is GT= 1</param>
'''  <param name="rank">[in] - in [0.0 ... 1.0]</param>
'''   <returns>pixd of rank values, or NULL on error</returns>
Public Shared Function pixRankFilterGray(
				ByVal pixs as Pix, 
				ByVal wf as Integer, 
				ByVal hf as Integer, 
				ByVal rank as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rank) then Throw New ArgumentNullException  ("rank cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp; no colormap")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRankFilterGray( pixs.Pointer, wf, hf, rank)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rank.c (467, 1)
' pixMedianFilter()
' pixMedianFilter(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 or 32 bpp; no colormap</param>
'''  <param name="wf">[in] - width and height of filter; each is GT= 1</param>
'''  <param name="hf">[in] - width and height of filter; each is GT= 1</param>
'''   <returns>pixd of median values, or NULL on error</returns>
Public Shared Function pixMedianFilter(
				ByVal pixs as Pix, 
				ByVal wf as Integer, 
				ByVal hf as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixMedianFilter( pixs.Pointer, wf, hf)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rank.c (502, 1)
' pixRankFilterWithScaling()
' pixRankFilterWithScaling(PIX *, l_int32, l_int32, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a convenience function that downscales, does
''' the rank filtering, and upscales.  Because the down-
''' and up-scaling functions are very fast compared to
''' rank filtering, the time it takes is reduced from that
''' for the simple rank filtering operation by approximately
''' the square of the scaling factor.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 or 32 bpp; no colormap</param>
'''  <param name="wf">[in] - width and height of filter; each is GT= 1</param>
'''  <param name="hf">[in] - width and height of filter; each is GT= 1</param>
'''  <param name="rank">[in] - in [0.0 ... 1.0]</param>
'''  <param name="scalefactor">[in] - scale factor; must be GT= 0.2 and LT= 0.7</param>
'''   <returns>pixd of rank values, or NULL on error</returns>
Public Shared Function pixRankFilterWithScaling(
				ByVal pixs as Pix, 
				ByVal wf as Integer, 
				ByVal hf as Integer, 
				ByVal rank as Single, 
				ByVal scalefactor as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rank) then Throw New ArgumentNullException  ("rank cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRankFilterWithScaling( pixs.Pointer, wf, hf, rank, scalefactor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\rbtree.c"
' SRC\rbtree.c (132, 1)
' l_rbtreeCreate()
' l_rbtreeCreate(l_int32) as L_RBTREE *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="keytype">[in] - defined by an enum for an RB_TYPE union</param>
'''   <returns>rbtree    container with empty ptr to the root</returns>
Public Shared Function l_rbtreeCreate(
				ByVal keytype as Integer) as L_Rbtree



	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_rbtreeCreate( keytype)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree(_Result)
End Function

' SRC\rbtree.c (154, 1)
' l_rbtreeLookup()
' l_rbtreeLookup(L_RBTREE *, RB_TYPE) as RB_TYPE *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="t">[in] - rbtree, including root node</param>
'''  <param name="key">[in] - find a node with this key</param>
'''   <returns>value     a pointer to a union, if the node exists; else NULL</returns>
Public Shared Function l_rbtreeLookup(
				ByVal t as L_Rbtree, 
				ByVal key as Rb_Type) as RB_TYPE

	If IsNothing (t) then Throw New ArgumentNullException  ("t cannot be Nothing")
	If IsNothing (key) then Throw New ArgumentNullException  ("key cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_rbtreeLookup( t.Pointer, key.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new RB_TYPE(_Result)
End Function

' SRC\rbtree.c (181, 1)
' l_rbtreeInsert()
' l_rbtreeInsert(L_RBTREE *, RB_TYPE, RB_TYPE) as void
'''  <summary>
''' Notes
''' (1) If a node with the key already exists, this just updates the value.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="t">[in] - rbtree, including root node</param>
'''  <param name="key">[in] - insert a node with this key, if the key does not already exist in the tree</param>
'''  <param name="value">[in] - typically an int, used for an index</param>
Public Shared Sub l_rbtreeInsert(
				ByVal t as L_Rbtree, 
				ByVal key as Rb_Type, 
				ByVal value as Rb_Type)

	If IsNothing (t) then Throw New ArgumentNullException  ("t cannot be Nothing")
	If IsNothing (key) then Throw New ArgumentNullException  ("key cannot be Nothing")
	If IsNothing (value) then Throw New ArgumentNullException  ("value cannot be Nothing")


	LeptonicaSharp.Natives.l_rbtreeInsert( t.Pointer, key.Pointer, value.Pointer)

End Sub

' SRC\rbtree.c (235, 1)
' l_rbtreeDelete()
' l_rbtreeDelete(L_RBTREE *, RB_TYPE) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="t">[in] - rbtree, including root node</param>
'''  <param name="key">[in] - (delete the node with this key</param>
Public Shared Sub l_rbtreeDelete(
				ByVal t as L_Rbtree, 
				ByVal key as Rb_Type)

	If IsNothing (t) then Throw New ArgumentNullException  ("t cannot be Nothing")
	If IsNothing (key) then Throw New ArgumentNullException  ("key cannot be Nothing")


	LeptonicaSharp.Natives.l_rbtreeDelete( t.Pointer, key.Pointer)

End Sub

' SRC\rbtree.c (283, 1)
' l_rbtreeDestroy()
' l_rbtreeDestroy(L_RBTREE **) as void
'''  <summary>
''' Notes
''' (1) Destroys the tree and nulls the input tree ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pt">[in] - ptr to rbtree</param>
Public Shared Sub l_rbtreeDestroy(
				ByVal pt as List (of L_Rbtree))

	If IsNothing (pt) then Throw New ArgumentNullException  ("pt cannot be Nothing")

	Dim ptPTR As IntPtr = IntPtr.Zero ' : If Not IsNothing(pt) Then ptPTR = pt.Pointer

	LeptonicaSharp.Natives.l_rbtreeDestroy( ptPTR)

End Sub

' SRC\rbtree.c (318, 1)
' l_rbtreeGetFirst()
' l_rbtreeGetFirst(L_RBTREE *) as L_RBTREE_NODE *
'''  <summary>
''' Notes
''' (1) This is the first node in an in-order traversal.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="t">[in] - rbtree, including root node</param>
'''   <returns>void</returns>
Public Shared Function l_rbtreeGetFirst(
				ByVal t as L_Rbtree) as L_Rbtree_Node

	If IsNothing (t) then Throw New ArgumentNullException  ("t cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_rbtreeGetFirst( t.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree_Node(_Result)
End Function

' SRC\rbtree.c (353, 1)
' l_rbtreeGetNext()
' l_rbtreeGetNext(L_RBTREE_NODE *) as L_RBTREE_NODE *
'''  <summary>
''' Notes
''' (1) This finds the next node, in an in-order traversal, from
''' the current node.
''' (2) It is useful as an iterator for a map.
''' (3) Call l_rbtreeGetFirst() to get the first node.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - current node</param>
'''   <returns>next node, or NULL if it's the last node</returns>
Public Shared Function l_rbtreeGetNext(
				ByVal n as L_Rbtree_Node) as L_Rbtree_Node

	If IsNothing (n) then Throw New ArgumentNullException  ("n cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_rbtreeGetNext( n.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree_Node(_Result)
End Function

' SRC\rbtree.c (388, 1)
' l_rbtreeGetLast()
' l_rbtreeGetLast(L_RBTREE *) as L_RBTREE_NODE *
'''  <summary>
''' Notes
''' (1) This is the last node in an in-order traversal.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="t">[in] - rbtree, including root node</param>
'''   <returns>void</returns>
Public Shared Function l_rbtreeGetLast(
				ByVal t as L_Rbtree) as L_Rbtree_Node

	If IsNothing (t) then Throw New ArgumentNullException  ("t cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_rbtreeGetLast( t.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree_Node(_Result)
End Function

' SRC\rbtree.c (423, 1)
' l_rbtreeGetPrev()
' l_rbtreeGetPrev(L_RBTREE_NODE *) as L_RBTREE_NODE *
'''  <summary>
''' Notes
''' (1) This finds the previous node, in an in-order traversal, from
''' the current node.
''' (2) It is useful as an iterator for a map.
''' (3) Call l_rbtreeGetLast() to get the last node.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - current node</param>
'''   <returns>next node, or NULL if it's the first node</returns>
Public Shared Function l_rbtreeGetPrev(
				ByVal n as L_Rbtree_Node) as L_Rbtree_Node

	If IsNothing (n) then Throw New ArgumentNullException  ("n cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_rbtreeGetPrev( n.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree_Node(_Result)
End Function

' SRC\rbtree.c (453, 1)
' l_rbtreeGetCount()
' l_rbtreeGetCount(L_RBTREE *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="t">[in] - rbtree</param>
'''   <returns>count  the number of nodes in the tree, or 0 on error</returns>
Public Shared Function l_rbtreeGetCount(
				ByVal t as L_Rbtree) as Integer

	If IsNothing (t) then Throw New ArgumentNullException  ("t cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_rbtreeGetCount( t.Pointer)

	Return _Result
End Function

' SRC\rbtree.c (486, 1)
' l_rbtreePrint()
' l_rbtreePrint(FILE *, L_RBTREE *) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="t">[in] - rbtree</param>
Public Shared Sub l_rbtreePrint(
				ByVal fp as FILE, 
				ByVal t as L_Rbtree)

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (t) then Throw New ArgumentNullException  ("t cannot be Nothing")


	LeptonicaSharp.Natives.l_rbtreePrint( fp.Pointer, t.Pointer)

End Sub

#End Region
#Region "SRC\readbarcode.c"
' SRC\readbarcode.c (134, 1)
' pixProcessBarcodes()
' pixProcessBarcodes(PIX *, l_int32, l_int32, SARRAY **, l_int32) as SARRAY *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth</param>
'''  <param name="format">[in] - L_BF_ANY, L_BF_CODEI2OF5, L_BF_CODE93, ...</param>
'''  <param name="method">[in] - L_USE_WIDTHS, L_USE_WINDOWS</param>
'''  <param name="psaw">[out][optional] - sarray of bar widths</param>
'''  <param name="debugflag">[in] - use 1 to generate debug output</param>
'''   <returns>sarray text of barcodes, or NULL if none found or on error</returns>
Public Shared Function pixProcessBarcodes(
				ByVal pixs as Pix, 
				ByVal format as Enumerations.L_BF, 
				ByVal method as Enumerations.L_USE_WIS, 
				ByRef psaw as Sarray, 
				ByVal debugflag as Integer) as Sarray

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim psawPTR As IntPtr = IntPtr.Zero : If Not IsNothing(psaw) Then psawPTR = psaw.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixProcessBarcodes( pixs.Pointer, format, method, psawPTR, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing
	if psawPTR <> IntPtr.Zero then psaw = new Sarray(psawPTR)

	Return  new Sarray(_Result)
End Function

' SRC\readbarcode.c (182, 1)
' pixExtractBarcodes()
' pixExtractBarcodes(PIX *, l_int32) as PIXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, no colormap</param>
'''  <param name="debugflag">[in] - use 1 to generate debug output</param>
'''   <returns>pixa deskewed and cropped barcodes, or NULL if none found or on error</returns>
Public Shared Function pixExtractBarcodes(
				ByVal pixs as Pix, 
				ByVal debugflag as Integer) as Pixa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixExtractBarcodes( pixs.Pointer, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\readbarcode.c (254, 1)
' pixReadBarcodes()
' pixReadBarcodes(PIXA *, l_int32, l_int32, SARRAY **, l_int32) as SARRAY *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - of 8 bpp deskewed and cropped barcodes</param>
'''  <param name="format">[in] - L_BF_ANY, L_BF_CODEI2OF5, L_BF_CODE93, ...</param>
'''  <param name="method">[in] - L_USE_WIDTHS, L_USE_WINDOWS;</param>
'''  <param name="psaw">[out][optional] - sarray of bar widths</param>
'''  <param name="debugflag">[in] - use 1 to generate debug output</param>
'''   <returns>sa sarray of widths, one string for each barcode found, or NULL on error</returns>
Public Shared Function pixReadBarcodes(
				ByVal pixa as Pixa, 
				ByVal format as Enumerations.L_BF, 
				ByVal method as Enumerations.L_USE_WIS, 
				ByRef psaw as Sarray, 
				ByVal debugflag as Integer) as Sarray

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")

Dim psawPTR As IntPtr = IntPtr.Zero : If Not IsNothing(psaw) Then psawPTR = psaw.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadBarcodes( pixa.Pointer, format, method, psawPTR, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing
	if psawPTR <> IntPtr.Zero then psaw = new Sarray(psawPTR)

	Return  new Sarray(_Result)
End Function

' SRC\readbarcode.c (335, 1)
' pixReadBarcodeWidths()
' pixReadBarcodeWidths(PIX *, l_int32, l_int32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - of 8 bpp deskewed and cropped barcode</param>
'''  <param name="method">[in] - L_USE_WIDTHS, L_USE_WINDOWS;</param>
'''  <param name="debugflag">[in] - use 1 to generate debug output</param>
'''   <returns>na numa of widths (each in set {1,2,3,4}, or NULL on error</returns>
Public Shared Function pixReadBarcodeWidths(
				ByVal pixs as Pix, 
				ByVal method as Enumerations.L_USE_WIS, 
				ByVal debugflag as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadBarcodeWidths( pixs.Pointer, method, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\readbarcode.c (384, 1)
' pixLocateBarcodes()
' pixLocateBarcodes(PIX *, l_int32, PIX **, PIX **) as BOXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth</param>
'''  <param name="thresh">[in] - for binarization of edge filter output; typ. 20</param>
'''  <param name="ppixb">[out][optional] - binarized edge filtered input image</param>
'''  <param name="ppixm">[out][optional] - mask over barcodes</param>
'''   <returns>boxa location of barcodes, or NULL if none found or on error</returns>
Public Shared Function pixLocateBarcodes(
				ByVal pixs as Pix, 
				ByVal thresh as Integer, 
				ByRef ppixb as Pix, 
				ByRef ppixm as Pix) as Boxa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim ppixbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixb) Then ppixbPTR = ppixb.Pointer
Dim ppixmPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixm) Then ppixmPTR = ppixm.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixLocateBarcodes( pixs.Pointer, thresh, ppixbPTR, ppixmPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixbPTR <> IntPtr.Zero then ppixb = new Pix(ppixbPTR)
	if ppixmPTR <> IntPtr.Zero then ppixm = new Pix(ppixmPTR)

	Return  new Boxa(_Result)
End Function

' SRC\readbarcode.c (500, 1)
' pixDeskewBarcode()
' pixDeskewBarcode(PIX *, PIX *, BOX *, l_int32, l_int32, l_float32 *, l_float32 *) as PIX *
'''  <summary>
''' Notes
''' (1) The (optional) angle returned is the angle in degrees (cw positive)
''' necessary to rotate the image so that it is deskewed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - input image; 8 bpp</param>
'''  <param name="pixb">[in] - binarized edge-filtered input image</param>
'''  <param name="box">[in] - identified region containing barcode</param>
'''  <param name="margin">[in] - of extra pixels around box to extract</param>
'''  <param name="threshold">[in] - for binarization; ~20</param>
'''  <param name="pangle">[out][optional] - in degrees, clockwise is positive</param>
'''  <param name="pconf">[out][optional] - confidence</param>
'''   <returns>pixd deskewed barcode, or NULL on error</returns>
Public Shared Function pixDeskewBarcode(
				ByVal pixs as Pix, 
				ByVal pixb as Pix, 
				ByVal box as Box, 
				ByVal margin as Integer, 
				ByVal threshold as Integer, 
				ByRef pangle as Single(), 
				ByRef pconf as Single()) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixb) then Throw New ArgumentNullException  ("pixb cannot be Nothing")
	If IsNothing (box) then Throw New ArgumentNullException  ("box cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDeskewBarcode( pixs.Pointer, pixb.Pointer, box.Pointer, margin, threshold, pangle, pconf)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\readbarcode.c (626, 1)
' pixExtractBarcodeWidths1()
' pixExtractBarcodeWidths1(PIX *, l_float32, l_float32, NUMA **, NUMA **, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The widths are alternating black/white, starting with black
''' and ending with black.
''' (2) This method uses the widths of the bars directly, in terms
''' of the (float) number of pixels between transitions.
''' The histograms of these widths for black and white bars is
''' generated and interpreted.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - input image; 8 bpp</param>
'''  <param name="thresh">[in] - estimated pixel threshold for crossing white LT--GT black; typ. ~120</param>
'''  <param name="binfract">[in] - histo binsize as a fraction of minsize; e.g., 0.25</param>
'''  <param name="pnaehist">[out][optional] - histogram of black widths; NULL ok</param>
'''  <param name="pnaohist">[out][optional] - histogram of white widths; NULL ok</param>
'''  <param name="debugflag">[in] - use 1 to generate debug output</param>
'''   <returns>nad numa of barcode widths in encoded integer units, or NULL on error</returns>
Public Shared Function pixExtractBarcodeWidths1(
				ByVal pixs as Pix, 
				ByVal thresh as Single, 
				ByVal binfract as Single, 
				ByRef pnaehist as Numa, 
				ByRef pnaohist as Numa, 
				ByVal debugflag as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")
	If IsNothing (binfract) then Throw New ArgumentNullException  ("binfract cannot be Nothing")

Dim pnaehistPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaehist) Then pnaehistPTR = pnaehist.Pointer
Dim pnaohistPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaohist) Then pnaohistPTR = pnaohist.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixExtractBarcodeWidths1( pixs.Pointer, thresh, binfract, pnaehistPTR, pnaohistPTR, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnaehistPTR <> IntPtr.Zero then pnaehist = new Numa(pnaehistPTR)
	if pnaohistPTR <> IntPtr.Zero then pnaohist = new Numa(pnaohistPTR)

	Return  new Numa(_Result)
End Function

' SRC\readbarcode.c (679, 1)
' pixExtractBarcodeWidths2()
' pixExtractBarcodeWidths2(PIX *, l_float32, l_float32 *, NUMA **, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The widths are alternating black/white, starting with black
''' and ending with black.
''' (2) The optional best decoding window width is the width of the window
''' that is used to make a decision about whether a transition occurs.
''' It is approximately the average width in pixels of the narrowest
''' white and black bars (i.e., those corresponding to unit width).
''' (3) The optional return signal %nac is a sequence of 0s, 1s,
''' and perhaps a few 2s, giving the number of crossings in each window.
''' On the occasion where there is a '2', it is interpreted as
''' as ending two runs the previous one and another one that has length 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - input image; 8 bpp</param>
'''  <param name="thresh">[in] - estimated pixel threshold for crossing white LT--GT black; typ. ~120</param>
'''  <param name="pwidth">[out][optional] - best decoding window width, in pixels</param>
'''  <param name="pnac">[out][optional] - number of transitions in each window</param>
'''  <param name="debugflag">[in] - use 1 to generate debug output</param>
'''   <returns>nad numa of barcode widths in encoded integer units, or NULL on error</returns>
Public Shared Function pixExtractBarcodeWidths2(
				ByVal pixs as Pix, 
				ByVal thresh as Single, 
				ByRef pwidth as Single(), 
				ByRef pnac as Numa, 
				ByVal debugflag as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")

Dim pnacPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnac) Then pnacPTR = pnac.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixExtractBarcodeWidths2( pixs.Pointer, thresh, pwidth, pnacPTR, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnacPTR <> IntPtr.Zero then pnac = new Numa(pnacPTR)

	Return  new Numa(_Result)
End Function

' SRC\readbarcode.c (713, 1)
' pixExtractBarcodeCrossings()
' pixExtractBarcodeCrossings(PIX *, l_float32, l_int32) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - input image; 8 bpp</param>
'''  <param name="thresh">[in] - estimated pixel threshold for crossing white LT--GT black; typ. ~120</param>
'''  <param name="debugflag">[in] - use 1 to generate debug output</param>
'''   <returns>numa of crossings, in pixel units, or NULL on error</returns>
Public Shared Function pixExtractBarcodeCrossings(
				ByVal pixs as Pix, 
				ByVal thresh as Single, 
				ByVal debugflag as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixExtractBarcodeCrossings( pixs.Pointer, thresh, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\readbarcode.c (837, 1)
' numaQuantizeCrossingsByWidth()
' numaQuantizeCrossingsByWidth(NUMA *, l_float32, NUMA **, NUMA **, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) This first computes the histogram of black and white bar widths,
''' binned in appropriate units.  There should be well-defined
''' peaks, each corresponding to a specific width.  The sequence
''' of barcode widths (namely, the integers from the set {1,2,3,4})
''' is returned.
''' (2) The optional returned histograms are binned in width units
''' that are inversely proportional to %binfract.  For example,
''' if %binfract = 0.25, there are 4.0 bins in the distance of
''' the width of the narrowest bar.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - numa of crossing locations, in pixel units</param>
'''  <param name="binfract">[in] - histo binsize as a fraction of minsize; e.g., 0.25</param>
'''  <param name="pnaehist">[out][optional] - histo of even (black) bar widths</param>
'''  <param name="pnaohist">[out][optional] - histo of odd (white) bar widths</param>
'''  <param name="debugflag">[in] - 1 to generate plots of histograms of bar widths</param>
'''   <returns>nad sequence of widths, in unit sizes, or NULL on error</returns>
Public Shared Function numaQuantizeCrossingsByWidth(
				ByVal nas as Numa, 
				ByVal binfract as Single, 
				ByRef pnaehist as Numa, 
				ByRef pnaohist as Numa, 
				ByVal debugflag as Integer) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")
	If IsNothing (binfract) then Throw New ArgumentNullException  ("binfract cannot be Nothing")

Dim pnaehistPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaehist) Then pnaehistPTR = pnaehist.Pointer
Dim pnaohistPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaohist) Then pnaohistPTR = pnaohist.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaQuantizeCrossingsByWidth( nas.Pointer, binfract, pnaehistPTR, pnaohistPTR, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnaehistPTR <> IntPtr.Zero then pnaehist = new Numa(pnaehistPTR)
	if pnaohistPTR <> IntPtr.Zero then pnaohist = new Numa(pnaohistPTR)

	Return  new Numa(_Result)
End Function

' SRC\readbarcode.c (1267, 1)
' numaQuantizeCrossingsByWindow()
' numaQuantizeCrossingsByWindow(NUMA *, l_float32, l_float32 *, l_float32 *, NUMA **, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) The minimum size of the window is set by the minimum
''' distance between zero crossings.
''' (2) The optional return signal %nac is a sequence of 0s, 1s,
''' and perhaps a few 2s, giving the number of crossings in each window.
''' On the occasion where there is a '2', it is interpreted as
''' ending two runs the previous one and another one that has length 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nas">[in] - numa of crossing locations</param>
'''  <param name="ratio">[in] - of max window size over min window size in search; typ. 2.0</param>
'''  <param name="pwidth">[out][optional] - best window width</param>
'''  <param name="pfirstloc">[out][optional] - center of window for first xing</param>
'''  <param name="pnac">[out][optional] - array of window crossings (0, 1, 2)</param>
'''  <param name="debugflag">[in] - 1 to generate various plots of intermediate results</param>
'''   <returns>nad sequence of widths, in unit sizes, or NULL on error</returns>
Public Shared Function numaQuantizeCrossingsByWindow(
				ByVal nas as Numa, 
				ByVal ratio as Single, 
				ByRef pwidth as Single(), 
				ByRef pfirstloc as Single(), 
				ByRef pnac as Numa, 
				ByVal debugflag as Integer) as Numa

	If IsNothing (nas) then Throw New ArgumentNullException  ("nas cannot be Nothing")
	If IsNothing (ratio) then Throw New ArgumentNullException  ("ratio cannot be Nothing")

Dim pnacPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnac) Then pnacPTR = pnac.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.numaQuantizeCrossingsByWindow( nas.Pointer, ratio, pwidth, pfirstloc, pnacPTR, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnacPTR <> IntPtr.Zero then pnac = new Numa(pnacPTR)

	Return  new Numa(_Result)
End Function

#End Region
#Region "SRC\readfile.c"
' SRC\readfile.c (123, 1)
' pixaReadFiles()
' pixaReadFiles(const char *, const char *) as PIXA *
'''  <summary>
''' Notes
''' (1) %dirname is the full path for the directory.
''' (2) %substr is the part of the file name (excluding
''' the directory) that is to be matched.  All matching
''' filenames are read into the Pixa.  If substr is NULL,
''' all filenames are read into the Pixa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirname">[in] - </param>
'''  <param name="substr">[in][optional] - substring filter on filenames; can be null</param>
'''   <returns>pixa, or NULL on error</returns>
Public Shared Function pixaReadFiles(
				ByVal dirname as String, 
				ByVal substr as String) as Pixa

	If IsNothing (dirname) then Throw New ArgumentNullException  ("dirname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaReadFiles( dirname, substr)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\readfile.c (150, 1)
' pixaReadFilesSA()
' pixaReadFilesSA(SARRAY *) as PIXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - full pathnames for all files</param>
'''   <returns>pixa, or NULL on error</returns>
Public Shared Function pixaReadFilesSA(
				ByVal sa as Sarray) as Pixa

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaReadFilesSA( sa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\readfile.c (189, 1)
' pixRead()
' pixRead(const char *) as PIX *
'''  <summary>
''' Notes
''' (1) See at top of file for supported formats.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - with full pathname or in local directory</param>
'''   <returns>pix if OK; NULL on error</returns>
Public Shared Function pixRead(
				ByVal filename as String) as Pix

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\readfile.c (225, 1)
' pixReadWithHint()
' pixReadWithHint(const char *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The hint is not binding, but may be used to optimize jpeg decoding.
''' Use 0 for no hinting.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - with full pathname or in local directory</param>
'''  <param name="hint">[in] - bitwise OR of L_HINT_ values for jpeg; use 0 for no hint</param>
'''   <returns>pix if OK; NULL on error</returns>
Public Shared Function pixReadWithHint(
				ByVal filename as String, 
				ByVal hint as Integer) as Pix

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadWithHint( filename, hint)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\readfile.c (276, 1)
' pixReadIndexed()
' pixReadIndexed(SARRAY *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This function is useful for selecting image files from a
''' directory, where the integer %index is embedded into
''' the file name.
''' (2) This is typically done by generating the sarray using
''' getNumberedPathnamesInDirectory(), so that the %index
''' pathname would have the number %index in it.  The size
''' of the sarray should be the largest number (plus 1) appearing
''' in the file names, respecting the constraints in the
''' call to getNumberedPathnamesInDirectory().
''' (3) Consequently, for some indices into the sarray, there may
''' be no pathnames in the directory containing that number.
''' By convention, we place empty C strings ("") in those
''' locations in the sarray, and it is not an error if such
''' a string is encountered and no pix is returned.
''' Therefore, the caller must verify that a pix is returned.
''' (4) See convertSegmentedPagesToPS() in src/psio1.c for an
''' example of usage.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array of full pathnames</param>
'''  <param name="index">[in] - into pathname array</param>
'''   <returns>pix if OK; null if not found</returns>
Public Shared Function pixReadIndexed(
				ByVal sa as Sarray, 
				ByVal index as Integer) as Pix

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadIndexed( sa.Pointer, index)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\readfile.c (317, 1)
' pixReadStream()
' pixReadStream(FILE *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The hint only applies to jpeg.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="hint">[in] - bitwise OR of L_HINT_ values for jpeg; use 0 for no hint</param>
'''   <returns>pix if OK; NULL on error</returns>
Public Shared Function pixReadStream(
				ByVal fp as FILE, 
				ByVal hint as Integer) as Pix

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadStream( fp.Pointer, hint)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\readfile.c (431, 1)
' pixReadHeader()
' pixReadHeader(const char *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This reads the actual headers for jpeg, png, tiff and pnm.
''' For bmp and gif, we cheat and read the entire file into a pix,
''' from which we extract the "header" information.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - with full pathname or in local directory</param>
'''  <param name="pformat">[out][optional] - file format</param>
'''  <param name="pw">[out][optional] - width and height</param>
'''  <param name="ph">[out][optional] - width and height</param>
'''  <param name="pbps">[out][optional] - bits/sample</param>
'''  <param name="pspp">[out][optional] - samples/pixel 1, 3 or 4</param>
'''  <param name="piscmap">[out][optional] - 1 if cmap exists; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixReadHeader(
				ByVal filename as String, 
				ByRef pformat as Integer, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer, 
				ByRef piscmap as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixReadHeader( filename, pformat, pw, ph, pbps, pspp, piscmap)

	Return _Result
End Function

' SRC\readfile.c (568, 1)
' findFileFormat()
' findFileFormat(const char *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pformat">[out] - found format</param>
'''   <returns>0 if OK, 1 on error or if format is not recognized</returns>
Public Shared Function findFileFormat(
				ByVal filename as String, 
				ByRef pformat as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.findFileFormat( filename, pformat)

	Return _Result
End Function

' SRC\readfile.c (603, 1)
' findFileFormatStream()
' findFileFormatStream(FILE *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Important Side effect -- this resets fp to BOF.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pformat">[out] - found format</param>
'''   <returns>0 if OK, 1 on error or if format is not recognized</returns>
Public Shared Function findFileFormatStream(
				ByVal fp as FILE, 
				ByRef pformat as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.findFileFormatStream( fp.Pointer, pformat)

	Return _Result
End Function

' SRC\readfile.c (654, 1)
' findFileFormatBuffer()
' findFileFormatBuffer(const l_uint8 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This determines the file format from the first 12 bytes in
''' the compressed data stream, which are stored in memory.
''' (2) For tiff files, this returns IFF_TIFF.  The specific tiff
''' compression is then determined using findTiffCompression().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="buf">[in] - byte buffer at least 12 bytes in size; we can't check</param>
'''  <param name="pformat">[out] - found format</param>
'''   <returns>0 if OK, 1 on error or if format is not recognized</returns>
Public Shared Function findFileFormatBuffer(
				ByVal buf as Byte(), 
				ByRef pformat as Integer) as Integer

	If IsNothing (buf) then Throw New ArgumentNullException  ("buf cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.findFileFormatBuffer( buf, pformat)

	Return _Result
End Function

' SRC\readfile.c (783, 1)
' fileFormatIsTiff()
' fileFormatIsTiff(FILE *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>1 if file is tiff; 0 otherwise or on error</returns>
Public Shared Function fileFormatIsTiff(
				ByVal fp as FILE) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fileFormatIsTiff( fp.Pointer)

	Return _Result
End Function

' SRC\readfile.c (827, 1)
' pixReadMem()
' pixReadMem(const l_uint8 *, size_t) as PIX *
'''  <summary>
''' Notes
''' (1) This is a variation of pixReadStream(), where the data is read
''' from a memory buffer rather than a file.
''' (2) On windows, this only reads tiff formatted files directly from
''' memory.  For other formats, it writes to a temp file and
''' decompresses from file.
''' (3) findFileFormatBuffer() requires up to 12 bytes to decide on
''' the format.  That determines the constraint here.  But in
''' fact the data must contain the entire compressed string for
''' the image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - const; encoded</param>
'''  <param name="size">[in] - size of data</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as Pix

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\readfile.c (948, 1)
' pixReadHeaderMem()
' pixReadHeaderMem(const l_uint8 *, size_t, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This reads the actual headers for jpeg, png, tiff, jp2k and pnm.
''' For bmp and gif, we cheat and read all the data into a pix,
''' from which we extract the "header" information.
''' (2) The amount of data required depends on the format.  For
''' png, it requires less than 30 bytes, but for jpeg it can
''' require most of the compressed file.  In practice, the data
''' is typically the entire compressed file in memory.
''' (3) findFileFormatBuffer() requires up to 8 bytes to decide on
''' the format, which we require.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - const; encoded</param>
'''  <param name="size">[in] - size of data</param>
'''  <param name="pformat">[out][optional] - image format</param>
'''  <param name="pw">[out][optional] - width and height</param>
'''  <param name="ph">[out][optional] - width and height</param>
'''  <param name="pbps">[out][optional] - bits/sample</param>
'''  <param name="pspp">[out][optional] - samples/pixel 1, 3 or 4</param>
'''  <param name="piscmap">[out][optional] - 1 if cmap exists; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixReadHeaderMem(
				ByVal data as Byte(), 
				ByVal size as UInteger, 
				ByRef pformat as Integer, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer, 
				ByRef piscmap as Integer) as Integer

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixReadHeaderMem( data, size, pformat, pw, ph, pbps, pspp, piscmap)

	Return _Result
End Function

' SRC\readfile.c (1094, 1)
' writeImageFileInfo()
' writeImageFileInfo(const char *, FILE *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) If headeronly == 0 and the image has spp == 4,this will
''' also call pixDisplayLayersRGBA() to display the image
''' in three views.
''' (2) This is a debug function that changes the value of
''' var_PNG_STRIP_16_TO_8 to 1 (the default).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - input file</param>
'''  <param name="fpout">[in] - output file stream</param>
'''  <param name="headeronly">[in] - 1 to read only the header; 0 to read both the header and the input file</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function writeImageFileInfo(
				ByVal filename as String, 
				ByVal fpout as FILE, 
				ByVal headeronly as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (fpout) then Throw New ArgumentNullException  ("fpout cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.writeImageFileInfo( filename, fpout.Pointer, headeronly)

	Return _Result
End Function

' SRC\readfile.c (1262, 1)
' ioFormatTest()
' ioFormatTest(const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This writes and reads a set of output files losslessly
''' in different formats to /tmp/format/, and tests that the
''' result before and after is unchanged.
''' (2) This should work properly on input images of any depth,
''' with and without colormaps.
''' (3) All supported formats are tested for bmp, png, tiff and
''' non-ascii pnm.  Ascii pnm also works (but who'd ever want
''' to use it?)   We allow 2 bpp bmp, although it's not
''' supported elsewhere.  And we don't support reading
''' 16 bpp png, although this can be turned on in pngio.c.
''' (4) This silently skips png or tiff testing if HAVE_LIBPNG
''' or HAVE_LIBTIFF are 0, respectively.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - input file</param>
'''   <returns>0 if OK; 1 on error or if the test fails</returns>
Public Shared Function ioFormatTest(
				ByVal filename as String) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.ioFormatTest( filename)

	Return _Result
End Function

#End Region
#Region "SRC\recogbasic.c"
' SRC\recogbasic.c (232, 1)
' recogCreateFromRecog()
' recogCreateFromRecog(L_RECOG *, l_int32, l_int32, l_int32, l_int32, l_int32) as L_RECOG *
'''  <summary>
''' Notes
''' (1) This is a convenience function that generates a recog using
''' the unscaled training data in an existing recog.
''' (2) It is recommended to use %maxyshift = 1 (the default value)
''' (3) See recogCreate() for use of %scalew, %scaleh and %linew.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recs">[in] - source recog with arbitrary input parameters</param>
'''  <param name="scalew">[in] - scale all widths to this; use 0 otherwise</param>
'''  <param name="scaleh">[in] - scale all heights to this; use 0 otherwise</param>
'''  <param name="linew">[in] - width of normalized strokes; use 0 to skip</param>
'''  <param name="threshold">[in] - for binarization; typically ~128</param>
'''  <param name="maxyshift">[in] - from nominal centroid alignment; default is 1</param>
'''   <returns>recd, or NULL on error</returns>
Public Shared Function recogCreateFromRecog(
				ByVal recs as L_Recog, 
				ByVal scalew as Integer, 
				ByVal scaleh as Integer, 
				ByVal linew as Integer, 
				ByVal threshold as Integer, 
				ByVal maxyshift as Integer) as L_Recog

	If IsNothing (recs) then Throw New ArgumentNullException  ("recs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogCreateFromRecog( recs.Pointer, scalew, scaleh, linew, threshold, maxyshift)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Recog(_Result)
End Function

' SRC\recogbasic.c (279, 1)
' recogCreateFromPixa()
' recogCreateFromPixa(PIXA *, l_int32, l_int32, l_int32, l_int32, l_int32) as L_RECOG *
'''  <summary>
''' Notes
''' (1) This is a convenience function for training from labeled data.
''' The pixa can be read from file.
''' (2) The pixa should contain the unscaled bitmaps used for training.
''' (3) See recogCreate() for use of %scalew, %scaleh and %linew.
''' (4) It is recommended to use %maxyshift = 1 (the default value)
''' (5) All examples in the same class (i.e., with the same character
''' label) should be similar.  They can be made similar by invoking
''' recogRemoveOutliers[1,2]() on %pixa before calling this function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - of labeled, 1 bpp images</param>
'''  <param name="scalew">[in] - scale all widths to this; use 0 otherwise</param>
'''  <param name="scaleh">[in] - scale all heights to this; use 0 otherwise</param>
'''  <param name="linew">[in] - width of normalized strokes; use 0 to skip</param>
'''  <param name="threshold">[in] - for binarization; typically ~150</param>
'''  <param name="maxyshift">[in] - from nominal centroid alignment; default is 1</param>
'''   <returns>recog, or NULL on error</returns>
Public Shared Function recogCreateFromPixa(
				ByVal pixa as Pixa, 
				ByVal scalew as Integer, 
				ByVal scaleh as Integer, 
				ByVal linew as Integer, 
				ByVal threshold as Integer, 
				ByVal maxyshift as Integer) as L_Recog

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogCreateFromPixa( pixa.Pointer, scalew, scaleh, linew, threshold, maxyshift)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Recog(_Result)
End Function

' SRC\recogbasic.c (325, 1)
' recogCreateFromPixaNoFinish()
' recogCreateFromPixaNoFinish(PIXA *, l_int32, l_int32, l_int32, l_int32, l_int32) as L_RECOG *
'''  <summary>
''' Notes
''' (1) See recogCreateFromPixa() for details.
''' (2) This is also used to generate a pixaa with templates
''' in each class within a pixa.  For that, all args except for
''' %pixa are ignored.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - of labeled, 1 bpp images</param>
'''  <param name="scalew">[in] - scale all widths to this; use 0 otherwise</param>
'''  <param name="scaleh">[in] - scale all heights to this; use 0 otherwise</param>
'''  <param name="linew">[in] - width of normalized strokes; use 0 to skip</param>
'''  <param name="threshold">[in] - for binarization; typically ~150</param>
'''  <param name="maxyshift">[in] - from nominal centroid alignment; default is 1</param>
'''   <returns>recog, or NULL on error</returns>
Public Shared Function recogCreateFromPixaNoFinish(
				ByVal pixa as Pixa, 
				ByVal scalew as Integer, 
				ByVal scaleh as Integer, 
				ByVal linew as Integer, 
				ByVal threshold as Integer, 
				ByVal maxyshift as Integer) as L_Recog

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogCreateFromPixaNoFinish( pixa.Pointer, scalew, scaleh, linew, threshold, maxyshift)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Recog(_Result)
End Function

' SRC\recogbasic.c (406, 1)
' recogCreate()
' recogCreate(l_int32, l_int32, l_int32, l_int32, l_int32) as L_RECOG *
'''  <summary>
''' Notes
''' (1) If %scalew == 0 and %scaleh == 0, no scaling is done.
''' If one of these is 0 and the other is GT 0, scaling is isotropic
''' to the requested size.  We typically do not set both GT 0.
''' (2) Use linew GT 0 to convert the templates to images with fixed
''' width strokes.  linew == 0 skips the conversion.
''' (3) The only valid values for %maxyshift are 0, 1 and 2.
''' It is recommended to use %maxyshift == 1 (default value).
''' Using %maxyshift == 0 is much faster than %maxyshift == 1, but
''' it is much less likely to find the template with the best
''' correlation.  Use of anything but 1 results in a warning.
''' (4) Scaling is used for finding outliers and for training a
''' book-adapted recognizer (BAR) from a bootstrap recognizer (BSR).
''' Scaling the height to a fixed value and scaling the width
''' accordingly (e.g., %scaleh = 40, %scalew = 0) is recommended.
''' (5) The storage for most of the arrays is allocated when training
''' is finished.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="scalew">[in] - scale all widths to this; use 0 otherwise</param>
'''  <param name="scaleh">[in] - scale all heights to this; use 0 otherwise</param>
'''  <param name="linew">[in] - width of normalized strokes; use 0 to skip</param>
'''  <param name="threshold">[in] - for binarization; typically ~128; 0 for default</param>
'''  <param name="maxyshift">[in] - from nominal centroid alignment; default is 1</param>
'''   <returns>recog, or NULL on error</returns>
Public Shared Function recogCreate(
				ByVal scalew as Integer, 
				ByVal scaleh as Integer, 
				ByVal linew as Integer, 
				ByVal threshold as Integer, 
				ByVal maxyshift as Integer) as L_Recog



	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogCreate( scalew, scaleh, linew, threshold, maxyshift)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Recog(_Result)
End Function

' SRC\recogbasic.c (476, 1)
' recogDestroy()
' recogDestroy(L_RECOG **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="precog">[in,out] - will be set to null before returning</param>
Public Shared Sub recogDestroy(
				ByRef precog as L_Recog)


	Dim precogPTR As IntPtr = IntPtr.Zero : If Not IsNothing(precog) Then precogPTR = precog.Pointer

	LeptonicaSharp.Natives.recogDestroy( precogPTR)
	if precogPTR <> IntPtr.Zero then precog = new L_Recog(precogPTR)

End Sub

' SRC\recogbasic.c (529, 1)
' recogGetCount()
' recogGetCount(L_RECOG *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''   <returns>count of classes in recog; 0 if no recog or on error</returns>
Public Shared Function recogGetCount(
				ByVal recog as L_Recog) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.recogGetCount( recog.Pointer)

	Return _Result
End Function

' SRC\recogbasic.c (567, 1)
' recogSetParams()
' recogSetParams(L_RECOG *, l_int32, l_int32, l_float32, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This is called when a recog is created.
''' (2) Default %min_nopad value allows for some padding.
''' To disable padding, set %min_nopad = 0.  To pad only when
''' no samples are available for the class, set %min_nopad = 1.
''' (3) The %max_wh_ratio limits the width/height ratio for components
''' that we attempt to split.  Splitting long components is expensive.
''' (4) The %max_ht_ratio is a quality requirement on the training data.
''' The recognizer will not run if the averages are computed and
''' the templates do not satisfy it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - to be padded, if necessary</param>
'''  <param name="type">[in] - type of char set; -1 for default; see enum in recog.h</param>
'''  <param name="min_nopad">[in] - min number in a class without padding; use -1 for default</param>
'''  <param name="max_wh_ratio">[in] - max width/height ratio allowed for splitting; use -1.0 for default</param>
'''  <param name="max_ht_ratio">[in] - max of max/min averaged template height ratio; use -1.0 for default</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogSetParams(
				ByVal recog as L_Recog, 
				ByVal type as Integer, 
				ByVal min_nopad as Integer, 
				ByVal max_wh_ratio as Single, 
				ByVal max_ht_ratio as Single) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (max_wh_ratio) then Throw New ArgumentNullException  ("max_wh_ratio cannot be Nothing")
	If IsNothing (max_ht_ratio) then Throw New ArgumentNullException  ("max_ht_ratio cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.recogSetParams( recog.Pointer, type, min_nopad, max_wh_ratio, max_ht_ratio)

	Return _Result
End Function

' SRC\recogbasic.c (650, 1)
' recogGetClassIndex()
' recogGetClassIndex(L_RECOG *, l_int32, char *, l_int32 *) as l_int32
'''  <summary>
''' Notes
''' (1) This is used during training.  There is one entry in
''' recog-GTdna_tochar (integer value, e.g., ascii) and
''' one in recog-GTsa_text (e.g, ascii letter in a string)
''' for each character class.
''' (2) This searches the dna character array for %val.  If it is
''' not found, the template represents a character class not
''' already seen it increments setsize (the number of character
''' classes) by 1, and augments both the index (dna_tochar)
''' and text (sa_text) arrays.
''' (3) Returns the index in index, except on error.
''' (4) Caller must check the function return value.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - with LUT's pre-computed</param>
'''  <param name="val">[in] - integer value; can be up to 3 bytes for UTF-8</param>
'''  <param name="text">[in] - text from which %val was derived; used if not found</param>
'''  <param name="pindex">[out] - index into dna_tochar</param>
'''   <returns>0 if found; 1 if not found and added; 2 on error.</returns>
Public Shared Function recogGetClassIndex(
				ByVal recog as L_Recog, 
				ByVal val as Integer, 
				ByVal text as String, 
				ByRef pindex as Integer) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (text) then Throw New ArgumentNullException  ("text cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.recogGetClassIndex( recog.Pointer, val, text, pindex)

	Return _Result
End Function

' SRC\recogbasic.c (695, 1)
' recogStringToIndex()
' recogStringToIndex(L_RECOG *, char *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''  <param name="text">[in] - text string for some class</param>
'''  <param name="pindex">[out] - index for that class; -1 if not found</param>
'''   <returns>0 if OK, 1 on error not finding the string is an error</returns>
Public Shared Function recogStringToIndex(
				ByVal recog as L_Recog, 
				ByVal text as String, 
				ByRef pindex as Integer) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (text) then Throw New ArgumentNullException  ("text cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.recogStringToIndex( recog.Pointer, text, pindex)

	Return _Result
End Function

' SRC\recogbasic.c (748, 1)
' recogGetClassString()
' recogGetClassString(L_RECOG *, l_int32, char **) as l_int32
'''  <summary>
''' Notes
''' (1) Extracts a copy of the string from sa_text, which
''' the caller must free.
''' (2) Caller must check the function return value.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''  <param name="index">[in] - into array of char types</param>
'''  <param name="pcharstr">[out] - string representation; returns an empty string on error</param>
'''   <returns>0 if found, 1 on error</returns>
Public Shared Function recogGetClassString(
				ByVal recog as L_Recog, 
				ByVal index as Integer, 
				ByRef pcharstr as String()) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")

Dim pcharstrPTR As IntPtr = pcharstrPTR = Marshal.AllocHGlobal(Marshal.sizeOf(pcharstr.toArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.recogGetClassString( recog.Pointer, index, pcharstrPTR)

	Return _Result
End Function

' SRC\recogbasic.c (778, 1)
' l_convertCharstrToInt()
' l_convertCharstrToInt(const char *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="str">[in] - input string representing one UTF-8 character; not more than 4 bytes</param>
'''  <param name="pval">[out] - integer value for the input.  Think of it as a 1-to-1 hash code.</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_convertCharstrToInt(
				ByVal str as String, 
				ByRef pval as Integer) as Integer

	If IsNothing (str) then Throw New ArgumentNullException  ("str cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_convertCharstrToInt( str, pval)

	Return _Result
End Function

' SRC\recogbasic.c (837, 1)
' recogRead()
' recogRead(const char *) as L_RECOG *
'''  <summary>
''' Notes
''' (1) When a recog is serialized, a pixaa of the templates that are
''' actually used for correlation is saved in the pixaa_u array
''' of the recog.  These can be different from the templates that
''' were used to generate the recog, because those original templates
''' can be scaled and turned into normalized lines.  When recog1
''' is deserialized to recog2, these templates are put in both the
''' unscaled array (pixaa_u) and the modified array (pixaa) in recog2.
''' Why not put it in only the unscaled array and let
''' recogTrainingFinalized() regenerate the modified templates?
''' The reason is that with normalized lines, the operation of
''' thinning to a skeleton and dilating back to a fixed width
''' is not idempotent.  Thinning to a skeleton saves pixels at
''' the end of a line segment, and thickening the skeleton puts
''' additional pixels at the end of the lines.  This tends to
''' close gaps.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>recog, or NULL on error</returns>
Public Shared Function recogRead(
				ByVal filename as String) as L_Recog

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Recog(_Result)
End Function

' SRC\recogbasic.c (866, 1)
' recogReadStream()
' recogReadStream(FILE *) as L_RECOG *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>recog, or NULL on error</returns>
Public Shared Function recogReadStream(
				ByVal fp as FILE) as L_Recog

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Recog(_Result)
End Function

' SRC\recogbasic.c (951, 1)
' recogReadMem()
' recogReadMem(const l_uint8 *, size_t) as L_RECOG *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - serialization of recog (not ascii)</param>
'''  <param name="size">[in] - of data in bytes</param>
'''   <returns>recog, or NULL on error</returns>
Public Shared Function recogReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as L_Recog

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Recog(_Result)
End Function

' SRC\recogbasic.c (988, 1)
' recogWrite()
' recogWrite(const char *, L_RECOG *) as l_ok
'''  <summary>
''' Notes
''' (1) The pixaa of templates that is written is the modified one
''' in the pixaa field. It is the pixaa that is actually used
''' for correlation. This is not the unscaled array of labeled
''' bitmaps, in pixaa_u, that was used to generate the recog in the
''' first place.  See the notes in recogRead() for the rationale.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="recog">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogWrite(
				ByVal filename as String, 
				ByVal recog as L_Recog) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.recogWrite( filename, recog.Pointer)

	Return _Result
End Function

' SRC\recogbasic.c (1019, 1)
' recogWriteStream()
' recogWriteStream(FILE *, L_RECOG *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for "wb"</param>
'''  <param name="recog">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogWriteStream(
				ByVal fp as FILE, 
				ByVal recog as L_Recog) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.recogWriteStream( fp.Pointer, recog.Pointer)

	Return _Result
End Function

' SRC\recogbasic.c (1060, 1)
' recogWriteMem()
' recogWriteMem(l_uint8 **, size_t *, L_RECOG *) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a recog in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized recog (not ascii)</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="recog">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal recog as L_Recog) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.recogWriteMem( pdataPTR, psize, recog.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\recogbasic.c (1114, 1)
' recogExtractPixa()
' recogExtractPixa(L_RECOG *) as PIXA *
'''  <summary>
''' Notes
''' (1) This generates a pixa of all the unscaled images in the
''' recognizer, where each one has its character class label in
''' the pix text field, by flattening pixaa_u to a pixa.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''   <returns>pixa if OK, NULL on error</returns>
Public Shared Function recogExtractPixa(
				ByVal recog as L_Recog) as Pixa

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogExtractPixa( recog.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

#End Region
#Region "SRC\recogdid.c"
' SRC\recogdid.c (215, 1)
' recogDecode()
' recogDecode(L_RECOG *, PIX *, l_int32, PIX **) as BOXA *
'''  <summary>
''' Notes
''' (1) The input pixs has been filtered so that it is likely to be
''' composed of more than one touching character.  Specifically,
''' its height can only slightly exceed that of the tallest
''' unscaled template, the width is somewhat larger than the
''' width of the widest unscaled template, and the w/h aspect ratio
''' is bounded by max_wh_ratio.
''' (2) This uses the DID mechanism with labeled templates to
''' segment the input %pixs.  The resulting segmentation is
''' returned.  (It is given by did-GTboxa).
''' (3) In debug mode, the Viterbi path is rescored based on all
''' the templates.  In non-debug mode, the same procedure is
''' carried out by recogIdentifyPix() on the result of the
''' segmentation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - with LUT's pre-computed</param>
'''  <param name="pixs">[in] - typically of multiple touching characters, 1 bpp</param>
'''  <param name="nlevels">[in] - of templates; 2 for now</param>
'''  <param name="ppixdb">[out][optional] - debug result; can be null</param>
'''   <returns>boxa  segmentation of pixs into characters, or NULL on error</returns>
Public Shared Function recogDecode(
				ByVal recog as L_Recog, 
				ByVal pixs as Pix, 
				ByVal nlevels as Integer, 
				ByRef ppixdb as Pix) as Boxa

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim ppixdbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdb) Then ppixdbPTR = ppixdb.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogDecode( recog.Pointer, pixs.Pointer, nlevels, ppixdbPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixdbPTR <> IntPtr.Zero then ppixdb = new Pix(ppixdbPTR)

	Return  new Boxa(_Result)
End Function

' SRC\recogdid.c (747, 1)
' recogCreateDid()
' recogCreateDid(L_RECOG *, PIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''  <param name="pixs">[in] - of 1 bpp image to match</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogCreateDid(
				ByVal recog as L_Recog, 
				ByVal pixs as Pix) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.recogCreateDid( recog.Pointer, pixs.Pointer)

	Return _Result
End Function

' SRC\recogdid.c (818, 1)
' recogDestroyDid()
' recogDestroyDid(L_RECOG *) as l_ok
'''  <summary>
''' Notes
''' (1) As the signature indicates, this is owned by the recog, and can
''' only be destroyed using this function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogDestroyDid(
				ByVal recog as L_Recog) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.recogDestroyDid( recog.Pointer)

	Return _Result
End Function

' SRC\recogdid.c (874, 1)
' recogDidExists()
' recogDidExists(L_RECOG *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''   <returns>1 if recog-GTdid exists; 0 if not or on error.</returns>
Public Shared Function recogDidExists(
				ByVal recog as L_Recog) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.recogDidExists( recog.Pointer)

	Return _Result
End Function

' SRC\recogdid.c (896, 1)
' recogGetDid()
' recogGetDid(L_RECOG *) as L_RDID *
'''  <summary>
''' Notes
''' (1) This also makes sure the arrays are defined.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''   <returns>did still owned by the recog, or NULL on error</returns>
Public Shared Function recogGetDid(
				ByVal recog as L_Recog) as L_Rdid

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogGetDid( recog.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rdid(_Result)
End Function

' SRC\recogdid.c (1005, 1)
' recogSetChannelParams()
' recogSetChannelParams(L_RECOG *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This converts the independent bit-flip probabilities in the
''' "channel" into log-likelihood coefficients on image sums.
''' These coefficients are only defined for the non-background
''' template levels.  Thus for nlevels = 2 (one fg, one bg),
''' only beta[1] and gamma[1] are used.  For nlevels = 4 (three
''' fg templates), we use beta[1-3] and gamma[1-3].
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''  <param name="nlevels">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogSetChannelParams(
				ByVal recog as L_Recog, 
				ByVal nlevels as Integer) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.recogSetChannelParams( recog.Pointer, nlevels)

	Return _Result
End Function

#End Region
#Region "SRC\recogident.c"
' SRC\recogident.c (158, 1)
' recogIdentifyMultiple()
' recogIdentifyMultiple(L_RECOG *, PIX *, l_int32, l_int32, BOXA **, PIXA **, PIX **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This filters the input pixa and calls recogIdentifyPixa()
''' (2) Splitting is relatively slow, because it tries to match all
''' character templates to all locations.  This step can be skipped.
''' (3) An attempt is made to order the (optionally) returned images
''' and boxes in 2-dimensional sorted order.  These can then
''' be used to aggregate identified characters into numbers or words.
''' One typically wants the pixa, which contains a boxa of the
''' extracted subimages.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - with training finished</param>
'''  <param name="pixs">[in] - containing typically a small number of characters</param>
'''  <param name="minh">[in] - remove shorter components; use 0 for default</param>
'''  <param name="skipsplit">[in] - 1 to skip the splitting step</param>
'''  <param name="pboxa">[out][optional] - locations of identified components</param>
'''  <param name="ppixa">[out][optional] - images of identified components</param>
'''  <param name="ppixdb">[out][optional] - debug pix inputs and best fits</param>
'''  <param name="debugsplit">[in] - 1 returns pix split debugging images</param>
'''   <returns>0 if OK; 1 if nothing is found; 2 for other errors.</returns>
Public Shared Function recogIdentifyMultiple(
				ByVal recog as L_Recog, 
				ByVal pixs as Pix, 
				ByVal minh as Integer, 
				ByVal skipsplit as Integer, 
				ByRef pboxa as Boxa, 
				ByRef ppixa as Pixa, 
				ByRef ppixdb as Pix, 
				ByVal debugsplit as Integer) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer
Dim ppixaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixa) Then ppixaPTR = ppixa.Pointer
Dim ppixdbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdb) Then ppixdbPTR = ppixdb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.recogIdentifyMultiple( recog.Pointer, pixs.Pointer, minh, skipsplit, pboxaPTR, ppixaPTR, ppixdbPTR, debugsplit)
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)
	if ppixaPTR <> IntPtr.Zero then ppixa = new Pixa(ppixaPTR)
	if ppixdbPTR <> IntPtr.Zero then ppixdb = new Pix(ppixdbPTR)

	Return _Result
End Function

' SRC\recogident.c (246, 1)
' recogSplitIntoCharacters()
' recogSplitIntoCharacters(L_RECOG *, PIX *, l_int32, l_int32, BOXA **, PIXA **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This can be given an image that has an arbitrary number
''' of text characters.  It optionally splits connected
''' components based on document image decoding in recogDecode().
''' The returned pixa includes the boxes from which the
''' (possibly split) components are extracted.
''' (2) After noise filtering, the resulting components are put in
''' row-major (2D) order, and the smaller of overlapping
''' components are removed if they satisfy conditions of
''' relative size and fractional overlap.
''' (3) Note that the splitting function uses unscaled templates
''' and does not bother returning the class results and scores.
''' These are more accurately found later using the scaled templates.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''  <param name="pixs">[in] - 1 bpp, contains only mostly deskewed text</param>
'''  <param name="minh">[in] - remove shorter components; use 0 for default</param>
'''  <param name="skipsplit">[in] - 1 to skip the splitting step</param>
'''  <param name="pboxa">[out] - character bounding boxes</param>
'''  <param name="ppixa">[out] - character images</param>
'''  <param name="debug">[in] - 1 for results written to pixadb_split</param>
'''   <returns>0 if OK, 1 on error or if no components are returned</returns>
Public Shared Function recogSplitIntoCharacters(
				ByVal recog as L_Recog, 
				ByVal pixs as Pix, 
				ByVal minh as Integer, 
				ByVal skipsplit as Integer, 
				ByRef pboxa as Boxa, 
				ByRef ppixa as Pixa, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer
	Dim ppixaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixa) Then ppixaPTR = ppixa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.recogSplitIntoCharacters( recog.Pointer, pixs.Pointer, minh, skipsplit, pboxaPTR, ppixaPTR, debug)
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)
	if ppixaPTR <> IntPtr.Zero then ppixa = new Pixa(ppixaPTR)

	Return _Result
End Function

' SRC\recogident.c (401, 1)
' recogCorrelationBestRow()
' recogCorrelationBestRow(L_RECOG *, PIX *, BOXA **, NUMA **, NUMA **, SARRAY **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Supervises character matching for (in general) a c.c with
''' multiple touching characters.  Finds the best match greedily.
''' Rejects small parts that are left over after splitting.
''' (2) Matching is to the average, and without character scaling.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - with LUT's pre-computed</param>
'''  <param name="pixs">[in] - typically of multiple touching characters, 1 bpp</param>
'''  <param name="pboxa">[out] - bounding boxs of best fit character</param>
'''  <param name="pnascore">[out][optional] - correlation scores</param>
'''  <param name="pnaindex">[out][optional] - indices of classes</param>
'''  <param name="psachar">[out][optional] - array of character strings</param>
'''  <param name="debug">[in] - 1 for results written to pixadb_split</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogCorrelationBestRow(
				ByVal recog as L_Recog, 
				ByVal pixs as Pix, 
				ByRef pboxa as Boxa, 
				ByRef pnascore as Numa, 
				ByRef pnaindex as Numa, 
				ByRef psachar as Sarray, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pboxaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pboxa) Then pboxaPTR = pboxa.Pointer
Dim pnascorePTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnascore) Then pnascorePTR = pnascore.Pointer
Dim pnaindexPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaindex) Then pnaindexPTR = pnaindex.Pointer
Dim psacharPTR As IntPtr = IntPtr.Zero : If Not IsNothing(psachar) Then psacharPTR = psachar.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.recogCorrelationBestRow( recog.Pointer, pixs.Pointer, pboxaPTR, pnascorePTR, pnaindexPTR, psacharPTR, debug)
	if pboxaPTR <> IntPtr.Zero then pboxa = new Boxa(pboxaPTR)
	if pnascorePTR <> IntPtr.Zero then pnascore = new Numa(pnascorePTR)
	if pnaindexPTR <> IntPtr.Zero then pnaindex = new Numa(pnaindexPTR)
	if psacharPTR <> IntPtr.Zero then psachar = new Sarray(psacharPTR)

	Return _Result
End Function

' SRC\recogident.c (583, 1)
' recogCorrelationBestChar()
' recogCorrelationBestChar(L_RECOG *, PIX *, BOX **, l_float32 *, l_int32 *, char **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) Basic matching character splitter.  Finds the best match among
''' all templates to some region of the image.  This can result
''' in splitting the image into two parts.  This is "image decoding"
''' without dynamic programming, because we don't use a setwidth
''' and compute the best matching score for the entire image.
''' (2) Matching is to the average templates, without character scaling.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - with LUT's pre-computed</param>
'''  <param name="pixs">[in] - can be of multiple touching characters, 1 bpp</param>
'''  <param name="pbox">[out] - bounding box of best fit character</param>
'''  <param name="pscore">[out] - correlation score</param>
'''  <param name="pindex">[out][optional] - index of class</param>
'''  <param name="pcharstr">[out][optional] - character string of class</param>
'''  <param name="ppixdb">[out][optional] - debug pix showing input and best fit</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogCorrelationBestChar(
				ByVal recog as L_Recog, 
				ByVal pixs as Pix, 
				ByRef pbox as Box, 
				ByRef pscore as Single(), 
				ByRef pindex as Integer, 
				ByRef pcharstr as String(), 
				ByRef ppixdb as Pix) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pboxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbox) Then pboxPTR = pbox.Pointer
Dim pcharstrPTR As IntPtr = pcharstrPTR = Marshal.AllocHGlobal(Marshal.sizeOf(pcharstr.toArray))
Dim ppixdbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdb) Then ppixdbPTR = ppixdb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.recogCorrelationBestChar( recog.Pointer, pixs.Pointer, pboxPTR, pscore, pindex, pcharstrPTR, ppixdbPTR)
	if pboxPTR <> IntPtr.Zero then pbox = new Box(pboxPTR)
	if ppixdbPTR <> IntPtr.Zero then ppixdb = new Pix(ppixdbPTR)

	Return _Result
End Function

' SRC\recogident.c (878, 1)
' recogIdentifyPixa()
' recogIdentifyPixa(L_RECOG *, PIXA *, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This should be called by recogIdentifyMuliple(), which
''' binarizes and splits characters before sending %pixa here.
''' (2) This calls recogIdentifyPix(), which does the same operation
''' on each pix in %pixa, and optionally returns the arrays
''' of results (scores, class index and character string)
''' for the best correlation match.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''  <param name="pixa">[in] - of 1 bpp images to match</param>
'''  <param name="ppixdb">[out][optional] - pix showing inputs and best fits</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogIdentifyPixa(
				ByVal recog as L_Recog, 
				ByVal pixa as Pixa, 
				ByRef ppixdb as Pix) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")

Dim ppixdbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdb) Then ppixdbPTR = ppixdb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.recogIdentifyPixa( recog.Pointer, pixa.Pointer, ppixdbPTR)
	if ppixdbPTR <> IntPtr.Zero then ppixdb = new Pix(ppixdbPTR)

	Return _Result
End Function

' SRC\recogident.c (971, 1)
' recogIdentifyPix()
' recogIdentifyPix(L_RECOG *, PIX *, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) Basic recognition function for a single character.
''' (2) If templ_use == L_USE_ALL_TEMPLATES, which is the default
''' situation, matching is attempted to every bitmap in the recog,
''' and the identify of the best match is returned.
''' (3) For finding outliers, templ_use == L_USE_AVERAGE_TEMPLATES, and
''' matching is only attemplted to the averaged bitmaps.  For this
''' case, the index of the bestsample is meaningless (0 is returned
''' if requested).
''' (4) The score is related to the confidence (probability of correct
''' identification), in that a higher score is correlated with
''' a higher probability.  However, the actual relation between
''' the correlation (score) and the probability is not known;
''' we call this a "score" because "confidence" can be misinterpreted
''' as an actual probability.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - with LUT's pre-computed</param>
'''  <param name="pixs">[in] - of a single character, 1 bpp</param>
'''  <param name="ppixdb">[out][optional] - debug pix showing input and best fit</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogIdentifyPix(
				ByVal recog as L_Recog, 
				ByVal pixs as Pix, 
				ByRef ppixdb as Pix) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim ppixdbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdb) Then ppixdbPTR = ppixdb.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.recogIdentifyPix( recog.Pointer, pixs.Pointer, ppixdbPTR)
	if ppixdbPTR <> IntPtr.Zero then ppixdb = new Pix(ppixdbPTR)

	Return _Result
End Function

' SRC\recogident.c (1120, 1)
' recogSkipIdentify()
' recogSkipIdentify(L_RECOG *) as l_ok
'''  <summary>
''' Notes
''' (1) This just writes a "dummy" result with 0 score and empty
''' string id into the rch.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogSkipIdentify(
				ByVal recog as L_Recog) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.recogSkipIdentify( recog.Pointer)

	Return _Result
End Function

' SRC\recogident.c (1168, 1)
' rchaDestroy()
' rchaDestroy(L_RCHA **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="prcha">[in,out] - to be nulled</param>
Public Shared Sub rchaDestroy(
				ByRef prcha as L_Rcha)


	Dim prchaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(prcha) Then prchaPTR = prcha.Pointer

	LeptonicaSharp.Natives.rchaDestroy( prchaPTR)
	if prchaPTR <> IntPtr.Zero then prcha = new L_Rcha(prchaPTR)

End Sub

' SRC\recogident.c (1242, 1)
' rchDestroy()
' rchDestroy(L_RCH **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="prch">[in,out] - to be nulled</param>
Public Shared Sub rchDestroy(
				ByRef prch as L_Rch)


	Dim prchPTR As IntPtr = IntPtr.Zero : If Not IsNothing(prch) Then prchPTR = prch.Pointer

	LeptonicaSharp.Natives.rchDestroy( prchPTR)
	if prchPTR <> IntPtr.Zero then prch = new L_Rch(prchPTR)

End Sub

' SRC\recogident.c (1281, 1)
' rchaExtract()
' rchaExtract(L_RCHA *, NUMA **, NUMA **, SARRAY **, NUMA **, NUMA **, NUMA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) This returns clones of the number and string arrays.  They must
''' be destroyed by the caller.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rcha">[in] - </param>
'''  <param name="pnaindex">[out][optional] - indices of best templates</param>
'''  <param name="pnascore">[out][optional] - correl scores of best templates</param>
'''  <param name="psatext">[out][optional] - character strings of best templates</param>
'''  <param name="pnasample">[out][optional] - indices of best samples</param>
'''  <param name="pnaxloc">[out][optional] - x-locations of templates</param>
'''  <param name="pnayloc">[out][optional] - y-locations of templates</param>
'''  <param name="pnawidth">[out][optional] - widths of best templates</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function rchaExtract(
				ByVal rcha as L_Rcha, 
				ByRef pnaindex as Numa, 
				ByRef pnascore as Numa, 
				ByRef psatext as Sarray, 
				ByRef pnasample as Numa, 
				ByRef pnaxloc as Numa, 
				ByRef pnayloc as Numa, 
				ByRef pnawidth as Numa) as Integer

	If IsNothing (rcha) then Throw New ArgumentNullException  ("rcha cannot be Nothing")

Dim pnaindexPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaindex) Then pnaindexPTR = pnaindex.Pointer
Dim pnascorePTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnascore) Then pnascorePTR = pnascore.Pointer
Dim psatextPTR As IntPtr = IntPtr.Zero : If Not IsNothing(psatext) Then psatextPTR = psatext.Pointer
Dim pnasamplePTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnasample) Then pnasamplePTR = pnasample.Pointer
Dim pnaxlocPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaxloc) Then pnaxlocPTR = pnaxloc.Pointer
Dim pnaylocPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnayloc) Then pnaylocPTR = pnayloc.Pointer
Dim pnawidthPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnawidth) Then pnawidthPTR = pnawidth.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.rchaExtract( rcha.Pointer, pnaindexPTR, pnascorePTR, psatextPTR, pnasamplePTR, pnaxlocPTR, pnaylocPTR, pnawidthPTR)
	if pnaindexPTR <> IntPtr.Zero then pnaindex = new Numa(pnaindexPTR)
	if pnascorePTR <> IntPtr.Zero then pnascore = new Numa(pnascorePTR)
	if psatextPTR <> IntPtr.Zero then psatext = new Sarray(psatextPTR)
	if pnasamplePTR <> IntPtr.Zero then pnasample = new Numa(pnasamplePTR)
	if pnaxlocPTR <> IntPtr.Zero then pnaxloc = new Numa(pnaxlocPTR)
	if pnaylocPTR <> IntPtr.Zero then pnayloc = new Numa(pnaylocPTR)
	if pnawidthPTR <> IntPtr.Zero then pnawidth = new Numa(pnawidthPTR)

	Return _Result
End Function

' SRC\recogident.c (1327, 1)
' rchExtract()
' rchExtract(L_RCH *, l_int32 *, l_float32 *, char **, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rch">[in] - </param>
'''  <param name="pindex">[out][optional] - index of best template</param>
'''  <param name="pscore">[out][optional] - correlation score of best template</param>
'''  <param name="ptext">[out][optional] - character string of best template</param>
'''  <param name="psample">[out][optional] - index of best sample</param>
'''  <param name="pxloc">[out][optional] - x-location of template</param>
'''  <param name="pyloc">[out][optional] - y-location of template</param>
'''  <param name="pwidth">[out][optional] - width of best template</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function rchExtract(
				ByVal rch as L_Rch, 
				ByRef pindex as Integer, 
				ByRef pscore as Single(), 
				ByRef ptext as String(), 
				ByRef psample as Integer, 
				ByRef pxloc as Integer, 
				ByRef pyloc as Integer, 
				ByRef pwidth as Integer) as Integer

	If IsNothing (rch) then Throw New ArgumentNullException  ("rch cannot be Nothing")

Dim ptextPTR As IntPtr = ptextPTR = Marshal.AllocHGlobal(Marshal.sizeOf(ptext.toArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.rchExtract( rch.Pointer, pindex, pscore, ptextPTR, psample, pxloc, pyloc, pwidth)

	Return _Result
End Function

' SRC\recogident.c (1415, 1)
' recogProcessToIdentify()
' recogProcessToIdentify(L_RECOG *, PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a lightweight operation to insure that the input
''' image is 1 bpp, properly cropped, and padded on each side.
''' If bpp GT 1, the image is thresholded.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - with LUT's pre-computed</param>
'''  <param name="pixs">[in] - typ. single character, possibly d GT 1 and uncropped</param>
'''  <param name="pad">[in] - extra pixels added to left and right sides</param>
'''   <returns>pixd 1 bpp, clipped to foreground, or NULL if there are no fg pixels or on error.</returns>
Public Shared Function recogProcessToIdentify(
				ByVal recog as L_Recog, 
				ByVal pixs as Pix, 
				ByVal pad as Integer) as Pix

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogProcessToIdentify( recog.Pointer, pixs.Pointer, pad)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\recogident.c (1628, 1)
' recogExtractNumbers()
' recogExtractNumbers(L_RECOG *, BOXA *, l_float32, l_int32, BOXAA **, NUMAA **) as SARRAY *
'''  <summary>
''' Notes
''' (1) This extracts digit data after recogaIdentifyMultiple() or
''' lower-level identification has taken place.
''' (2) Each string in the returned sa contains a sequence of ascii
''' digits in a number.
''' (3) The horizontal distance between boxes (limited by %spacethresh)
''' is the negative of the horizontal overlap.
''' (4) Components with a score less than %scorethresh, which may
''' be hyphens or other small characters, will signal the
''' end of the current sequence of digits in the number.  A typical
''' value for %scorethresh is 0.60.
''' (5) We allow two digits to be combined if these conditions apply
''' (a) the first is to the left of the second
''' (b) the second has a horizontal separation less than %spacethresh
''' (c) the vertical overlap GT= 0 (vertical separation LT 0)
''' (d) both have a score that exceeds %scorethresh
''' (6) Each numa in the optionally returned naa contains the digit
''' scores of a number.  Each boxa in the optionally returned baa
''' contains the bounding boxes of the digits in the number.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''  <param name="boxas">[in] - location of components</param>
'''  <param name="scorethresh">[in] - min score for which we accept a component</param>
'''  <param name="spacethresh">[in] - max horizontal distance allowed between digits, use -1 for default</param>
'''  <param name="pbaa">[out][optional] - bounding boxes of identified numbers</param>
'''  <param name="pnaa">[out][optional] - scores of identified digits</param>
'''   <returns>sa of identified numbers, or NULL on error</returns>
Public Shared Function recogExtractNumbers(
				ByVal recog as L_Recog, 
				ByVal boxas as Boxa, 
				ByVal scorethresh as Single, 
				ByVal spacethresh as Integer, 
				ByRef pbaa as Boxaa, 
				ByRef pnaa as Numaa) as Sarray

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (boxas) then Throw New ArgumentNullException  ("boxas cannot be Nothing")
	If IsNothing (scorethresh) then Throw New ArgumentNullException  ("scorethresh cannot be Nothing")

Dim pbaaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pbaa) Then pbaaPTR = pbaa.Pointer
Dim pnaaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnaa) Then pnaaPTR = pnaa.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogExtractNumbers( recog.Pointer, boxas.Pointer, scorethresh, spacethresh, pbaaPTR, pnaaPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pbaaPTR <> IntPtr.Zero then pbaa = new Boxaa(pbaaPTR)
	if pnaaPTR <> IntPtr.Zero then pnaa = new Numaa(pnaaPTR)

	Return  new Sarray(_Result)
End Function

' SRC\recogident.c (1761, 1)
' showExtractNumbers()
' showExtractNumbers(PIX *, SARRAY *, BOXAA *, NUMAA *, PIX **) as PIXA *
'''  <summary>
''' Notes
''' (1) This is a debugging routine on digit identification; e.g.
''' recogIdentifyMultiple(recog, pixs, 0, 1, boxa, NULL, NULL, 0);
''' sa = recogExtractNumbers(recog, boxa, 0.8, -1, baa, naa);
''' pixa = showExtractNumbers(pixs, sa, baa, naa, NULL);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - input 1 bpp image</param>
'''  <param name="sa">[in] - recognized text strings</param>
'''  <param name="baa">[in] - boxa array for location of characters in each string</param>
'''  <param name="naa">[in] - numa array for scores of characters in each string</param>
'''  <param name="ppixdb">[out][optional] - input pixs with identified chars outlined</param>
'''   <returns>pixa   of identified strings with text and scores, or NULL on error</returns>
Public Shared Function showExtractNumbers(
				ByVal pixs as Pix, 
				ByVal sa as Sarray, 
				ByVal baa as Boxaa, 
				ByVal naa as Numaa, 
				ByRef ppixdb as Pix) as Pixa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If IsNothing (baa) then Throw New ArgumentNullException  ("baa cannot be Nothing")
	If IsNothing (naa) then Throw New ArgumentNullException  ("naa cannot be Nothing")

Dim ppixdbPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixdb) Then ppixdbPTR = ppixdb.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.showExtractNumbers( pixs.Pointer, sa.Pointer, baa.Pointer, naa.Pointer, ppixdbPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixdbPTR <> IntPtr.Zero then ppixdb = new Pix(ppixdbPTR)

	Return  new Pixa(_Result)
End Function

#End Region
#Region "SRC\recogtrain.c"
' SRC\recogtrain.c (212, 1)
' recogTrainLabeled()
' recogTrainLabeled(L_RECOG *, PIX *, BOX *, char *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Training is restricted to the addition of a single
''' character in an arbitrary (e.g., UTF8) charset
''' (2) If box != null, it should represent the location in %pixs
''' of the character image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - in training mode</param>
'''  <param name="pixs">[in] - if depth GT 1, will be thresholded to 1 bpp</param>
'''  <param name="box">[in][optional] - cropping box</param>
'''  <param name="text">[in][optional] - if null, use text field in pix</param>
'''  <param name="debug">[in] - 1 to display images of samples not captured</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogTrainLabeled(
				ByVal recog as L_Recog, 
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal text as String, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.recogTrainLabeled( recog.Pointer, pixs.Pointer, boxPTR, text, debug)

	Return _Result
End Function

' SRC\recogtrain.c (261, 1)
' recogProcessLabeled()
' recogProcessLabeled(L_RECOG *, PIX *, BOX *, char *, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This crops and binarizes the input image, generating a pix
''' of one character where the charval is inserted into the pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - in training mode</param>
'''  <param name="pixs">[in] - if depth GT 1, will be thresholded to 1 bpp</param>
'''  <param name="box">[in][optional] - cropping box</param>
'''  <param name="text">[in][optional] - if null, use text field in pix</param>
'''  <param name="ppix">[out] - addr of pix, 1 bpp, labeled</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogProcessLabeled(
				ByVal recog as L_Recog, 
				ByVal pixs as Pix, 
				ByVal box as Box, 
				ByVal text as String, 
				ByRef ppix as Pix) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer
	Dim ppixPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppix) Then ppixPTR = ppix.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.recogProcessLabeled( recog.Pointer, pixs.Pointer, boxPTR, text, ppixPTR)
	if ppixPTR <> IntPtr.Zero then ppix = new Pix(ppixPTR)

	Return _Result
End Function

' SRC\recogtrain.c (352, 1)
' recogAddSample()
' recogAddSample(L_RECOG *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) The pix is 1 bpp, with the character string label embedded.
''' (2) The pixaa_u array of the recog is initialized to accept
''' up to 256 different classes.  When training is finished,
''' the arrays are truncated to the actual number of classes.
''' To pad an existing recog from the boot recognizers, training
''' is started again; if samples from a new class are added,
''' the pixaa_u array is extended by adding a pixa to hold them.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''  <param name="pix">[in] - a single character, 1 bpp</param>
'''  <param name="debug">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogAddSample(
				ByVal recog as L_Recog, 
				ByVal pix as Pix, 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.recogAddSample( recog.Pointer, pix.Pointer, debug)

	Return _Result
End Function

' SRC\recogtrain.c (417, 1)
' recogModifyTemplate()
' recogModifyTemplate(L_RECOG *, PIX *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''  <param name="pixs">[in] - 1 bpp, to be optionally scaled and turned into strokes of fixed width</param>
'''   <returns>pixd   modified pix if OK, NULL on error</returns>
Public Shared Function recogModifyTemplate(
				ByVal recog as L_Recog, 
				ByVal pixs as Pix) as Pix

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogModifyTemplate( recog.Pointer, pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\recogtrain.c (486, 1)
' recogAverageSamples()
' recogAverageSamples(L_RECOG **, l_int32) as l_int32
'''  <summary>
''' Notes
''' (1) This is only called in two situations
''' (a) When splitting characters using either the DID method
''' recogDecode() or the the greedy splitter
''' recogCorrelationBestRow()
''' (b) By a special recognizer that is used to remove outliers.
''' Both unscaled and scaled inputs are averaged.
''' (2) If the data in any class is nonexistent (no samples), or
''' very bad (no fg pixels in the average), or if the ratio
''' of max/min average unscaled class template heights is
''' greater than max_ht_ratio, this destroys the recog.
''' The caller must check the return value of the recog.
''' (3) Set debug = 1 to view the resulting templates and their centroids.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="precog">[in] - addr of existing recog; may be destroyed</param>
'''  <param name="debug">[in] - </param>
'''   <returns>0 on success, 1 on failure</returns>
Public Shared Function recogAverageSamples(
				ByVal precog as List (of L_Recog), 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (precog) then Throw New ArgumentNullException  ("precog cannot be Nothing")

	Dim precogPTR As IntPtr = IntPtr.Zero ' : If Not IsNothing(precog) Then precogPTR = precog.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.recogAverageSamples( precogPTR, debug)

	Return _Result
End Function

' SRC\recogtrain.c (664, 1)
' pixaAccumulateSamples()
' pixaAccumulateSamples(PIXA *, PTA *, PIX **, l_float32 *, l_float32 *) as l_int32
'''  <summary>
''' Notes
''' (1) This generates an aligned (by centroid) sum of the input pix.
''' (2) We use only the first 256 samples; that's plenty.
''' (3) If pta is not input, we generate two tables, and discard
''' after use.  If this is called many times, it is better
''' to precompute the pta.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - of samples from the same class, 1 bpp</param>
'''  <param name="pta">[in][optional] - of centroids of the samples</param>
'''  <param name="ppixd">[out] - accumulated samples, 8 bpp</param>
'''  <param name="px">[out][optional] - average x coordinate of centroids</param>
'''  <param name="py">[out][optional] - average y coordinate of centroids</param>
'''   <returns>0 on success, 1 on failure</returns>
Public Shared Function pixaAccumulateSamples(
				ByVal pixa as Pixa, 
				ByVal pta as Pta, 
				ByRef ppixd as Pix, 
				ByRef px as Single(), 
				ByRef py as Single()) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")

	Dim ptaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pta) Then ptaPTR = pta.Pointer
	Dim ppixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixd) Then ppixdPTR = ppixd.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaAccumulateSamples( pixa.Pointer, ptaPTR, ppixdPTR, px, py)
	if ppixdPTR <> IntPtr.Zero then ppixd = new Pix(ppixdPTR)

	Return _Result
End Function

' SRC\recogtrain.c (783, 1)
' recogTrainingFinished()
' recogTrainingFinished(L_RECOG **, l_int32, l_int32, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This must be called after all training samples have been added.
''' (2) If the templates are not good enough, the recog input is destroyed.
''' (3) Usually, %modifyflag == 1, because we want to apply
''' recogModifyTemplate() to generate the actual templates
''' that will be used.  The one exception is when reading a
''' serialized recog there we want to put the same set of
''' templates in both the unscaled and modified pixaa.
''' See recogReadStream() to see why we do this.
''' (4) See recogTemplatesAreOK() for %minsize and %minfract usage.
''' (5) The following things are done here
''' (a) Allocate (or reallocate) storage for (possibly) modified
''' bitmaps, centroids, and fg areas.
''' (b) Generate the (possibly) modified bitmaps.
''' (c) Compute centroid and fg area data for both unscaled and
''' modified bitmaps.
''' (d) Truncate the pixaa, ptaa and numaa arrays down from
''' 256 to the actual size.
''' (6) Putting these operations here makes it simple to recompute
''' the recog with different modifications on the bitmaps.
''' (7) Call recogShowContent() to display the templates, both
''' unscaled and modified.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="precog">[in] - addr of recog</param>
'''  <param name="modifyflag">[in] - 1 to use recogModifyTemplate(); 0 otherwise</param>
'''  <param name="minsize">[in] - set to -1 for default</param>
'''  <param name="minfract">[in] - set to -1.0 for default</param>
'''   <returns>0 if OK, 1 on error (input recog will be destroyed)</returns>
Public Shared Function recogTrainingFinished(
				ByVal precog as List (of L_Recog), 
				ByVal modifyflag as Integer, 
				ByVal minsize as Integer, 
				ByVal minfract as Single) as Integer

	If IsNothing (precog) then Throw New ArgumentNullException  ("precog cannot be Nothing")
	If IsNothing (minfract) then Throw New ArgumentNullException  ("minfract cannot be Nothing")

	Dim precogPTR As IntPtr = IntPtr.Zero ' : If Not IsNothing(precog) Then precogPTR = precog.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.recogTrainingFinished( precogPTR, modifyflag, minsize, minfract)

	Return _Result
End Function

' SRC\recogtrain.c (970, 1)
' recogFilterPixaBySize()
' recogFilterPixaBySize(PIXA *, l_int32, l_int32, l_float32, NUMA **) as PIXA *
'''  <summary>
''' Notes
''' (1) The basic assumption is that the most common and larger
''' templates in each class are more likely to represent the
''' characters we are interested in.  For example, larger digits
''' are more likely to represent page numbers, and smaller digits
''' could be data in tables.  Therefore, we bias the first
''' stage of filtering toward the larger characters by removing
''' very small ones, and select based on proximity of the
''' remaining characters to median height.
''' (2) For each of the %setsize classes, order the templates
''' increasingly by height.  Take the rank 0.9 height.  Eliminate
''' all templates that are shorter by more than %max_ht_ratio.
''' Of the remaining ones, select up to %maxkeep that are closest
''' in rank order height to the median template.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - labeled templates</param>
'''  <param name="setsize">[in] - size of character set (number of classes)</param>
'''  <param name="maxkeep">[in] - max number of templates to keep in a class</param>
'''  <param name="max_ht_ratio">[in] - max allowed height ratio (see below)</param>
'''  <param name="pna">[out][optional] - debug output, giving the number in each class after filtering; use NULL to skip</param>
'''   <returns>pixa   filtered templates, or NULL on error</returns>
Public Shared Function recogFilterPixaBySize(
				ByVal pixas as Pixa, 
				ByVal setsize as Integer, 
				ByVal maxkeep as Integer, 
				ByVal max_ht_ratio as Single, 
				ByRef pna as Numa) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (max_ht_ratio) then Throw New ArgumentNullException  ("max_ht_ratio cannot be Nothing")

Dim pnaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pna) Then pnaPTR = pna.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogFilterPixaBySize( pixas.Pointer, setsize, maxkeep, max_ht_ratio, pnaPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnaPTR <> IntPtr.Zero then pna = new Numa(pnaPTR)

	Return  new Pixa(_Result)
End Function

' SRC\recogtrain.c (1041, 1)
' recogSortPixaByClass()
' recogSortPixaByClass(PIXA *, l_int32) as PIXAA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - labeled templates</param>
'''  <param name="setsize">[in] - size of character set (number of classes)</param>
'''   <returns>paa   pixaa where each pixa has templates for one class, or null on error</returns>
Public Shared Function recogSortPixaByClass(
				ByVal pixa as Pixa, 
				ByVal setsize as Integer) as Pixaa

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogSortPixaByClass( pixa.Pointer, setsize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixaa(_Result)
End Function

' SRC\recogtrain.c (1081, 1)
' recogRemoveOutliers1()
' recogRemoveOutliers1(L_RECOG **, l_float32, l_int32, l_int32, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This is a convenience wrapper when using default parameters
''' for the recog.  See pixaRemoveOutliers1() for details.
''' (2) If this succeeds, the new recog replaces the input recog;
''' if it fails, the input recog is destroyed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="precog">[in] - addr of recog with unscaled labeled templates</param>
'''  <param name="minscore">[in] - keep everything with at least this score</param>
'''  <param name="mintarget">[in] - minimum desired number to retain if possible</param>
'''  <param name="minsize">[in] - minimum number of samples required for a class</param>
'''  <param name="ppixsave">[out][optional debug] - saved templates, with scores</param>
'''  <param name="ppixrem">[out][optional debug] - removed templates, with scores</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function recogRemoveOutliers1(
				ByVal precog as List (of L_Recog), 
				ByVal minscore as Single, 
				ByVal mintarget as Integer, 
				ByVal minsize as Integer, 
				ByRef ppixsave as Pix, 
				ByRef ppixrem as Pix) as Integer

	If IsNothing (precog) then Throw New ArgumentNullException  ("precog cannot be Nothing")
	If IsNothing (minscore) then Throw New ArgumentNullException  ("minscore cannot be Nothing")

	Dim precogPTR As IntPtr = IntPtr.Zero ' : If Not IsNothing(precog) Then precogPTR = precog.Pointer
Dim ppixsavePTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixsave) Then ppixsavePTR = ppixsave.Pointer
Dim ppixremPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixrem) Then ppixremPTR = ppixrem.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.recogRemoveOutliers1( precogPTR, minscore, mintarget, minsize, ppixsavePTR, ppixremPTR)
	if ppixsavePTR <> IntPtr.Zero then ppixsave = new Pix(ppixsavePTR)
	if ppixremPTR <> IntPtr.Zero then ppixrem = new Pix(ppixremPTR)

	Return _Result
End Function

' SRC\recogtrain.c (1159, 1)
' pixaRemoveOutliers1()
' pixaRemoveOutliers1(PIXA *, l_float32, l_int32, l_int32, PIX **, PIX **) as PIXA *
'''  <summary>
''' Notes
''' (1) Removing outliers is particularly important when recognition
''' goes against all the samples in the training set, as opposed
''' to the averages for each class.  The reason is that we get
''' an identification error if a mislabeled template is a best
''' match for an input sample.
''' (2) Because the score values depend strongly on the quality
''' of the character images, to avoid losing too many samples
''' we supplement a minimum score for retention with a score
''' necessary to acquire the minimum target number of templates.
''' To do this we are willing to use a lower threshold,
''' LOWER_SCORE_THRESHOLD, on the score.  Consequently, with
''' poor quality templates, we may keep samples with a score
''' less than %minscore, but never less than LOWER_SCORE_THRESHOLD.
''' And if the number of samples is less than %minsize, we do
''' not use any.
''' (3) This is meant to be used on a BAR, where the templates all
''' come from the same book; use minscore ~0.75.
''' (4) Method make a scaled recog from the input %pixas.  Then,
''' for each class generate the averages, match each
''' scaled template against the average, and save unscaled
''' templates that had a sufficiently good match.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - unscaled labeled templates</param>
'''  <param name="minscore">[in] - keep everything with at least this score; use -1.0 for default.</param>
'''  <param name="mintarget">[in] - minimum desired number to retain if possible; use -1 for default.</param>
'''  <param name="minsize">[in] - minimum number of samples required for a class; use -1 for default.</param>
'''  <param name="ppixsave">[out][optional debug] - saved templates, with scores</param>
'''  <param name="ppixrem">[out][optional debug] - removed templates, with scores</param>
'''   <returns>pixa   of unscaled templates to be kept, or NULL on error</returns>
Public Shared Function pixaRemoveOutliers1(
				ByVal pixas as Pixa, 
				ByVal minscore as Single, 
				ByVal mintarget as Integer, 
				ByVal minsize as Integer, 
				ByRef ppixsave as Pix, 
				ByRef ppixrem as Pix) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (minscore) then Throw New ArgumentNullException  ("minscore cannot be Nothing")

Dim ppixsavePTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixsave) Then ppixsavePTR = ppixsave.Pointer
Dim ppixremPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixrem) Then ppixremPTR = ppixrem.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaRemoveOutliers1( pixas.Pointer, minscore, mintarget, minsize, ppixsavePTR, ppixremPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixsavePTR <> IntPtr.Zero then ppixsave = new Pix(ppixsavePTR)
	if ppixremPTR <> IntPtr.Zero then ppixrem = new Pix(ppixremPTR)

	Return  new Pixa(_Result)
End Function

' SRC\recogtrain.c (1299, 1)
' recogRemoveOutliers2()
' recogRemoveOutliers2(L_RECOG **, l_float32, l_int32, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This is a convenience wrapper when using default parameters
''' for the recog.  See pixaRemoveOutliers2() for details.
''' (2) If this succeeds, the new recog replaces the input recog;
''' if it fails, the input recog is destroyed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="precog">[in] - addr of recog with unscaled labeled templates</param>
'''  <param name="minscore">[in] - keep everything with at least this score</param>
'''  <param name="minsize">[in] - minimum number of samples required for a class</param>
'''  <param name="ppixsave">[out][optional debug] - saved templates, with scores</param>
'''  <param name="ppixrem">[out][optional debug] - removed templates, with scores</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function recogRemoveOutliers2(
				ByVal precog as List (of L_Recog), 
				ByVal minscore as Single, 
				ByVal minsize as Integer, 
				ByRef ppixsave as Pix, 
				ByRef ppixrem as Pix) as Integer

	If IsNothing (precog) then Throw New ArgumentNullException  ("precog cannot be Nothing")
	If IsNothing (minscore) then Throw New ArgumentNullException  ("minscore cannot be Nothing")

	Dim precogPTR As IntPtr = IntPtr.Zero ' : If Not IsNothing(precog) Then precogPTR = precog.Pointer
Dim ppixsavePTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixsave) Then ppixsavePTR = ppixsave.Pointer
Dim ppixremPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixrem) Then ppixremPTR = ppixrem.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.recogRemoveOutliers2( precogPTR, minscore, minsize, ppixsavePTR, ppixremPTR)
	if ppixsavePTR <> IntPtr.Zero then ppixsave = new Pix(ppixsavePTR)
	if ppixremPTR <> IntPtr.Zero then ppixrem = new Pix(ppixremPTR)

	Return _Result
End Function

' SRC\recogtrain.c (1363, 1)
' pixaRemoveOutliers2()
' pixaRemoveOutliers2(PIXA *, l_float32, l_int32, PIX **, PIX **) as PIXA *
'''  <summary>
''' Notes
''' (1) Removing outliers is particularly important when recognition
''' goes against all the samples in the training set, as opposed
''' to the averages for each class.  The reason is that we get
''' an identification error if a mislabeled template is a best
''' match for an input sample.
''' (2) This method compares each template against the average templates
''' of each class, and discards any template that has a higher
''' correlation to a class different from its own.  It also
''' sets a lower bound on correlation scores with its class average.
''' (3) This is meant to be used on a BAR, where the templates all
''' come from the same book; use minscore ~0.75.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - unscaled labeled templates</param>
'''  <param name="minscore">[in] - keep everything with at least this score; use -1.0 for default.</param>
'''  <param name="minsize">[in] - minimum number of samples required for a class; use -1 for default.</param>
'''  <param name="ppixsave">[out][optional debug] - saved templates, with scores</param>
'''  <param name="ppixrem">[out][optional debug] - removed templates, with scores</param>
'''   <returns>pixa   of unscaled templates to be kept, or NULL on error</returns>
Public Shared Function pixaRemoveOutliers2(
				ByVal pixas as Pixa, 
				ByVal minscore as Single, 
				ByVal minsize as Integer, 
				ByRef ppixsave as Pix, 
				ByRef ppixrem as Pix) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (minscore) then Throw New ArgumentNullException  ("minscore cannot be Nothing")

Dim ppixsavePTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixsave) Then ppixsavePTR = ppixsave.Pointer
Dim ppixremPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixrem) Then ppixremPTR = ppixrem.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaRemoveOutliers2( pixas.Pointer, minscore, minsize, ppixsavePTR, ppixremPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixsavePTR <> IntPtr.Zero then ppixsave = new Pix(ppixsavePTR)
	if ppixremPTR <> IntPtr.Zero then ppixrem = new Pix(ppixremPTR)

	Return  new Pixa(_Result)
End Function

' SRC\recogtrain.c (1488, 1)
' recogTrainFromBoot()
' recogTrainFromBoot(L_RECOG *, PIXA *, l_float32, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) This takes %pixas of unscaled single characters and %recboot,
''' a bootstrep recognizer (BSR) that has been set up with parameters
''' scaleh scale all templates to this height
''' linew width of normalized strokes, or 0 if using
''' the input image
''' It modifies the pix in %pixas accordingly and correlates
''' with the templates in the BSR.  It returns those input
''' images in %pixas whose best correlation with the BSR is at
''' or above %minscore.  The returned pix have added text labels
''' for the text string of the class to which the best
''' correlated template belongs.
''' (2) Identification occurs in scaled mode (typically with h = 40),
''' optionally using a width-normalized line images derived
''' from those in %pixas.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recogboot">[in] - labeled boot recognizer</param>
'''  <param name="pixas">[in] - set of unlabeled input characters</param>
'''  <param name="minscore">[in] - min score for accepting the example; e.g., 0.75</param>
'''  <param name="threshold">[in] - for binarization, if needed</param>
'''  <param name="debug">[in] - 1 for debug output saved to recogboot; 0 otherwise</param>
'''   <returns>pixad   labeled version of input pixas, trained on a BSR, or NULL on error</returns>
Public Shared Function recogTrainFromBoot(
				ByVal recogboot as L_Recog, 
				ByVal pixas as Pixa, 
				ByVal minscore as Single, 
				ByVal threshold as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as Pixa

	If IsNothing (recogboot) then Throw New ArgumentNullException  ("recogboot cannot be Nothing")
	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (minscore) then Throw New ArgumentNullException  ("minscore cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogTrainFromBoot( recogboot.Pointer, pixas.Pointer, minscore, threshold, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\recogtrain.c (1592, 1)
' recogPadDigitTrainingSet()
' recogPadDigitTrainingSet(L_RECOG **, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is a no-op if padding is not needed.  However,
''' if it is, this replaces the input recog with a new recog,
''' padded appropriately with templates from a boot recognizer,
''' and set up with correlation templates derived from
''' %scaleh and %linew.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="precog">[in,out] - trained; if padding is needed, it is replaced by a a new padded recog</param>
'''  <param name="scaleh">[in] - must be GT 0; suggest ~40.</param>
'''  <param name="linew">[in] - use 0 for original scanned images</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogPadDigitTrainingSet(
				ByRef precog as L_Recog, 
				ByVal scaleh as Integer, 
				ByVal linew as Integer) as Integer


	Dim precogPTR As IntPtr = IntPtr.Zero : If Not IsNothing(precog) Then precogPTR = precog.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.recogPadDigitTrainingSet( precogPTR, scaleh, linew)
	if precogPTR <> IntPtr.Zero then precog = new L_Recog(precogPTR)

	Return _Result
End Function

' SRC\recogtrain.c (1650, 1)
' recogIsPaddingNeeded()
' recogIsPaddingNeeded(L_RECOG *, SARRAY **) as l_int32
'''  <summary>
''' Notes
''' (1) This returns a string array in sa containing character values
''' for which extra templates are needed; this sarray is
''' used by recogGetPadTemplates().  It returns NULL
''' if no padding templates are needed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - trained</param>
'''  <param name="psa">[out] - addr of returned string containing text value</param>
'''   <returns>1 on error; 0 if OK, whether or not additional padding templates are required.</returns>
Public Shared Function recogIsPaddingNeeded(
				ByVal recog as L_Recog, 
				ByRef psa as Sarray) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")

	Dim psaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(psa) Then psaPTR = psa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.recogIsPaddingNeeded( recog.Pointer, psaPTR)
	if psaPTR <> IntPtr.Zero then psa = new Sarray(psaPTR)

	Return _Result
End Function

' SRC\recogtrain.c (1768, 1)
' recogAddDigitPadTemplates()
' recogAddDigitPadTemplates(L_RECOG *, SARRAY *) as PIXA *
'''  <summary>
''' Notes
''' (1) Call recogIsPaddingNeeded() first, which returns %sa of
''' template text strings for classes where more templates
''' are needed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - trained</param>
'''  <param name="sa">[in] - set of text strings that need to be padded</param>
'''   <returns>pixa   of all templates from %recog and the additional pad templates from a boot recognizer; or NULL on error</returns>
Public Shared Function recogAddDigitPadTemplates(
				ByVal recog as L_Recog, 
				ByVal sa as Sarray) as Pixa

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogAddDigitPadTemplates( recog.Pointer, sa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\recogtrain.c (1876, 1)
' recogMakeBootDigitRecog()
' recogMakeBootDigitRecog(l_int32, l_int32, l_int32, l_int32) as L_RECOG *
'''  <summary>
''' Notes
''' (1) This takes a set of pre-computed, labeled pixa of single
''' digits, and generates a recognizer where the character templates
''' that will be used are derived from the boot-generated pixa
''' - extending by replicating the set with different widths,
''' keeping the height the same
''' - scaling (isotropically to fixed height)
''' - optionally generating a skeleton and thickening so that
''' all strokes have the same width.
''' (2) The resulting templates are scaled versions of either the
''' input bitmaps or images with fixed line widths.  To use the
''' input bitmaps, set %linew = 0; otherwise, set %linew to the
''' desired line width.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="scaleh">[in] - scale all heights to this; typ. use 40</param>
'''  <param name="linew">[in] - normalized line width; typ. use 5; 0 to skip</param>
'''  <param name="maxyshift">[in] - from nominal centroid alignment; typically 0 or 1</param>
'''  <param name="debug">[in] - 1 for showing templates; 0 otherwise</param>
'''   <returns>recog, or NULL on error</returns>
Public Shared Function recogMakeBootDigitRecog(
				ByVal scaleh as Integer, 
				ByVal linew as Integer, 
				ByVal maxyshift as Integer, 
				ByVal debug as Enumerations.DebugOnOff) as L_Recog



	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogMakeBootDigitRecog( scaleh, linew, maxyshift, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Recog(_Result)
End Function

' SRC\recogtrain.c (1911, 1)
' recogMakeBootDigitTemplates()
' recogMakeBootDigitTemplates(l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) See recogMakeBootDigitRecog().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="debug">[in] - 1 for display of templates</param>
'''   <returns>pixa   of templates; or NULL on error</returns>
Public Shared Function recogMakeBootDigitTemplates(
				ByVal debug as Enumerations.DebugOnOff) as Pixa



	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogMakeBootDigitTemplates( debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\recogtrain.c (1962, 1)
' recogShowContent()
' recogShowContent(FILE *, L_RECOG *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file  stream</param>
'''  <param name="recog">[in] - </param>
'''  <param name="index">[in] - for naming of output files of template images</param>
'''  <param name="display">[in] - 1 for showing template images, 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogShowContent(
				ByVal fp as FILE, 
				ByVal recog as L_Recog, 
				ByVal index as Integer, 
				ByVal display as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.recogShowContent( fp.Pointer, recog.Pointer, index, display)

	Return _Result
End Function

' SRC\recogtrain.c (2045, 1)
' recogDebugAverages()
' recogDebugAverages(L_RECOG **, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Generates an image that pairs each of the input images used
''' in training with the average template that it is best
''' correlated to.  This is written into the recog.
''' (2) It also generates pixa_tr of all the input training images,
''' which can be used, e.g., in recogShowMatchesInRange().
''' (3) Destroys the recog if the averaging function finds any bad classes.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="precog">[in] - addr of recog</param>
'''  <param name="debug">[in] - 0 no output; 1 for images; 2 for text; 3 for both</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogDebugAverages(
				ByVal precog as List (of L_Recog), 
				ByVal debug as Enumerations.DebugOnOff) as Integer

	If IsNothing (precog) then Throw New ArgumentNullException  ("precog cannot be Nothing")

	Dim precogPTR As IntPtr = IntPtr.Zero ' : If Not IsNothing(precog) Then precogPTR = precog.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.recogDebugAverages( precogPTR, debug)

	Return _Result
End Function

' SRC\recogtrain.c (2123, 1)
' recogShowAverageTemplates()
' recogShowAverageTemplates(L_RECOG *) as l_int32
'''  <summary>
''' Notes
''' (1) This debug routine generates a display of the averaged templates,
''' both scaled and unscaled, with the centroid visible in red.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''   <returns>0 on success, 1 on failure</returns>
Public Shared Function recogShowAverageTemplates(
				ByVal recog as L_Recog) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.recogShowAverageTemplates( recog.Pointer)

	Return _Result
End Function

' SRC\recogtrain.c (2311, 1)
' recogShowMatchesInRange()
' recogShowMatchesInRange(L_RECOG *, PIXA *, l_float32, l_float32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This gives a visual output of the best matches for a given
''' range of scores.  Each pair of images can optionally be
''' labeled with the index of the best match and the correlation.
''' (2) To use this, save a set of 1 bpp images (labeled or
''' unlabeled) that can be given to a recognizer in a pixa.
''' Then call this function with the pixa and parameters
''' to filter a range of scores.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''  <param name="pixa">[in] - of 1 bpp images to match</param>
'''  <param name="minscore">[in] - range to include output</param>
'''  <param name="maxscore">[in] - range to include output</param>
'''  <param name="display">[in] - to display the result</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function recogShowMatchesInRange(
				ByVal recog as L_Recog, 
				ByVal pixa as Pixa, 
				ByVal minscore as Single, 
				ByVal maxscore as Single, 
				ByVal display as Integer) as Integer

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (minscore) then Throw New ArgumentNullException  ("minscore cannot be Nothing")
	If IsNothing (maxscore) then Throw New ArgumentNullException  ("maxscore cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.recogShowMatchesInRange( recog.Pointer, pixa.Pointer, minscore, maxscore, display)

	Return _Result
End Function

' SRC\recogtrain.c (2405, 1)
' recogShowMatch()
' recogShowMatch(L_RECOG *, PIX *, PIX *, BOX *, l_int32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) pix1 can be one of these
''' (a) The input pix alone, which can be either a single character
''' (box == NULL) or several characters that need to be
''' segmented.  If more than character is present, the box
''' region is displayed with an outline.
''' (b) Both the input pix and the matching template.  In this case,
''' pix2 and box will both be null.
''' (2) If the bmf has been made (by a call to recogMakeBmf())
''' and the index GT= 0, the text field, match score and index
''' will be rendered; otherwise their values will be ignored.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="recog">[in] - </param>
'''  <param name="pix1">[in] - input pix; several possibilities</param>
'''  <param name="pix2">[in][optional] - matching template</param>
'''  <param name="box">[in][optional] - region in pix1 for which pix2 matches</param>
'''  <param name="index">[in] - index of matching template; use -1 to disable printing</param>
'''  <param name="score">[in] - score of match</param>
'''   <returns>pixd pair of images, showing input pix and best template, optionally with matching information, or NULL on error.</returns>
Public Shared Function recogShowMatch(
				ByVal recog as L_Recog, 
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal box as Box, 
				ByVal index as Integer, 
				ByVal score as Single) as Pix

	If IsNothing (recog) then Throw New ArgumentNullException  ("recog cannot be Nothing")
	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (score) then Throw New ArgumentNullException  ("score cannot be Nothing")

	Dim pix2PTR As IntPtr = IntPtr.Zero : If Not IsNothing(pix2) Then pix2PTR = pix2.Pointer
	Dim boxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(box) Then boxPTR = box.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.recogShowMatch( recog.Pointer, pix1.Pointer, pix2PTR, boxPTR, index, score)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\regutils.c"
' SRC\regutils.c (119, 1)
' regTestSetup()
' regTestSetup(l_int32, char **, L_REGPARAMS **) as l_ok
'''  <summary>
''' Notes
''' (1) Call this function with the args to the reg test.  The first arg
''' is the name of the reg test.  There are three cases
''' Case 1
''' There is either only one arg, or the second arg is "compare".
''' This is the mode in which you run a regression test
''' (or a set of them), looking for failures and logging
''' the results to a file.  The output, which includes
''' logging of all reg test failures plus a SUCCESS or
''' FAILURE summary for each test, is appended to the file
''' "/tmp/lept/reg_results.txt.  For this case, as in Case 2,
''' the display field in rp is set to FALSE, preventing
''' image display.
''' Case 2
''' The second arg is "generate".  This will cause
''' generation of new golden files for the reg test.
''' The results of the reg test are not recorded, and
''' the display field in rp is set to FALSE.
''' Case 3
''' The second arg is "display".  The test will run and
''' files will be written.  Comparisons with golden files
''' will not be carried out, so the only notion of success
''' or failure is with tests that do not involve golden files.
''' The display field in rp is TRUE, and this is used by
''' pixDisplayWithTitle().
''' (2) See regutils.h for examples of usage.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="argc">[in] - from invocation; can be either 1 or 2</param>
'''  <param name="argv">[in] - to regtest %argv[1] is one of these "generate", "compare", "display"</param>
'''  <param name="prp">[out] - all regression params</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function regTestSetup(
				ByVal argc as Integer, 
				ByVal argv as String(), 
				ByRef prp as L_RegParams) as Integer

	If IsNothing (argv) then Throw New ArgumentNullException  ("argv cannot be Nothing")

Dim argvPTR As IntPtr = argvPTR = Marshal.AllocHGlobal(Marshal.sizeOf(argv.toArray))
	Dim prpPTR As IntPtr = IntPtr.Zero : If Not IsNothing(prp) Then prpPTR = prp.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.regTestSetup( argc, argvPTR, prpPTR)
	if prpPTR <> IntPtr.Zero then prp = new L_RegParams(prpPTR)

	Return _Result
End Function

' SRC\regutils.c (208, 1)
' regTestCleanup()
' regTestCleanup(L_REGPARAMS *) as l_ok
'''  <summary>
''' Notes
''' (1) This copies anything written to the temporary file to the
''' output file /tmp/lept/reg_results.txt.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rp">[in] - regression test parameters</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function regTestCleanup(
				ByVal rp as L_RegParams) as Integer

	If IsNothing (rp) then Throw New ArgumentNullException  ("rp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.regTestCleanup( rp.Pointer)

	Return _Result
End Function

' SRC\regutils.c (271, 1)
' regTestCompareValues()
' regTestCompareValues(L_REGPARAMS *, l_float32, l_float32, l_float32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rp">[in] - regtest parameters</param>
'''  <param name="val1">[in] - typ. the golden value</param>
'''  <param name="val2">[in] - typ. the value computed</param>
'''  <param name="delta">[in] - allowed max absolute difference</param>
'''   <returns>0 if OK, 1 on error a failure in comparison is not an error</returns>
Public Shared Function regTestCompareValues(
				ByVal rp as L_RegParams, 
				ByVal val1 as Single, 
				ByVal val2 as Single, 
				ByVal delta as Single) as Integer

	If IsNothing (rp) then Throw New ArgumentNullException  ("rp cannot be Nothing")
	If IsNothing (val1) then Throw New ArgumentNullException  ("val1 cannot be Nothing")
	If IsNothing (val2) then Throw New ArgumentNullException  ("val2 cannot be Nothing")
	If IsNothing (delta) then Throw New ArgumentNullException  ("delta cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.regTestCompareValues( rp.Pointer, val1, val2, delta)

	Return _Result
End Function

' SRC\regutils.c (315, 1)
' regTestCompareStrings()
' regTestCompareStrings(L_REGPARAMS *, l_uint8 *, size_t, l_uint8 *, size_t) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rp">[in] - regtest parameters</param>
'''  <param name="string1">[in] - typ. the expected string</param>
'''  <param name="bytes1">[in] - size of string1</param>
'''  <param name="string2">[in] - typ. the computed string</param>
'''  <param name="bytes2">[in] - size of string2</param>
'''   <returns>0 if OK, 1 on error a failure in comparison is not an error</returns>
Public Shared Function regTestCompareStrings(
				ByVal rp as L_RegParams, 
				ByVal string1 as Byte(), 
				ByVal bytes1 as UInteger, 
				ByVal string2 as Byte(), 
				ByVal bytes2 as UInteger) as Integer

	If IsNothing (rp) then Throw New ArgumentNullException  ("rp cannot be Nothing")
	If IsNothing (string1) then Throw New ArgumentNullException  ("string1 cannot be Nothing")
	If IsNothing (string2) then Throw New ArgumentNullException  ("string2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.regTestCompareStrings( rp.Pointer, string1, bytes1, string2, bytes2)

	Return _Result
End Function

' SRC\regutils.c (381, 1)
' regTestComparePix()
' regTestComparePix(L_REGPARAMS *, PIX *, PIX *) as l_ok
'''  <summary>
''' Notes
''' (1) This function compares two pix for equality.  On failure,
''' this writes to stderr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rp">[in] - regtest parameters</param>
'''  <param name="pix1">[in] - to be tested for equality</param>
'''  <param name="pix2">[in] - to be tested for equality</param>
'''   <returns>0 if OK, 1 on error a failure in comparison is not an error</returns>
Public Shared Function regTestComparePix(
				ByVal rp as L_RegParams, 
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix) as Integer

	If IsNothing (rp) then Throw New ArgumentNullException  ("rp cannot be Nothing")
	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.regTestComparePix( rp.Pointer, pix1.Pointer, pix2.Pointer)

	Return _Result
End Function

' SRC\regutils.c (441, 1)
' regTestCompareSimilarPix()
' regTestCompareSimilarPix(L_REGPARAMS *, PIX *, PIX *, l_int32, l_float32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This function compares two pix for near equality.  On failure,
''' this writes to stderr.
''' (2) The pix are similar if the fraction of non-conforming pixels
''' does not exceed %maxfract.  Pixels are non-conforming if
''' the difference in pixel values equals or exceeds %mindiff.
''' Typical values might be %mindiff = 15 and %maxfract = 0.01.
''' (3) The input images must have the same size and depth.  The
''' pixels for comparison are typically subsampled from the images.
''' (4) Normally, use %printstats = 0.  In debugging mode, to see
''' the relation between %mindiff and the minimum value of
''' %maxfract for success, set this to 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rp">[in] - regtest parameters</param>
'''  <param name="pix1">[in] - to be tested for near equality</param>
'''  <param name="pix2">[in] - to be tested for near equality</param>
'''  <param name="mindiff">[in] - minimum pixel difference to be counted; GT 0</param>
'''  <param name="maxfract">[in] - maximum fraction of pixels allowed to have diff greater than or equal to mindiff</param>
'''  <param name="printstats">[in] - use 1 to print normalized histogram to stderr</param>
'''   <returns>0 if OK, 1 on error a failure in similarity comparison is not an error</returns>
Public Shared Function regTestCompareSimilarPix(
				ByVal rp as L_RegParams, 
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal mindiff as Integer, 
				ByVal maxfract as Single, 
				ByVal printstats as Integer) as Integer

	If IsNothing (rp) then Throw New ArgumentNullException  ("rp cannot be Nothing")
	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If IsNothing (maxfract) then Throw New ArgumentNullException  ("maxfract cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.regTestCompareSimilarPix( rp.Pointer, pix1.Pointer, pix2.Pointer, mindiff, maxfract, printstats)

	Return _Result
End Function

' SRC\regutils.c (504, 1)
' regTestCheckFile()
' regTestCheckFile(L_REGPARAMS *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This function does one of three things, depending on the mode
''' "generate" makes a "golden" file as a copy %localname.
''' "compare" compares %localname contents with the golden file
''' "display" makes the %localname file but does no comparison
''' (2) The canonical format of the golden filenames is
''' /tmp/lept/golden/[root of main name]_golden.[index].
''' [ext of localname]
''' e.g.,
''' /tmp/lept/golden/maze_golden.0.png
''' It is important to add an extension to the local name, because
''' the extension is added to the name of the golden file.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rp">[in] - regtest parameters</param>
'''  <param name="localname">[in] - name of output file from reg test</param>
'''   <returns>0 if OK, 1 on error a failure in comparison is not an error</returns>
Public Shared Function regTestCheckFile(
				ByVal rp as L_RegParams, 
				ByVal localname as String) as Integer

	If IsNothing (rp) then Throw New ArgumentNullException  ("rp cannot be Nothing")
	If IsNothing (localname) then Throw New ArgumentNullException  ("localname cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.regTestCheckFile( rp.Pointer, localname)

	Return _Result
End Function

' SRC\regutils.c (611, 1)
' regTestCompareFiles()
' regTestCompareFiles(L_REGPARAMS *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This only does something in "compare" mode.
''' (2) The canonical format of the golden filenames is
''' /tmp/lept/golden/[root of main name]_golden.[index].
''' [ext of localname]
''' e.g.,
''' /tmp/lept/golden/maze_golden.0.png
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rp">[in] - regtest parameters</param>
'''  <param name="index1">[in] - of one output file from reg test</param>
'''  <param name="index2">[in] - of another output file from reg test</param>
'''   <returns>0 if OK, 1 on error a failure in comparison is not an error</returns>
Public Shared Function regTestCompareFiles(
				ByVal rp as L_RegParams, 
				ByVal index1 as Integer, 
				ByVal index2 as Integer) as Integer

	If IsNothing (rp) then Throw New ArgumentNullException  ("rp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.regTestCompareFiles( rp.Pointer, index1, index2)

	Return _Result
End Function

' SRC\regutils.c (704, 1)
' regTestWritePixAndCheck()
' regTestWritePixAndCheck(L_REGPARAMS *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This function makes it easy to write the pix in a numbered
''' sequence of files, and either to
''' (a) write the golden file ("generate" arg to regression test)
''' (b) make a local file and "compare" with the golden file
''' (c) make a local file and "display" the results
''' (2) The canonical format of the local filename is
''' /tmp/lept/regout/[root of main name].[count].[format extension]
''' e.g., for scale_reg,
''' /tmp/lept/regout/scale.0.png
''' The golden file name mirrors this in the usual way.
''' (3) The check is done between the written files, which requires
''' the files to be identical. The exception is for GIF, which
''' only requires that all pixels in the decoded pix are identical.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rp">[in] - regtest parameters</param>
'''  <param name="pix">[in] - to be written</param>
'''  <param name="format">[in] - of output pix</param>
'''   <returns>0 if OK, 1 on error a failure in comparison is not an error</returns>
Public Shared Function regTestWritePixAndCheck(
				ByVal rp as L_RegParams, 
				ByVal pix as Pix, 
				ByVal format as Integer) as Integer

	If IsNothing (rp) then Throw New ArgumentNullException  ("rp cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.regTestWritePixAndCheck( rp.Pointer, pix.Pointer, format)

	Return _Result
End Function

' SRC\regutils.c (770, 1)
' regTestWriteDataAndCheck()
' regTestWriteDataAndCheck(L_REGPARAMS *, void *, size_t, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This function makes it easy to write data in a numbered
''' sequence of files, and either to
''' (a) write the golden file ("generate" arg to regression test)
''' (b) make a local file and "compare" with the golden file
''' (c) make a local file and "display" the results
''' (2) The canonical format of the local filename is
''' /tmp/lept/regout/[root of main name].[count].[ext]
''' e.g., for the first boxaa in quadtree_reg,
''' /tmp/lept/regout/quadtree.0.baa
''' The golden file name mirrors this in the usual way.
''' (3) The data can be anything.  It is most useful for serialized
''' output of data, such as boxa, pta, etc.
''' (4) The file extension is arbitrary.  It is included simply
''' to make the content type obvious when examining written files.
''' (5) The check is done between the written files, which requires
''' the files to be identical.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rp">[in] - regtest parameters</param>
'''  <param name="data">[in] - to be written</param>
'''  <param name="nbytes">[in] - of data to be written</param>
'''  <param name="ext">[in] - filename extension (e.g. "ba", "pta")</param>
'''   <returns>0 if OK, 1 on error a failure in comparison is not an error</returns>
Public Shared Function regTestWriteDataAndCheck(
				ByVal rp as L_RegParams, 
				ByVal data as Object, 
				ByVal nbytes as UInteger, 
				ByVal ext as String) as Integer

	If IsNothing (rp) then Throw New ArgumentNullException  ("rp cannot be Nothing")
	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")
	If IsNothing (ext) then Throw New ArgumentNullException  ("ext cannot be Nothing")

Dim dataPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.regTestWriteDataAndCheck( rp.Pointer, dataPTR, nbytes, ext)

	Return _Result
End Function

' SRC\regutils.c (821, 1)
' regTestGenLocalFilename()
' regTestGenLocalFilename(L_REGPARAMS *, l_int32, l_int32) as char *
'''  <summary>
''' Notes
''' (1) This is used to get the name of a file in the regout
''' subdirectory, that has been made and is used to test against
''' the golden file.  You can either specify a particular index
''' value, or with %index == -1, this returns the most recently
''' written file.  The latter case lets you read a pix from a
''' file that has just been written with regTestWritePixAndCheck(),
''' which is useful for testing formatted read/write functions.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rp">[in] - regtest parameters</param>
'''  <param name="index">[in] - use -1 for current index</param>
'''  <param name="format">[in] - of image; e.g., IFF_PNG</param>
'''   <returns>filename if OK, or NULL on error</returns>
Public Shared Function regTestGenLocalFilename(
				ByVal rp as L_RegParams, 
				ByVal index as Integer, 
				ByVal format as Integer) as String

	If IsNothing (rp) then Throw New ArgumentNullException  ("rp cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.regTestGenLocalFilename( rp.Pointer, index, format)

	Return _Result
End Function

#End Region
#Region "SRC\rop.c"
' SRC\rop.c (193, 1)
' pixRasterop()
' pixRasterop(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, PIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This has the standard set of 9 args for rasterop.
''' This function is your friend; it is worth memorizing!
''' (2) If the operation involves only dest, this calls
''' rasteropUniLow().  Otherwise, checks depth of the
''' src and dest, and if they match, calls rasteropLow().
''' (3) For the two-image operation, where both pixs and pixd
''' are defined, they are typically different images.  However
''' there are cases, such as pixSetMirroredBorder(), where
''' in-place operations can be done, blitting pixels from
''' one part of pixd to another.  Consequently, we permit
''' such operations.  If you use them, be sure that there
''' is no overlap between the source and destination rectangles
''' in pixd (!)
''' Background
''' -----------
''' There are 18 operations, described by the op codes in pix.h.
''' One, PIX_DST, is a no-op.
''' Three, PIX_CLR, PIX_SET, and PIX_NOT(PIX_DST) operate only on the dest.
''' These are handled by the low-level rasteropUniLow().
''' The other 14 involve the both the src and the dest, and depend on
''' the bit values of either just the src or the bit values of both
''' src and dest.  They are handled by rasteropLow()
''' PIX_SRC  s
''' PIX_NOT(PIX_SRC)    ~s
''' PIX_SRC | PIX_DST    s | d
''' PIX_SRC  PIX_DST    s  d
''' PIX_SRC ^ PIX_DST    s ^ d
''' PIX_NOT(PIX_SRC) | PIX_DST   ~s | d
''' PIX_NOT(PIX_SRC)  PIX_DST   ~s  d
''' PIX_NOT(PIX_SRC) ^ PIX_DST   ~s ^ d
''' PIX_SRC | PIX_NOT(PIX_DST) s | ~d
''' PIX_SRC  PIX_NOT(PIX_DST) s  ~d
''' PIX_SRC ^ PIX_NOT(PIX_DST) s ^ ~d
''' PIX_NOT(PIX_SRC | PIX_DST)   ~(s | d)
''' PIX_NOT(PIX_SRC  PIX_DST)   ~(s  d)
''' PIX_NOT(PIX_SRC ^ PIX_DST)   ~(s ^ d)
''' Each of these is implemented with one of three low-level
''' functions, depending on the alignment of the left edge
''' of the src and dest rectangles
''' a fastest implementation if both left edges are
''' (32-bit) word aligned
''' a very slightly slower implementation if both left
''' edges have the same relative (32-bit) word alignment
''' the general routine that is invoked when
''' both left edges have different word alignment
''' Of the 14 binary rasterops above, only 12 are unique
''' logical combinations (out of a possible 16) of src
''' and dst bits
''' (sd)   (11)   (10)   (01)   (00)
''' -----------------------------------------------
''' s   1   1   0   0
''' ~s   0   1   0   1
''' s | d 1   1   1   0
''' s  d 1   0   0   0
''' s ^ d 0   1   1   0
''' ~s | d 1   0   1   1
''' ~s  d 0   0   1   0
''' ~s ^ d 1   0   0   1
''' s | ~d   1   1   0   1
''' s  ~d   0   1   0   0
''' s ^ ~d   1   0   0   1
''' ~(s | d)  0   0   0   1
''' ~(s  d)  0   1   1   1
''' ~(s ^ d)  1   0   0   1
''' Note that the following three operations are equivalent
''' ~(s ^ d)
''' ~s ^ d
''' s ^ ~d
''' and in the implementation, we call them out with the first form;
''' namely, ~(s ^ d).
''' Of the 16 possible binary combinations of src and dest bits,
''' the remaining 4 unique ones are independent of the src bit.
''' They depend on either just the dest bit or on neither
''' the src nor dest bits
''' d   1   0   1   0 (indep. of s)
''' ~d   0   1   0   1 (indep. of s)
''' CLR  0   0   0   0 (indep. of both s  d)
''' SET  1   1   1   1 (indep. of both s  d)
''' As mentioned above, three of these are implemented by
''' rasteropUniLow(), and one is a no-op.
''' How can these operation codes be represented by bits
''' in such a way that when the basic operations are performed
''' on the bits the results are unique for unique
''' operations, and mimic the logic table given above?
''' The answer is to choose a particular order of the pairings
''' (sd)   (11)   (10)   (01)   (00)
''' (which happens to be the same as in the above table)
''' and to translate the result into 4-bit representations
''' of s and d.  For example, the Sun rasterop choice
''' (omitting the extra bit for clipping) is
''' PIX_SRC   0xc
''' PIX_DST   0xa
''' This corresponds to our pairing order given above
''' (sd)   (11)   (10)   (01)   (00)
''' where for s = 1 we get the bit pattern
''' PIX_SRC  1   1   0   0  (0xc)
''' and for d = 1 we get the pattern
''' PIX_DST   1   0   1   0 (0xa)
''' OK, that's the pairing order that Sun chose.  How many different
''' ways can we assign bit patterns to PIX_SRC and PIX_DST to get
''' the boolean ops to work out?  Any of the 4 pairs can be put
''' in the first position, any of the remaining 3 pairs can go
''' in the second; and one of the remaining 2 pairs can go the the third.
''' There is a total of 432 = 24 ways these pairs can be permuted.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - dest pix</param>
'''  <param name="dx">[in] - x val of UL corner of dest rectangle</param>
'''  <param name="dy">[in] - y val of UL corner of dest rectangle</param>
'''  <param name="dw">[in] - width of dest rectangle</param>
'''  <param name="dh">[in] - height of dest rectangle</param>
'''  <param name="op">[in] - op code</param>
'''  <param name="pixs">[in] - src pix</param>
'''  <param name="sx">[in] - x val of UL corner of src rectangle</param>
'''  <param name="sy">[in] - y val of UL corner of src rectangle</param>
'''   <returns>0 if OK; 1 on error.</returns>
Public Shared Function pixRasterop(
				ByVal pixd as Pix, 
				ByVal dx as Integer, 
				ByVal dy as Integer, 
				ByVal dw as Integer, 
				ByVal dh as Integer, 
				ByVal op as Integer, 
				ByVal pixs as Pix, 
				ByVal sx as Integer, 
				ByVal sy as Integer) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRasterop( pixd.Pointer, dx, dy, dw, dh, op, pixs.Pointer, sx, sy)

	Return _Result
End Function

' SRC\rop.c (269, 1)
' pixRasteropVip()
' pixRasteropVip(PIX *, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This rasterop translates a vertical band of the
''' image either up or down, bringing in either white
''' or black pixels from outside the image.
''' (2) The vertical band extends the full height of pixd.
''' (3) If a colormap exists, the nearest color to white or black
''' is brought in.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - in-place</param>
'''  <param name="bx">[in] - left edge of vertical band</param>
'''  <param name="bw">[in] - width of vertical band</param>
'''  <param name="vshift">[in] - vertical shift of band; vshift GT 0 is down</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixRasteropVip(
				ByVal pixd as Pix, 
				ByVal bx as Integer, 
				ByVal bw as Integer, 
				ByVal vshift as Integer, 
				ByVal incolor as Enumerations.L_BRING_IN) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRasteropVip( pixd.Pointer, bx, bw, vshift, incolor)

	Return _Result
End Function

' SRC\rop.c (347, 1)
' pixRasteropHip()
' pixRasteropHip(PIX *, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This rasterop translates a horizontal band of the
''' image either left or right, bringing in either white
''' or black pixels from outside the image.
''' (2) The horizontal band extends the full width of pixd.
''' (3) If a colormap exists, the nearest color to white or black
''' is brought in.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - in-place operation</param>
'''  <param name="by">[in] - top of horizontal band</param>
'''  <param name="bh">[in] - height of horizontal band</param>
'''  <param name="hshift">[in] - horizontal shift of band; hshift GT 0 is to right</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixRasteropHip(
				ByVal pixd as Pix, 
				ByVal by as Integer, 
				ByVal bh as Integer, 
				ByVal hshift as Integer, 
				ByVal incolor as Enumerations.L_BRING_IN) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRasteropHip( pixd.Pointer, by, bh, hshift, incolor)

	Return _Result
End Function

' SRC\rop.c (431, 1)
' pixTranslate()
' pixTranslate(PIX *, PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The general pattern is
''' pixd = pixTranslate(pixd, pixs, ...);
''' For clarity, when you know the case, use one of these
''' pixd = pixTranslate(NULL, pixs, ...);  // new
''' pixTranslate(pixs, pixs, ...);   // in-place
''' pixTranslate(pixd, pixs, ...);   // to existing pixd
''' (2) If an existing pixd is not the same size as pixs, the
''' image data will be reallocated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - destination this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - </param>
'''  <param name="hshift">[in] - horizontal shift; hshift GT 0 is to right</param>
'''  <param name="vshift">[in] - vertical shift; vshift GT 0 is down</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error.</returns>
Public Shared Function pixTranslate(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal hshift as Integer, 
				ByVal vshift as Integer, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixTranslate( pixdPTR, pixs.Pointer, hshift, vshift, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rop.c (461, 1)
' pixRasteropIP()
' pixRasteropIP(PIX *, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - in-place translation</param>
'''  <param name="hshift">[in] - horizontal shift; hshift GT 0 is to right</param>
'''  <param name="vshift">[in] - vertical shift; vshift GT 0 is down</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixRasteropIP(
				ByVal pixd as Pix, 
				ByVal hshift as Integer, 
				ByVal vshift as Integer, 
				ByVal incolor as Enumerations.L_BRING_IN) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRasteropIP( pixd.Pointer, hshift, vshift, incolor)

	Return _Result
End Function

' SRC\rop.c (502, 1)
' pixRasteropFullImage()
' pixRasteropFullImage(PIX *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' ~ this is a wrapper for a common 2-image raster operation
''' ~ both pixs and pixd must be defined
''' ~ the operation is performed with aligned UL corners of pixs and pixd
''' ~ the operation clips to the smallest pix; if the width or height
''' of pixd is larger than pixs, some pixels in pixd will be unchanged
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - </param>
'''  <param name="pixs">[in] - </param>
'''  <param name="op">[in] - any of the op-codes</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixRasteropFullImage(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal op as Integer) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRasteropFullImage( pixd.Pointer, pixs.Pointer, op)

	Return _Result
End Function

#End Region
#Region "SRC\roplow.c"
' SRC\roplow.c (124, 1)
' rasteropUniLow()
' rasteropUniLow(l_uint32 *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="datad">[in] - ptr to dest image data</param>
'''  <param name="dpixw">[in] - width of dest</param>
'''  <param name="dpixh">[in] - height of dest</param>
'''  <param name="depth">[in] - depth of src and dest</param>
'''  <param name="dwpl">[in] - wpl of dest</param>
'''  <param name="dx">[in] - x val of UL corner of dest rectangle</param>
'''  <param name="dy">[in] - y val of UL corner of dest rectangle</param>
'''  <param name="dw">[in] - width of dest rectangle</param>
'''  <param name="dh">[in] - height of dest rectangle</param>
'''  <param name="op">[in] - op code</param>
Public Shared Sub rasteropUniLow(
				ByVal datad as Byte(), 
				ByVal dpixw as Integer, 
				ByVal dpixh as Integer, 
				ByVal depth as Integer, 
				ByVal dwpl as Integer, 
				ByVal dx as Integer, 
				ByVal dy as Integer, 
				ByVal dw as Integer, 
				ByVal dh as Integer, 
				ByVal op as Integer)

	If IsNothing (datad) then Throw New ArgumentNullException  ("datad cannot be Nothing")

	Dim datadPTR As IntPtr = Marshal.AllocHGlobal(datad.Count) : Marshal.Copy(datad, 0, datadPTR, datad.Length)

	LeptonicaSharp.Natives.rasteropUniLow( datadPTR, dpixw, dpixh, depth, dwpl, dx, dy, dw, dh, op)

End Sub

' SRC\roplow.c (481, 1)
' rasteropLow()
' rasteropLow(l_uint32 *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_uint32 *, l_int32, l_int32, l_int32, l_int32, l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="datad">[in] - ptr to dest image data</param>
'''  <param name="dpixw">[in] - width of dest</param>
'''  <param name="dpixh">[in] - height of dest</param>
'''  <param name="depth">[in] - depth of src and dest</param>
'''  <param name="dwpl">[in] - wpl of dest</param>
'''  <param name="dx">[in] - x val of UL corner of dest rectangle</param>
'''  <param name="dy">[in] - y val of UL corner of dest rectangle</param>
'''  <param name="dw">[in] - width of dest rectangle</param>
'''  <param name="dh">[in] - height of dest rectangle</param>
'''  <param name="op">[in] - op code</param>
'''  <param name="datas">[in] - ptr to src image data</param>
'''  <param name="spixw">[in] - width of src</param>
'''  <param name="spixh">[in] - height of src</param>
'''  <param name="swpl">[in] - wpl of src</param>
'''  <param name="sx">[in] - x val of UL corner of src rectangle</param>
'''  <param name="sy">[in] - y val of UL corner of src rectangle</param>
Public Shared Sub rasteropLow(
				ByVal datad as Byte(), 
				ByVal dpixw as Integer, 
				ByVal dpixh as Integer, 
				ByVal depth as Integer, 
				ByVal dwpl as Integer, 
				ByVal dx as Integer, 
				ByVal dy as Integer, 
				ByVal dw as Integer, 
				ByVal dh as Integer, 
				ByVal op as Integer, 
				ByVal datas as Byte(), 
				ByVal spixw as Integer, 
				ByVal spixh as Integer, 
				ByVal swpl as Integer, 
				ByVal sx as Integer, 
				ByVal sy as Integer)

	If IsNothing (datad) then Throw New ArgumentNullException  ("datad cannot be Nothing")
	If IsNothing (datas) then Throw New ArgumentNullException  ("datas cannot be Nothing")

	Dim datadPTR As IntPtr = Marshal.AllocHGlobal(datad.Count) : Marshal.Copy(datad, 0, datadPTR, datad.Length)
	Dim datasPTR As IntPtr = Marshal.AllocHGlobal(datas.Count) : Marshal.Copy(datas, 0, datasPTR, datas.Length)

	LeptonicaSharp.Natives.rasteropLow( datadPTR, dpixw, dpixh, depth, dwpl, dx, dy, dw, dh, op, datasPTR, spixw, spixh, swpl, sx, sy)

End Sub

' SRC\roplow.c (2146, 1)
' rasteropVipLow()
' rasteropVipLow(l_uint32 *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as void
'''  <summary>
''' Notes
''' (1) This clears the pixels that are left exposed after the
''' translation.  You can consider them as pixels that are
''' shifted in from outside the image.  This can be later
''' overridden by the incolor parameter in higher-level functions
''' that call this.  For example, for images with depth GT 1,
''' these pixels are cleared to black; to be white they
''' must later be SET to white.  See, e.g., pixRasteropVip().
''' (2) This function scales the width to accommodate any depth,
''' performs clipping, and then does the in-place rasterop.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - ptr to image data</param>
'''  <param name="pixw">[in] - width</param>
'''  <param name="pixh">[in] - height</param>
'''  <param name="depth">[in] - depth</param>
'''  <param name="wpl">[in] - wpl</param>
'''  <param name="x">[in] - x val of UL corner of rectangle</param>
'''  <param name="w">[in] - width of rectangle</param>
'''  <param name="shift">[in] - + shifts data downward in vertical column</param>
Public Shared Sub rasteropVipLow(
				ByVal data as Byte(), 
				ByVal pixw as Integer, 
				ByVal pixh as Integer, 
				ByVal depth as Integer, 
				ByVal wpl as Integer, 
				ByVal x as Integer, 
				ByVal w as Integer, 
				ByVal shift as Integer)

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")

	Dim dataPTR As IntPtr = Marshal.AllocHGlobal(data.Count) : Marshal.Copy(data, 0, dataPTR, data.Length)

	LeptonicaSharp.Natives.rasteropVipLow( dataPTR, pixw, pixh, depth, wpl, x, w, shift)

End Sub

' SRC\roplow.c (2359, 1)
' rasteropHipLow()
' rasteropHipLow(l_uint32 *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as void
'''  <summary>
''' Notes
''' (1) This clears the pixels that are left exposed after the rasterop.
''' Therefore, for Pix with depth GT 1, these pixels become black,
''' and must be subsequently SET if they are to be white.
''' For example, see pixRasteropHip().
''' (2) This function performs clipping and calls shiftDataHorizontalLow()
''' to do the in-place rasterop on each line.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - ptr to image data</param>
'''  <param name="pixh">[in] - height</param>
'''  <param name="depth">[in] - depth</param>
'''  <param name="wpl">[in] - wpl</param>
'''  <param name="y">[in] - y val of UL corner of rectangle</param>
'''  <param name="h">[in] - height of rectangle</param>
'''  <param name="shift">[in] - + shifts data to the left in a horizontal column</param>
Public Shared Sub rasteropHipLow(
				ByVal data as Byte(), 
				ByVal pixh as Integer, 
				ByVal depth as Integer, 
				ByVal wpl as Integer, 
				ByVal y as Integer, 
				ByVal h as Integer, 
				ByVal shift as Integer)

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")

	Dim dataPTR As IntPtr = Marshal.AllocHGlobal(data.Count) : Marshal.Copy(data, 0, dataPTR, data.Length)

	LeptonicaSharp.Natives.rasteropHipLow( dataPTR, pixh, depth, wpl, y, h, shift)

End Sub

#End Region
#Region "SRC\rotate.c"
' SRC\rotate.c (99, 1)
' pixRotate()
' pixRotate(PIX *, l_float32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a high-level, simple interface for rotating images
''' about their center.
''' (2) For very small rotations, just return a clone.
''' (3) Rotation brings either white or black pixels in
''' from outside the image.
''' (4) The rotation type is adjusted if necessary for the image
''' depth and size of rotation angle.  For 1 bpp images, we
''' rotate either by shear or sampling.
''' (5) Colormaps are removed for rotation by area mapping.
''' (6) The dest can be expanded so that no image pixels
''' are lost.  To invoke expansion, input the original
''' width and height.  For repeated rotation, use of the
''' original width and height allows the expansion to
''' stop at the maximum required size, which is a square
''' with side = sqrt(ww + hh).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 32 bpp rgb</param>
'''  <param name="angle">[in] - radians; clockwise is positive</param>
'''  <param name="type">[in] - L_ROTATE_AREA_MAP, L_ROTATE_SHEAR, L_ROTATE_SAMPLING</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''  <param name="width">[in] - original width; use 0 to avoid embedding</param>
'''  <param name="height">[in] - original height; use 0 to avoid embedding</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRotate(
				ByVal pixs as Pix, 
				ByVal angle as Single, 
				ByVal type as Enumerations.L_ROTATE, 
				ByVal incolor as Enumerations.L_BRING_IN, 
				ByVal width as Integer, 
				ByVal height as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotate( pixs.Pointer, angle, type, incolor, width, height)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotate.c (241, 1)
' pixEmbedForRotation()
' pixEmbedForRotation(PIX *, l_float32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) For very small rotations, just return a clone.
''' (2) Generate larger image to embed pixs if necessary, and
''' place the center of the input image in the center.
''' (3) Rotation brings either white or black pixels in
''' from outside the image.  For colormapped images where
''' there is no white or black, a new color is added if
''' possible for these pixels; otherwise, either the
''' lightest or darkest color is used.  In most cases,
''' the colormap will be removed prior to rotation.
''' (4) The dest is to be expanded so that no image pixels
''' are lost after rotation.  Input of the original width
''' and height allows the expansion to stop at the maximum
''' required size, which is a square with side equal to
''' sqrt(ww + hh).
''' (5) For an arbitrary angle, the expansion can be found by
''' considering the UL and UR corners.  As the image is
''' rotated, these move in an arc centered at the center of
''' the image.  Normalize to a unit circle by dividing by half
''' the image diagonal.  After a rotation of T radians, the UL
''' and UR corners are at points T radians along the unit
''' circle.  Compute the x and y coordinates of both these
''' points and take the max of absolute values; these represent
''' the half width and half height of the containing rectangle.
''' The arithmetic is done using formulas for sin(a+b) and cos(a+b),
''' where b = T.  For the UR corner, sin(a) = h/d and cos(a) = w/d.
''' For the UL corner, replace a by (pi - a), and you have
''' sin(pi - a) = h/d, cos(pi - a) = -w/d.  The equations
''' given below follow directly.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 32 bpp rgb</param>
'''  <param name="angle">[in] - radians; clockwise is positive</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''  <param name="width">[in] - original width; use 0 to avoid embedding</param>
'''  <param name="height">[in] - original height; use 0 to avoid embedding</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixEmbedForRotation(
				ByVal pixs as Pix, 
				ByVal angle as Single, 
				ByVal incolor as Enumerations.L_BRING_IN, 
				ByVal width as Integer, 
				ByVal height as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixEmbedForRotation( pixs.Pointer, angle, incolor, width, height)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotate.c (322, 1)
' pixRotateBySampling()
' pixRotateBySampling(PIX *, l_int32, l_int32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) For very small rotations, just return a clone.
''' (2) Rotation brings either white or black pixels in
''' from outside the image.
''' (3) Colormaps are retained.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16, 32 bpp rgb; can be cmapped</param>
'''  <param name="xcen">[in] - x value of center of rotation</param>
'''  <param name="ycen">[in] - y value of center of rotation</param>
'''  <param name="angle">[in] - radians; clockwise is positive</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRotateBySampling(
				ByVal pixs as Pix, 
				ByVal xcen as Integer, 
				ByVal ycen as Integer, 
				ByVal angle as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotateBySampling( pixs.Pointer, xcen, ycen, angle, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotate.c (455, 1)
' pixRotateBinaryNice()
' pixRotateBinaryNice(PIX *, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) For very small rotations, just return a clone.
''' (2) This does a computationally expensive rotation of 1 bpp images.
''' The fastest rotators (using shears or subsampling) leave
''' visible horizontal and vertical shear lines across which
''' the image shear changes by one pixel.  To ameliorate the
''' visual effect one can introduce random dithering.  One
''' way to do this in a not-too-random fashion is given here.
''' We convert to 8 bpp, do a very small blur, rotate using
''' linear interpolation (same as area mapping), do a
''' small amount of sharpening to compensate for the initial
''' blur, and threshold back to binary.  The shear lines
''' are magically removed.
''' (3) This operation is about 5x slower than rotation by sampling.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="angle">[in] - radians; clockwise is positive; about the center</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRotateBinaryNice(
				ByVal pixs as Pix, 
				ByVal angle as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotateBinaryNice( pixs.Pointer, angle, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotate.c (533, 1)
' pixRotateWithAlpha()
' pixRotateWithAlpha(PIX *, l_float32, PIX *, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) The alpha channel is transformed separately from pixs,
''' and aligns with it, being fully transparent outside the
''' boundary of the transformed pixs.  For pixels that are fully
''' transparent, a blending function like pixBlendWithGrayMask()
''' will give zero weight to corresponding pixels in pixs.
''' (2) Rotation is about the center of the image; for very small
''' rotations, just return a clone.  The dest is automatically
''' expanded so that no image pixels are lost.
''' (3) Rotation is by area mapping.  It doesn't matter what
''' color is brought in because the alpha channel will
''' be transparent (black) there.
''' (4) If pixg is NULL, it is generated as an alpha layer that is
''' partially opaque, using %fract.  Otherwise, it is cropped
''' to pixs if required and %fract is ignored.  The alpha
''' channel in pixs is never used.
''' (4) Colormaps are removed to 32 bpp.
''' (5) The default setting for the border values in the alpha channel
''' is 0 (transparent) for the outermost ring of pixels and
''' (0.5  fract  255) for the second ring.  When blended over
''' a second image, this
''' (a) shrinks the visible image to make a clean overlap edge
''' with an image below, and
''' (b) softens the edges by weakening the aliasing there.
''' Use l_setAlphaMaskBorder() to change these values.
''' (6) A subtle use of gamma correction is to remove gamma correction
''' before rotation and restore it afterwards.  This is done
''' by sandwiching this function between a gamma/inverse-gamma
''' photometric transform
''' pixt = pixGammaTRCWithAlpha(NULL, pixs, 1.0 / gamma, 0, 255);
''' pixd = pixRotateWithAlpha(pixt, angle, NULL, fract);
''' pixGammaTRCWithAlpha(pixd, pixd, gamma, 0, 255);
''' pixDestroy(pixt);
''' This has the side-effect of producing artifacts in the very
''' dark regions.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb or cmapped</param>
'''  <param name="angle">[in] - radians; clockwise is positive</param>
'''  <param name="pixg">[in][optional] - 8 bpp, can be null</param>
'''  <param name="fract">[in] - between 0.0 and 1.0, with 0.0 fully transparent and 1.0 fully opaque</param>
'''   <returns>pixd 32 bpp rgba, or NULL on error</returns>
Public Shared Function pixRotateWithAlpha(
				ByVal pixs as Pix, 
				ByVal angle as Single, 
				ByVal pixg as Pix, 
				ByVal fract as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")

	Dim pixgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixg) Then pixgPTR = pixg.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotateWithAlpha( pixs.Pointer, angle, pixgPTR, fract)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\rotateam.c"
' SRC\rotateam.c (149, 1)
' pixRotateAM()
' pixRotateAM(PIX *, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Rotates about image center.
''' (2) A positive angle gives a clockwise rotation.
''' (3) Brings in either black or white pixels from the boundary.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2, 4, 8 bpp gray or colormapped, or 32 bpp RGB</param>
'''  <param name="angle">[in] - radians; clockwise is positive</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRotateAM(
				ByVal pixs as Pix, 
				ByVal angle as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotateAM( pixs.Pointer, angle, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotateam.c (212, 1)
' pixRotateAMColor()
' pixRotateAMColor(PIX *, l_float32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) Rotates about image center.
''' (2) A positive angle gives a clockwise rotation.
''' (3) Specify the color to be brought in from outside the image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp</param>
'''  <param name="angle">[in] - radians; clockwise is positive</param>
'''  <param name="colorval">[in] - e.g., 0 to bring in BLACK, 0xffffff00 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRotateAMColor(
				ByVal pixs as Pix, 
				ByVal angle as Single, 
				ByVal colorval as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotateAMColor( pixs.Pointer, angle, colorval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotateam.c (266, 1)
' pixRotateAMGray()
' pixRotateAMGray(PIX *, l_float32, l_uint8) as PIX *
'''  <summary>
''' Notes
''' (1) Rotates about image center.
''' (2) A positive angle gives a clockwise rotation.
''' (3) Specify the grayvalue to be brought in from outside the image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="angle">[in] - radians; clockwise is positive</param>
'''  <param name="grayval">[in] - 0 to bring in BLACK, 255 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRotateAMGray(
				ByVal pixs as Pix, 
				ByVal angle as Single, 
				ByVal grayval as Byte) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")
	If IsNothing (grayval) then Throw New ArgumentNullException  ("grayval cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotateAMGray( pixs.Pointer, angle, grayval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotateam.c (447, 1)
' pixRotateAMCorner()
' pixRotateAMCorner(PIX *, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Rotates about the UL corner of the image.
''' (2) A positive angle gives a clockwise rotation.
''' (3) Brings in either black or white pixels from the boundary.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8 bpp gray or colormapped, or 32 bpp RGB</param>
'''  <param name="angle">[in] - radians; clockwise is positive</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRotateAMCorner(
				ByVal pixs as Pix, 
				ByVal angle as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotateAMCorner( pixs.Pointer, angle, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotateam.c (508, 1)
' pixRotateAMColorCorner()
' pixRotateAMColorCorner(PIX *, l_float32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) Rotates the image about the UL corner.
''' (2) A positive angle gives a clockwise rotation.
''' (3) Specify the color to be brought in from outside the image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="angle">[in] - radians; clockwise is positive</param>
'''  <param name="fillval">[in] - e.g., 0 to bring in BLACK, 0xffffff00 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRotateAMColorCorner(
				ByVal pixs as Pix, 
				ByVal angle as Single, 
				ByVal fillval as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotateAMColorCorner( pixs.Pointer, angle, fillval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotateam.c (562, 1)
' pixRotateAMGrayCorner()
' pixRotateAMGrayCorner(PIX *, l_float32, l_uint8) as PIX *
'''  <summary>
''' Notes
''' (1) Rotates the image about the UL corner.
''' (2) A positive angle gives a clockwise rotation.
''' (3) Specify the grayvalue to be brought in from outside the image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="angle">[in] - radians; clockwise is positive</param>
'''  <param name="grayval">[in] - 0 to bring in BLACK, 255 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRotateAMGrayCorner(
				ByVal pixs as Pix, 
				ByVal angle as Single, 
				ByVal grayval as Byte) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")
	If IsNothing (grayval) then Throw New ArgumentNullException  ("grayval cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotateAMGrayCorner( pixs.Pointer, angle, grayval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotateam.c (741, 1)
' pixRotateAMColorFast()
' pixRotateAMColorFast(PIX *, l_float32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) This rotates a color image about the image center.
''' (2) A positive angle gives a clockwise rotation.
''' (3) It uses area mapping, dividing each pixel into
''' 16 subpixels.
''' (4) It is about 10% to 20% faster than the more accurate linear
''' interpolation function pixRotateAMColor(),
''' which uses 256 subpixels.
''' (5) For some reason it shifts the image center.
''' No attempt is made to rotate the alpha component.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="angle">[in] - radians; clockwise is positive</param>
'''  <param name="colorval">[in] - e.g., 0 to bring in BLACK, 0xffffff00 for WHITE</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRotateAMColorFast(
				ByVal pixs as Pix, 
				ByVal angle as Single, 
				ByVal colorval as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotateAMColorFast( pixs.Pointer, angle, colorval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\rotateorth.c"
' SRC\rotateorth.c (72, 1)
' pixRotateOrth()
' pixRotateOrth(PIX *, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths</param>
'''  <param name="quads">[in] - 0-3; number of 90 degree cw rotations</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRotateOrth(
				ByVal pixs as Pix, 
				ByVal quads as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotateOrth( pixs.Pointer, quads)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotateorth.c (121, 1)
' pixRotate180()
' pixRotate180(PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This does a 180 rotation of the image about the center,
''' which is equivalent to a left-right flip about a vertical
''' line through the image center, followed by a top-bottom
''' flip about a horizontal line through the image center.
''' (2) There are 3 cases for input
''' (a) pixd == null (creates a new pixd)
''' (b) pixd == pixs (in-place operation)
''' (c) pixd != pixs (existing pixd)
''' (3) For clarity, use these three patterns, respectively
''' (a) pixd = pixRotate180(NULL, pixs);
''' (b) pixRotate180(pixs, pixs);
''' (c) pixRotate180(pixd, pixs);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - all depths</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRotate180(
				ByVal pixd as Pix, 
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotate180( pixdPTR, pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotateorth.c (163, 1)
' pixRotate90()
' pixRotate90(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This does a 90 degree rotation of the image about the center,
''' either cw or ccw, returning a new pix.
''' (2) The direction must be either 1 (cw) or -1 (ccw).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths</param>
'''  <param name="direction">[in] - 1 = clockwise,  -1 = counter-clockwise</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRotate90(
				ByVal pixs as Pix, 
				ByVal direction as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotate90( pixs.Pointer, direction)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotateorth.c (423, 1)
' pixFlipLR()
' pixFlipLR(PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This does a left-right flip of the image, which is
''' equivalent to a rotation out of the plane about a
''' vertical line through the image center.
''' (2) There are 3 cases for input
''' (a) pixd == null (creates a new pixd)
''' (b) pixd == pixs (in-place operation)
''' (c) pixd != pixs (existing pixd)
''' (3) For clarity, use these three patterns, respectively
''' (a) pixd = pixFlipLR(NULL, pixs);
''' (b) pixFlipLR(pixs, pixs);
''' (c) pixFlipLR(pixd, pixs);
''' (4) If an existing pixd is not the same size as pixs, the
''' image data will be reallocated.
''' (5) The pixel access routines allow a trivial implementation.
''' However, for d LT 8, it is more efficient to right-justify
''' each line to a 32-bit boundary and then extract bytes and
''' do pixel reversing.   In those cases, as in the 180 degree
''' rotation, we right-shift the data (if necessary) to
''' right-justify on the 32 bit boundary, and then read the
''' bytes off each raster line in reverse order, reversing
''' the pixels in each byte using a table.  These functions
''' for 1, 2 and 4 bpp were tested against the "trivial"
''' version (shown here for 4 bpp)
''' for (i = 0; i LT h; i++) {
''' line = data + i  wpl;
''' memcpy(buffer, line, bpl);
''' for (j = 0; j LT w; j++) {
''' val = GET_DATA_QBIT(buffer, w - 1 - j);
''' SET_DATA_QBIT(line, j, val);
''' }
''' }
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - all depths</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixFlipLR(
				ByVal pixd as Pix, 
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFlipLR( pixdPTR, pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotateorth.c (601, 1)
' pixFlipTB()
' pixFlipTB(PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This does a top-bottom flip of the image, which is
''' equivalent to a rotation out of the plane about a
''' horizontal line through the image center.
''' (2) There are 3 cases for input
''' (a) pixd == null (creates a new pixd)
''' (b) pixd == pixs (in-place operation)
''' (c) pixd != pixs (existing pixd)
''' (3) For clarity, use these three patterns, respectively
''' (a) pixd = pixFlipTB(NULL, pixs);
''' (b) pixFlipTB(pixs, pixs);
''' (c) pixFlipTB(pixd, pixs);
''' (4) If an existing pixd is not the same size as pixs, the
''' image data will be reallocated.
''' (5) This is simple and fast.  We use the memcpy function
''' to do all the work on aligned data, regardless of pixel
''' depth.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - all depths</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixFlipTB(
				ByVal pixd as Pix, 
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFlipTB( pixdPTR, pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\rotateshear.c"
' SRC\rotateshear.c (196, 1)
' pixRotateShear()
' pixRotateShear(PIX *, l_int32, l_int32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This rotates an image about the given point, using
''' either 2 or 3 shears.
''' (2) A positive angle gives a clockwise rotation.
''' (3) This brings in 'incolor' pixels from outside the image.
''' (4) For rotation angles larger than about 0.35 radians, we issue
''' a warning because you should probably be using another method
''' (either sampling or area mapping)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="xcen">[in] - x value for which there is no horizontal shear</param>
'''  <param name="ycen">[in] - y value for which there is no vertical shear</param>
'''  <param name="angle">[in] - radians</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK;</param>
'''   <returns>pixd, or NULL on error.</returns>
Public Shared Function pixRotateShear(
				ByVal pixs as Pix, 
				ByVal xcen as Integer, 
				ByVal ycen as Integer, 
				ByVal angle as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotateShear( pixs.Pointer, xcen, ycen, angle, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotateshear.c (248, 1)
' pixRotate2Shear()
' pixRotate2Shear(PIX *, l_int32, l_int32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This rotates the image about the given point, using the 2-shear
''' method.  It should only be used for angles smaller than
''' MAX_2_SHEAR_ANGLE.  For larger angles, a warning is issued.
''' (2) A positive angle gives a clockwise rotation.
''' (3) 2-shear rotation by a specified angle is equivalent
''' to the sequential transformations
''' x' = x + tan(angle)  (y - ycen)  for x-shear
''' y' = y + tan(angle)  (x - xcen)  for y-shear
''' (4) Computation of tan(angle) is performed within the shear operation.
''' (5) This brings in 'incolor' pixels from outside the image.
''' (6) If the image has an alpha layer, it is rotated separately by
''' two shears.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="xcen">[in] - center of rotation</param>
'''  <param name="ycen">[in] - center of rotation</param>
'''  <param name="angle">[in] - radians</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK;</param>
'''   <returns>pixd, or NULL on error.</returns>
Public Shared Function pixRotate2Shear(
				ByVal pixs as Pix, 
				ByVal xcen as Integer, 
				ByVal ycen as Integer, 
				ByVal angle as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotate2Shear( pixs.Pointer, xcen, ycen, angle, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotateshear.c (319, 1)
' pixRotate3Shear()
' pixRotate3Shear(PIX *, l_int32, l_int32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This rotates the image about the given point, using the 3-shear
''' method.  It should only be used for angles smaller than
''' LIMIT_SHEAR_ANGLE.  For larger angles, a warning is issued.
''' (2) A positive angle gives a clockwise rotation.
''' (3) 3-shear rotation by a specified angle is equivalent
''' to the sequential transformations
''' y' = y + tan(angle/2)  (x - xcen)  for first y-shear
''' x' = x + sin(angle)  (y - ycen) for x-shear
''' y' = y + tan(angle/2)  (x - xcen)  for second y-shear
''' (4) Computation of tan(angle) is performed in the shear operations.
''' (5) This brings in 'incolor' pixels from outside the image.
''' (6) If the image has an alpha layer, it is rotated separately by
''' two shears.
''' (7) The algorithm was published by Alan Paeth "A Fast Algorithm
''' for General Raster Rotation," Graphics Interface '86,
''' pp. 77-81, May 1986.  A description of the method, along with
''' an implementation, can be found in Graphics Gems, p. 179,
''' edited by Andrew Glassner, published by Academic Press, 1990.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="xcen">[in] - center of rotation</param>
'''  <param name="ycen">[in] - center of rotation</param>
'''  <param name="angle">[in] - radians</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK;</param>
'''   <returns>pixd, or NULL on error.</returns>
Public Shared Function pixRotate3Shear(
				ByVal pixs as Pix, 
				ByVal xcen as Integer, 
				ByVal ycen as Integer, 
				ByVal angle as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotate3Shear( pixs.Pointer, xcen, ycen, angle, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotateshear.c (395, 1)
' pixRotateShearIP()
' pixRotateShearIP(PIX *, l_int32, l_int32, l_float32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This does an in-place rotation of the image about the
''' specified point, using the 3-shear method.  It should only
''' be used for angles smaller than LIMIT_SHEAR_ANGLE.
''' For larger angles, a warning is issued.
''' (2) A positive angle gives a clockwise rotation.
''' (3) 3-shear rotation by a specified angle is equivalent
''' to the sequential transformations
''' y' = y + tan(angle/2)  (x - xcen)   for first y-shear
''' x' = x + sin(angle)  (y - ycen)  for x-shear
''' y' = y + tan(angle/2)  (x - xcen)   for second y-shear
''' (4) Computation of tan(angle) is performed in the shear operations.
''' (5) This brings in 'incolor' pixels from outside the image.
''' (6) The pix cannot be colormapped, because the in-place operation
''' only blits in 0 or 1 bits, not an arbitrary colormap index.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth; not colormapped</param>
'''  <param name="xcen">[in] - center of rotation</param>
'''  <param name="ycen">[in] - center of rotation</param>
'''  <param name="angle">[in] - radians</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixRotateShearIP(
				ByVal pixs as Pix, 
				ByVal xcen as Integer, 
				ByVal ycen as Integer, 
				ByVal angle as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRotateShearIP( pixs.Pointer, xcen, ycen, angle, incolor)

	Return _Result
End Function

' SRC\rotateshear.c (439, 1)
' pixRotateShearCenter()
' pixRotateShearCenter(PIX *, l_float32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="angle">[in] - radians</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRotateShearCenter(
				ByVal pixs as Pix, 
				ByVal angle as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRotateShearCenter( pixs.Pointer, angle, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\rotateshear.c (462, 1)
' pixRotateShearCenterIP()
' pixRotateShearCenterIP(PIX *, l_float32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="angle">[in] - radians</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixRotateShearCenterIP(
				ByVal pixs as Pix, 
				ByVal angle as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (angle) then Throw New ArgumentNullException  ("angle cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixRotateShearCenterIP( pixs.Pointer, angle, incolor)

	Return _Result
End Function

#End Region
#Region "SRC\runlength.c"
' SRC\runlength.c (99, 1)
' pixStrokeWidthTransform()
' pixStrokeWidthTransform(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The dest Pix is 8 or 16 bpp, with the pixel values
''' equal to the stroke width in which it is a member.
''' The values are clipped to the max pixel value if necessary.
''' (2) The color determines if we're labelling white or black strokes.
''' (3) A pixel that is not a member of the chosen color gets
''' value 0; it belongs to a width of length 0 of the
''' chosen color.
''' (4) This chooses, for each dest pixel, the minimum of sets
''' of runlengths through each pixel.  Here are the sets
''' nangles increment set
''' ------- --------- --------------------------------
''' 2 90 {0, 90}
''' 4 45 {0, 45, 90, 135}
''' 6 30 {0, 30, 60, 90, 120, 150}
''' 8 22.5  {0, 22.5, 45, 67.5, 90, 112.5, 135, 157.5}
''' (5) Runtime scales linearly with (nangles - 2).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="color">[in] - 0 for white runs, 1 for black runs</param>
'''  <param name="depth">[in] - of pixd 8 or 16 bpp</param>
'''  <param name="nangles">[in] - 2, 4, 6 or 8</param>
'''   <returns>pixd 8 or 16 bpp, or NULL on error</returns>
Public Shared Function pixStrokeWidthTransform(
				ByVal pixs as Pix, 
				ByVal color as Integer, 
				ByVal depth as Integer, 
				ByVal nangles as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixStrokeWidthTransform( pixs.Pointer, color, depth, nangles)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\runlength.c (262, 1)
' pixRunlengthTransform()
' pixRunlengthTransform(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The dest Pix is 8 or 16 bpp, with the pixel values
''' equal to the runlength in which it is a member.
''' The length is clipped to the max pixel value if necessary.
''' (2) The color determines if we're labelling white or black runs.
''' (3) A pixel that is not a member of the chosen color gets
''' value 0; it belongs to a run of length 0 of the
''' chosen color.
''' (4) To convert for maximum dynamic range, either linear or
''' log, use pixMaxDynamicRange().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="color">[in] - 0 for white runs, 1 for black runs</param>
'''  <param name="direction">[in] - L_HORIZONTAL_RUNS, L_VERTICAL_RUNS</param>
'''  <param name="depth">[in] - 8 or 16 bpp</param>
'''   <returns>pixd 8 or 16 bpp, or NULL on error</returns>
Public Shared Function pixRunlengthTransform(
				ByVal pixs as Pix, 
				ByVal color as Integer, 
				ByVal direction as Enumerations.L_AL_RUNS, 
				ByVal depth as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRunlengthTransform( pixs.Pointer, color, direction, depth)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\runlength.c (372, 1)
' pixFindHorizontalRuns()
' pixFindHorizontalRuns(PIX *, l_int32, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This finds foreground horizontal runs on a single scanline.
''' (2) To find background runs, use pixInvert() before applying
''' this function.
''' (3) The xstart and xend arrays are input.  They should be
''' of size w/2 + 1 to insure that they can hold
''' the maximum number of runs in the raster line.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1 bpp</param>
'''  <param name="y">[in] - line to traverse</param>
'''  <param name="xstart">[in] - returns array of start positions for fg runs</param>
'''  <param name="xend">[in] - returns array of end positions for fg runs</param>
'''  <param name="pn">[out] - the number of runs found</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixFindHorizontalRuns(
				ByVal pix as Pix, 
				ByVal y as Integer, 
				ByVal xstart as Integer(), 
				ByVal xend as Integer(), 
				ByRef pn as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (xstart) then Throw New ArgumentNullException  ("xstart cannot be Nothing")
	If IsNothing (xend) then Throw New ArgumentNullException  ("xend cannot be Nothing")
	If {1}.contains (pix.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindHorizontalRuns( pix.Pointer, y, xstart, xend, pn)

	Return _Result
End Function

' SRC\runlength.c (449, 1)
' pixFindVerticalRuns()
' pixFindVerticalRuns(PIX *, l_int32, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This finds foreground vertical runs on a single scanline.
''' (2) To find background runs, use pixInvert() before applying
''' this function.
''' (3) The ystart and yend arrays are input.  They should be
''' of size h/2 + 1 to insure that they can hold
''' the maximum number of runs in the raster line.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1 bpp</param>
'''  <param name="x">[in] - line to traverse</param>
'''  <param name="ystart">[in] - returns array of start positions for fg runs</param>
'''  <param name="yend">[in] - returns array of end positions for fg runs</param>
'''  <param name="pn">[out] - the number of runs found</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixFindVerticalRuns(
				ByVal pix as Pix, 
				ByVal x as Integer, 
				ByVal ystart as Integer(), 
				ByVal yend as Integer(), 
				ByRef pn as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (ystart) then Throw New ArgumentNullException  ("ystart cannot be Nothing")
	If IsNothing (yend) then Throw New ArgumentNullException  ("yend cannot be Nothing")
	If {1}.contains (pix.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindVerticalRuns( pix.Pointer, x, ystart, yend, pn)

	Return _Result
End Function

' SRC\runlength.c (525, 1)
' pixFindMaxRuns()
' pixFindMaxRuns(PIX *, l_int32, NUMA **) as NUMA *
'''  <summary>
''' Notes
''' (1) This finds the longest foreground runs by row or column
''' (2) To find background runs, use pixInvert() before applying
''' this function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1 bpp</param>
'''  <param name="direction">[in] - L_HORIZONTAL_RUNS or L_VERTICAL_RUNS</param>
'''  <param name="pnastart">[out][optional] - start locations of longest runs</param>
'''   <returns>na of lengths of runs, or NULL on error</returns>
Public Shared Function pixFindMaxRuns(
				ByVal pix as Pix, 
				ByVal direction as Enumerations.L_AL_RUNS, 
				ByRef pnastart as Numa) as Numa

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {1}.contains (pix.d) = false then Throw New ArgumentException ("1 bpp")

Dim pnastartPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnastart) Then pnastartPTR = pnastart.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFindMaxRuns( pix.Pointer, direction, pnastartPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if pnastartPTR <> IntPtr.Zero then pnastart = new Numa(pnastartPTR)

	Return  new Numa(_Result)
End Function

' SRC\runlength.c (578, 1)
' pixFindMaxHorizontalRunOnLine()
' pixFindMaxHorizontalRunOnLine(PIX *, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This finds the longest foreground horizontal run on a scanline.
''' (2) To find background runs, use pixInvert() before applying
''' this function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1 bpp</param>
'''  <param name="y">[in] - line to traverse</param>
'''  <param name="pxstart">[out][optional] - start position</param>
'''  <param name="psize">[out] - the size of the run</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixFindMaxHorizontalRunOnLine(
				ByVal pix as Pix, 
				ByVal y as Integer, 
				ByRef pxstart as Integer, 
				ByRef psize as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {1}.contains (pix.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindMaxHorizontalRunOnLine( pix.Pointer, y, pxstart, psize)

	Return _Result
End Function

' SRC\runlength.c (652, 1)
' pixFindMaxVerticalRunOnLine()
' pixFindMaxVerticalRunOnLine(PIX *, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This finds the longest foreground vertical run on a scanline.
''' (2) To find background runs, use pixInvert() before applying
''' this function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 1 bpp</param>
'''  <param name="x">[in] - column to traverse</param>
'''  <param name="pystart">[out][optional] - start position</param>
'''  <param name="psize">[out] - the size of the run</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixFindMaxVerticalRunOnLine(
				ByVal pix as Pix, 
				ByVal x as Integer, 
				ByRef pystart as Integer, 
				ByRef psize as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If {1}.contains (pix.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindMaxVerticalRunOnLine( pix.Pointer, x, pystart, psize)

	Return _Result
End Function

' SRC\runlength.c (733, 1)
' runlengthMembershipOnLine()
' runlengthMembershipOnLine(l_int32 *, l_int32, l_int32, l_int32 *, l_int32 *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Converts a set of runlengths into a buffer of
''' runlength membership values.
''' (2) Initialization of the array gives pixels that are
''' not within a run the value 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="buffer">[in] - into which full line of data is placed</param>
'''  <param name="size">[in] - full size of line; w or h</param>
'''  <param name="depth">[in] - 8 or 16 bpp</param>
'''  <param name="start">[in] - array of start positions for fg runs</param>
'''  <param name="n">[in] - the number of runs</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function runlengthMembershipOnLine(
				ByVal buffer as Integer(), 
				ByVal size as Integer, 
				ByVal depth as Integer, 
				ByVal start as Integer(), 
				ByRef _end_ as Object, 
				ByVal n as Integer) as Integer

	If IsNothing (buffer) then Throw New ArgumentNullException  ("buffer cannot be Nothing")
	If IsNothing (start) then Throw New ArgumentNullException  ("start cannot be Nothing")
	If IsNothing (_end_) then Throw New ArgumentNullException  ("_end_ cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.runlengthMembershipOnLine( buffer, size, depth, start, _end_, n)

	Return _Result
End Function

' SRC\runlength.c (791, 1)
' makeMSBitLocTab()
' makeMSBitLocTab(l_int32) as l_int32 *
'''  <summary>
''' Notes
''' (1) If bitval == 1, it finds the leftmost ON pixel in a byte;
''' otherwise if bitval == 0, it finds the leftmost OFF pixel.
''' (2) If there are no pixels of the indicated color in the byte,
''' this returns 8.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="bitval">[in] - either 0 or 1</param>
'''   <returns>table giving, for an input byte, the MS bit location, starting at 0 with the MSBit in the byte, or NULL on error.</returns>
Public Shared Function makeMSBitLocTab(
				ByVal bitval as Integer) as Integer()



	Dim _Result as Integer() = LeptonicaSharp.Natives.makeMSBitLocTab( bitval)

	Return _Result
End Function

#End Region
#Region "SRC\sarray1.c"
' SRC\sarray1.c (163, 1)
' sarrayCreate()
' sarrayCreate(l_int32) as SARRAY *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - size of string ptr array to be alloc'd; use 0 for default</param>
'''   <returns>sarray, or NULL on error</returns>
Public Shared Function sarrayCreate(
				ByVal n as Integer) as Sarray



	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray1.c (193, 1)
' sarrayCreateInitialized()
' sarrayCreateInitialized(l_int32, const char *) as SARRAY *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - size of string ptr array to be alloc'd</param>
'''  <param name="initstr">[in] - string to be initialized on the full array</param>
'''   <returns>sarray, or NULL on error</returns>
Public Shared Function sarrayCreateInitialized(
				ByVal n as Integer, 
				ByVal initstr as String) as Sarray

	If IsNothing (initstr) then Throw New ArgumentNullException  ("initstr cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayCreateInitialized( n, initstr)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray1.c (226, 1)
' sarrayCreateWordsFromString()
' sarrayCreateWordsFromString(const char *) as SARRAY *
'''  <summary>
''' Notes
''' (1) This finds the number of word substrings, creates an sarray
''' of this size, and puts copies of each substring into the sarray.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns>sarray, or NULL on error</returns>
Public Shared Function sarrayCreateWordsFromString(
				ByRef _string_ as String) as Sarray

	If IsNothing (_string_) then Throw New ArgumentNullException  ("_string_ cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayCreateWordsFromString( _string_)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray1.c (276, 1)
' sarrayCreateLinesFromString()
' sarrayCreateLinesFromString(const char *, l_int32) as SARRAY *
'''  <summary>
''' Notes
''' (1) This finds the number of line substrings, each of which
''' ends with a newline, and puts a copy of each substring
''' in a new sarray.
''' (2) The newline characters are removed from each substring.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="blankflag">[in] - 0 to exclude blank lines; 1 to include</param>
'''   <returns>sarray, or NULL on error</returns>
Public Shared Function sarrayCreateLinesFromString(
				ByRef _string_ as String, 
				ByVal blankflag as Integer) as Sarray

	If IsNothing (_string_) then Throw New ArgumentNullException  ("_string_ cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayCreateLinesFromString( _string_, blankflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray1.c (355, 1)
' sarrayDestroy()
' sarrayDestroy(SARRAY **) as void
'''  <summary>
''' Notes
''' (1) Decrements the ref count and, if 0, destroys the sarray.
''' (2) Always nulls the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="psa">[in,out] - to be nulled</param>
Public Shared Sub sarrayDestroy(
				ByRef psa as Sarray)


	Dim psaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(psa) Then psaPTR = psa.Pointer

	LeptonicaSharp.Natives.sarrayDestroy( psaPTR)
	if psaPTR <> IntPtr.Zero then psa = new Sarray(psaPTR)

End Sub

' SRC\sarray1.c (393, 1)
' sarrayCopy()
' sarrayCopy(SARRAY *) as SARRAY *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array</param>
'''   <returns>copy of sarray, or NULL on error</returns>
Public Shared Function sarrayCopy(
				ByVal sa as Sarray) as Sarray

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayCopy( sa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray1.c (420, 1)
' sarrayClone()
' sarrayClone(SARRAY *) as SARRAY *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array</param>
'''   <returns>ptr to same sarray, or NULL on error</returns>
Public Shared Function sarrayClone(
				ByVal sa as Sarray) as Sarray

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayClone( sa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray1.c (446, 1)
' sarrayAddString()
' sarrayAddString(SARRAY *, const char *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) See usage comments at the top of this file.  L_INSERT is
''' equivalent to L_NOCOPY.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array</param>
'''  <param name="copyflag">[in] - L_INSERT, L_NOCOPY or L_COPY</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function sarrayAddString(
				ByVal sa as Sarray, 
				ByRef _string_ as String, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If IsNothing (_string_) then Throw New ArgumentNullException  ("_string_ cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayAddString( sa.Pointer, _string_, copyflag)

	Return _Result
End Function

' SRC\sarray1.c (506, 1)
' sarrayRemoveString()
' sarrayRemoveString(SARRAY *, l_int32) as char *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array</param>
'''  <param name="index">[in] - of string within sarray</param>
'''   <returns>removed string, or NULL on error</returns>
Public Shared Function sarrayRemoveString(
				ByVal sa as Sarray, 
				ByVal index as Integer) as String

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.sarrayRemoveString( sa.Pointer, index)

	Return _Result
End Function

' SRC\sarray1.c (557, 1)
' sarrayReplaceString()
' sarrayReplaceString(SARRAY *, l_int32, char *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This destroys an existing string and replaces it with
''' the new string or a copy of it.
''' (2) By design, an sarray is always compacted, so there are
''' never any holes (null ptrs) in the ptr array up to the
''' current count.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array</param>
'''  <param name="index">[in] - of string within sarray to be replaced</param>
'''  <param name="newstr">[in] - string to replace existing one</param>
'''  <param name="copyflag">[in] - L_INSERT, L_COPY</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function sarrayReplaceString(
				ByVal sa as Sarray, 
				ByVal index as Integer, 
				ByVal newstr as String, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If IsNothing (newstr) then Throw New ArgumentNullException  ("newstr cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayReplaceString( sa.Pointer, index, newstr, copyflag)

	Return _Result
End Function

' SRC\sarray1.c (594, 1)
' sarrayClear()
' sarrayClear(SARRAY *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function sarrayClear(
				ByVal sa as Sarray) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayClear( sa.Pointer)

	Return _Result
End Function

' SRC\sarray1.c (621, 1)
' sarrayGetCount()
' sarrayGetCount(SARRAY *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array</param>
'''   <returns>count, or 0 if no strings or on error</returns>
Public Shared Function sarrayGetCount(
				ByVal sa as Sarray) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayGetCount( sa.Pointer)

	Return _Result
End Function

' SRC\sarray1.c (646, 1)
' sarrayGetArray()
' sarrayGetArray(SARRAY *, l_int32 *, l_int32 *) as char **
'''  <summary>
''' Notes
''' (1) Caution the returned array is not a copy, so caller
''' must not destroy it!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array</param>
'''  <param name="pnalloc">[out][optional] - number allocated string ptrs</param>
'''  <param name="pn">[out][optional] - number allocated strings</param>
'''   <returns>ptr to string array, or NULL on error</returns>
Public Shared Function sarrayGetArray(
				ByVal sa as Sarray, 
				ByRef pnalloc as Integer, 
				ByRef pn as Integer) as String()

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayGetArray( sa.Pointer, pnalloc, pn)
Dim PTRARR(pnalloc-1) As IntPtr : Marshal.Copy(_Result, PTRARR, 0, PTRARR.Length)
Dim BLST As New List(Of String) : For Each eintrag In PTRARR : BLST.Add(Marshal.PtrToStringAnsi(eintrag)) : Next
Dim B As String() = BLST.toArray()

	Return B
End Function

' SRC\sarray1.c (681, 1)
' sarrayGetString()
' sarrayGetString(SARRAY *, l_int32, l_int32) as char *
'''  <summary>
''' Notes
''' (1) See usage comments at the top of this file.
''' (2) To get a pointer to the string itself, use L_NOCOPY.
''' To get a copy of the string, use L_COPY.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array</param>
'''  <param name="index">[in] - to the index-th string</param>
'''  <param name="copyflag">[in] - L_NOCOPY or L_COPY</param>
'''   <returns>string, or NULL on error</returns>
Public Shared Function sarrayGetString(
				ByVal sa as Sarray, 
				ByVal index as Integer, 
				ByVal copyflag as Enumerations.L_access_storage) as String

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.sarrayGetString( sa.Pointer, index, copyflag)

	Return _Result
End Function

' SRC\sarray1.c (708, 1)
' sarrayGetRefCount()
' sarrayGetRefcount(SARRAY *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array</param>
'''   <returns>refcount, or UNDEF on error</returns>
Public Shared Function sarrayGetRefcount(
				ByVal sa as Sarray) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayGetRefcount( sa.Pointer)

	Return _Result
End Function

' SRC\sarray1.c (726, 1)
' sarrayChangeRefCount()
' sarrayChangeRefcount(SARRAY *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array</param>
'''  <param name="delta">[in] - change to be applied</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function sarrayChangeRefcount(
				ByVal sa as Sarray, 
				ByVal delta as Integer) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayChangeRefcount( sa.Pointer, delta)

	Return _Result
End Function

' SRC\sarray1.c (763, 1)
' sarrayToString()
' sarrayToString(SARRAY *, l_int32) as char *
'''  <summary>
''' Notes
''' (1) Concatenates all the strings in the sarray, preserving
''' all white space.
''' (2) If addnlflag != 0, adds either a '\n' or a ' ' after
''' each substring.
''' (3) This function was NOT implemented as
''' for (i = 0; i LT n; i++)
''' strcat(dest, sarrayGetString(sa, i, L_NOCOPY));
''' Do you see why?
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array</param>
'''  <param name="addnlflag">[in] - flag 0 adds nothing to each substring 1 adds '\n' to each substring 2 adds ' ' to each substring</param>
'''   <returns>dest string, or NULL on error</returns>
Public Shared Function sarrayToString(
				ByVal sa as Sarray, 
				ByVal addnlflag as Integer) as String

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.sarrayToString( sa.Pointer, addnlflag)

	Return _Result
End Function

' SRC\sarray1.c (798, 1)
' sarrayToStringRange()
' sarrayToStringRange(SARRAY *, l_int32, l_int32, l_int32) as char *
'''  <summary>
''' Notes
''' (1) Concatenates the specified strings inthe sarray, preserving
''' all white space.
''' (2) If addnlflag != 0, adds either a '\n' or a ' ' after
''' each substring.
''' (3) If the sarray is empty, this returns a string with just
''' the character corresponding to %addnlflag.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array</param>
'''  <param name="first">[in] - index of first string to use; starts with 0</param>
'''  <param name="nstrings">[in] - number of strings to append into the result; use 0 to append to the end of the sarray</param>
'''  <param name="addnlflag">[in] - flag 0 adds nothing to each substring 1 adds '\n' to each substring 2 adds ' ' to each substring</param>
'''   <returns>dest string, or NULL on error</returns>
Public Shared Function sarrayToStringRange(
				ByVal sa as Sarray, 
				ByVal first as Integer, 
				ByVal nstrings as Integer, 
				ByVal addnlflag as Integer) as String

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.sarrayToStringRange( sa.Pointer, first, nstrings, addnlflag)

	Return _Result
End Function

' SRC\sarray1.c (880, 1)
' sarrayJoin()
' sarrayJoin(SARRAY *, SARRAY *) as l_ok
'''  <summary>
''' Notes
''' (1) Copies of the strings in sarray2 are added to sarray1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa1">[in] - to be added to</param>
'''  <param name="sa2">[in] - append to sa1</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function sarrayJoin(
				ByVal sa1 as Sarray, 
				ByVal sa2 as Sarray) as Integer

	If IsNothing (sa1) then Throw New ArgumentNullException  ("sa1 cannot be Nothing")
	If IsNothing (sa2) then Throw New ArgumentNullException  ("sa2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayJoin( sa1.Pointer, sa2.Pointer)

	Return _Result
End Function

' SRC\sarray1.c (920, 1)
' sarrayAppendRange()
' sarrayAppendRange(SARRAY *, SARRAY *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Copies of the strings in sarray2 are added to sarray1.
''' (2) The [start ... end] range is truncated if necessary.
''' (3) Use end == -1 to append to the end of sa2.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa1">[in] - to be added to</param>
'''  <param name="sa2">[in] - append specified range of strings in sa2 to sa1</param>
'''  <param name="start">[in] - index of first string of sa2 to append</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function sarrayAppendRange(
				ByVal sa1 as Sarray, 
				ByVal sa2 as Sarray, 
				ByVal start as Integer, 
				ByRef _end_ as Integer) as Integer

	If IsNothing (sa1) then Throw New ArgumentNullException  ("sa1 cannot be Nothing")
	If IsNothing (sa2) then Throw New ArgumentNullException  ("sa2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayAppendRange( sa1.Pointer, sa2.Pointer, start, _end_)

	Return _Result
End Function

' SRC\sarray1.c (972, 1)
' sarrayPadToSameSize()
' sarrayPadToSameSize(SARRAY *, SARRAY *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) If two sarrays have different size, this adds enough
''' instances of %padstring to the smaller so that they are
''' the same size.  It is useful when two or more sarrays
''' are being sequenced in parallel, and it is necessary to
''' find a valid string at each index.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa1">[in] - </param>
'''  <param name="sa2">[in] - </param>
'''  <param name="padstring">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function sarrayPadToSameSize(
				ByVal sa1 as Sarray, 
				ByVal sa2 as Sarray, 
				ByVal padstring as String) as Integer

	If IsNothing (sa1) then Throw New ArgumentNullException  ("sa1 cannot be Nothing")
	If IsNothing (sa2) then Throw New ArgumentNullException  ("sa2 cannot be Nothing")
	If IsNothing (padstring) then Throw New ArgumentNullException  ("padstring cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayPadToSameSize( sa1.Pointer, sa2.Pointer, padstring)

	Return _Result
End Function

' SRC\sarray1.c (1029, 1)
' sarrayConvertWordsToLines()
' sarrayConvertWordsToLines(SARRAY *, l_int32) as SARRAY *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - sa of individual words</param>
'''  <param name="linesize">[in] - max num of chars in each line</param>
'''   <returns>saout sa of formatted lines, or NULL on error This is useful for re-typesetting text to a specific maximum line length.  The individual words in the input sarray are concatenated into textlines.  An input word string of zero length is taken to be a paragraph separator.  Each time such a string is found, the current line is ended and a new line is also produced that contains just the string of zero length "".  When the output sarray of lines is eventually converted to a string with newlines typically appended to each line string, the empty strings are just converted to newlines, producing the visible paragraph separation. What happens when a word is larger than linesize? We write it out as a single line anyway!  Words preceding or following this long word are placed on lines preceding or following the line with the long word.  Why this choice? Long "words" found in text documents are typically URLs, and it's often desirable not to put newlines in the middle of a URL. The text display program e.g., text editor will typically wrap the long "word" to fit in the window.</returns>
Public Shared Function sarrayConvertWordsToLines(
				ByVal sa as Sarray, 
				ByVal linesize as Integer) as Sarray

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayConvertWordsToLines( sa.Pointer, linesize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray1.c (1098, 1)
' 
' sarraySplitString(SARRAY *, const char *, const char *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function sarraySplitString(
				ByRef sa as Sarray, 
				ByRef str as String, 
				ByRef separators as String) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If IsNothing (str) then Throw New ArgumentNullException  ("str cannot be Nothing")
	If IsNothing (separators) then Throw New ArgumentNullException  ("separators cannot be Nothing")

Dim saPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sa) Then saPTR = sa.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.sarraySplitString( sa.Pointer, str, separators)

	Return _Result
End Function

' SRC\sarray1.c (1145, 1)
' sarraySelectBySubstring()
' sarraySelectBySubstring(SARRAY *, const char *) as SARRAY *
'''  <summary>
''' Notes
''' (1) This selects all strings in sain that have substr as a substring.
''' Note that we can't use strncmp() because we're looking for
''' a match to the substring anywhere within each filename.
''' (2) If substr == NULL, returns a copy of the sarray.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sain">[in] - input sarray</param>
'''  <param name="substr">[in][optional] - substring for matching; can be NULL</param>
'''   <returns>saout output sarray, filtered with substring or NULL on error</returns>
Public Shared Function sarraySelectBySubstring(
				ByVal sain as Sarray, 
				ByVal substr as String) as Sarray

	If IsNothing (sain) then Throw New ArgumentNullException  ("sain cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarraySelectBySubstring( sain.Pointer, substr)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray1.c (1191, 1)
' sarraySelectByRange()
' sarraySelectByRange(SARRAY *, l_int32, l_int32) as SARRAY *
'''  <summary>
''' Notes
''' (1) This makes %saout consisting of copies of all strings in %sain
''' in the index set [first ... last].  Use %last == 0 to get all
''' strings from %first to the last string in the sarray.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sain">[in] - input sarray</param>
'''  <param name="first">[in] - index of first string to be selected</param>
'''  <param name="last">[in] - index of last string to be selected; use 0 to go to the end of the sarray</param>
'''   <returns>saout output sarray, or NULL on error</returns>
Public Shared Function sarraySelectByRange(
				ByVal sain as Sarray, 
				ByVal first as Integer, 
				ByVal last as Integer) as Sarray

	If IsNothing (sain) then Throw New ArgumentNullException  ("sain cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarraySelectByRange( sain.Pointer, first, last)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray1.c (1260, 1)
' sarrayParseRange()
' sarrayParseRange(SARRAY *, l_int32, l_int32 *, l_int32 *, l_int32 *, const char *, l_int32) as l_int32
'''  <summary>
''' Notes
''' (1) This finds the range of the next set of strings in SA,
''' beginning the search at 'start', that does NOT have
''' the substring 'substr' either at the indicated location
''' in the string or anywhere in the string.  The input
''' variable 'loc' is the specified offset within the string;
''' use -1 to indicate 'anywhere in the string'.
''' (2) Always check the return value to verify that a valid range
''' was found.
''' (3) If a valid range is not found, the values of actstart,
''' end and newstart are all set to the size of sa.
''' (4) If this is the last valid range, newstart returns the value n.
''' In use, this should be tested before calling the function.
''' (5) Usage example.  To find all the valid ranges in a file
''' where the invalid lines begin with two dashes, copy each
''' line in the file to a string in an sarray, and do
''' start = 0;
''' while (!sarrayParseRange(sa, start, actstart, end, start,
''' "--", 0))
''' fprintf(stderr, "start = %d, end = %d\n", actstart, end);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - input sarray</param>
'''  <param name="start">[in] - index to start range search</param>
'''  <param name="pactualstart">[out] - index of actual start; may be GT 'start'</param>
'''  <param name="pend">[out] - index of end</param>
'''  <param name="pnewstart">[out] - index of start of next range</param>
'''  <param name="substr">[in] - substring for matching at beginning of string</param>
'''  <param name="loc">[in] - byte offset within the string for the pattern; use -1 if the location does not matter;</param>
'''   <returns>0 if valid range found; 1 otherwise</returns>
Public Shared Function sarrayParseRange(
				ByVal sa as Sarray, 
				ByVal start as Integer, 
				ByRef pactualstart as Integer, 
				ByRef pend as Integer, 
				ByRef pnewstart as Integer, 
				ByVal substr as String, 
				ByVal loc as Integer) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If IsNothing (substr) then Throw New ArgumentNullException  ("substr cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayParseRange( sa.Pointer, start, pactualstart, pend, pnewstart, substr, loc)

	Return _Result
End Function

' SRC\sarray1.c (1345, 1)
' sarrayRead()
' sarrayRead(const char *) as SARRAY *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>sarray, or NULL on error</returns>
Public Shared Function sarrayRead(
				ByVal filename as String) as Sarray

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayRead( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray1.c (1382, 1)
' sarrayReadStream()
' sarrayReadStream(FILE *) as SARRAY *
'''  <summary>
''' Notes
''' (1) We store the size of each string along with the string.
''' The limit on the number of strings is 2^24.
''' The limit on the size of any string is 2^30 bytes.
''' (2) This allows a string to have embedded newlines.  By reading
''' the entire string, as determined by its size, we are
''' not affected by any number of embedded newlines.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>sarray, or NULL on error</returns>
Public Shared Function sarrayReadStream(
				ByVal fp as FILE) as Sarray

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray1.c (1449, 1)
' sarrayReadMem()
' sarrayReadMem(const l_uint8 *, size_t) as SARRAY *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - serialization in ascii</param>
'''  <param name="size">[in] - of data; can use strlen to get it</param>
'''   <returns>sarray, or NULL on error</returns>
Public Shared Function sarrayReadMem(
				ByVal data as Byte(), 
				ByVal size as UInteger) as Sarray

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayReadMem( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray1.c (1477, 1)
' sarrayWrite()
' sarrayWrite(const char *, SARRAY *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="sa">[in] - string array</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function sarrayWrite(
				ByVal filename as String, 
				ByVal sa as Sarray) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayWrite( filename, sa.Pointer)

	Return _Result
End Function

' SRC\sarray1.c (1514, 1)
' sarrayWriteStream()
' sarrayWriteStream(FILE *, SARRAY *) as l_ok
'''  <summary>
''' Notes
''' (1) This appends a '\n' to each string, which is stripped
''' off by sarrayReadStream().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="sa">[in] - string array</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function sarrayWriteStream(
				ByVal fp as FILE, 
				ByVal sa as Sarray) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayWriteStream( fp.Pointer, sa.Pointer)

	Return _Result
End Function

' SRC\sarray1.c (1553, 1)
' sarrayWriteMem()
' sarrayWriteMem(l_uint8 **, size_t *, SARRAY *) as l_ok
'''  <summary>
''' Notes
''' (1) Serializes a sarray in memory and puts the result in a buffer.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized sarray; ascii</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="sa">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function sarrayWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal sa as Sarray) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayWriteMem( pdataPTR, psize, sa.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\sarray1.c (1601, 1)
' sarrayAppend()
' sarrayAppend(const char *, SARRAY *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="sa">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function sarrayAppend(
				ByVal filename as String, 
				ByVal sa as Sarray) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayAppend( filename, sa.Pointer)

	Return _Result
End Function

' SRC\sarray1.c (1669, 1)
' getNumberedPathnamesInDirectory()
' getNumberedPathnamesInDirectory(const char *, const char *, l_int32, l_int32, l_int32) as SARRAY *
'''  <summary>
''' Notes
''' (1) Returns the full pathnames of the numbered filenames in
''' the directory.  The number in the filename is the index
''' into the sarray.  For indices for which there are no filenames,
''' an empty string ("") is placed into the sarray.
''' This makes reading numbered files very simple.  For example,
''' the image whose filename includes number N can be retrieved using
''' pixReadIndexed(sa, N);
''' (2) If %substr is not NULL, only filenames that contain
''' the substring can be included.  If %substr is NULL,
''' all matching filenames are used.
''' (3) If no numbered files are found, it returns an empty sarray,
''' with no initialized strings.
''' (4) It is assumed that the page number is contained within
''' the basename (the filename without directory or extension).
''' %numpre is the number of characters in the basename
''' preceding the actual page number; %numpost is the number
''' following the page number, up to either the end of the
''' basename or a ".", whichever comes first.
''' (5) This is useful when all filenames contain numbers that are
''' not necessarily consecutive.  0-padding is not required.
''' (6) To use a O(n) matching algorithm, the largest page number
''' is found and two internal arrays of this size are created.
''' This maximum is constrained not to exceed %maxsum,
''' to make sure that an unrealistically large number is not
''' accidentally used to determine the array sizes.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirname">[in] - directory name</param>
'''  <param name="substr">[in][optional] - substring filter on filenames; can be NULL</param>
'''  <param name="numpre">[in] - number of characters in name before number</param>
'''  <param name="numpost">[in] - number of characters in name after the number, up to a dot before an extension</param>
'''  <param name="maxnum">[in] - only consider page numbers up to this value</param>
'''   <returns>sarray of numbered pathnames, or NULL on error</returns>
Public Shared Function getNumberedPathnamesInDirectory(
				ByVal dirname as String, 
				ByVal substr as String, 
				ByVal numpre as Integer, 
				ByVal numpost as Integer, 
				ByVal maxnum as Integer) as Sarray

	If IsNothing (dirname) then Throw New ArgumentNullException  ("dirname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.getNumberedPathnamesInDirectory( dirname, substr, numpre, numpost, maxnum)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray1.c (1717, 1)
' getSortedPathnamesInDirectory()
' getSortedPathnamesInDirectory(const char *, const char *, l_int32, l_int32) as SARRAY *
'''  <summary>
''' Notes
''' (1) Use %substr to filter filenames in the directory.  If
''' %substr == NULL, this takes all files.
''' (2) The files in the directory, after optional filtering by
''' the substring, are lexically sorted in increasing order.
''' Use %first and %nfiles to select a contiguous set of files.
''' (3) The full pathnames are returned for the requested sequence.
''' If no files are found after filtering, returns an empty sarray.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirname">[in] - directory name</param>
'''  <param name="substr">[in][optional] - substring filter on filenames; can be NULL</param>
'''  <param name="first">[in] - 0-based</param>
'''  <param name="nfiles">[in] - use 0 for all to the end</param>
'''   <returns>sarray of sorted pathnames, or NULL on error</returns>
Public Shared Function getSortedPathnamesInDirectory(
				ByVal dirname as String, 
				ByVal substr as String, 
				ByVal first as Integer, 
				ByVal nfiles as Integer) as Sarray

	If IsNothing (dirname) then Throw New ArgumentNullException  ("dirname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.getSortedPathnamesInDirectory( dirname, substr, first, nfiles)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray1.c (1777, 1)
' convertSortedToNumberedPathnames()
' convertSortedToNumberedPathnames(SARRAY *, l_int32, l_int32, l_int32) as SARRAY *
'''  <summary>
''' Notes
''' (1) Typically, numpre = numpost = 0; e.g., when the filename
''' just has a number followed by an optional extension.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - sorted pathnames including zero-padded integers</param>
'''  <param name="numpre">[in] - number of characters in name before number</param>
'''  <param name="numpost">[in] - number of characters in name after the number, up to a dot before an extension</param>
'''  <param name="maxnum">[in] - only consider page numbers up to this value</param>
'''   <returns>sarray of numbered pathnames, or NULL on error</returns>
Public Shared Function convertSortedToNumberedPathnames(
				ByVal sa as Sarray, 
				ByVal numpre as Integer, 
				ByVal numpost as Integer, 
				ByVal maxnum as Integer) as Sarray

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.convertSortedToNumberedPathnames( sa.Pointer, numpre, numpost, maxnum)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray1.c (1917, 1)
' 
' getFilenamesInDirectory(const char *) as SARRAY *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function getFilenamesInDirectory(
				ByRef dirname as String) as Sarray

	If IsNothing (dirname) then Throw New ArgumentNullException  ("dirname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.getFilenamesInDirectory( dirname)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

#End Region
#Region "SRC\sarray2.c"
' SRC\sarray2.c (95, 1)
' sarraySort()
' sarraySort(SARRAY *, SARRAY *, l_int32) as SARRAY *
'''  <summary>
''' Notes
''' (1) Set saout = sain for in-place; otherwise, set naout = NULL.
''' (2) Shell sort, modified from KR, 2nd edition, p.62.
''' Slow but simple O(n logn) sort.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="saout">[in] - output sarray; can be NULL or equal to sain</param>
'''  <param name="sain">[in] - input sarray</param>
'''  <param name="sortorder">[in] - L_SORT_INCREASING or L_SORT_DECREASING</param>
'''   <returns>saout output sarray, sorted by ascii value, or NULL on error</returns>
Public Shared Function sarraySort(
				ByVal saout as Sarray, 
				ByVal sain as Sarray, 
				ByVal sortorder as Enumerations.L_SORT_CREASING) as Sarray

	If IsNothing (saout) then Throw New ArgumentNullException  ("saout cannot be Nothing")
	If IsNothing (sain) then Throw New ArgumentNullException  ("sain cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarraySort( saout.Pointer, sain.Pointer, sortorder)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray2.c (145, 1)
' sarraySortByIndex()
' sarraySortByIndex(SARRAY *, NUMA *) as SARRAY *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sain">[in] - </param>
'''  <param name="naindex">[in] - na that maps from the new sarray to the input sarray</param>
'''   <returns>saout sorted, or NULL on error</returns>
Public Shared Function sarraySortByIndex(
				ByVal sain as Sarray, 
				ByVal naindex as Numa) as Sarray

	If IsNothing (sain) then Throw New ArgumentNullException  ("sain cannot be Nothing")
	If IsNothing (naindex) then Throw New ArgumentNullException  ("naindex cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarraySortByIndex( sain.Pointer, naindex.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray2.c (185, 1)
' stringCompareLexical()
' stringCompareLexical(const char *, const char *) as l_int32
'''  <summary>
''' Notes
''' (1) If the lexical values are identical, return a 0, to
''' indicate that no swapping is required to sort the strings.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="str1">[in] - </param>
'''  <param name="str2">[in] - </param>
'''   <returns>1 if str1 GT str2 lexically; 0 otherwise</returns>
Public Shared Function stringCompareLexical(
				ByVal str1 as String, 
				ByVal str2 as String) as Integer

	If IsNothing (str1) then Throw New ArgumentNullException  ("str1 cannot be Nothing")
	If IsNothing (str2) then Throw New ArgumentNullException  ("str2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.stringCompareLexical( str1, str2)

	Return _Result
End Function

' SRC\sarray2.c (237, 1)
' sarrayUnionByAset()
' sarrayUnionByAset(SARRAY *, SARRAY *) as SARRAY *
'''  <summary>
''' Notes
''' (1) Duplicates are removed from the concatenation of the two arrays.
''' (2) The key for each string is a 64-bit hash.
''' (2) Algorithm Concatenate the two sarrays.  Then build a set,
''' using hashed strings as keys.  As the set is built, first do
''' a find; if not found, add the key to the set and add the string
''' to the output sarray.  This is O(nlogn).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa1">[in] - </param>
'''  <param name="sa2">[in] - </param>
'''   <returns>sad with the union of the string set, or NULL on error</returns>
Public Shared Function sarrayUnionByAset(
				ByVal sa1 as Sarray, 
				ByVal sa2 as Sarray) as Sarray

	If IsNothing (sa1) then Throw New ArgumentNullException  ("sa1 cannot be Nothing")
	If IsNothing (sa2) then Throw New ArgumentNullException  ("sa2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayUnionByAset( sa1.Pointer, sa2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray2.c (277, 1)
' sarrayRemoveDupsByAset()
' sarrayRemoveDupsByAset(SARRAY *) as SARRAY *
'''  <summary>
''' Notes
''' (1) This is O(nlogn), considerably slower than
''' sarrayRemoveDupsByHash() for large string arrays.
''' (2) The key for each string is a 64-bit hash.
''' (3) Build a set, using hashed strings as keys.  As the set is
''' built, first do a find; if not found, add the key to the
''' set and add the string to the output sarray.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sas">[in] - </param>
'''   <returns>sad with duplicates removed, or NULL on error</returns>
Public Shared Function sarrayRemoveDupsByAset(
				ByVal sas as Sarray) as Sarray

	If IsNothing (sas) then Throw New ArgumentNullException  ("sas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayRemoveDupsByAset( sas.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray2.c (328, 1)
' sarrayIntersectionByAset()
' sarrayIntersectionByAset(SARRAY *, SARRAY *) as SARRAY *
'''  <summary>
''' Notes
''' (1) Algorithm put the larger sarray into a set, using the string
''' hashes as the key values.  Then run through the smaller sarray,
''' building an output sarray and a second set from the strings
''' in the larger array if a string is in the first set but
''' not in the second, add the string to the output sarray and hash
''' it into the second set.  The second set is required to make
''' sure only one instance of each string is put into the output sarray.
''' This is O(mlogn), {m,n} = sizes of {smaller,larger} input arrays.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa1">[in] - </param>
'''  <param name="sa2">[in] - </param>
'''   <returns>sad with the intersection of the string set, or NULL on error</returns>
Public Shared Function sarrayIntersectionByAset(
				ByVal sa1 as Sarray, 
				ByVal sa2 as Sarray) as Sarray

	If IsNothing (sa1) then Throw New ArgumentNullException  ("sa1 cannot be Nothing")
	If IsNothing (sa2) then Throw New ArgumentNullException  ("sa2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayIntersectionByAset( sa1.Pointer, sa2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray2.c (379, 1)
' l_asetCreateFromSarray()
' l_asetCreateFromSarray(SARRAY *) as L_ASET *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - </param>
'''   <returns>set using a string hash into a uint64 as the key</returns>
Public Shared Function l_asetCreateFromSarray(
				ByVal sa as Sarray) as L_Rbtree

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_asetCreateFromSarray( sa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Rbtree(_Result)
End Function

' SRC\sarray2.c (431, 1)
' sarrayRemoveDupsByHash()
' sarrayRemoveDupsByHash(SARRAY *, SARRAY **, L_DNAHASH **) as l_ok
'''  <summary>
''' Notes
''' (1) Generates a sarray with unique values.
''' (2) The dnahash is built up with sad to assure uniqueness.
''' It can be used to find if a string is in the set
''' sarrayFindValByHash(sad, dahash, str, index)
''' (3) The hash of the string location is simple and fast.  It scales
''' up with the number of buckets to insure a fairly random
''' bucket selection input strings.
''' (4) This is faster than sarrayRemoveDupsByAset(), because the
''' bucket lookup is O(n), although there is a double-loop
''' lookup within the dna in each bucket.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sas">[in] - </param>
'''  <param name="psad">[out] - unique set of strings; duplicates removed</param>
'''  <param name="pdahash">[out][optional] - dnahash used for lookup</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function sarrayRemoveDupsByHash(
				ByVal sas as Sarray, 
				ByRef psad as Sarray, 
				ByRef pdahash as L_DnaHash) as Integer

	If IsNothing (sas) then Throw New ArgumentNullException  ("sas cannot be Nothing")

	Dim psadPTR As IntPtr = IntPtr.Zero : If Not IsNothing(psad) Then psadPTR = psad.Pointer
Dim pdahashPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pdahash) Then pdahashPTR = pdahash.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayRemoveDupsByHash( sas.Pointer, psadPTR, pdahashPTR)
	if psadPTR <> IntPtr.Zero then psad = new Sarray(psadPTR)
	if pdahashPTR <> IntPtr.Zero then pdahash = new L_DnaHash(pdahashPTR)

	Return _Result
End Function

' SRC\sarray2.c (488, 1)
' sarrayIntersectionByHash()
' sarrayIntersectionByHash(SARRAY *, SARRAY *) as SARRAY *
'''  <summary>
''' Notes
''' (1) This is faster than sarrayIntersectionByAset(), because the
''' bucket lookup is O(n).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa1">[in] - </param>
'''  <param name="sa2">[in] - </param>
'''   <returns>sad intersection of the strings, or NULL on error</returns>
Public Shared Function sarrayIntersectionByHash(
				ByVal sa1 as Sarray, 
				ByVal sa2 as Sarray) as Sarray

	If IsNothing (sa1) then Throw New ArgumentNullException  ("sa1 cannot be Nothing")
	If IsNothing (sa2) then Throw New ArgumentNullException  ("sa2 cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayIntersectionByHash( sa1.Pointer, sa2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray2.c (563, 1)
' sarrayFindStringByHash()
' sarrayFindStringByHash(SARRAY *, L_DNAHASH *, const char *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Fast lookup in dnaHash associated with a sarray, to see if a
''' random string %str is already stored in the hash table.
''' (2) We use a strong hash function to minimize the chance that
''' two different strings hash to the same key value.
''' (3) We select the number of buckets to be about 5% of the size
''' of the input sarray, so that when fully populated, each
''' bucket (dna) will have about 20 entries, each being an index
''' into sa.  In lookup, after hashing to the key, and then
''' again to the bucket, we traverse the bucket (dna), using the
''' index into sa to check if %str has been found before.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - </param>
'''  <param name="dahash">[in] - built from sa</param>
'''  <param name="str">[in] - arbitrary string</param>
'''  <param name="pindex">[out] - index into %sa if %str is in %sa; -1 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function sarrayFindStringByHash(
				ByVal sa as Sarray, 
				ByVal dahash as L_DnaHash, 
				ByVal str as String, 
				ByRef pindex as Integer) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If IsNothing (dahash) then Throw New ArgumentNullException  ("dahash cannot be Nothing")
	If IsNothing (str) then Throw New ArgumentNullException  ("str cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayFindStringByHash( sa.Pointer, dahash.Pointer, str, pindex)

	Return _Result
End Function

' SRC\sarray2.c (609, 1)
' l_dnaHashCreateFromSarray()
' l_dnaHashCreateFromSarray(SARRAY *) as L_DNAHASH *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - </param>
'''   <returns>dahash, or NULL on error</returns>
Public Shared Function l_dnaHashCreateFromSarray(
				ByVal sa as Sarray) as L_DnaHash

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.l_dnaHashCreateFromSarray( sa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_DnaHash(_Result)
End Function

' SRC\sarray2.c (648, 1)
' sarrayGenerateIntegers()
' sarrayGenerateIntegers(l_int32) as SARRAY *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - </param>
'''   <returns>sa  (of printed numbers, 1 - n, or NULL on error</returns>
Public Shared Function sarrayGenerateIntegers(
				ByVal n as Integer) as Sarray



	Dim _Result as IntPtr = LeptonicaSharp.Natives.sarrayGenerateIntegers( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sarray2.c (688, 1)
' sarrayLookupCSKV()
' sarrayLookupCSKV(SARRAY *, const char *, char **) as l_ok
'''  <summary>
''' Notes
''' (1) The input %sa can have other strings that are not in
''' comma-separated key-value format.  These will be ignored.
''' (2) This returns a copy of the first value string in %sa whose
''' key string matches the input %keystring.
''' (3) White space is not ignored; all white space before the ','
''' is used for the keystring in matching.  This allows the
''' key and val strings to have white space (e.g., multiple words).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - (of strings, each being a comma-separated pair of strings, the first being a key and the second a value)</param>
'''  <param name="keystring">[in] - (an input string to match with each key in %sa</param>
'''  <param name="pvalstring">[out] - (the returned value string corresponding to the input key string, if found; otherwise NULL)</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function sarrayLookupCSKV(
				ByVal sa as Sarray, 
				ByVal keystring as String, 
				ByRef pvalstring as String()) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If IsNothing (keystring) then Throw New ArgumentNullException  ("keystring cannot be Nothing")

Dim pvalstringPTR As IntPtr = pvalstringPTR = Marshal.AllocHGlobal(Marshal.sizeOf(pvalstring.toArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.sarrayLookupCSKV( sa.Pointer, keystring, pvalstringPTR)

	Return _Result
End Function

#End Region
#Region "SRC\scale1.c"
' SRC\scale1.c (243, 1)
' pixScale()
' pixScale(PIX *, l_float32, l_float32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 and 32 bpp</param>
'''  <param name="scalex">[in] - </param>
'''  <param name="scaley">[in] - </param>
'''   <returns>pixd, or NULL on error This function scales 32 bpp RGB; 2, 4 or 8 bpp palette color; 2, 4, 8 or 16 bpp gray; and binary images. When the input has palette color, the colormap is removed and the result is either 8 bpp gray or 32 bpp RGB, depending on whether the colormap has color entries.  Images with 2, 4 or 16 bpp are converted to 8 bpp. Because pixScale is meant to be a very simple interface to a number of scaling functions, including the use of unsharp masking, the type of scaling and the sharpening parameters are chosen by default.  Grayscale and color images are scaled using one of four methods, depending on the scale factors 1 antialiased subsampling (lowpass filtering followed by subsampling, implemented here by area mapping), for scale factors less than 0.2 2 antialiased subsampling with sharpening, for scale factors between 0.2 and 0.7 3 linear interpolation with sharpening, for scale factors between 0.7 and 1.4 4 linear interpolation without sharpening, for scale factors GT= 1.4. One could use subsampling for scale factors very close to 1.0, because it preserves sharp edges.  Linear interpolation blurs edges because the dest pixels will typically straddle two src edge pixels.  Subsmpling removes entire columns and rows, so the edge is not blurred.  However, there are two reasons for not doing this. First, it moves edges, so that a straight line at a large angle to both horizontal and vertical will have noticeable kinks where horizontal and vertical rasters are removed.  Second, although it is very fast, you get good results on sharp edges by applying a sharpening filter. For images with sharp edges, sharpening substantially improves the image quality for scale factors between about 0.2 and about 2.0. pixScale uses a small amount of sharpening by default because it strengthens edge pixels that are weak due to anti-aliasing. The default sharpening factors are for scaling factors LT 0.7   sharpfract = 0.2    sharpwidth = 1 for scaling factors GT= 0.7  sharpfract = 0.4    sharpwidth = 2 The cases where the sharpening halfwidth is 1 or 2 have special implementations and are about twice as fast as the general case. However, sharpening is computationally expensive, and one needs to consider the speed-quality tradeoff For upscaling of RGB images, linear interpolation plus default sharpening is about 5 times slower than upscaling alone. For downscaling, area mapping plus default sharpening is about 10 times slower than downscaling alone. When the scale factor is larger than 1.4, the cost of sharpening, which is proportional to image area, is very large compared to the incremental quality improvement, so we cut off the default use of sharpening at 1.4.  Thus, for scale factors greater than 1.4, pixScale only does linear interpolation. In many situations you will get a satisfactory result by scaling without sharpening call pixScaleGeneral with %sharpfract = 0.0. Alternatively, if you wish to sharpen but not use the default value, first call pixScaleGeneral with %sharpfract = 0.0, and then sharpen explicitly using pixUnsharpMasking. Binary images are scaled to binary by sampling the closest pixel, without any low-pass filtering averaging of neighboring pixels. This will introduce aliasing for reductions.  Aliasing can be prevented by using pixScaleToGray instead.</returns>
Public Shared Function pixScale(
				ByVal pixs as Pix, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScale( pixs.Pointer, scalex, scaley)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (273, 1)
' pixScaleToSizeRel()
' pixScaleToSizeRel(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="delw">[in] - change in width, in pixels; 0 means no change</param>
'''  <param name="delh">[in] - change in height, in pixels; 0 means no change</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleToSizeRel(
				ByVal pixs as Pix, 
				ByVal delw as Integer, 
				ByVal delh as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleToSizeRel( pixs.Pointer, delw, delh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (316, 1)
' pixScaleToSize()
' pixScaleToSize(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The output scaled image has the dimension(s) you specify
''' To specify the width with isotropic scaling, set %hd = 0.
''' To specify the height with isotropic scaling, set %wd = 0.
''' If both %wd and %hd are specified, the image is scaled
''' (in general, anisotropically) to that size.
''' It is an error to set both %wd and %hd to 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 and 32 bpp</param>
'''  <param name="wd">[in] - target width; use 0 if using height as target</param>
'''  <param name="hd">[in] - target height; use 0 if using width as target</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleToSize(
				ByVal pixs as Pix, 
				ByVal wd as Integer, 
				ByVal hd as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleToSize( pixs.Pointer, wd, hd)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (374, 1)
' pixScaleGeneral()
' pixScaleGeneral(PIX *, l_float32, l_float32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See pixScale() for usage.
''' (2) This interface may change in the future, as other special
''' cases are added.
''' (3) The actual sharpening factors used depend on the maximum
''' of the two scale factors (maxscale)
''' maxscale LT= 0.2  no sharpening
''' 0.2 LT maxscale LT 1.4   uses the input parameters
''' maxscale GT= 1.4  no sharpening
''' (4) To avoid sharpening for grayscale and color images with
''' scaling factors between 0.2 and 1.4, call this function
''' with %sharpfract == 0.0.
''' (5) To use arbitrary sharpening in conjunction with scaling,
''' call this function with %sharpfract = 0.0, and follow this
''' with a call to pixUnsharpMasking() with your chosen parameters.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 and 32 bpp</param>
'''  <param name="scalex">[in] - both GT 0.0</param>
'''  <param name="scaley">[in] - both GT 0.0</param>
'''  <param name="sharpfract">[in] - use 0.0 to skip sharpening</param>
'''  <param name="sharpwidth">[in] - halfwidth of low-pass filter; typ. 1 or 2</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleGeneral(
				ByVal pixs as Pix, 
				ByVal scalex as Single, 
				ByVal scaley as Single, 
				ByVal sharpfract as Single, 
				ByVal sharpwidth as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sharpfract) then Throw New ArgumentNullException  ("sharpfract cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleGeneral( pixs.Pointer, scalex, scaley, sharpfract, sharpwidth)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (458, 1)
' pixScaleLI()
' pixScaleLI(PIX *, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This function should only be used when the scale factors are
''' greater than or equal to 0.7, and typically greater than 1.
''' If either scale factor is larger than 0.7, we issue a warning
''' and call pixScaleGeneral(), which will invoke area mapping
''' without sharpening.
''' (2) This works on 2, 4, 8, 16 and 32 bpp images, as well as on
''' 2, 4 and 8 bpp images that have a colormap.  If there is a
''' colormap, it is removed to either gray or RGB, depending
''' on the colormap.
''' (3) This does a linear interpolation on the src image.
''' (4) It dispatches to much faster implementations for
''' the special cases of 2x and 4x expansion.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2, 4, 8 or 32 bpp; with or without colormap</param>
'''  <param name="scalex">[in] - must both be GT= 0.7</param>
'''  <param name="scaley">[in] - must both be GT= 0.7</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleLI(
				ByVal pixs as Pix, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleLI( pixs.Pointer, scalex, scaley)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (519, 1)
' pixScaleColorLI()
' pixScaleColorLI(PIX *, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) If either scale factor is larger than 0.7, we issue a warning
''' and call pixScaleGeneral(), which will invoke area mapping
''' without sharpening.  This is particularly important for
''' document images with sharp edges.
''' (2) For the general case, it's about 4x faster to manipulate
''' the color pixels directly, rather than to make images
''' out of each of the 3 components, scale each component
''' using the pixScaleGrayLI(), and combine the results back
''' into an rgb image.
''' (3) The speed on intel hardware for the general case (not 2x)
''' is about 10  10^6 dest-pixels/sec/GHz.  (The special 2x
''' case runs at about 80  10^6 dest-pixels/sec/GHz.)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp, representing rgb</param>
'''  <param name="scalex">[in] - must both be GT= 0.7</param>
'''  <param name="scaley">[in] - must both be GT= 0.7</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleColorLI(
				ByVal pixs as Pix, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleColorLI( pixs.Pointer, scalex, scaley)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (585, 1)
' pixScaleColor2xLI()
' pixScaleColor2xLI(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This is a special case of linear interpolated scaling,
''' for 2x upscaling.  It is about 8x faster than using
''' the generic pixScaleColorLI(), and about 4x faster than
''' using the special 2x scale function pixScaleGray2xLI()
''' on each of the three components separately.
''' (2) The speed on intel hardware is about
''' 80  10^6 dest-pixels/sec/GHz.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp, representing rgb</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleColor2xLI(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleColor2xLI( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (634, 1)
' pixScaleColor4xLI()
' pixScaleColor4xLI(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This is a special case of color linear interpolated scaling,
''' for 4x upscaling.  It is about 3x faster than using
''' the generic pixScaleColorLI().
''' (2) The speed on intel hardware is about
''' 30  10^6 dest-pixels/sec/GHz
''' (3) This scales each component separately, using pixScaleGray4xLI().
''' It would be about 4x faster to inline the color code properly,
''' in analogy to scaleColor4xLILow(), and I leave this as
''' an exercise for someone who really needs it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp, representing rgb</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleColor4xLI(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleColor4xLI( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (738, 1)
' pixScaleGrayLI()
' pixScaleGrayLI(PIX *, l_float32, l_float32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale, no cmap</param>
'''  <param name="scalex">[in] - must both be GT= 0.7</param>
'''  <param name="scaley">[in] - must both be GT= 0.7</param>
'''   <returns>pixd, or NULL on error This function is appropriate for upscaling magnification, where the scale factor is GT 1, as well as for a small amount of downscaling reduction, with scale factor GT 0.7.  If the scale factor is LT 0.7, the best result is obtained by area mapping, but this is relatiely expensive.  A less expensive alternative with scale factor LT 0.7 is low-pass filtering followed by subsampling (pixScaleSmooth()), which is effectively a cheap form of area mapping. Some more details follow. For each pixel in the dest, this does a linear interpolation of 4 neighboring pixels in the src. Specifically, consider the UL corner of src and dest pixels.  The UL corner of the dest falls within a src pixel, whose four corners are the UL corners of 4 adjacent src pixels.  The value of the dest is taken by linear interpolation using the values of the four src pixels and the distance of the UL corner of the dest from each corner. If the image is expanded so that the dest pixel is smaller than the src pixel, such interpolation is a reasonable approach.  This interpolation is also good for a small image reduction factor that is not more than a 2x reduction. Note that the linear interpolation algorithm for scaling is identical in form to the area-mapping algorithm for grayscale rotation.  The latter corresponds to a translation of each pixel without scaling. This function is NOT optimal if the scaling involves a large reduction.    If the image is significantly reduced, so that the dest pixel is much larger than the src pixels, this interpolation, which is over src pixels only near the UL corner of the dest pixel, is not going to give a good area-mapping average. Because area mapping for image scaling is considerably more computationally intensive than linear interpolation, we choose not to use it.   For large image reduction, linear interpolation over adjacent src pixels degenerates asymptotically to subsampling.  But subsampling without a low-pass pre-filter causes aliasing by the nyquist theorem.  To avoid aliasing, a low-pass filter e.g., an averaging filter of size roughly equal to the dest pixel i.e., the reduction factor should be applied to the src before subsampling. As an alternative to low-pass filtering and subsampling for large reduction factors, linear interpolation can also be done between the widely separated src pixels in which the corners of the dest pixel lie.  This also is not optimal, as it samples src pixels only near the corners of the dest pixel, and it is not implemented. The speed on circa 2005 Intel hardware for the general case (not 2x) is about 13  10^6 dest-pixels/sec/GHz.  The special 2x case runs at about 100  10^6 dest-pixels/sec/GHz.</returns>
Public Shared Function pixScaleGrayLI(
				ByVal pixs as Pix, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleGrayLI( pixs.Pointer, scalex, scaley)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (801, 1)
' pixScaleGray2xLI()
' pixScaleGray2xLI(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This is a special case of gray linear interpolated scaling,
''' for 2x upscaling.  It is about 6x faster than using
''' the generic pixScaleGrayLI().
''' (2) The speed on intel hardware is about
''' 100  10^6 dest-pixels/sec/GHz
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale, not cmapped</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleGray2xLI(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleGray2xLI( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (844, 1)
' pixScaleGray4xLI()
' pixScaleGray4xLI(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This is a special case of gray linear interpolated scaling,
''' for 4x upscaling.  It is about 12x faster than using
''' the generic pixScaleGrayLI().
''' (2) The speed on intel hardware is about
''' 160  10^6 dest-pixels/sec/GHz.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale, not cmapped</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleGray4xLI(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleGray4xLI( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (889, 1)
' pixScaleGray2xLIThresh()
' pixScaleGray2xLIThresh(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This does 2x upscale on pixs, using linear interpolation,
''' followed by thresholding to binary.
''' (2) Buffers are used to avoid making a large grayscale image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, not cmapped</param>
'''  <param name="thresh">[in] - between 0 and 256</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixScaleGray2xLIThresh(
				ByVal pixs as Pix, 
				ByVal thresh as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleGray2xLIThresh( pixs.Pointer, thresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (968, 1)
' pixScaleGray2xLIDither()
' pixScaleGray2xLIDither(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This does 2x upscale on pixs, using linear interpolation,
''' followed by Floyd-Steinberg dithering to binary.
''' (2) Buffers are used to avoid making a large grayscale image.
''' ~ Two line buffers are used for the src, required for the 2x
''' LI upscale.
''' ~ Three line buffers are used for the intermediate image.
''' Two are filled with each 2xLI row operation; the third is
''' needed because the upscale and dithering ops are out of sync.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, not cmapped</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixScaleGray2xLIDither(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleGray2xLIDither( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (1087, 1)
' pixScaleGray4xLIThresh()
' pixScaleGray4xLIThresh(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This does 4x upscale on pixs, using linear interpolation,
''' followed by thresholding to binary.
''' (2) Buffers are used to avoid making a large grayscale image.
''' (3) If a full 4x expanded grayscale image can be kept in memory,
''' this function is only about 10% faster than separately doing
''' a linear interpolation to a large grayscale image, followed
''' by thresholding to binary.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="thresh">[in] - between 0 and 256</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixScaleGray4xLIThresh(
				ByVal pixs as Pix, 
				ByVal thresh as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleGray4xLIThresh( pixs.Pointer, thresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (1175, 1)
' pixScaleGray4xLIDither()
' pixScaleGray4xLIDither(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This does 4x upscale on pixs, using linear interpolation,
''' followed by Floyd-Steinberg dithering to binary.
''' (2) Buffers are used to avoid making a large grayscale image.
''' ~ Two line buffers are used for the src, required for the
''' 4xLI upscale.
''' ~ Five line buffers are used for the intermediate image.
''' Four are filled with each 4xLI row operation; the fifth
''' is needed because the upscale and dithering ops are
''' out of sync.
''' (3) If a full 4x expanded grayscale image can be kept in memory,
''' this function is only about 5% faster than separately doing
''' a linear interpolation to a large grayscale image, followed
''' by error-diffusion dithering to binary.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, not cmapped</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixScaleGray4xLIDither(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleGray4xLIDither( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (1298, 1)
' pixScaleBySampling()
' pixScaleBySampling(PIX *, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This function samples from the source without
''' filtering.  As a result, aliasing will occur for
''' subsampling (%scalex and/or %scaley LT 1.0).
''' (2) If %scalex == 1.0 and %scaley == 1.0, returns a copy.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16, 32 bpp</param>
'''  <param name="scalex">[in] - both GT 0.0</param>
'''  <param name="scaley">[in] - both GT 0.0</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleBySampling(
				ByVal pixs as Pix, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8,16,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16, 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleBySampling( pixs.Pointer, scalex, scaley)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (1360, 1)
' pixScaleBySamplingToSize()
' pixScaleBySamplingToSize(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This guarantees that the output scaled image has the
''' dimension(s) you specify.
''' ~ To specify the width with isotropic scaling, set %hd = 0.
''' ~ To specify the height with isotropic scaling, set %wd = 0.
''' ~ If both %wd and %hd are specified, the image is scaled
''' (in general, anisotropically) to that size.
''' ~ It is an error to set both %wd and %hd to 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16 and 32 bpp</param>
'''  <param name="wd">[in] - target width; use 0 if using height as target</param>
'''  <param name="hd">[in] - target height; use 0 if using width as target</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleBySamplingToSize(
				ByVal pixs as Pix, 
				ByVal wd as Integer, 
				ByVal hd as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleBySamplingToSize( pixs.Pointer, wd, hd)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (1405, 1)
' pixScaleByIntSampling()
' pixScaleByIntSampling(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Simple interface to pixScaleBySampling(), for
''' isotropic integer reduction.
''' (2) If %factor == 1, returns a copy.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16, 32 bpp</param>
'''  <param name="factor">[in] - integer subsampling</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleByIntSampling(
				ByVal pixs as Pix, 
				ByVal factor as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8,16,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16, 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleByIntSampling( pixs.Pointer, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (1447, 1)
' pixScaleRGBToGrayFast()
' pixScaleRGBToGrayFast(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This does simultaneous subsampling by an integer factor and
''' extraction of the color from the RGB pix.
''' (2) It is designed for maximum speed, and is used for quickly
''' generating a downsized grayscale image from a higher resolution
''' RGB image.  This would typically be used for image analysis.
''' (3) The standard color byte order (RGBA) is assumed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="factor">[in] - integer reduction factor GT= 1</param>
'''  <param name="color">[in] - one of COLOR_RED, COLOR_GREEN, COLOR_BLUE</param>
'''   <returns>pixd 8 bpp, or NULL on error</returns>
Public Shared Function pixScaleRGBToGrayFast(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByVal color as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleRGBToGrayFast( pixs.Pointer, factor, color)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (1522, 1)
' pixScaleRGBToBinaryFast()
' pixScaleRGBToBinaryFast(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This does simultaneous subsampling by an integer factor and
''' conversion from RGB to gray to binary.
''' (2) It is designed for maximum speed, and is used for quickly
''' generating a downsized binary image from a higher resolution
''' RGB image.  This would typically be used for image analysis.
''' (3) It uses the green channel to represent the RGB pixel intensity.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp RGB</param>
'''  <param name="factor">[in] - integer reduction factor GT= 1</param>
'''  <param name="thresh">[in] - binarization threshold</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixScaleRGBToBinaryFast(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByVal thresh as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp RGB")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleRGBToBinaryFast( pixs.Pointer, factor, thresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (1588, 1)
' pixScaleGrayToBinaryFast()
' pixScaleGrayToBinaryFast(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This does simultaneous subsampling by an integer factor and
''' thresholding from gray to binary.
''' (2) It is designed for maximum speed, and is used for quickly
''' generating a downsized binary image from a higher resolution
''' gray image.  This would typically be used for image analysis.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp grayscale</param>
'''  <param name="factor">[in] - integer reduction factor GT= 1</param>
'''  <param name="thresh">[in] - binarization threshold</param>
'''   <returns>pixd 1 bpp, or NULL on error</returns>
Public Shared Function pixScaleGrayToBinaryFast(
				ByVal pixs as Pix, 
				ByVal factor as Integer, 
				ByVal thresh as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp grayscale")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleGrayToBinaryFast( pixs.Pointer, factor, thresh)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (1671, 1)
' pixScaleSmooth()
' pixScaleSmooth(PIX *, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This function should only be used when the scale factors are less
''' than or equal to 0.7 (i.e., more than about 1.42x reduction).
''' If either scale factor is larger than 0.7, we issue a warning
''' and call pixScaleGeneral(), which will invoke linear
''' interpolation without sharpening.
''' (2) This works only on 2, 4, 8 and 32 bpp images, and if there is
''' a colormap, it is removed by converting to RGB.  In other
''' cases, we issue a warning and call pixScaleGeneral().
''' (3) It does simple (flat filter) convolution, with a filter size
''' commensurate with the amount of reduction, to avoid antialiasing.
''' (4) It does simple subsampling after smoothing, which is appropriate
''' for this range of scaling.  Linear interpolation gives essentially
''' the same result with more computation for these scale factors,
''' so we don't use it.
''' (5) The result is the same as doing a full block convolution followed by
''' subsampling, but this is faster because the results of the block
''' convolution are only computed at the subsampling locations.
''' In fact, the computation time is approximately independent of
''' the scale factor, because the convolution kernel is adjusted
''' so that each source pixel is summed approximately once.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 2, 4, 8 or 32 bpp; and 2, 4, 8 bpp with colormap</param>
'''  <param name="scalex">[in] - must both be LT 0.7</param>
'''  <param name="scaley">[in] - must both be LT 0.7</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleSmooth(
				ByVal pix as Pix, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Pix

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleSmooth( pix.Pointer, scalex, scaley)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (1767, 1)
' pixScaleSmoothToSize()
' pixScaleSmoothToSize(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See notes in pixScaleSmooth().
''' (2) The output scaled image has the dimension(s) you specify
''' To specify the width with isotropic scaling, set %hd = 0.
''' To specify the height with isotropic scaling, set %wd = 0.
''' If both %wd and %hd are specified, the image is scaled
''' (in general, anisotropically) to that size.
''' It is an error to set both %wd and %hd to 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2, 4, 8 or 32 bpp; and 2, 4, 8 bpp with colormap</param>
'''  <param name="wd">[in] - target width; use 0 if using height as target</param>
'''  <param name="hd">[in] - target height; use 0 if using width as target</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleSmoothToSize(
				ByVal pixs as Pix, 
				ByVal wd as Integer, 
				ByVal hd as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleSmoothToSize( pixs.Pointer, wd, hd)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (1805, 1)
' pixScaleRGBToGray2()
' pixScaleRGBToGray2(PIX *, l_float32, l_float32, l_float32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb</param>
'''  <param name="rwt">[in] - must sum to 1.0</param>
'''  <param name="gwt">[in] - must sum to 1.0</param>
'''  <param name="bwt">[in] - must sum to 1.0</param>
'''   <returns>pixd, 8 bpp, 2x reduced, or NULL on error</returns>
Public Shared Function pixScaleRGBToGray2(
				ByVal pixs as Pix, 
				ByVal rwt as Single, 
				ByVal gwt as Single, 
				ByVal bwt as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (rwt) then Throw New ArgumentNullException  ("rwt cannot be Nothing")
	If IsNothing (gwt) then Throw New ArgumentNullException  ("gwt cannot be Nothing")
	If IsNothing (bwt) then Throw New ArgumentNullException  ("bwt cannot be Nothing")
	If {32}.contains (pixs.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleRGBToGray2( pixs.Pointer, rwt, gwt, bwt)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (1872, 1)
' pixScaleAreaMap()
' pixScaleAreaMap(PIX *, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This function should only be used when the scale factors are less
''' than or equal to 0.7 (i.e., more than about 1.42x reduction).
''' If either scale factor is larger than 0.7, we issue a warning
''' and call pixScaleGeneral(), which will invoke linear
''' interpolation without sharpening.
''' (2) This works only on 2, 4, 8 and 32 bpp images.  If there is
''' a colormap, it is removed by converting to RGB.  In other
''' cases, we issue a warning and call pixScaleGeneral().
''' (3) This is faster than pixScale() because it does not do sharpening.
''' (4) It does a relatively expensive area mapping computation, to
''' avoid antialiasing.  It is about 2x slower than pixScaleSmooth(),
''' but the results are much better on fine text.
''' (5) This is typically about 20% faster for the special cases of
''' 2x, 4x, 8x and 16x reduction.
''' (6) Surprisingly, there is no speedup (and a slight quality
''' impairment) if you do as many successive 2x reductions as
''' possible, ending with a reduction with a scale factor larger
''' than 0.5.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 2, 4, 8 or 32 bpp; and 2, 4, 8 bpp with colormap</param>
'''  <param name="scalex">[in] - must both be LT= 0.7</param>
'''  <param name="scaley">[in] - must both be LT= 0.7</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleAreaMap(
				ByVal pix as Pix, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Pix

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleAreaMap( pix.Pointer, scalex, scaley)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (1992, 1)
' pixScaleAreaMap2()
' pixScaleAreaMap2(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) This function does an area mapping (average) for 2x
''' reduction.
''' (2) This works only on 2, 4, 8 and 32 bpp images.  If there is
''' a colormap, it is removed by converting to RGB.
''' (3) Speed on 3 GHz processor
''' Color 160 Mpix/sec
''' Gray 700 Mpix/sec
''' This contrasts with the speed of the general pixScaleAreaMap()
''' Color 35 Mpix/sec
''' Gray 50 Mpix/sec
''' (4) From (3), we see that this special function is about 4.5x
''' faster for color and 14x faster for grayscale
''' (5) Consequently, pixScaleAreaMap2() is incorporated into the
''' general area map scaling function, for the special cases
''' of 2x, 4x, 8x and 16x reduction.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - 2, 4, 8 or 32 bpp; and 2, 4, 8 bpp with colormap</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleAreaMap2(
				ByVal pix as Pix) as Pix

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleAreaMap2( pix.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (2057, 1)
' pixScaleAreaMapToSize()
' pixScaleAreaMapToSize(PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See notes in pixScaleAreaMap().
''' (2) The output scaled image has the dimension(s) you specify
''' To specify the width with isotropic scaling, set %hd = 0.
''' To specify the height with isotropic scaling, set %wd = 0.
''' If both %wd and %hd are specified, the image is scaled
''' (in general, anisotropically) to that size.
''' It is an error to set both %wd and %hd to 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 2, 4, 8 or 32 bpp; and 2, 4, 8 bpp with colormap</param>
'''  <param name="wd">[in] - target width; use 0 if using height as target</param>
'''  <param name="hd">[in] - target height; use 0 if using width as target</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleAreaMapToSize(
				ByVal pixs as Pix, 
				ByVal wd as Integer, 
				ByVal hd as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleAreaMapToSize( pixs.Pointer, wd, hd)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale1.c (2105, 1)
' pixScaleBinary()
' pixScaleBinary(PIX *, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This function samples from the source without
''' filtering.  As a result, aliasing will occur for
''' subsampling (scalex and scaley LT 1.0).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="scalex">[in] - both GT 0.0</param>
'''  <param name="scaley">[in] - both GT 0.0</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixScaleBinary(
				ByVal pixs as Pix, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleBinary( pixs.Pointer, scalex, scaley)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\scale2.c"
' SRC\scale2.c (204, 1)
' pixScaleToGray()
' pixScaleToGray(PIX *, l_float32) as PIX *
'''  <summary>
''' Notes
''' For faster scaling in the range of scalefactors from 0.0625 to 0.5,
''' with very little difference in quality, use pixScaleToGrayFast().
''' Binary images have sharp edges, so they intrinsically have very
''' high frequency content.  To avoid aliasing, they must be low-pass
''' filtered, which tends to blur the edges.  How can we keep relatively
''' crisp edges without aliasing?  The trick is to do binary upscaling
''' followed by a power-of-2 scaleToGray.  For large reductions, where
''' you don't end up with much detail, some corners can be cut.
''' The intent here is to get high quality reduced grayscale
''' images with relatively little computation.  We do binary
''' pre-scaling followed by scaleToGrayN() for best results,
''' esp. to avoid excess blur when the scale factor is near
''' an inverse power of 2.  Where a low-pass filter is required,
''' we use simple convolution kernels either the hat filter for
''' linear interpolation or a flat filter for larger downscaling.
''' Other choices, such as a perfect bandpass filter with infinite extent
''' (the sinc) or various approximations to it (e.g., lanczos), are
''' unnecessarily expensive.
''' The choices made are as follows
''' (1) Do binary upscaling before scaleToGrayN() for scalefactors GT 1/8
''' (2) Do binary downscaling before scaleToGray8() for scalefactors
''' between 1/16 and 1/8.
''' (3) Use scaleToGray16() before grayscale downscaling for
''' scalefactors less than 1/16
''' Another reasonable choice would be to start binary downscaling
''' for scalefactors below 1/4, rather than below 1/8 as we do here.
''' The general scaling rules, not all of which are used here, go as follows
''' (1) For grayscale upscaling, use pixScaleGrayLI().  However,
''' note that edges will be visibly blurred for scalefactors
''' near (but above) 1.0.  Replication will avoid edge blur,
''' and should be considered for factors very near 1.0.
''' (2) For grayscale downscaling with a scale factor larger than
''' about 0.7, use pixScaleGrayLI().  For scalefactors near
''' (but below) 1.0, you tread between Scylla and Charybdis.
''' pixScaleGrayLI() again gives edge blurring, but
''' pixScaleBySampling() gives visible aliasing.
''' (3) For grayscale downscaling with a scale factor smaller than
''' about 0.7, use pixScaleSmooth()
''' (4) For binary input images, do as much scale to gray as possible
''' using the special integer functions (2, 3, 4, 8 and 16).
''' (5) It is better to upscale in binary, followed by scaleToGrayN()
''' than to do scaleToGrayN() followed by an upscale using either
''' LI or oversampling.
''' (6) It may be better to downscale in binary, followed by
''' scaleToGrayN() than to first use scaleToGrayN() followed by
''' downscaling.  For downscaling between 8x and 16x, this is
''' a reasonable option.
''' (7) For reductions greater than 16x, it's reasonable to use
''' scaleToGray16() followed by further grayscale downscaling.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="scalefactor">[in] - reduction must be GT 0.0 and LT 1.0</param>
'''   <returns>pixd 8 bpp, scaled down by scalefactor in each direction, or NULL on error.</returns>
Public Shared Function pixScaleToGray(
				ByVal pixs as Pix, 
				ByVal scalefactor as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleToGray( pixs.Pointer, scalefactor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale2.c (315, 1)
' pixScaleToGrayFast()
' pixScaleToGrayFast(PIX *, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) See notes in pixScaleToGray() for the basic approach.
''' (2) This function is considerably less expensive than pixScaleToGray()
''' for scalefactor in the range (0.0625 ... 0.5), and the
''' quality is nearly as good.
''' (3) Unlike pixScaleToGray(), which does binary upscaling before
''' downscaling for scale factors GT= 0.0625, pixScaleToGrayFast()
''' first downscales in binary for all scale factors LT 0.5, and
''' then does a 2x scale-to-gray as the final step.  For
''' scale factors LT 0.0625, both do a 16x scale-to-gray, followed
''' by further grayscale reduction.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="scalefactor">[in] - reduction must be GT 0.0 and LT 1.0</param>
'''   <returns>pixd 8 bpp, scaled down by scalefactor in each direction, or NULL on error.</returns>
Public Shared Function pixScaleToGrayFast(
				ByVal pixs as Pix, 
				ByVal scalefactor as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleToGrayFast( pixs.Pointer, scalefactor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale2.c (386, 1)
' pixScaleToGray2()
' pixScaleToGray2(PIX *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>pixd 8 bpp, scaled down by 2x in each direction, or NULL on error.</returns>
Public Shared Function pixScaleToGray2(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleToGray2( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale2.c (443, 1)
' pixScaleToGray3()
' pixScaleToGray3(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) Speed is about 100 x 10^6 src-pixels/sec/GHz.
''' Another way to express this is it processes 1 src pixel
''' in about 10 cycles.
''' (2) The width of pixd is truncated is truncated to a factor of 8.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>pixd 8 bpp, scaled down by 3x in each direction, or NULL on error.</returns>
Public Shared Function pixScaleToGray3(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleToGray3( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale2.c (497, 1)
' pixScaleToGray4()
' pixScaleToGray4(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) The width of pixd is truncated is truncated to a factor of 2.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>pixd 8 bpp, scaled down by 4x in each direction, or NULL on error.</returns>
Public Shared Function pixScaleToGray4(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleToGray4( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale2.c (552, 1)
' pixScaleToGray6()
' pixScaleToGray6(PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) The width of pixd is truncated is truncated to a factor of 8.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>pixd 8 bpp, scaled down by 6x in each direction, or NULL on error.</returns>
Public Shared Function pixScaleToGray6(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleToGray6( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale2.c (600, 1)
' pixScaleToGray8()
' pixScaleToGray8(PIX *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>pixd 8 bpp, scaled down by 8x in each direction, or NULL on error</returns>
Public Shared Function pixScaleToGray8(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleToGray8( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale2.c (649, 1)
' pixScaleToGray16()
' pixScaleToGray16(PIX *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''   <returns>pixd 8 bpp, scaled down by 16x in each direction, or NULL on error.</returns>
Public Shared Function pixScaleToGray16(
				ByVal pixs as Pix) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleToGray16( pixs.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale2.c (722, 1)
' pixScaleToGrayMipmap()
' pixScaleToGrayMipmap(PIX *, l_float32) as PIX *
'''  <summary>
''' Notes
''' This function is here mainly for pedagogical reasons.
''' Mip-mapping is widely used in graphics for texture mapping, because
''' the texture changes smoothly with scale.  This is accomplished by
''' constructing a multiresolution pyramid and, for each pixel,
''' doing a linear interpolation between corresponding pixels in
''' the two planes of the pyramid that bracket the desired resolution.
''' The computation is very efficient, and is implemented in hardware
''' in high-end graphics cards.
''' We can use mip-mapping for scale-to-gray by using two scale-to-gray
''' reduced images (we don't need the entire pyramid) selected from
''' the set {2x, 4x, ... 16x}, and interpolating.  However, we get
''' severe aliasing, probably because we are subsampling from the
''' higher resolution image.  The method is very fast, but the result
''' is very poor.  In fact, the results don't look any better than
''' either subsampling off the higher-res grayscale image or oversampling
''' on the lower-res image.  Consequently, this method should NOT be used
''' for generating reduced images, scale-to-gray or otherwise.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="scalefactor">[in] - reduction must be GT 0.0 and LT 1.0</param>
'''   <returns>pixd 8 bpp, scaled down by scalefactor in each direction, or NULL on error.</returns>
Public Shared Function pixScaleToGrayMipmap(
				ByVal pixs as Pix, 
				ByVal scalefactor as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleToGrayMipmap( pixs.Pointer, scalefactor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale2.c (810, 1)
' pixScaleMipmap()
' pixScaleMipmap(PIX *, PIX *, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) See notes in pixScaleToGrayMipmap().
''' (2) This function suffers from aliasing effects that are
''' easily seen in document images.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs1">[in] - high res 8 bpp, no cmap</param>
'''  <param name="pixs2">[in] - low res -- 2x reduced -- 8 bpp, no cmap</param>
'''  <param name="scale">[in] - reduction with respect to high res image, GT 0.5</param>
'''   <returns>8 bpp pix, scaled down by reduction in each direction, or NULL on error.</returns>
Public Shared Function pixScaleMipmap(
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix, 
				ByVal scale as Single) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")
	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleMipmap( pixs1.Pointer, pixs2.Pointer, scale)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale2.c (867, 1)
' pixExpandReplicate()
' pixExpandReplicate(PIX *, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 16, 32 bpp</param>
'''  <param name="factor">[in] - integer scale factor for replicative expansion</param>
'''   <returns>pixd scaled up, or NULL on error.</returns>
Public Shared Function pixExpandReplicate(
				ByVal pixs as Pix, 
				ByVal factor as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1,2,4,8,16,32}.contains (pixs.d) = false then Throw New ArgumentException ("1, 2, 4, 8, 16, 32 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixExpandReplicate( pixs.Pointer, factor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale2.c (1014, 1)
' pixScaleGrayMinMax()
' pixScaleGrayMinMax(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The downscaled pixels in pixd are the min, max or (max - min)
''' of the corresponding set of xfact  yfact pixels in pixs.
''' (2) Using L_CHOOSE_MIN is equivalent to a grayscale erosion,
''' using a brick Sel of size (xfact  yfact), followed by
''' subsampling within each (xfact  yfact) cell.  Using
''' L_CHOOSE_MAX is equivalent to the corresponding dilation.
''' (3) Using L_CHOOSE_MAXDIFF finds the difference between max
''' and min values in each cell.
''' (4) For the special case of downscaling by 2x in both directions,
''' pixScaleGrayMinMax2() is about 2x more efficient.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, not cmapped</param>
'''  <param name="xfact">[in] - x downscaling factor; integer</param>
'''  <param name="yfact">[in] - y downscaling factor; integer</param>
'''  <param name="type">[in] - L_CHOOSE_MIN, L_CHOOSE_MAX, L_CHOOSE_MAXDIFF</param>
'''   <returns>pixd 8 bpp</returns>
Public Shared Function pixScaleGrayMinMax(
				ByVal pixs as Pix, 
				ByVal xfact as Integer, 
				ByVal yfact as Integer, 
				ByVal type as Enumerations.L_CHOOSE_M) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleGrayMinMax( pixs.Pointer, xfact, yfact, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale2.c (1121, 1)
' pixScaleGrayMinMax2()
' pixScaleGrayMinMax2(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Special version for 2x reduction.  The downscaled pixels
''' in pixd are the min, max or (max - min) of the corresponding
''' set of 4 pixels in pixs.
''' (2) The max and min operations are a special case (for levels 1
''' and 4) of grayscale analog to the binary rank scaling operation
''' pixReduceRankBinary2().  Note, however, that because of
''' the photometric definition that higher gray values are
''' lighter, the erosion-like L_CHOOSE_MIN will darken
''' the resulting image, corresponding to a threshold level 1
''' in the binary case.  Likewise, L_CHOOSE_MAX will lighten
''' the pixd, corresponding to a threshold level of 4.
''' (3) To choose any of the four rank levels in a 2x grayscale
''' reduction, use pixScaleGrayRank2().
''' (4) This runs at about 70 MPix/sec/GHz of source data for
''' erosion and dilation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, not cmapped</param>
'''  <param name="type">[in] - L_CHOOSE_MIN, L_CHOOSE_MAX, L_CHOOSE_MAXDIFF</param>
'''   <returns>pixd 8 bpp downscaled by 2x</returns>
Public Shared Function pixScaleGrayMinMax2(
				ByVal pixs as Pix, 
				ByVal type as Enumerations.L_CHOOSE_M) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleGrayMinMax2( pixs.Pointer, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale2.c (1204, 1)
' pixScaleGrayRankCascade()
' pixScaleGrayRankCascade(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This performs up to four cascaded 2x rank reductions.
''' (2) Use level = 0 to truncate the cascade.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, not cmapped</param>
'''  <param name="level1">[in] - rank thresholds, in set {0, 1, 2, 3, 4}</param>
'''  <param name="level2">[in] - rank thresholds, in set {0, 1, 2, 3, 4}</param>
'''  <param name="level3">[in] - rank thresholds, in set {0, 1, 2, 3, 4}</param>
'''  <param name="level4">[in] - rank thresholds, in set {0, 1, 2, 3, 4}</param>
'''   <returns>pixd 8 bpp, downscaled by up to 16x</returns>
Public Shared Function pixScaleGrayRankCascade(
				ByVal pixs as Pix, 
				ByVal level1 as Integer, 
				ByVal level2 as Integer, 
				ByVal level3 as Integer, 
				ByVal level4 as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleGrayRankCascade( pixs.Pointer, level1, level2, level3, level4)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale2.c (1268, 1)
' pixScaleGrayRank2()
' pixScaleGrayRank2(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Rank 2x reduction.  If rank == 1(4), the downscaled pixels
''' in pixd are the min(max) of the corresponding set of
''' 4 pixels in pixs.  Values 2 and 3 are intermediate.
''' (2) This is the grayscale analog to the binary rank scaling operation
''' pixReduceRankBinary2().  Here, because of the photometric
''' definition that higher gray values are lighter, rank 1 gives
''' the darkest pixel, whereas rank 4 gives the lightest pixel.
''' This is opposite to the binary rank operation.
''' (3) For rank = 1 and 4, this calls pixScaleGrayMinMax2(),
''' which runs at about 70 MPix/sec/GHz of source data.
''' For rank 2 and 3, this runs 3x slower, at about 25 MPix/sec/GHz.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp, no cmap</param>
'''  <param name="rank">[in] - 1 (darkest), 2, 3, 4 (lightest)</param>
'''   <returns>pixd 8 bpp, downscaled by 2x</returns>
Public Shared Function pixScaleGrayRank2(
				ByVal pixs as Pix, 
				ByVal rank as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleGrayRank2( pixs.Pointer, rank)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\scale2.c (1358, 1)
' pixScaleAndTransferAlpha()
' pixScaleAndTransferAlpha(PIX *, PIX *, l_float32, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This scales the alpha component of pixs and inserts into pixd.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in] - 32 bpp, scaled image</param>
'''  <param name="pixs">[in] - 32 bpp, original unscaled image</param>
'''  <param name="scalex">[in] - both GT 0.0</param>
'''  <param name="scaley">[in] - both GT 0.0</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixScaleAndTransferAlpha(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal scalex as Single, 
				ByVal scaley as Single) as Integer

	If IsNothing (pixd) then Throw New ArgumentNullException  ("pixd cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixScaleAndTransferAlpha( pixd.Pointer, pixs.Pointer, scalex, scaley)

	Return _Result
End Function

' SRC\scale2.c (1436, 1)
' pixScaleWithAlpha()
' pixScaleWithAlpha(PIX *, l_float32, l_float32, PIX *, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) The alpha channel is transformed separately from pixs,
''' and aligns with it, being fully transparent outside the
''' boundary of the transformed pixs.  For pixels that are fully
''' transparent, a blending function like pixBlendWithGrayMask()
''' will give zero weight to corresponding pixels in pixs.
''' (2) Scaling is done with area mapping or linear interpolation,
''' depending on the scale factors.  Default sharpening is done.
''' (3) If pixg is NULL, it is generated as an alpha layer that is
''' partially opaque, using %fract.  Otherwise, it is cropped
''' to pixs if required, and %fract is ignored.  The alpha
''' channel in pixs is never used.
''' (4) Colormaps are removed to 32 bpp.
''' (5) The default setting for the border values in the alpha channel
''' is 0 (transparent) for the outermost ring of pixels and
''' (0.5  fract  255) for the second ring.  When blended over
''' a second image, this
''' (a) shrinks the visible image to make a clean overlap edge
''' with an image below, and
''' (b) softens the edges by weakening the aliasing there.
''' Use l_setAlphaMaskBorder() to change these values.
''' (6) A subtle use of gamma correction is to remove gamma correction
''' before scaling and restore it afterwards.  This is done
''' by sandwiching this function between a gamma/inverse-gamma
''' photometric transform
''' pixt = pixGammaTRCWithAlpha(NULL, pixs, 1.0 / gamma, 0, 255);
''' pixd = pixScaleWithAlpha(pixt, scalex, scaley, NULL, fract);
''' pixGammaTRCWithAlpha(pixd, pixd, gamma, 0, 255);
''' pixDestroy(pixt);
''' This has the side-effect of producing artifacts in the very
''' dark regions.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 32 bpp rgb or cmapped</param>
'''  <param name="scalex">[in] - must be GT 0.0</param>
'''  <param name="scaley">[in] - must be GT 0.0</param>
'''  <param name="pixg">[in][optional] - 8 bpp, can be null</param>
'''  <param name="fract">[in] - between 0.0 and 1.0, with 0.0 fully transparent and 1.0 fully opaque</param>
'''   <returns>pixd 32 bpp rgba, or NULL on error</returns>
Public Shared Function pixScaleWithAlpha(
				ByVal pixs as Pix, 
				ByVal scalex as Single, 
				ByVal scaley as Single, 
				ByVal pixg as Pix, 
				ByVal fract as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (fract) then Throw New ArgumentNullException  ("fract cannot be Nothing")

	Dim pixgPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixg) Then pixgPTR = pixg.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixScaleWithAlpha( pixs.Pointer, scalex, scaley, pixgPTR, fract)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\seedfill.c"
' SRC\seedfill.c (243, 1)
' pixSeedfillBinary()
' pixSeedfillBinary(PIX *, PIX *, PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is for binary seedfill (aka "binary reconstruction").
''' (2) There are 3 cases
''' (a) pixd == null (make a new pixd)
''' (b) pixd == pixs (in-place)
''' (c) pixd != pixs
''' (3) If you know the case, use these patterns for clarity
''' (a) pixd = pixSeedfillBinary(NULL, pixs, ...);
''' (b) pixSeedfillBinary(pixs, pixs, ...);
''' (c) pixSeedfillBinary(pixd, pixs, ...);
''' (4) The resulting pixd contains the filled seed.  For some
''' applications you want to OR it with the inverse of
''' the filling mask.
''' (5) The input seed and mask images can be different sizes, but
''' in typical use the difference, if any, would be only
''' a few pixels in each direction.  If the sizes differ,
''' the clipping is handled by the low-level function
''' seedfillBinaryLow().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs; 1 bpp</param>
'''  <param name="pixs">[in] - 1 bpp seed</param>
'''  <param name="pixm">[in] - 1 bpp filling mask</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>pixd always</returns>
Public Shared Function pixSeedfillBinary(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal connectivity as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSeedfillBinary( pixdPTR, pixs.Pointer, pixm.Pointer, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\seedfill.c (330, 1)
' pixSeedfillBinaryRestricted()
' pixSeedfillBinaryRestricted(PIX *, PIX *, PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See usage for pixSeedfillBinary(), which has unrestricted fill.
''' In pixSeedfillBinary(), the filling distance is unrestricted
''' and can be larger than pixs, depending on the topology of
''' th mask.
''' (2) There are occasions where it is useful not to permit the
''' fill to go more than a certain distance into the mask.
''' %xmax specifies the maximum horizontal distance allowed
''' in the fill; %ymax does likewise in the vertical direction.
''' (3) Operationally, the max "distance" allowed for the fill
''' is a linear distance from the original seed, independent
''' of the actual mask topology.
''' (4) Another formulation of this problem, not implemented,
''' would use the manhattan distance from the seed, as
''' determined by a breadth-first search starting at the seed
''' boundaries and working outward where the mask fg allows.
''' How this might use the constraints of separate xmax and ymax
''' is not clear.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null, equal to pixs, or different from pixs; 1 bpp</param>
'''  <param name="pixs">[in] - 1 bpp seed</param>
'''  <param name="pixm">[in] - 1 bpp filling mask</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="xmax">[in] - max distance in x direction of fill into the mask</param>
'''  <param name="ymax">[in] - max distance in y direction of fill into the mask</param>
'''   <returns>pixd always</returns>
Public Shared Function pixSeedfillBinaryRestricted(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal connectivity as Integer, 
				ByVal xmax as Integer, 
				ByVal ymax as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSeedfillBinaryRestricted( pixdPTR, pixs.Pointer, pixm.Pointer, connectivity, xmax, ymax)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\seedfill.c (605, 1)
' pixHolesByFilling()
' pixHolesByFilling(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) To get 4-c.c. holes of the 8-c.c. as foreground, use
''' 4-connected filling; to get 8-c.c. holes of the 4-c.c.
''' as foreground, use 8-connected filling.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>pixd  inverted image of all holes, or NULL on error Action 1 Start with 1-pixel black border on otherwise white pixd 2 Use the inverted pixs as the filling mask to fill in all the pixels from the border to the pixs foreground 3 OR the result with pixs to have an image with all ON pixels except for the holes. 4 Invert the result to get the holes as foreground</returns>
Public Shared Function pixHolesByFilling(
				ByVal pixs as Pix, 
				ByVal connectivity as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixHolesByFilling( pixs.Pointer, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\seedfill.c (656, 1)
' pixFillClosedBorders()
' pixFillClosedBorders(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) Start with 1-pixel black border on otherwise white pixd
''' (2) Subtract input pixs to remove border pixels that were
''' also on the closed border
''' (3) Use the inverted pixs as the filling mask to fill in
''' all the pixels from the outer border to the closed border
''' on pixs
''' (4) Invert the result to get the filled component, including
''' the input border
''' (5) If the borders are 4-c.c., use 8-c.c. filling, and v.v.
''' (6) Closed borders within c.c. that represent holes, etc., are filled.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="connectivity">[in] - filling connectivity 4 or 8</param>
'''   <returns>pixd  all topologically outer closed borders are filled as connected comonents, or NULL on error</returns>
Public Shared Function pixFillClosedBorders(
				ByVal pixs as Pix, 
				ByVal connectivity as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFillClosedBorders( pixs.Pointer, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\seedfill.c (694, 1)
' pixExtractBorderConnComps()
' pixExtractBorderConnComps(PIX *, l_int32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="connectivity">[in] - filling connectivity 4 or 8</param>
'''   <returns>pixd  all pixels in the src that are in connected components touching the border, or NULL on error</returns>
Public Shared Function pixExtractBorderConnComps(
				ByVal pixs as Pix, 
				ByVal connectivity as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixExtractBorderConnComps( pixs.Pointer, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\seedfill.c (733, 1)
' pixRemoveBorderConnComps()
' pixRemoveBorderConnComps(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This removes all fg components touching the border.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="connectivity">[in] - filling connectivity 4 or 8</param>
'''   <returns>pixd  all pixels in the src that are not touching the border or NULL on error</returns>
Public Shared Function pixRemoveBorderConnComps(
				ByVal pixs as Pix, 
				ByVal connectivity as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRemoveBorderConnComps( pixs.Pointer, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\seedfill.c (783, 1)
' pixFillBgFromBorder()
' pixFillBgFromBorder(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This fills all bg components touching the border to fg.
''' It is the photometric inverse of pixRemoveBorderConnComps().
''' (2) Invert the result to get the "holes" left after this fill.
''' This can be done multiple times, extracting holes within
''' holes after each pair of fillings.  Specifically, this code
''' peels away n successive embeddings of components
''' \code
''' pix1 = LTinitial imageGT
''' for (i = 0; i LT 2  n; i++) {
''' pix2 = pixFillBgFromBorder(pix1, 8);
''' pixInvert(pix2, pix2);
''' pixDestroy(pix1);
''' pix1 = pix2;
''' }
''' \endcode
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="connectivity">[in] - filling connectivity 4 or 8</param>
'''   <returns>pixd with the background c.c. touching the border filled to foreground, or NULL on error</returns>
Public Shared Function pixFillBgFromBorder(
				ByVal pixs as Pix, 
				ByVal connectivity as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFillBgFromBorder( pixs.Pointer, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\seedfill.c (842, 1)
' pixFillHolesToBoundingRect()
' pixFillHolesToBoundingRect(PIX *, l_int32, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) This does not fill holes that are smaller in area than 'minsize'.
''' (2) This does not fill holes with an area larger than
''' 'maxhfract' times the fg area of the c.c.
''' (3) This does not expand the fg of the c.c. to bounding rect if
''' the fg area is less than 'minfgfract' times the area of the
''' bounding rect.
''' (4) The decisions are made as follows
''' ~ Decide if we are filling the holes; if so, when using
''' the fg area, include the filled holes.
''' ~ Decide based on the fg area if we are filling to a bounding rect.
''' If so, do it.
''' If not, fill the holes if the condition is satisfied.
''' (5) The choice of minsize depends on the resolution.
''' (6) For solidifying image mask regions on printed materials,
''' which tend to be rectangular, values for maxhfract
''' and minfgfract around 0.5 are reasonable.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="minsize">[in] - min number of pixels in the hole</param>
'''  <param name="maxhfract">[in] - max hole area as fraction of fg pixels in the cc</param>
'''  <param name="minfgfract">[in] - min fg area as fraction of bounding rectangle</param>
'''   <returns>pixd pixs, with some holes possibly filled and some c.c. possibly expanded to their bounding rects, or NULL on error</returns>
Public Shared Function pixFillHolesToBoundingRect(
				ByVal pixs as Pix, 
				ByVal minsize as Integer, 
				ByVal maxhfract as Single, 
				ByVal minfgfract as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (maxhfract) then Throw New ArgumentNullException  ("maxhfract cannot be Nothing")
	If IsNothing (minfgfract) then Throw New ArgumentNullException  ("minfgfract cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFillHolesToBoundingRect( pixs.Pointer, minsize, maxhfract, minfgfract)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\seedfill.c (923, 1)
' pixSeedfillGray()
' pixSeedfillGray(PIX *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place filling operation on the seed, pixs,
''' where the clipping mask is always above or at the level
''' of the seed as it is filled.
''' (2) For details of the operation, see the description in
''' seedfillGrayLow() and the code there.
''' (3) As an example of use, see the description in pixHDome().
''' There, the seed is an image where each pixel is a fixed
''' amount smaller than the corresponding mask pixel.
''' (4) Reference paper 
''' L. Vincent, Morphological grayscale reconstruction in image
''' analysis applications and efficient algorithms, IEEE Transactions
''' on  Image Processing, vol. 2, no. 2, pp. 176-201, 1993.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp seed; filled in place</param>
'''  <param name="pixm">[in] - 8 bpp filling mask</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSeedfillGray(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal connectivity as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSeedfillGray( pixs.Pointer, pixm.Pointer, connectivity)

	Return _Result
End Function

' SRC\seedfill.c (982, 1)
' pixSeedfillGrayInv()
' pixSeedfillGrayInv(PIX *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place filling operation on the seed, pixs,
''' where the clipping mask is always below or at the level
''' of the seed as it is filled.  Think of filling up a basin
''' to a particular level, given by the maximum seed value
''' in the basin.  Outside the filled region, the mask
''' is above the filling level.
''' (2) Contrast this with pixSeedfillGray(), where the clipping mask
''' is always above or at the level of the fill.  An example
''' of its use is the hdome fill, where the seed is an image
''' where each pixel is a fixed amount smaller than the
''' corresponding mask pixel.
''' (3) The basin fill, pixSeedfillGrayBasin(), is a special case
''' where the seed pixel values are generated from the mask,
''' and where the implementation uses pixSeedfillGray() by
''' inverting both the seed and mask.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp seed; filled in place</param>
'''  <param name="pixm">[in] - 8 bpp filling mask</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSeedfillGrayInv(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal connectivity as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSeedfillGrayInv( pixs.Pointer, pixm.Pointer, connectivity)

	Return _Result
End Function

' SRC\seedfill.c (1969, 1)
' pixSeedfillGraySimple()
' pixSeedfillGraySimple(PIX *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place filling operation on the seed, pixs,
''' where the clipping mask is always above or at the level
''' of the seed as it is filled.
''' (2) For details of the operation, see the description in
''' seedfillGrayLowSimple() and the code there.
''' (3) As an example of use, see the description in pixHDome().
''' There, the seed is an image where each pixel is a fixed
''' amount smaller than the corresponding mask pixel.
''' (4) Reference paper 
''' L. Vincent, Morphological grayscale reconstruction in image
''' analysis applications and efficient algorithms, IEEE Transactions
''' on  Image Processing, vol. 2, no. 2, pp. 176-201, 1993.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp seed; filled in place</param>
'''  <param name="pixm">[in] - 8 bpp filling mask</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSeedfillGraySimple(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal connectivity as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSeedfillGraySimple( pixs.Pointer, pixm.Pointer, connectivity)

	Return _Result
End Function

' SRC\seedfill.c (2040, 1)
' pixSeedfillGrayInvSimple()
' pixSeedfillGrayInvSimple(PIX *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place filling operation on the seed, pixs,
''' where the clipping mask is always below or at the level
''' of the seed as it is filled.  Think of filling up a basin
''' to a particular level, given by the maximum seed value
''' in the basin.  Outside the filled region, the mask
''' is above the filling level.
''' (2) Contrast this with pixSeedfillGraySimple(), where the clipping mask
''' is always above or at the level of the fill.  An example
''' of its use is the hdome fill, where the seed is an image
''' where each pixel is a fixed amount smaller than the
''' corresponding mask pixel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp seed; filled in place</param>
'''  <param name="pixm">[in] - 8 bpp filling mask</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSeedfillGrayInvSimple(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal connectivity as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSeedfillGrayInvSimple( pixs.Pointer, pixm.Pointer, connectivity)

	Return _Result
End Function

' SRC\seedfill.c (2442, 1)
' pixSeedfillGrayBasin()
' pixSeedfillGrayBasin(PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This fills from a seed within basins defined by a filling mask.
''' The seed value(s) are greater than the corresponding
''' filling mask value, and the result has the bottoms of
''' the basins raised by the initial seed value.
''' (2) The seed has value 255 except where pixb has fg (1), which
''' are the seed 'locations'.  At the seed locations, the seed
''' value is the corresponding value of the mask pixel in pixm
''' plus %delta.  If %delta == 0, we return a copy of pixm.
''' (3) The actual filling is done using the standard grayscale filling
''' operation on the inverse of the mask and using the inverse
''' of the seed image.  After filling, we return the inverse of
''' the filled seed.
''' (4) As an example of use pixm can describe a grayscale image
''' of text, where the (dark) text pixels are basins of
''' low values; pixb can identify the local minima in pixm (say, at
''' the bottom of the basins); and delta is the amount that we wish
''' to raise (lighten) the basins.  We construct the seed
''' (a.k.a marker) image from pixb, pixm and %delta.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixb">[in] - binary mask giving seed locations</param>
'''  <param name="pixm">[in] - 8 bpp basin-type filling mask</param>
'''  <param name="delta">[in] - amount of seed value above mask</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>pixd filled seed if OK, NULL on error</returns>
Public Shared Function pixSeedfillGrayBasin(
				ByVal pixb as Pix, 
				ByVal pixm as Pix, 
				ByVal delta as Integer, 
				ByVal connectivity as Integer) as Pix

	If IsNothing (pixb) then Throw New ArgumentNullException  ("pixb cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSeedfillGrayBasin( pixb.Pointer, pixm.Pointer, delta, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\seedfill.c (2533, 1)
' pixDistanceFunction()
' pixDistanceFunction(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This computes the distance of each pixel from the nearest
''' background pixel.  All bg pixels therefore have a distance of 0,
''' and the fg pixel distances increase linearly from 1 at the
''' boundary.  It can also be used to compute the distance of
''' each pixel from the nearest fg pixel, by inverting the input
''' image before calling this function.  Then all fg pixels have
''' a distance 0 and the bg pixel distances increase linearly
''' from 1 at the boundary.
''' (2) The algorithm, described in Leptonica on the page on seed
''' filling and connected components, is due to Luc Vincent.
''' In brief, we generate an 8 or 16 bpp image, initialized
''' with the fg pixels of the input pix set to 1 and the
''' 1-boundary pixels (i.e., the boundary pixels of width 1 on
''' the four sides set as either
''' L_BOUNDARY_BG 0
''' L_BOUNDARY_FG  max
''' where max = 0xff for 8 bpp and 0xffff for 16 bpp.
''' Then do raster/anti-raster sweeps over all pixels interior
''' to the 1-boundary, where the value of each new pixel is
''' taken to be 1 more than the minimum of the previously-seen
''' connected pixels (using either 4 or 8 connectivity).
''' Finally, set the 1-boundary pixels using the mirrored method;
''' this removes the max values there.
''' (3) Using L_BOUNDARY_BG clamps the distance to 0 at the
''' boundary.  Using L_BOUNDARY_FG allows the distance
''' at the image boundary to "float".
''' (4) For 4-connected, one could initialize only the left and top
''' 1-boundary pixels, and go all the way to the right
''' and bottom; then coming back reset left and top.  But we
''' instead use a method that works for both 4- and 8-connected.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp source</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="outdepth">[in] - 8 or 16 bits for pixd</param>
'''  <param name="boundcond">[in] - L_BOUNDARY_BG, L_BOUNDARY_FG</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixDistanceFunction(
				ByVal pixs as Pix, 
				ByVal connectivity as Integer, 
				ByVal outdepth as Integer, 
				ByVal boundcond as Enumerations.L_BOUNDARY_G) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDistanceFunction( pixs.Pointer, connectivity, outdepth, boundcond)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\seedfill.c (2791, 1)
' pixSeedspread()
' pixSeedspread(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) The raster/anti-raster method for implementing this filling
''' operation was suggested by Ray Smith.
''' (2) This takes an arbitrary set of nonzero pixels in pixs, which
''' can be sparse, and spreads (extrapolates) the values to
''' fill all the pixels in pixd with the nonzero value it is
''' closest to in pixs.  This is similar (though not completely
''' equivalent) to doing a Voronoi tiling of the image, with a
''' tile surrounding each pixel that has a nonzero value.
''' All pixels within a tile are then closer to its "central"
''' pixel than to any others.  Then assign the value of the
''' "central" pixel to each pixel in the tile.
''' (3) This is implemented by computing a distance function in parallel
''' with the fill.  The distance function uses free boundary
''' conditions (assumed maxval outside), and it controls the
''' propagation of the pixels in pixd away from the nonzero
''' (seed) values.  This is done in 2 traversals (raster/antiraster).
''' In the raster direction, whenever the distance function
''' is nonzero, the spread pixel takes on the value of its
''' predecessor that has the minimum distance value.  In the
''' antiraster direction, whenever the distance function is nonzero
''' and its value is replaced by a smaller value, the spread
''' pixel takes the value of the predecessor with the minimum
''' distance value.
''' (4) At boundaries where a pixel is equidistant from two
''' nearest nonzero (seed) pixels, the decision of which value
''' to use is arbitrary (greedy in search for minimum distance).
''' This can give rise to strange-looking results, particularly
''' for 4-connectivity where the L1 distance is computed from
''' steps in N,S,E and W directions (no diagonals).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp source</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixSeedspread(
				ByVal pixs as Pix, 
				ByVal connectivity as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSeedspread( pixs.Pointer, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\seedfill.c (3018, 1)
' pixLocalExtrema()
' pixLocalExtrema(PIX *, l_int32, l_int32, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This gives the actual local minima and maxima.
''' A local minimum is a pixel whose surrounding pixels all
''' have values at least as large, and likewise for a local
''' maximum.  For the local minima, %maxmin is the upper
''' bound for the value of pixs.  Likewise, for the local maxima,
''' %minmax is the lower bound for the value of pixs.
''' (2) The minima are found by starting with the erosion-and-equality
''' approach of pixSelectedLocalExtrema().  This is followed
''' by a qualification step, where each c.c. in the resulting
''' minimum mask is extracted, the pixels bordering it are
''' located, and they are queried.  If all of those pixels
''' are larger than the value of that minimum, it is a true
''' minimum and its c.c. is saved; otherwise the c.c. is
''' rejected.  Note that if a bordering pixel has the
''' same value as the minimum, it must then have a
''' neighbor that is smaller, so the component is not a
''' true minimum.
''' (3) The maxima are found by inverting the image and looking
''' for the minima there.
''' (4) The generated masks can be used as markers for
''' further operations.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="maxmin">[in] - max allowed for the min in a 3x3 neighborhood; use 0 for default which is to have no upper bound</param>
'''  <param name="minmax">[in] - min allowed for the max in a 3x3 neighborhood; use 0 for default which is to have no lower bound</param>
'''  <param name="ppixmin">[out][optional] - mask of local minima</param>
'''  <param name="ppixmax">[out][optional] - mask of local maxima</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixLocalExtrema(
				ByVal pixs as Pix, 
				ByVal maxmin as Integer, 
				ByVal minmax as Integer, 
				ByRef ppixmin as Pix, 
				ByRef ppixmax as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")

Dim ppixminPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixmin) Then ppixminPTR = ppixmin.Pointer
Dim ppixmaxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixmax) Then ppixmaxPTR = ppixmax.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixLocalExtrema( pixs.Pointer, maxmin, minmax, ppixminPTR, ppixmaxPTR)
	if ppixminPTR <> IntPtr.Zero then ppixmin = new Pix(ppixminPTR)
	if ppixmaxPTR <> IntPtr.Zero then ppixmax = new Pix(ppixmaxPTR)

	Return _Result
End Function

' SRC\seedfill.c (3190, 1)
' pixSelectedLocalExtrema()
' pixSelectedLocalExtrema(PIX *, l_int32, PIX **, PIX **) as l_ok
'''  <summary>
''' Notes
''' (1) This selects those local 3x3 minima that are at least a
''' specified distance from the nearest local 3x3 maxima, and v.v.
''' for the selected set of local 3x3 maxima.
''' The local 3x3 minima is the set of pixels whose value equals
''' the value after a 3x3 brick erosion, and the local 3x3 maxima
''' is the set of pixels whose value equals the value after
''' a 3x3 brick dilation.
''' (2) mindist is the minimum distance allowed between
''' local 3x3 minima and local 3x3 maxima, in an 8-connected sense.
''' mindist == 1 keeps all pixels found in step 1.
''' mindist == 0 removes all pixels from each mask that are
''' both a local 3x3 minimum and a local 3x3 maximum.
''' mindist == 1 removes any local 3x3 minimum pixel that touches a
''' local 3x3 maximum pixel, and likewise for the local maxima.
''' To make the decision, visualize each local 3x3 minimum pixel
''' as being surrounded by a square of size (2  mindist + 1)
''' on each side, such that no local 3x3 maximum pixel is within
''' that square; and v.v.
''' (3) The generated masks can be used as markers for further operations.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="mindist">[in] - -1 for keeping all pixels; GT= 0 specifies distance</param>
'''  <param name="ppixmin">[out] - mask of local minima</param>
'''  <param name="ppixmax">[out] - mask of local maxima</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSelectedLocalExtrema(
				ByVal pixs as Pix, 
				ByVal mindist as Integer, 
				ByRef ppixmin as Pix, 
				ByRef ppixmax as Pix) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")

	Dim ppixminPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixmin) Then ppixminPTR = ppixmin.Pointer
	Dim ppixmaxPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixmax) Then ppixmaxPTR = ppixmax.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSelectedLocalExtrema( pixs.Pointer, mindist, ppixminPTR, ppixmaxPTR)
	if ppixminPTR <> IntPtr.Zero then ppixmin = new Pix(ppixminPTR)
	if ppixmaxPTR <> IntPtr.Zero then ppixmax = new Pix(ppixmaxPTR)

	Return _Result
End Function

' SRC\seedfill.c (3250, 1)
' pixFindEqualValues()
' pixFindEqualValues(PIX *, PIX *) as PIX *
'''  <summary>
''' Notes
''' (1) The two images are aligned at the UL corner, and the returned
''' image has ON pixels where the pixels in pixs1 and pixs2
''' have equal values.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs1">[in] - 8 bpp</param>
'''  <param name="pixs2">[in] - 8 bpp</param>
'''   <returns>pixd 1 bpp mask, or NULL on error</returns>
Public Shared Function pixFindEqualValues(
				ByVal pixs1 as Pix, 
				ByVal pixs2 as Pix) as Pix

	If IsNothing (pixs1) then Throw New ArgumentNullException  ("pixs1 cannot be Nothing")
	If IsNothing (pixs2) then Throw New ArgumentNullException  ("pixs2 cannot be Nothing")
	If {8}.contains (pixs1.d) = false then Throw New ArgumentException ("8 bpp")
	If {8}.contains (pixs2.d) = false then Throw New ArgumentException ("8 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFindEqualValues( pixs1.Pointer, pixs2.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\seedfill.c (3317, 1)
' pixSelectMinInConnComp()
' pixSelectMinInConnComp(PIX *, PIX *, PTA **, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) For each 8 connected component in pixm, this finds
''' a pixel in pixs that has the lowest value, and saves
''' it in a Pta.  If several pixels in pixs have the same
''' minimum value, it picks the first one found.
''' (2) For a mask pixm of true local minima, all pixels in each
''' connected component have the same value in pixs, so it is
''' fastest to select one of them using a special seedfill
''' operation.  Not yet implemented.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp</param>
'''  <param name="pixm">[in] - 1 bpp</param>
'''  <param name="ppta">[out] - pta of min pixel locations</param>
'''  <param name="pnav">[out][optional] - numa of minima values</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function pixSelectMinInConnComp(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByRef ppta as Pta, 
				ByRef pnav as Numa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp")
	If {1}.contains (pixm.d) = false then Throw New ArgumentException ("1 bpp")

	Dim pptaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppta) Then pptaPTR = ppta.Pointer
Dim pnavPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnav) Then pnavPTR = pnav.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSelectMinInConnComp( pixs.Pointer, pixm.Pointer, pptaPTR, pnavPTR)
	if pptaPTR <> IntPtr.Zero then ppta = new Pta(pptaPTR)
	if pnavPTR <> IntPtr.Zero then pnav = new Numa(pnavPTR)

	Return _Result
End Function

' SRC\seedfill.c (3430, 1)
' pixRemoveSeededComponents()
' pixRemoveSeededComponents(PIX *, PIX *, PIX *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This removes each component in pixm for which there is
''' at least one seed in pixs.  If pixd == NULL, this returns
''' the result in a new pixd.  Otherwise, it is an in-place
''' operation on pixm.  In no situation is pixs altered,
''' because we do the filling with a copy of pixs.
''' (2) If bordersize GT 0, it also clears all pixels within a
''' distance %bordersize of the edge of pixd.  This is here
''' because pixLocalExtrema() typically finds local minima
''' at the border.  Use %bordersize GT= 2 to remove these.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - ; this can be null or equal to pixm; 1 bpp</param>
'''  <param name="pixs">[in] - 1 bpp seed</param>
'''  <param name="pixm">[in] - 1 bpp filling mask</param>
'''  <param name="connectivity">[in] - 4 or 8</param>
'''  <param name="bordersize">[in] - amount of border clearing</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixRemoveSeededComponents(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal connectivity as Integer, 
				ByVal bordersize as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRemoveSeededComponents( pixdPTR, pixs.Pointer, pixm.Pointer, connectivity, bordersize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\sel1.c"
' SRC\sel1.c (239, 1)
' selaCreate()
' selaCreate(l_int32) as SELA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - initial number of sel ptrs; use 0 for default</param>
'''   <returns>sela, or NULL on error</returns>
Public Shared Function selaCreate(
				ByVal n as Integer) as Sela



	Dim _Result as IntPtr = LeptonicaSharp.Natives.selaCreate( n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sela(_Result)
End Function

' SRC\sel1.c (272, 1)
' selaDestroy()
' selaDestroy(SELA **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="psela">[in,out] - to be nulled</param>
Public Shared Sub selaDestroy(
				ByRef psela as Sela)


	Dim pselaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(psela) Then pselaPTR = psela.Pointer

	LeptonicaSharp.Natives.selaDestroy( pselaPTR)
	if pselaPTR <> IntPtr.Zero then psela = new Sela(pselaPTR)

End Sub

' SRC\sel1.c (306, 1)
' selCreate()
' selCreate(l_int32, l_int32, const char *) as SEL *
'''  <summary>
''' Notes
''' (1) selCreate() initializes all values to 0.
''' (2) After this call, (cy,cx) and nonzero data values must be
''' assigned.  If a text name is not assigned here, it will
''' be needed later when the sel is put into a sela.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="height">[in] - </param>
'''  <param name="width">[in] - </param>
'''  <param name="name">[in][optional] - sel name; can be null</param>
'''   <returns>sel, or NULL on error</returns>
Public Shared Function selCreate(
				ByVal height as Integer, 
				ByVal width as Integer, 
				ByVal name as String) as Sel



	Dim _Result as IntPtr = LeptonicaSharp.Natives.selCreate( height, width, name)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sel(_Result)
End Function

' SRC\sel1.c (337, 1)
' selDestroy()
' selDestroy(SEL **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="psel">[in,out] - to be nulled</param>
Public Shared Sub selDestroy(
				ByRef psel as Sel)


	Dim pselPTR As IntPtr = IntPtr.Zero : If Not IsNothing(psel) Then pselPTR = psel.Pointer

	LeptonicaSharp.Natives.selDestroy( pselPTR)
	if pselPTR <> IntPtr.Zero then psel = new Sel(pselPTR)

End Sub

' SRC\sel1.c (370, 1)
' selCopy()
' selCopy(SEL *) as SEL *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sel">[in] - </param>
'''   <returns>a copy of the sel, or NULL on error</returns>
Public Shared Function selCopy(
				ByVal sel as Sel) as Sel

	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selCopy( sel.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sel(_Result)
End Function

' SRC\sel1.c (418, 1)
' selCreateBrick()
' selCreateBrick(l_int32, l_int32, l_int32, l_int32, l_int32) as SEL *
'''  <summary>
''' Notes
''' (1) This is a rectangular sel of all hits, misses or don't cares.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="h">[in] - height, width</param>
'''  <param name="w">[in] - height, width</param>
'''  <param name="cy">[in] - origin, relative to UL corner at 0,0</param>
'''  <param name="cx">[in] - origin, relative to UL corner at 0,0</param>
'''  <param name="type">[in] - SEL_HIT, SEL_MISS, or SEL_DONT_CARE</param>
'''   <returns>sel, or NULL on error</returns>
Public Shared Function selCreateBrick(
				ByVal h as Integer, 
				ByVal w as Integer, 
				ByVal cy as Integer, 
				ByVal cx as Integer, 
				ByVal type as Enumerations.SEL) as Sel



	Dim _Result as IntPtr = LeptonicaSharp.Natives.selCreateBrick( h, w, cy, cx, type)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sel(_Result)
End Function

' SRC\sel1.c (462, 1)
' selCreateComb()
' selCreateComb(l_int32, l_int32, l_int32) as SEL *
'''  <summary>
''' Notes
''' (1) This generates a comb Sel of hits with the origin as
''' near the center as possible.
''' (2) In use, this is complemented by a brick sel of size %factor1,
''' Both brick and comb sels are made by selectComposableSels().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="factor1">[in] - contiguous space between comb tines</param>
'''  <param name="factor2">[in] - number of comb tines</param>
'''  <param name="direction">[in] - L_HORIZ, L_VERT</param>
'''   <returns>sel, or NULL on error</returns>
Public Shared Function selCreateComb(
				ByVal factor1 as Integer, 
				ByVal factor2 as Integer, 
				ByVal direction as Enumerations.L_direction) as Sel



	Dim _Result as IntPtr = LeptonicaSharp.Natives.selCreateComb( factor1, factor2, direction)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sel(_Result)
End Function

' SRC\sel1.c (515, 1)
' create2dIntArray()
' create2dIntArray(l_int32, l_int32) as l_int32 **
'''  <summary>
''' Notes
''' (1) The array[sy][sx] is indexed in standard "matrix notation",
''' with the row index first.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sy">[in] - rows == height</param>
'''  <param name="sx">[in] - columns == width</param>
'''   <returns>doubly indexed array i.e., an array of sy row pointers, each of which points to an array of sx ints</returns>
Public Shared Function create2dIntArray(
				ByVal sy as Integer, 
				ByVal sx as Integer) as List (of Integer())



	Dim _Result as IntPtr = LeptonicaSharp.Natives.create2dIntArray( sy, sx)
Dim PTRArr(1) As IntPtr : Marshal.Copy(_Result, PTRArr, 0, PTRArr.Length)
Dim B As New List(Of Integer())
For Each eintrag In PTRArr
Dim IntegerLST(1) As Integer
Marshal.Copy(eintrag, IntegerLST, 0, IntegerLST.Count)
B.Add(IntegerLST)
Next

	Return B
End Function

' SRC\sel1.c (566, 1)
' selaAddSel()
' selaAddSel(SELA *, SEL *, const char *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This adds a sel, either inserting or making a copy.
''' (2) Because every sel in a sela must have a name, it copies
''' the input name if necessary.  You can input NULL for
''' selname if the sel already has a name.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in] - </param>
'''  <param name="sel">[in] - to be added</param>
'''  <param name="selname">[in] - ignored if already defined in sel; req'd in sel when added to a sela</param>
'''  <param name="copyflag">[in] - L_INSERT or L_COPY</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function selaAddSel(
				ByVal sela as Sela, 
				ByVal sel as Sel, 
				ByVal selname as String, 
				ByVal copyflag as Enumerations.L_access_storage) as Integer

	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")
	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")
	If IsNothing (selname) then Throw New ArgumentNullException  ("selname cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.selaAddSel( sela.Pointer, sel.Pointer, selname, copyflag)

	Return _Result
End Function

' SRC\sel1.c (639, 1)
' selaGetCount()
' selaGetCount(SELA *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in] - </param>
'''   <returns>count, or 0 on error</returns>
Public Shared Function selaGetCount(
				ByVal sela as Sela) as Integer

	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.selaGetCount( sela.Pointer)

	Return _Result
End Function

' SRC\sel1.c (664, 1)
' selaGetSel()
' selaGetSel(SELA *, l_int32) as SEL *
'''  <summary>
''' Notes
''' (1) This returns a ptr to the sel, not a copy, so the caller
''' must not destroy it!
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in] - </param>
'''  <param name="i">[in] - index of sel to be retrieved not copied</param>
'''   <returns>sel, or NULL on error</returns>
Public Shared Function selaGetSel(
				ByVal sela as Sela, 
				ByVal i as Integer) as Sel

	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selaGetSel( sela.Pointer, i)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sel(_Result)
End Function

' SRC\sel1.c (685, 1)
' selGetName()
' selGetName(SEL *) as char *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sel">[in] - </param>
'''   <returns>sel name not copied, or NULL if no name or on error</returns>
Public Shared Function selGetName(
				ByVal sel as Sel) as String

	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.selGetName( sel.Pointer)

	Return _Result
End Function

' SRC\sel1.c (710, 1)
' selSetName()
' selSetName(SEL *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) Always frees the existing sel name, if defined.
''' (2) If name is not defined, just clears any existing sel name.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sel">[in] - </param>
'''  <param name="name">[in][optional] - ; can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function selSetName(
				ByVal sel as Sel, 
				ByVal name as String) as Integer

	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.selSetName( sel.Pointer, name)

	Return _Result
End Function

' SRC\sel1.c (732, 1)
' selaFindSelByName()
' selaFindSelByName(SELA *, const char *, l_int32 *, SEL **) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in] - </param>
'''  <param name="name">[in] - sel name</param>
'''  <param name="pindex">[out][optional] - </param>
'''  <param name="psel">[in][optional] - sel (not a copy)</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function selaFindSelByName(
				ByVal sela as Sela, 
				ByVal name as String, 
				ByRef pindex as Integer, 
				ByVal psel as List (of Sel)) as Integer

	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")
	If IsNothing (name) then Throw New ArgumentNullException  ("name cannot be Nothing")

Dim pselPTR As IntPtr = Marshal.AllocHGlobal(Marshal.Sizeof(psel.ToArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.selaFindSelByName( sela.Pointer, name, pindex, pselPTR)

	Return _Result
End Function

' SRC\sel1.c (781, 1)
' selGetElement()
' selGetElement(SEL *, l_int32, l_int32, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sel">[in] - </param>
'''  <param name="row">[in] - </param>
'''  <param name="col">[in] - </param>
'''  <param name="ptype">[out] - SEL_HIT, SEL_MISS, SEL_DONT_CARE</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function selGetElement(
				ByVal sel as Sel, 
				ByVal row as Integer, 
				ByVal col as Integer, 
				ByRef ptype as Enumerations.SEL) as Integer

	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.selGetElement( sel.Pointer, row, col, ptype)

	Return _Result
End Function

' SRC\sel1.c (821, 1)
' selSetElement()
' selSetElement(SEL *, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Because we use row and column to index into an array,
''' they are always non-negative.  The location of the origin
''' (and the type of operation) determine the actual
''' direction of the rasterop.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sel">[in] - </param>
'''  <param name="row">[in] - </param>
'''  <param name="col">[in] - </param>
'''  <param name="type">[in] - SEL_HIT, SEL_MISS, SEL_DONT_CARE</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function selSetElement(
				ByVal sel as Sel, 
				ByVal row as Integer, 
				ByVal col as Integer, 
				ByVal type as Enumerations.SEL) as Integer

	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.selSetElement( sel.Pointer, row, col, type)

	Return _Result
End Function

' SRC\sel1.c (850, 1)
' selGetParameters()
' selGetParameters(SEL *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sel">[in] - </param>
'''  <param name="psy">[out][optional] - each can be null</param>
'''  <param name="psx">[out][optional] - each can be null</param>
'''  <param name="pcy">[out][optional] - each can be null</param>
'''  <param name="pcx">[out][optional] - each can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function selGetParameters(
				ByVal sel as Sel, 
				ByRef psy as Integer, 
				ByRef psx as Integer, 
				ByRef pcy as Integer, 
				ByRef pcx as Integer) as Integer

	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.selGetParameters( sel.Pointer, psy, psx, pcy, pcx)

	Return _Result
End Function

' SRC\sel1.c (880, 1)
' selSetOrigin()
' selSetOrigin(SEL *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sel">[in] - </param>
'''  <param name="cy">[in] - </param>
'''  <param name="cx">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function selSetOrigin(
				ByVal sel as Sel, 
				ByVal cy as Integer, 
				ByVal cx as Integer) as Integer

	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.selSetOrigin( sel.Pointer, cy, cx)

	Return _Result
End Function

' SRC\sel1.c (902, 1)
' selGetTypeAtOrigin()
' selGetTypeAtOrigin(SEL *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sel">[in] - </param>
'''  <param name="ptype">[out] - SEL_HIT, SEL_MISS, SEL_DONT_CARE</param>
'''   <returns>0 if OK; 1 on error or if origin is not found</returns>
Public Shared Function selGetTypeAtOrigin(
				ByVal sel as Sel, 
				ByRef ptype as Enumerations.SEL) as Integer

	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.selGetTypeAtOrigin( sel.Pointer, ptype)

	Return _Result
End Function

' SRC\sel1.c (937, 1)
' selaGetBrickName()
' selaGetBrickName(SELA *, l_int32, l_int32) as char *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in] - </param>
'''  <param name="hsize">[in] - of brick sel</param>
'''  <param name="vsize">[in] - of brick sel</param>
'''   <returns>sel name new string, or NULL if no name or on error</returns>
Public Shared Function selaGetBrickName(
				ByVal sela as Sela, 
				ByVal hsize as Integer, 
				ByVal vsize as Integer) as String

	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.selaGetBrickName( sela.Pointer, hsize, vsize)

	Return _Result
End Function

' SRC\sel1.c (976, 1)
' selaGetCombName()
' selaGetCombName(SELA *, l_int32, l_int32) as char *
'''  <summary>
''' Notes
''' (1) Combs are by definition 1-dimensional, either horiz or vert.
''' (2) Use this with comb Sels; e.g., from selaAddDwaCombs().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in] - </param>
'''  <param name="size">[in] - the product of sizes of the brick and comb parts</param>
'''  <param name="direction">[in] - L_HORIZ, L_VERT</param>
'''   <returns>sel name new string, or NULL if name not found or on error</returns>
Public Shared Function selaGetCombName(
				ByVal sela as Sela, 
				ByVal size as Integer, 
				ByVal direction as Enumerations.L_direction) as String

	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.selaGetCombName( sela.Pointer, size, direction)

	Return _Result
End Function

' SRC\sel1.c (1104, 1)
' getCompositeParameters()
' getCompositeParameters(l_int32, l_int32 *, l_int32 *, char **, char **, char **, char **) as l_ok
'''  <summary>
''' Notes
''' (1) This uses the big lookup table at the top of this file.
''' (2) All returned strings are copies that must be freed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="size">[in] - </param>
'''  <param name="psize1">[out][optional] - brick factor size</param>
'''  <param name="psize2">[out][optional] - comb factor size</param>
'''  <param name="pnameh1">[out][optional] - name of horiz brick</param>
'''  <param name="pnameh2">[out][optional] - name of horiz comb</param>
'''  <param name="pnamev1">[out][optional] - name of vert brick</param>
'''  <param name="pnamev2">[out][optional] - name of vert comb</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function getCompositeParameters(
				ByVal size as Integer, 
				ByRef psize1 as Integer, 
				ByRef psize2 as Integer, 
				ByRef pnameh1 as String(), 
				ByRef pnameh2 as String(), 
				ByRef pnamev1 as String(), 
				ByRef pnamev2 as String()) as Integer


Dim pnameh1PTR As IntPtr = pnameh1PTR = Marshal.AllocHGlobal(Marshal.sizeOf(pnameh1.toArray))
Dim pnameh2PTR As IntPtr = pnameh2PTR = Marshal.AllocHGlobal(Marshal.sizeOf(pnameh2.toArray))
Dim pnamev1PTR As IntPtr = pnamev1PTR = Marshal.AllocHGlobal(Marshal.sizeOf(pnamev1.toArray))
Dim pnamev2PTR As IntPtr = pnamev2PTR = Marshal.AllocHGlobal(Marshal.sizeOf(pnamev2.toArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.getCompositeParameters( size, psize1, psize2, pnameh1PTR, pnameh2PTR, pnamev1PTR, pnamev2PTR)

	Return _Result
End Function

' SRC\sel1.c (1148, 1)
' selaGetSelnames()
' selaGetSelnames(SELA *) as SARRAY *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in] - </param>
'''   <returns>sa of all sel names, or NULL on error</returns>
Public Shared Function selaGetSelnames(
				ByVal sela as Sela) as Sarray

	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selaGetSelnames( sela.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\sel1.c (1193, 1)
' selFindMaxTranslations()
' selFindMaxTranslations(SEL *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
'''  These are the maximum shifts for the erosion operation.
''' For example, when j LT cx, the shift of the image
''' is +x to the cx.  This is a positive xp shift.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sel">[in] - </param>
'''  <param name="pxp">[out] - max shifts</param>
'''  <param name="pyp">[out] - max shifts</param>
'''  <param name="pxn">[out] - max shifts</param>
'''  <param name="pyn">[out] - max shifts</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function selFindMaxTranslations(
				ByVal sel as Sel, 
				ByRef pxp as Integer, 
				ByRef pyp as Integer, 
				ByRef pxn as Integer, 
				ByRef pyn as Integer) as Integer

	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.selFindMaxTranslations( sel.Pointer, pxp, pyp, pxn, pyn)

	Return _Result
End Function

' SRC\sel1.c (1243, 1)
' selRotateOrth()
' selRotateOrth(SEL *, l_int32) as SEL *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sel">[in] - </param>
'''  <param name="quads">[in] - 0 - 4; number of 90 degree cw rotations</param>
'''   <returns>seld, or NULL on error</returns>
Public Shared Function selRotateOrth(
				ByVal sel as Sel, 
				ByVal quads as Integer) as Sel

	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selRotateOrth( sel.Pointer, quads)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sel(_Result)
End Function

' SRC\sel1.c (1310, 1)
' selaRead()
' selaRead(const char *) as SELA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - filename</param>
'''   <returns>sela, or NULL on error</returns>
Public Shared Function selaRead(
				ByVal fname as String) as Sela

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selaRead( fname)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sela(_Result)
End Function

' SRC\sel1.c (1339, 1)
' selaReadStream()
' selaReadStream(FILE *) as SELA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>sela, or NULL on error</returns>
Public Shared Function selaReadStream(
				ByVal fp as FILE) as Sela

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selaReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sela(_Result)
End Function

' SRC\sel1.c (1380, 1)
' selRead()
' selRead(const char *) as SEL *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - filename</param>
'''   <returns>sel, or NULL on error</returns>
Public Shared Function selRead(
				ByVal fname as String) as Sel

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selRead( fname)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sel(_Result)
End Function

' SRC\sel1.c (1409, 1)
' selReadStream()
' selReadStream(FILE *) as SEL *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>sel, or NULL on error</returns>
Public Shared Function selReadStream(
				ByVal fp as FILE) as Sel

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selReadStream( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sel(_Result)
End Function

' SRC\sel1.c (1464, 1)
' selaWrite()
' selaWrite(const char *, SELA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - filename</param>
'''  <param name="sela">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function selaWrite(
				ByVal fname as String, 
				ByVal sela as Sela) as Integer

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")
	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.selaWrite( fname, sela.Pointer)

	Return _Result
End Function

' SRC\sel1.c (1493, 1)
' selaWriteStream()
' selaWriteStream(FILE *, SELA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="sela">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function selaWriteStream(
				ByVal fp as FILE, 
				ByVal sela as Sela) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.selaWriteStream( fp.Pointer, sela.Pointer)

	Return _Result
End Function

' SRC\sel1.c (1526, 1)
' selWrite()
' selWrite(const char *, SEL *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - filename</param>
'''  <param name="sel">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function selWrite(
				ByVal fname as String, 
				ByVal sel as Sel) as Integer

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")
	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.selWrite( fname, sel.Pointer)

	Return _Result
End Function

' SRC\sel1.c (1555, 1)
' selWriteStream()
' selWriteStream(FILE *, SEL *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="sel">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function selWriteStream(
				ByVal fp as FILE, 
				ByVal sel as Sel) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.selWriteStream( fp.Pointer, sel.Pointer)

	Return _Result
End Function

' SRC\sel1.c (1616, 1)
' selCreateFromString()
' selCreateFromString(const char *, l_int32, l_int32, const char *) as SEL *
'''  <summary>
''' Notes
''' (1) The text is an array of chars (in row-major order) where
''' each char can be one of the following
''' 'x' hit
''' 'o' miss
''' ' ' don't-care
''' (2) When the origin falls on a hit or miss, use an upper case
''' char (e.g., 'X' or 'O') to indicate it.  When the origin
''' falls on a don't-care, indicate this with a 'C'.
''' The string must have exactly one origin specified.
''' (3) The advantage of this method is that the text can be input
''' in a format that shows the 2D layout of the Sel; e.g.,
''' \code
''' static const char seltext = "x "
''' "x Oo "
''' "x "
''' "xxxxx";
''' \endcode
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="text">[in] - </param>
'''  <param name="h">[in] - height, width</param>
'''  <param name="w">[in] - height, width</param>
'''  <param name="name">[in][optional] - sel name; can be null</param>
'''   <returns>sel of the given size, or NULL on error</returns>
Public Shared Function selCreateFromString(
				ByVal text as String, 
				ByVal h as Integer, 
				ByVal w as Integer, 
				ByVal name as String) as Sel

	If IsNothing (text) then Throw New ArgumentNullException  ("text cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selCreateFromString( text, h, w, name)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sel(_Result)
End Function

' SRC\sel1.c (1704, 1)
' selPrintToString()
' selPrintToString(SEL *) as char *
'''  <summary>
''' Notes
''' (1) This is an inverse function of selCreateFromString.
''' It prints a textual representation of the SEL to a malloc'd
''' string.  The format is the same as selCreateFromString
''' except that newlines are inserted into the output
''' between rows.
''' (2) This is useful for debugging.  However, if you want to
''' save some Sels in a file, put them in a Sela and write
''' them out with selaWrite().  They can then be read in
''' with selaRead().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sel">[in] - </param>
'''   <returns>str string; caller must free</returns>
Public Shared Function selPrintToString(
				ByVal sel as Sel) as String

	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.selPrintToString( sel.Pointer)

	Return _Result
End Function

' SRC\sel1.c (1779, 1)
' selaCreateFromFile()
' selaCreateFromFile(const char *) as SELA *
'''  <summary>
''' Notes
''' (1) The file contains a sequence of Sel descriptions.
''' (2) Each Sel is formatted as follows
''' ~ Any number of comment lines starting with '#' are ignored
''' ~ The next line contains the selname
''' ~ The next lines contain the Sel data.  They must be
''' formatted similarly to the string format in
''' selCreateFromString(), with each line beginning and
''' ending with a double-quote, and showing the 2D layout.
''' ~ Each Sel ends when a blank line, a comment line, or
''' the end of file is reached.
''' (3) See selCreateFromString() for a description of the string
''' format for the Sel data.  As an example, here are the lines
''' of is a valid file for a single Sel.  In the file, all lines
''' are left-justified
''' # diagonal sel
''' sel_5diag
''' "x "
''' " x   "
''' "  X  "
''' "   x "
''' " x"
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>sela, or NULL on error</returns>
Public Shared Function selaCreateFromFile(
				ByVal filename as String) as Sela

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selaCreateFromFile( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sela(_Result)
End Function

' SRC\sel1.c (1959, 1)
' selCreateFromPta()
' selCreateFromPta(PTA *, l_int32, l_int32, const char *) as SEL *
'''  <summary>
''' Notes
''' (1) The origin and all points in the pta must be positive.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pta">[in] - </param>
'''  <param name="cy">[in] - origin of sel</param>
'''  <param name="cx">[in] - origin of sel</param>
'''  <param name="name">[in][optional] - sel name; can be null</param>
'''   <returns>sel of minimum required size, or NULL on error</returns>
Public Shared Function selCreateFromPta(
				ByVal pta as Pta, 
				ByVal cy as Integer, 
				ByVal cx as Integer, 
				ByVal name as String) as Sel

	If IsNothing (pta) then Throw New ArgumentNullException  ("pta cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selCreateFromPta( pta.Pointer, cy, cx, name)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sel(_Result)
End Function

' SRC\sel1.c (2009, 1)
' selCreateFromPix()
' selCreateFromPix(PIX *, l_int32, l_int32, const char *) as SEL *
'''  <summary>
''' Notes
''' (1) The origin must be positive.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''  <param name="cy">[in] - origin of sel</param>
'''  <param name="cx">[in] - origin of sel</param>
'''  <param name="name">[in][optional] - sel name; can be null</param>
'''   <returns>sel, or NULL on error</returns>
Public Shared Function selCreateFromPix(
				ByVal pix as Pix, 
				ByVal cy as Integer, 
				ByVal cx as Integer, 
				ByVal name as String) as Sel

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selCreateFromPix( pix.Pointer, cy, cx, name)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sel(_Result)
End Function

' SRC\sel1.c (2060, 1)
' 
' selReadFromColorImage(const char *) as SEL *
'''  <summary>
''' Notes
''' (1) Loads an image from a file and creates a (hit-miss) sel.
''' (2) The sel name is taken from the pathname without the directory
''' and extension.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pathname">[in] - </param>
'''   <returns>sel if OK; NULL on error</returns>
Public Shared Function selReadFromColorImage(
				ByVal pathname as String) as Sel

	If IsNothing (pathname) then Throw New ArgumentNullException  ("pathname cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selReadFromColorImage( pathname)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sel(_Result)
End Function

' SRC\sel1.c (2109, 1)
' 
' selCreateFromColorPix(PIX *, const char *) as SEL *
'''  <summary>
''' Notes
''' (1) The sel size is given by the size of pixs.
''' (2) In pixs, hits are represented by green pixels, misses by red
''' pixels, and don't-cares by white pixels.
''' (3) In pixs, there may be no misses, but there must be at least 1 hit.
''' (4) At most there can be only one origin pixel, which is optionally
''' specified by using a lower-intensity pixel
''' if a hit  dark green
''' if a miss dark red
''' if a don't care gray
''' If there is no such pixel, the origin defaults to the approximate
''' center of the sel.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - cmapped or rgb</param>
'''  <param name="selname">[in][optional] - sel name; can be null</param>
'''   <returns>sel if OK, NULL on error</returns>
Public Shared Function selCreateFromColorPix(
				ByVal pixs as Pix, 
				ByVal selname as String) as Sel

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selCreateFromColorPix( pixs.Pointer, selname)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sel(_Result)
End Function

' SRC\sel1.c (2200, 1)
' selDisplayInPix()
' selDisplayInPix(SEL *, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This gives a visual representation of a general (hit-miss) sel.
''' (2) The empty sel is represented by a grid of intersecting lines.
''' (3) Three different patterns are generated for the sel elements
''' ~ hit (solid black circle)
''' ~ miss (black ring; inner radius is radius2)
''' ~ origin (cross, XORed with whatever is there)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sel">[in] - </param>
'''  <param name="size">[in] - of grid interiors; odd; minimum size of 13 is enforced</param>
'''  <param name="gthick">[in] - grid thickness; minimum size of 2 is enforced</param>
'''   <returns>pix display of sel, or NULL on error</returns>
Public Shared Function selDisplayInPix(
				ByVal sel as Sel, 
				ByVal size as Integer, 
				ByVal gthick as Integer) as Pix

	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selDisplayInPix( sel.Pointer, size, gthick)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\sel1.c (2318, 1)
' selaDisplayInPix()
' selaDisplayInPix(SELA *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This gives a visual representation of all the sels in a sela.
''' (2) See notes in selDisplayInPix() for display params of each sel.
''' (3) This gives the nicest results when all sels in the sela
''' are the same size.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in] - </param>
'''  <param name="size">[in] - of grid interiors; odd; minimum size of 13 is enforced</param>
'''  <param name="gthick">[in] - grid thickness; minimum size of 2 is enforced</param>
'''  <param name="spacing">[in] - between sels, both horizontally and vertically</param>
'''  <param name="ncols">[in] - number of sels per "line"</param>
'''   <returns>pix display of all sels in sela, or NULL on error</returns>
Public Shared Function selaDisplayInPix(
				ByVal sela as Sela, 
				ByVal size as Integer, 
				ByVal gthick as Integer, 
				ByVal spacing as Integer, 
				ByVal ncols as Integer) as Pix

	If IsNothing (sela) then Throw New ArgumentNullException  ("sela cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.selaDisplayInPix( sela.Pointer, size, gthick, spacing, ncols)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\sel2.c"
' SRC\sel2.c (92, 1)
' selaAddBasic()
' selaAddBasic(SELA *) as SELA *
'''  <summary>
''' Notes
''' (1) Adds the following sels
''' ~ all linear (horiz, vert) brick sels that are
''' necessary for decomposable sels up to size 63
''' ~ square brick sels up to size 10
''' ~ 4 diagonal sels
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in][optional] - </param>
'''   <returns>sela with additional sels, or NULL on error</returns>
Public Shared Function selaAddBasic(
				ByVal sela as Sela) as Sela


	Dim selaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sela) Then selaPTR = sela.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.selaAddBasic( selaPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sela(_Result)
End Function

' SRC\sel2.c (181, 1)
' selaAddHitMiss()
' selaAddHitMiss(SELA *) as SELA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in][optional] - </param>
'''   <returns>sela with additional sels, or NULL on error</returns>
Public Shared Function selaAddHitMiss(
				ByVal sela as Sela) as Sela


	Dim selaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sela) Then selaPTR = sela.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.selaAddHitMiss( selaPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sela(_Result)
End Function

' SRC\sel2.c (319, 1)
' selaAddDwaLinear()
' selaAddDwaLinear(SELA *) as SELA *
'''  <summary>
''' Notes
''' (1) Adds all linear (horizontal, vertical) sels from
''' 2 to 63 pixels in length, which are the sizes over
''' which dwa code can be generated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in][optional] - </param>
'''   <returns>sela with additional sels, or NULL on error</returns>
Public Shared Function selaAddDwaLinear(
				ByVal sela as Sela) as Sela


	Dim selaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sela) Then selaPTR = sela.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.selaAddDwaLinear( selaPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sela(_Result)
End Function

' SRC\sel2.c (361, 1)
' selaAddDwaCombs()
' selaAddDwaCombs(SELA *) as SELA *
'''  <summary>
''' Notes
''' (1) Adds all comb (horizontal, vertical) Sels that are
''' used in composite linear morphological operations
''' up to 63 pixels in length, which are the sizes over
''' which dwa code can be generated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in][optional] - </param>
'''   <returns>sela with additional sels, or NULL on error</returns>
Public Shared Function selaAddDwaCombs(
				ByVal sela as Sela) as Sela


	Dim selaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sela) Then selaPTR = sela.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.selaAddDwaCombs( selaPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sela(_Result)
End Function

' SRC\sel2.c (423, 1)
' selaAddCrossJunctions()
' selaAddCrossJunctions(SELA *, l_float32, l_float32, l_int32, l_int32) as SELA *
'''  <summary>
''' Notes
''' (1) Adds hitmiss Sels for the intersection of two lines.
''' If the lines are very thin, they must be nearly orthogonal
''' to register.
''' (2) The number of Sels generated is equal to %norient.
''' (3) If %norient == 2, this generates 2 Sels of crosses, each with
''' two perpendicular lines of hits.  One Sel has horizontal and
''' vertical hits; the other has hits along lines at +-45 degrees.
''' Likewise, if %norient == 3, this generates 3 Sels of crosses
''' oriented at 30 degrees with each other.
''' (4) It is suggested that %hlsize be chosen at least 1 greater
''' than %mdist.  Try values of (%hlsize, %mdist) such as
''' (6,5), (7,6), (8,7), (9,7), etc.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in][optional] - </param>
'''  <param name="hlsize">[in] - length of each line of hits from origin</param>
'''  <param name="mdist">[in] - distance of misses from the origin</param>
'''  <param name="norient">[in] - number of orientations; max of 8</param>
'''  <param name="debugflag">[in] - 1 for debug output</param>
'''   <returns>sela with additional sels, or NULL on error</returns>
Public Shared Function selaAddCrossJunctions(
				ByVal sela as Sela, 
				ByVal hlsize as Single, 
				ByVal mdist as Single, 
				ByVal norient as Integer, 
				ByVal debugflag as Integer) as Sela

	If IsNothing (hlsize) then Throw New ArgumentNullException  ("hlsize cannot be Nothing")
	If IsNothing (mdist) then Throw New ArgumentNullException  ("mdist cannot be Nothing")

	Dim selaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sela) Then selaPTR = sela.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.selaAddCrossJunctions( selaPTR, hlsize, mdist, norient, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sela(_Result)
End Function

' SRC\sel2.c (548, 1)
' selaAddTJunctions()
' selaAddTJunctions(SELA *, l_float32, l_float32, l_int32, l_int32) as SELA *
'''  <summary>
''' Notes
''' (1) Adds hitmiss Sels for the T-junction of two lines.
''' If the lines are very thin, they must be nearly orthogonal
''' to register.
''' (2) The number of Sels generated is 4  %norient.
''' (3) It is suggested that %hlsize be chosen at least 1 greater
''' than %mdist.  Try values of (%hlsize, %mdist) such as
''' (6,5), (7,6), (8,7), (9,7), etc.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in][optional] - </param>
'''  <param name="hlsize">[in] - length of each line of hits from origin</param>
'''  <param name="mdist">[in] - distance of misses from the origin</param>
'''  <param name="norient">[in] - number of orientations; max of 8</param>
'''  <param name="debugflag">[in] - 1 for debug output</param>
'''   <returns>sela with additional sels, or NULL on error</returns>
Public Shared Function selaAddTJunctions(
				ByVal sela as Sela, 
				ByVal hlsize as Single, 
				ByVal mdist as Single, 
				ByVal norient as Integer, 
				ByVal debugflag as Integer) as Sela

	If IsNothing (hlsize) then Throw New ArgumentNullException  ("hlsize cannot be Nothing")
	If IsNothing (mdist) then Throw New ArgumentNullException  ("mdist cannot be Nothing")

	Dim selaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sela) Then selaPTR = sela.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.selaAddTJunctions( selaPTR, hlsize, mdist, norient, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sela(_Result)
End Function

' SRC\sel2.c (749, 1)
' sela4ccThin()
' sela4ccThin(SELA *) as SELA *
'''  <summary>
''' Notes
''' (1) Adds the 9 basic sels for 4-cc thinning.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in][optional] - </param>
'''   <returns>sela with additional sels, or NULL on error</returns>
Public Shared Function sela4ccThin(
				ByVal sela as Sela) as Sela


	Dim selaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sela) Then selaPTR = sela.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.sela4ccThin( selaPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sela(_Result)
End Function

' SRC\sel2.c (790, 1)
' sela8ccThin()
' sela8ccThin(SELA *) as SELA *
'''  <summary>
''' Notes
''' (1) Adds the 9 basic sels for 8-cc thinning.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in][optional] - </param>
'''   <returns>sela with additional sels, or NULL on error</returns>
Public Shared Function sela8ccThin(
				ByVal sela as Sela) as Sela


	Dim selaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sela) Then selaPTR = sela.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.sela8ccThin( selaPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sela(_Result)
End Function

' SRC\sel2.c (831, 1)
' sela4and8ccThin()
' sela4and8ccThin(SELA *) as SELA *
'''  <summary>
''' Notes
''' (1) Adds the 2 basic sels for either 4-cc or 8-cc thinning.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sela">[in][optional] - </param>
'''   <returns>sela with additional sels, or NULL on error</returns>
Public Shared Function sela4and8ccThin(
				ByVal sela as Sela) as Sela


	Dim selaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sela) Then selaPTR = sela.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.sela4and8ccThin( selaPTR)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sela(_Result)
End Function

#End Region
#Region "SRC\selgen.c"
' SRC\selgen.c (146, 1)
' pixGenerateSelWithRuns()
' pixGenerateSelWithRuns(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, PIX **) as SEL *
'''  <summary>
''' Notes
''' (1) The horizontal and vertical lines along which elements are
''' selected are roughly equally spaced.  The actual locations of
''' the hits and misses are the centers of respective run-lengths.
''' (2) No elements are selected that are less than 'distance' pixels away
''' from a boundary pixel of the same color.  This makes the
''' match much more robust to edge noise.  Valid inputs of
''' 'distance' are 0, 1, 2, 3 and 4.  If distance is either 0 or
''' greater than 4, we reset it to the default value.
''' (3) The 4 numbers for adding rectangles of pixels outside the fg
''' can be use if the pattern is expected to be surrounded by bg
''' (white) pixels.  On the other hand, if the pattern may be near
''' other fg (black) components on some sides, use 0 for those sides.
''' (4) The pixels added to a side allow you to have miss elements there.
''' There is a constraint between distance, minlength, and
''' the added pixels for this to work.  We illustrate using the
''' default values.  If you add 5 pixels to the top, and use a
''' distance of 1, then you end up with a vertical run of at least
''' 4 bg pixels along the top edge of the image.  If you use a
''' minimum runlength of 3, each vertical line will always find
''' a miss near the center of its run.  However, if you use a
''' minimum runlength of 5, you will not get a miss on every vertical
''' line.  As another example, if you have 7 added pixels and a
''' distance of 2, you can use a runlength up to 5 to guarantee
''' that the miss element is recorded.  We give a warning if the
''' constraint does not guarantee a miss element outside the
''' image proper.
''' (5) The input pix, as extended by the extra pixels on selected sides,
''' can optionally be returned.  For debugging, call
''' pixDisplayHitMissSel() to visualize the hit-miss sel superimposed
''' on the generating bitmap.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, typically small, to be used as a pattern</param>
'''  <param name="nhlines">[in] - number of hor lines along which elements are found</param>
'''  <param name="nvlines">[in] - number of vert lines along which elements are found</param>
'''  <param name="distance">[in] - min distance from boundary pixel; use 0 for default</param>
'''  <param name="minlength">[in] - min runlength to set hit or miss; use 0 for default</param>
'''  <param name="toppix">[in] - number of extra pixels of bg added above</param>
'''  <param name="botpix">[in] - number of extra pixels of bg added below</param>
'''  <param name="leftpix">[in] - number of extra pixels of bg added to left</param>
'''  <param name="rightpix">[in] - number of extra pixels of bg added to right</param>
'''  <param name="ppixe">[out][optional] - input pix expanded by extra pixels</param>
'''   <returns>sel hit-miss for input pattern, or NULL on error</returns>
Public Shared Function pixGenerateSelWithRuns(
				ByVal pixs as Pix, 
				ByVal nhlines as Integer, 
				ByVal nvlines as Integer, 
				ByVal distance as Integer, 
				ByVal minlength as Integer, 
				ByVal toppix as Integer, 
				ByVal botpix as Integer, 
				ByVal leftpix as Integer, 
				ByVal rightpix as Integer, 
				ByRef ppixe as Pix) as Sel

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim ppixePTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixe) Then ppixePTR = ppixe.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGenerateSelWithRuns( pixs.Pointer, nhlines, nvlines, distance, minlength, toppix, botpix, leftpix, rightpix, ppixePTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixePTR <> IntPtr.Zero then ppixe = new Pix(ppixePTR)

	Return  new Sel(_Result)
End Function

' SRC\selgen.c (336, 1)
' pixGenerateSelRandom()
' pixGenerateSelRandom(PIX *, l_float32, l_float32, l_int32, l_int32, l_int32, l_int32, l_int32, PIX **) as SEL *
'''  <summary>
''' Notes
''' (1) Either of hitfract and missfract can be zero.  If both are zero,
''' the sel would be empty, and NULL is returned.
''' (2) No elements are selected that are less than 'distance' pixels away
''' from a boundary pixel of the same color.  This makes the
''' match much more robust to edge noise.  Valid inputs of
''' 'distance' are 0, 1, 2, 3 and 4.  If distance is either 0 or
''' greater than 4, we reset it to the default value.
''' (3) The 4 numbers for adding rectangles of pixels outside the fg
''' can be use if the pattern is expected to be surrounded by bg
''' (white) pixels.  On the other hand, if the pattern may be near
''' other fg (black) components on some sides, use 0 for those sides.
''' (4) The input pix, as extended by the extra pixels on selected sides,
''' can optionally be returned.  For debugging, call
''' pixDisplayHitMissSel() to visualize the hit-miss sel superimposed
''' on the generating bitmap.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, typically small, to be used as a pattern</param>
'''  <param name="hitfract">[in] - fraction of allowable fg pixels that are hits</param>
'''  <param name="missfract">[in] - fraction of allowable bg pixels that are misses</param>
'''  <param name="distance">[in] - min distance from boundary pixel; use 0 for default</param>
'''  <param name="toppix">[in] - number of extra pixels of bg added above</param>
'''  <param name="botpix">[in] - number of extra pixels of bg added below</param>
'''  <param name="leftpix">[in] - number of extra pixels of bg added to left</param>
'''  <param name="rightpix">[in] - number of extra pixels of bg added to right</param>
'''  <param name="ppixe">[out][optional] - input pix expanded by extra pixels</param>
'''   <returns>sel hit-miss for input pattern, or NULL on error</returns>
Public Shared Function pixGenerateSelRandom(
				ByVal pixs as Pix, 
				ByVal hitfract as Single, 
				ByVal missfract as Single, 
				ByVal distance as Integer, 
				ByVal toppix as Integer, 
				ByVal botpix as Integer, 
				ByVal leftpix as Integer, 
				ByVal rightpix as Integer, 
				ByRef ppixe as Pix) as Sel

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (hitfract) then Throw New ArgumentNullException  ("hitfract cannot be Nothing")
	If IsNothing (missfract) then Throw New ArgumentNullException  ("missfract cannot be Nothing")

Dim ppixePTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixe) Then ppixePTR = ppixe.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGenerateSelRandom( pixs.Pointer, hitfract, missfract, distance, toppix, botpix, leftpix, rightpix, ppixePTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixePTR <> IntPtr.Zero then ppixe = new Pix(ppixePTR)

	Return  new Sel(_Result)
End Function

' SRC\selgen.c (489, 1)
' pixGenerateSelBoundary()
' pixGenerateSelBoundary(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32, PIX **) as SEL *
'''  <summary>
''' Notes
''' (1) All fg elements selected are exactly hitdist pixels away from
''' the nearest fg boundary pixel, and ditto for bg elements.
''' Valid inputs of hitdist and missdist are 0, 1, 2, 3 and 4.
''' For example, a hitdist of 0 puts the hits at the fg boundary.
''' Usually, the distances should be GT 0 avoid the effect of
''' noise at the boundary.
''' (2) Set hitskip LT 0 if no hits are to be used.  Ditto for missskip.
''' If both hitskip and missskip are LT 0, the sel would be empty,
''' and NULL is returned.
''' (3) The 4 flags determine whether the sel is increased on that side
''' to allow bg misses to be placed all along that boundary.
''' The increase in sel size on that side is the minimum necessary
''' to allow the misses to be placed at mindist.  For text characters,
''' the topflag and botflag are typically set to 1, and the leftflag
''' and rightflag to 0.
''' (4) The input pix, as extended by the extra pixels on selected sides,
''' can optionally be returned.  For debugging, call
''' pixDisplayHitMissSel() to visualize the hit-miss sel superimposed
''' on the generating bitmap.
''' (5) This is probably the best of the three sel generators, in the
''' sense that you have the most flexibility with the smallest number
''' of hits and misses.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, typically small, to be used as a pattern</param>
'''  <param name="hitdist">[in] - min distance from fg boundary pixel</param>
'''  <param name="missdist">[in] - min distance from bg boundary pixel</param>
'''  <param name="hitskip">[in] - number of boundary pixels skipped between hits</param>
'''  <param name="missskip">[in] - number of boundary pixels skipped between misses</param>
'''  <param name="topflag">[in] - flag for extra pixels of bg added above</param>
'''  <param name="botflag">[in] - flag for extra pixels of bg added below</param>
'''  <param name="leftflag">[in] - flag for extra pixels of bg added to left</param>
'''  <param name="rightflag">[in] - flag for extra pixels of bg added to right</param>
'''  <param name="ppixe">[out][optional] - input pix expanded by extra pixels</param>
'''   <returns>sel hit-miss for input pattern, or NULL on error</returns>
Public Shared Function pixGenerateSelBoundary(
				ByVal pixs as Pix, 
				ByVal hitdist as Integer, 
				ByVal missdist as Integer, 
				ByVal hitskip as Integer, 
				ByVal missskip as Integer, 
				ByVal topflag as Integer, 
				ByVal botflag as Integer, 
				ByVal leftflag as Integer, 
				ByVal rightflag as Integer, 
				ByRef ppixe as Pix) as Sel

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim ppixePTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixe) Then ppixePTR = ppixe.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGenerateSelBoundary( pixs.Pointer, hitdist, missdist, hitskip, missskip, topflag, botflag, leftflag, rightflag, ppixePTR)
	If  _Result = IntPtr.Zero then Return Nothing
	if ppixePTR <> IntPtr.Zero then ppixe = new Pix(ppixePTR)

	Return  new Sel(_Result)
End Function

' SRC\selgen.c (636, 1)
' pixGetRunCentersOnLine()
' pixGetRunCentersOnLine(PIX *, l_int32, l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) Action this function computes the fg (black) and bg (white)
''' pixel runlengths along the specified horizontal or vertical line,
''' and returns a Numa of the "center" pixels of each fg run
''' whose length equals or exceeds the minimum length.
''' (2) This only works on horizontal and vertical lines.
''' (3) For horizontal runs, set x = -1 and y to the value
''' for all points along the raster line.  For vertical runs,
''' set y = -1 and x to the value for all points along the
''' pixel column.
''' (4) For horizontal runs, the points in the Numa are the x
''' values in the center of fg runs that are of length at
''' least 'minlength'.  For vertical runs, the points in the
''' Numa are the y values in the center of fg runs, again
''' of length 'minlength' or greater.
''' (5) If there are no fg runs along the line that satisfy the
''' minlength constraint, the returned Numa is empty.  This
''' is not an error.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="x">[in] - set one of these to -1; see notes</param>
'''  <param name="y">[in] - set one of these to -1; see notes</param>
'''  <param name="minlength">[in] - minimum length of acceptable run</param>
'''   <returns>numa of fg runs, or NULL on error</returns>
Public Shared Function pixGetRunCentersOnLine(
				ByVal pixs as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal minlength as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetRunCentersOnLine( pixs.Pointer, x, y, minlength)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\selgen.c (708, 1)
' pixGetRunsOnLine()
' pixGetRunsOnLine(PIX *, l_int32, l_int32, l_int32, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) Action this function uses the bresenham algorithm to compute
''' the pixels along the specified line.  It returns a Numa of the
''' runlengths of the fg (black) and bg (white) runs, always
''' starting with a white run.
''' (2) If the first pixel on the line is black, the length of the
''' first returned run (which is white) is 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="x1">[in] - </param>
'''  <param name="y1">[in] - </param>
'''  <param name="x2">[in] - </param>
'''  <param name="y2">[in] - </param>
'''   <returns>numa, or NULL on error</returns>
Public Shared Function pixGetRunsOnLine(
				ByVal pixs as Pix, 
				ByVal x1 as Integer, 
				ByVal y1 as Integer, 
				ByVal x2 as Integer, 
				ByVal y2 as Integer) as Numa

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixGetRunsOnLine( pixs.Pointer, x1, y1, x2, y2)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\selgen.c (803, 1)
' pixSubsampleBoundaryPixels()
' pixSubsampleBoundaryPixels(PIX *, l_int32) as PTA *
'''  <summary>
''' Notes
''' (1) If skip = 0, we take all the fg pixels.
''' (2) We try to traverse the boundaries in a regular way.
''' Some pixels may be missed, and these are then subsampled
''' randomly with a fraction determined by 'skip'.
''' (3) The most natural approach is to use a depth first (stack-based)
''' method to find the fg pixels.  However, the pixel runs are
''' 4-connected and there are relatively few branches.  So
''' instead of doing a proper depth-first search, we get nearly
''' the same result using two nested while loops the outer
''' one continues a raster-based search for the next fg pixel,
''' and the inner one does a reasonable job running along
''' each 4-connected coutour.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp, with only boundary pixels in fg</param>
'''  <param name="skip">[in] - number to skip between samples as you traverse boundary</param>
'''   <returns>pta, or NULL on error</returns>
Public Shared Function pixSubsampleBoundaryPixels(
				ByVal pixs as Pix, 
				ByVal skip as Integer) as Pta

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSubsampleBoundaryPixels( pixs.Pointer, skip)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pta(_Result)
End Function

' SRC\selgen.c (870, 1)
' adjacentOnPixelInRaster()
' adjacentOnPixelInRaster(PIX *, l_int32, l_int32, l_int32 *, l_int32 *) as l_int32
'''  <summary>
''' Notes
''' (1) Search is in 4-connected directions first; then on diagonals.
''' This allows traversal along a 4-connected boundary.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="x">[in] - current pixel</param>
'''  <param name="y">[in] - current pixel</param>
'''  <param name="pxa">[out] - adjacent ON pixel, found by simple CCW search</param>
'''  <param name="pya">[out] - adjacent ON pixel, found by simple CCW search</param>
'''   <returns>1 if a pixel is found; 0 otherwise or on error</returns>
Public Shared Function adjacentOnPixelInRaster(
				ByVal pixs as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByRef pxa as Integer, 
				ByRef pya as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.adjacentOnPixelInRaster( pixs.Pointer, x, y, pxa, pya)

	Return _Result
End Function

' SRC\selgen.c (928, 1)
' pixDisplayHitMissSel()
' pixDisplayHitMissSel(PIX *, SEL *, l_int32, l_uint32, l_uint32) as PIX *
'''  <summary>
''' Notes
''' (1) We don't allow scalefactor to be larger than MAX_SEL_SCALEFACTOR
''' (2) The colors are conveniently given as 4 bytes in hex format,
''' such as 0xff008800.  The least significant byte is ignored.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="sel">[in] - hit-miss in general</param>
'''  <param name="scalefactor">[in] - an integer GT= 1; use 0 for default</param>
'''  <param name="hitcolor">[in] - RGB0 color for center of hit pixels</param>
'''  <param name="misscolor">[in] - RGB0 color for center of miss pixels</param>
'''   <returns>pixd RGB showing both pixs and sel, or NULL on error</returns>
Public Shared Function pixDisplayHitMissSel(
				ByVal pixs as Pix, 
				ByVal sel as Sel, 
				ByVal scalefactor as Integer, 
				ByVal hitcolor as UInteger, 
				ByVal misscolor as UInteger) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sel) then Throw New ArgumentNullException  ("sel cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDisplayHitMissSel( pixs.Pointer, sel.Pointer, scalefactor, hitcolor, misscolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\shear.c"
' SRC\shear.c (113, 1)
' pixHShear()
' pixHShear(PIX *, PIX *, l_int32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) There are 3 cases
''' (a) pixd == null (make a new pixd)
''' (b) pixd == pixs (in-place)
''' (c) pixd != pixs
''' (2) For these three cases, use these patterns, respectively
''' pixd = pixHShear(NULL, pixs, ...);
''' pixHShear(pixs, pixs, ...);
''' pixHShear(pixd, pixs, ...);
''' (3) This shear leaves the horizontal line of pixels at y = yloc
''' invariant.  For a positive shear angle, pixels above this
''' line are shoved to the right, and pixels below this line
''' move to the left.
''' (4) With positive shear angle, this can be used, along with
''' pixVShear(), to perform a cw rotation, either with 2 shears
''' (for small angles) or in the general case with 3 shears.
''' (5) Changing the value of yloc is equivalent to translating
''' the result horizontally.
''' (6) This brings in 'incolor' pixels from outside the image.
''' (7) For in-place operation, pixs cannot be colormapped,
''' because the in-place operation only blits in 0 or 1 bits,
''' not an arbitrary colormap index.
''' (8) The angle is brought into the range [-pi, -pi].  It is
''' not permitted to be within MIN_DIFF_FROM_HALF_PI radians
''' from either -pi/2 or pi/2.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - , this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - no restrictions on depth</param>
'''  <param name="yloc">[in] - location of horizontal line, measured from origin</param>
'''  <param name="radang">[in] - angle in radians</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK;</param>
'''   <returns>pixd, always</returns>
Public Shared Function pixHShear(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal yloc as Integer, 
				ByVal radang as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (radang) then Throw New ArgumentNullException  ("radang cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixHShear( pixdPTR, pixs.Pointer, yloc, radang, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\shear.c (230, 1)
' pixVShear()
' pixVShear(PIX *, PIX *, l_int32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) There are 3 cases
''' (a) pixd == null (make a new pixd)
''' (b) pixd == pixs (in-place)
''' (c) pixd != pixs
''' (2) For these three cases, use these patterns, respectively
''' pixd = pixVShear(NULL, pixs, ...);
''' pixVShear(pixs, pixs, ...);
''' pixVShear(pixd, pixs, ...);
''' (3) This shear leaves the vertical line of pixels at x = xloc
''' invariant.  For a positive shear angle, pixels to the right
''' of this line are shoved downward, and pixels to the left
''' of the line move upward.
''' (4) With positive shear angle, this can be used, along with
''' pixHShear(), to perform a cw rotation, either with 2 shears
''' (for small angles) or in the general case with 3 shears.
''' (5) Changing the value of xloc is equivalent to translating
''' the result vertically.
''' (6) This brings in 'incolor' pixels from outside the image.
''' (7) For in-place operation, pixs cannot be colormapped,
''' because the in-place operation only blits in 0 or 1 bits,
''' not an arbitrary colormap index.
''' (8) The angle is brought into the range [-pi, -pi].  It is
''' not permitted to be within MIN_DIFF_FROM_HALF_PI radians
''' from either -pi/2 or pi/2.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - , this can be null, equal to pixs, or different from pixs</param>
'''  <param name="pixs">[in] - no restrictions on depth</param>
'''  <param name="xloc">[in] - location of vertical line, measured from origin</param>
'''  <param name="radang">[in] - angle in radians; not too close to +-(pi / 2)</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK;</param>
'''   <returns>pixd, or NULL on error</returns>
Public Shared Function pixVShear(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal xloc as Integer, 
				ByVal radang as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (radang) then Throw New ArgumentNullException  ("radang cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixVShear( pixdPTR, pixs.Pointer, xloc, radang, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\shear.c (328, 1)
' pixHShearCorner()
' pixHShearCorner(PIX *, PIX *, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See pixHShear() for usage.
''' (2) This does a horizontal shear about the UL corner, with (+) shear
''' pushing increasingly leftward (-x) with increasing y.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - , if not null, must be equal to pixs</param>
'''  <param name="pixs">[in] - </param>
'''  <param name="radang">[in] - angle in radians</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK;</param>
'''   <returns>pixd, or NULL on error.</returns>
Public Shared Function pixHShearCorner(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal radang as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (radang) then Throw New ArgumentNullException  ("radang cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixHShearCorner( pixdPTR, pixs.Pointer, radang, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\shear.c (359, 1)
' pixVShearCorner()
' pixVShearCorner(PIX *, PIX *, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See pixVShear() for usage.
''' (2) This does a vertical shear about the UL corner, with (+) shear
''' pushing increasingly downward (+y) with increasing x.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - , if not null, must be equal to pixs</param>
'''  <param name="pixs">[in] - </param>
'''  <param name="radang">[in] - angle in radians</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK;</param>
'''   <returns>pixd, or NULL on error.</returns>
Public Shared Function pixVShearCorner(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal radang as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (radang) then Throw New ArgumentNullException  ("radang cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixVShearCorner( pixdPTR, pixs.Pointer, radang, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\shear.c (390, 1)
' pixHShearCenter()
' pixHShearCenter(PIX *, PIX *, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See pixHShear() for usage.
''' (2) This does a horizontal shear about the center, with (+) shear
''' pushing increasingly leftward (-x) with increasing y.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - , if not null, must be equal to pixs</param>
'''  <param name="pixs">[in] - </param>
'''  <param name="radang">[in] - angle in radians</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK;</param>
'''   <returns>pixd, or NULL on error.</returns>
Public Shared Function pixHShearCenter(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal radang as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (radang) then Throw New ArgumentNullException  ("radang cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixHShearCenter( pixdPTR, pixs.Pointer, radang, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\shear.c (421, 1)
' pixVShearCenter()
' pixVShearCenter(PIX *, PIX *, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See pixVShear() for usage.
''' (2) This does a vertical shear about the center, with (+) shear
''' pushing increasingly downward (+y) with increasing x.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixd">[in][optional] - , if not null, must be equal to pixs</param>
'''  <param name="pixs">[in] - </param>
'''  <param name="radang">[in] - angle in radians</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK;</param>
'''   <returns>pixd, or NULL on error.</returns>
Public Shared Function pixVShearCenter(
				ByVal pixd as Pix, 
				ByVal pixs as Pix, 
				ByVal radang as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (radang) then Throw New ArgumentNullException  ("radang cannot be Nothing")

	Dim pixdPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixd) Then pixdPTR = pixd.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixVShearCenter( pixdPTR, pixs.Pointer, radang, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\shear.c (459, 1)
' pixHShearIP()
' pixHShearIP(PIX *, l_int32, l_float32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place version of pixHShear(); see comments there.
''' (2) This brings in 'incolor' pixels from outside the image.
''' (3) pixs cannot be colormapped, because the in-place operation
''' only blits in 0 or 1 bits, not an arbitrary colormap index.
''' (4) Does a horizontal full-band shear about the line with (+) shear
''' pushing increasingly leftward (-x) with increasing y.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="yloc">[in] - location of horizontal line, measured from origin</param>
'''  <param name="radang">[in] - angle in radians</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK;</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixHShearIP(
				ByVal pixs as Pix, 
				ByVal yloc as Integer, 
				ByVal radang as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (radang) then Throw New ArgumentNullException  ("radang cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixHShearIP( pixs.Pointer, yloc, radang, incolor)

	Return _Result
End Function

' SRC\shear.c (534, 1)
' pixVShearIP()
' pixVShearIP(PIX *, l_int32, l_float32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is an in-place version of pixVShear(); see comments there.
''' (2) This brings in 'incolor' pixels from outside the image.
''' (3) pixs cannot be colormapped, because the in-place operation
''' only blits in 0 or 1 bits, not an arbitrary colormap index.
''' (4) Does a vertical full-band shear about the line with (+) shear
''' pushing increasingly downward (+y) with increasing x.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths; not colormapped</param>
'''  <param name="xloc">[in] - location of vertical line, measured from origin</param>
'''  <param name="radang">[in] - angle in radians</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK;</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixVShearIP(
				ByVal pixs as Pix, 
				ByVal xloc as Integer, 
				ByVal radang as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (radang) then Throw New ArgumentNullException  ("radang cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixVShearIP( pixs.Pointer, xloc, radang, incolor)

	Return _Result
End Function

' SRC\shear.c (617, 1)
' pixHShearLI()
' pixHShearLI(PIX *, l_int32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This does horizontal shear with linear interpolation for
''' accurate results on 8 bpp gray, 32 bpp rgb, or cmapped images.
''' It is relatively slow compared to the sampled version
''' implemented by rasterop, but the result is much smoother.
''' (2) This shear leaves the horizontal line of pixels at y = yloc
''' invariant.  For a positive shear angle, pixels above this
''' line are shoved to the right, and pixels below this line
''' move to the left.
''' (3) Any colormap is removed.
''' (4) The angle is brought into the range [-pi/2 + del, pi/2 - del],
''' where del == MIN_DIFF_FROM_HALF_PI.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp or 32 bpp, or colormapped</param>
'''  <param name="yloc">[in] - location of horizontal line, measured from origin</param>
'''  <param name="radang">[in] - angle in radians, in range (-pi/2 ... pi/2)</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK;</param>
'''   <returns>pixd sheared, or NULL on error</returns>
Public Shared Function pixHShearLI(
				ByVal pixs as Pix, 
				ByVal yloc as Integer, 
				ByVal radang as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (radang) then Throw New ArgumentNullException  ("radang cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixHShearLI( pixs.Pointer, yloc, radang, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\shear.c (729, 1)
' pixVShearLI()
' pixVShearLI(PIX *, l_int32, l_float32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This does vertical shear with linear interpolation for
''' accurate results on 8 bpp gray, 32 bpp rgb, or cmapped images.
''' It is relatively slow compared to the sampled version
''' implemented by rasterop, but the result is much smoother.
''' (2) This shear leaves the vertical line of pixels at x = xloc
''' invariant.  For a positive shear angle, pixels to the right
''' of this line are shoved downward, and pixels to the left
''' of the line move upward.
''' (3) Any colormap is removed.
''' (4) The angle is brought into the range [-pi/2 + del, pi/2 - del],
''' where del == MIN_DIFF_FROM_HALF_PI.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp or 32 bpp, or colormapped</param>
'''  <param name="xloc">[in] - location of vertical line, measured from origin</param>
'''  <param name="radang">[in] - angle in radians, in range (-pi/2 ... pi/2)</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE, L_BRING_IN_BLACK;</param>
'''   <returns>pixd sheared, or NULL on error</returns>
Public Shared Function pixVShearLI(
				ByVal pixs as Pix, 
				ByVal xloc as Integer, 
				ByVal radang as Single, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (radang) then Throw New ArgumentNullException  ("radang cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixVShearLI( pixs.Pointer, xloc, radang, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\skew.c"
' SRC\skew.c (162, 1)
' pixDeskewBoth()
' pixDeskewBoth(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This binarizes if necessary and does both horizontal
''' and vertical deskewing, using the default parameters in
''' the underlying pixDeskew().  See usage there.
''' (2) This may return a clone.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth</param>
'''  <param name="redsearch">[in] - for binary search reduction factor = 1, 2 or 4; use 0 for default</param>
'''   <returns>pixd deskewed pix, or NULL on error</returns>
Public Shared Function pixDeskewBoth(
				ByVal pixs as Pix, 
				ByVal redsearch as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {0,1,2,4,8}.contains (redsearch) = false then Throw New ArgumentException ("for binary search reduction factor = 1, 2 or 4; use 0 for default")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDeskewBoth( pixs.Pointer, redsearch)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\skew.c (205, 1)
' pixDeskew()
' pixDeskew(PIX *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This binarizes if necessary and finds the skew angle.  If the
''' angle is large enough and there is sufficient confidence,
''' it returns a deskewed image; otherwise, it returns a clone.
''' (2) Typical values at 300 ppi for %redsearch are 2 and 4.
''' At 75 ppi, one should use %redsearch = 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth</param>
'''  <param name="redsearch">[in] - for binary search reduction factor = 1, 2 or 4; use 0 for default</param>
'''   <returns>pixd deskewed pix, or NULL on error</returns>
Public Shared Function pixDeskew(
				ByVal pixs as Pix, 
				ByVal redsearch as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {0,1,2,4,8}.contains (redsearch) = false then Throw New ArgumentException ("for binary search reduction factor = 1, 2 or 4; use 0 for default")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDeskew( pixs.Pointer, redsearch)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\skew.c (241, 1)
' pixFindSkewAndDeskew()
' pixFindSkewAndDeskew(PIX *, l_int32, l_float32 *, l_float32 *) as PIX *
'''  <summary>
''' Notes
''' (1) This binarizes if necessary and finds the skew angle.  If the
''' angle is large enough and there is sufficient confidence,
''' it returns a deskewed image; otherwise, it returns a clone.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth</param>
'''  <param name="redsearch">[in] - for binary search reduction factor = 1, 2 or 4; use 0 for default</param>
'''  <param name="pangle">[out][optional] - angle required to deskew, in degrees; use NULL to skip</param>
'''  <param name="pconf">[out][optional] - conf value is ratio of max/min scores; use NULL to skip</param>
'''   <returns>pixd deskewed pix, or NULL on error</returns>
Public Shared Function pixFindSkewAndDeskew(
				ByVal pixs as Pix, 
				ByVal redsearch as Integer, 
				ByRef pangle as Single(), 
				ByRef pconf as Single()) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {0,1,2,4,8}.contains (redsearch) = false then Throw New ArgumentException ("for binary search reduction factor = 1, 2 or 4; use 0 for default")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixFindSkewAndDeskew( pixs.Pointer, redsearch, pangle, pconf)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\skew.c (285, 1)
' pixDeskewGeneral()
' pixDeskewGeneral(PIX *, l_int32, l_float32, l_float32, l_int32, l_int32, l_float32 *, l_float32 *) as PIX *
'''  <summary>
''' Notes
''' (1) This binarizes if necessary and finds the skew angle.  If the
''' angle is large enough and there is sufficient confidence,
''' it returns a deskewed image; otherwise, it returns a clone.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth</param>
'''  <param name="redsweep">[in] - for linear search reduction factor = 1, 2 or 4; use 0 for default</param>
'''  <param name="sweeprange">[in] - in degrees in each direction from 0; use 0.0 for default</param>
'''  <param name="sweepdelta">[in] - in degrees; use 0.0 for default</param>
'''  <param name="redsearch">[in] - for binary search reduction factor = 1, 2 or 4; use 0 for default;</param>
'''  <param name="thresh">[in] - for binarizing the image; use 0 for default</param>
'''  <param name="pangle">[out][optional] - angle required to deskew, in degrees; use NULL to skip</param>
'''  <param name="pconf">[out][optional] - conf value is ratio of max/min scores; use NULL to skip</param>
'''   <returns>pixd deskewed pix, or NULL on error</returns>
Public Shared Function pixDeskewGeneral(
				ByVal pixs as Pix, 
				ByVal redsweep as Integer, 
				ByVal sweeprange as Single, 
				ByVal sweepdelta as Single, 
				ByVal redsearch as Integer, 
				ByVal thresh as Integer, 
				ByRef pangle as Single(), 
				ByRef pconf as Single()) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sweeprange) then Throw New ArgumentNullException  ("sweeprange cannot be Nothing")
	If IsNothing (sweepdelta) then Throw New ArgumentNullException  ("sweepdelta cannot be Nothing")
	If {0,1,2,4,8}.contains (redsweep) = false then Throw New ArgumentException ("for linear search reduction factor = 1, 2 or 4; use 0 for default")
	If {0,1,2,4,8}.contains (redsearch) = false then Throw New ArgumentException ("for binary search reduction factor = 1, 2 or 4; use 0 for default;")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDeskewGeneral( pixs.Pointer, redsweep, sweeprange, sweepdelta, redsearch, thresh, pangle, pconf)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\skew.c (370, 1)
' pixFindSkew()
' pixFindSkew(PIX *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This is a simple high-level interface, that uses default
''' values of the parameters for reasonable speed and accuracy.
''' (2) The angle returned is the negative of the skew angle of
''' the image.  It is the angle required for deskew.
''' Clockwise rotations are positive angles.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="pangle">[out] - angle required to deskew, in degrees</param>
'''  <param name="pconf">[out] - confidence value is ratio max/min scores</param>
'''   <returns>0 if OK, 1 on error or if angle measurement not valid</returns>
Public Shared Function pixFindSkew(
				ByVal pixs as Pix, 
				ByRef pangle as Single(), 
				ByRef pconf as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindSkew( pixs.Pointer, pangle, pconf)

	Return _Result
End Function

' SRC\skew.c (414, 1)
' pixFindSkewSweep()
' pixFindSkewSweep(PIX *, l_float32 *, l_int32, l_float32, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This examines the 'score' for skew angles with equal intervals.
''' (2) Caller must check the return value for validity of the result.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="pangle">[out] - angle required to deskew, in degrees</param>
'''  <param name="reduction">[in] - factor = 1, 2, 4 or 8</param>
'''  <param name="sweeprange">[in] - half the full range; assumed about 0; in degrees</param>
'''  <param name="sweepdelta">[in] - angle increment of sweep; in degrees</param>
'''   <returns>0 if OK, 1 on error or if angle measurement not valid</returns>
Public Shared Function pixFindSkewSweep(
				ByVal pixs as Pix, 
				ByRef pangle as Single(), 
				ByVal reduction as Integer, 
				ByVal sweeprange as Single, 
				ByVal sweepdelta as Single) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sweeprange) then Throw New ArgumentNullException  ("sweeprange cannot be Nothing")
	If IsNothing (sweepdelta) then Throw New ArgumentNullException  ("sweepdelta cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("factor = 1, 2, 4 or 8")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindSkewSweep( pixs.Pointer, pangle, reduction, sweeprange, sweepdelta)

	Return _Result
End Function

' SRC\skew.c (558, 1)
' pixFindSkewSweepAndSearch()
' pixFindSkewSweepAndSearch(PIX *, l_float32 *, l_float32 *, l_int32, l_int32, l_float32, l_float32, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This finds the skew angle, doing first a sweep through a set
''' of equal angles, and then doing a binary search until
''' convergence.
''' (2) Caller must check the return value for validity of the result.
''' (3) In computing the differential line sum variance score, we sum
''' the result over scanlines, but we always skip
''' ~ at least one scanline
''' ~ not more than 10% of the image height
''' ~ not more than 5% of the image width
''' (4) See also notes in pixFindSkewSweepAndSearchScore()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="pangle">[out] - angle required to deskew; in degrees</param>
'''  <param name="pconf">[out] - confidence given by ratio of max/min score</param>
'''  <param name="redsweep">[in] - sweep reduction factor = 1, 2, 4 or 8</param>
'''  <param name="redsearch">[in] - binary search reduction factor = 1, 2, 4 or 8; and must not exceed redsweep</param>
'''  <param name="sweeprange">[in] - half the full range, assumed about 0; in degrees</param>
'''  <param name="sweepdelta">[in] - angle increment of sweep; in degrees</param>
'''  <param name="minbsdelta">[in] - min binary search increment angle; in degrees</param>
'''   <returns>0 if OK, 1 on error or if angle measurement not valid</returns>
Public Shared Function pixFindSkewSweepAndSearch(
				ByVal pixs as Pix, 
				ByRef pangle as Single(), 
				ByRef pconf as Single(), 
				ByVal redsweep as Integer, 
				ByVal redsearch as Integer, 
				ByVal sweeprange as Single, 
				ByVal sweepdelta as Single, 
				ByVal minbsdelta as Single) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sweeprange) then Throw New ArgumentNullException  ("sweeprange cannot be Nothing")
	If IsNothing (sweepdelta) then Throw New ArgumentNullException  ("sweepdelta cannot be Nothing")
	If IsNothing (minbsdelta) then Throw New ArgumentNullException  ("minbsdelta cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")
	If {0,1,2,4,8}.contains (redsweep) = false then Throw New ArgumentException ("sweep reduction factor = 1, 2, 4 or 8")
	If {0,1,2,4,8}.contains (redsearch) = false then Throw New ArgumentException ("binary search reduction factor = 1, 2, 4 or 8; and must not exceed redsweep")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindSkewSweepAndSearch( pixs.Pointer, pangle, pconf, redsweep, redsearch, sweeprange, sweepdelta, minbsdelta)

	Return _Result
End Function

' SRC\skew.c (612, 1)
' pixFindSkewSweepAndSearchScore()
' pixFindSkewSweepAndSearchScore(PIX *, l_float32 *, l_float32 *, l_float32 *, l_int32, l_int32, l_float32, l_float32, l_float32, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This finds the skew angle, doing first a sweep through a set
''' of equal angles, and then doing a binary search until convergence.
''' (2) There are two built-in constants that determine if the
''' returned confidence is nonzero
''' ~ MIN_VALID_MAXSCORE (minimum allowed maxscore)
''' ~ MINSCORE_THRESHOLD_CONSTANT (determines minimum allowed
''' minscore, by multiplying by (height  width^2)
''' If either of these conditions is not satisfied, the returned
''' confidence value will be zero.  The maxscore is optionally
''' returned in this function to allow evaluation of the
''' resulting angle by a method that is independent of the
''' returned confidence value.
''' (3) The larger the confidence value, the greater the probability
''' that the proper alignment is given by the angle that maximizes
''' variance.  It should be compared to a threshold, which depends
''' on the application.  Values between 3.0 and 6.0 are common.
''' (4) By default, the shear is about the UL corner.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="pangle">[out] - angle required to deskew; in degrees</param>
'''  <param name="pconf">[out] - confidence given by ratio of max/min score</param>
'''  <param name="pendscore">[out][optional] - max score; use NULL to ignore</param>
'''  <param name="redsweep">[in] - sweep reduction factor = 1, 2, 4 or 8</param>
'''  <param name="redsearch">[in] - binary search reduction factor = 1, 2, 4 or 8; and must not exceed redsweep</param>
'''  <param name="sweepcenter">[in] - angle about which sweep is performed; in degrees</param>
'''  <param name="sweeprange">[in] - half the full range, taken about sweepcenter; in degrees</param>
'''  <param name="sweepdelta">[in] - angle increment of sweep; in degrees</param>
'''  <param name="minbsdelta">[in] - min binary search increment angle; in degrees</param>
'''   <returns>0 if OK, 1 on error or if angle measurement not valid</returns>
Public Shared Function pixFindSkewSweepAndSearchScore(
				ByVal pixs as Pix, 
				ByRef pangle as Single(), 
				ByRef pconf as Single(), 
				ByRef pendscore as Single(), 
				ByVal redsweep as Integer, 
				ByVal redsearch as Integer, 
				ByVal sweepcenter as Single, 
				ByVal sweeprange as Single, 
				ByVal sweepdelta as Single, 
				ByVal minbsdelta as Single) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sweepcenter) then Throw New ArgumentNullException  ("sweepcenter cannot be Nothing")
	If IsNothing (sweeprange) then Throw New ArgumentNullException  ("sweeprange cannot be Nothing")
	If IsNothing (sweepdelta) then Throw New ArgumentNullException  ("sweepdelta cannot be Nothing")
	If IsNothing (minbsdelta) then Throw New ArgumentNullException  ("minbsdelta cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")
	If {0,1,2,4,8}.contains (redsweep) = false then Throw New ArgumentException ("sweep reduction factor = 1, 2, 4 or 8")
	If {0,1,2,4,8}.contains (redsearch) = false then Throw New ArgumentException ("binary search reduction factor = 1, 2, 4 or 8; and must not exceed redsweep")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindSkewSweepAndSearchScore( pixs.Pointer, pangle, pconf, pendscore, redsweep, redsearch, sweepcenter, sweeprange, sweepdelta, minbsdelta)

	Return _Result
End Function

' SRC\skew.c (661, 1)
' pixFindSkewSweepAndSearchScorePivot()
' pixFindSkewSweepAndSearchScorePivot(PIX *, l_float32 *, l_float32 *, l_float32 *, l_int32, l_int32, l_float32, l_float32, l_float32, l_float32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) See notes in pixFindSkewSweepAndSearchScore().
''' (2) This allows choice of shear pivoting from either the UL corner
''' or the center.  For small angles, the ability to discriminate
''' angles is better with shearing from the UL corner.  However,
''' for large angles (say, greater than 20 degrees), it is better
''' to shear about the center because a shear from the UL corner
''' loses too much of the image.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="pangle">[out] - angle required to deskew; in degrees</param>
'''  <param name="pconf">[out] - confidence given by ratio of max/min score</param>
'''  <param name="pendscore">[out][optional] - max score; use NULL to ignore</param>
'''  <param name="redsweep">[in] - sweep reduction factor = 1, 2, 4 or 8</param>
'''  <param name="redsearch">[in] - binary search reduction factor = 1, 2, 4 or 8; and must not exceed redsweep</param>
'''  <param name="sweepcenter">[in] - angle about which sweep is performed; in degrees</param>
'''  <param name="sweeprange">[in] - half the full range, taken about sweepcenter; in degrees</param>
'''  <param name="sweepdelta">[in] - angle increment of sweep; in degrees</param>
'''  <param name="minbsdelta">[in] - min binary search increment angle; in degrees</param>
'''  <param name="pivot">[in] - L_SHEAR_ABOUT_CORNER, L_SHEAR_ABOUT_CENTER</param>
'''   <returns>0 if OK, 1 on error or if angle measurement not valid</returns>
Public Shared Function pixFindSkewSweepAndSearchScorePivot(
				ByVal pixs as Pix, 
				ByRef pangle as Single(), 
				ByRef pconf as Single(), 
				ByRef pendscore as Single(), 
				ByVal redsweep as Integer, 
				ByVal redsearch as Integer, 
				ByVal sweepcenter as Single, 
				ByVal sweeprange as Single, 
				ByVal sweepdelta as Single, 
				ByVal minbsdelta as Single, 
				ByVal pivot as Enumerations.L_SHEAR_ABOUT_CER) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (sweepcenter) then Throw New ArgumentNullException  ("sweepcenter cannot be Nothing")
	If IsNothing (sweeprange) then Throw New ArgumentNullException  ("sweeprange cannot be Nothing")
	If IsNothing (sweepdelta) then Throw New ArgumentNullException  ("sweepdelta cannot be Nothing")
	If IsNothing (minbsdelta) then Throw New ArgumentNullException  ("minbsdelta cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")
	If {0,1,2,4,8}.contains (redsweep) = false then Throw New ArgumentException ("sweep reduction factor = 1, 2, 4 or 8")
	If {0,1,2,4,8}.contains (redsearch) = false then Throw New ArgumentException ("binary search reduction factor = 1, 2, 4 or 8; and must not exceed redsweep")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindSkewSweepAndSearchScorePivot( pixs.Pointer, pangle, pconf, pendscore, redsweep, redsearch, sweepcenter, sweeprange, sweepdelta, minbsdelta, pivot)

	Return _Result
End Function

' SRC\skew.c (1032, 1)
' 
' pixFindSkewOrthogonalRange(PIX *, l_float32 *, l_float32 *, l_int32, l_int32, l_float32, l_float32, l_float32, l_float32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixFindSkewOrthogonalRange(
				ByRef pixs as Pix, 
				ByRef pangle as Single(), 
				ByRef pconf as Single(), 
				ByRef redsweep as Integer, 
				ByRef redsearch as Integer, 
				ByRef sweeprange as Single, 
				ByRef sweepdelta as Single, 
				ByRef minbsdelta as Single, 
				ByRef confprior as Single) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pangle) then Throw New ArgumentNullException  ("pangle cannot be Nothing")
	If IsNothing (pconf) then Throw New ArgumentNullException  ("pconf cannot be Nothing")
	If IsNothing (sweeprange) then Throw New ArgumentNullException  ("sweeprange cannot be Nothing")
	If IsNothing (sweepdelta) then Throw New ArgumentNullException  ("sweepdelta cannot be Nothing")
	If IsNothing (minbsdelta) then Throw New ArgumentNullException  ("minbsdelta cannot be Nothing")
	If IsNothing (confprior) then Throw New ArgumentNullException  ("confprior cannot be Nothing")
	If {0,1,2,4,8}.contains (redsweep) = false then Throw New ArgumentException ("")
	If {0,1,2,4,8}.contains (redsearch) = false then Throw New ArgumentException ("")

Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindSkewOrthogonalRange( pixs.Pointer, pangle, pconf, redsweep, redsearch, sweeprange, sweepdelta, minbsdelta, confprior)

	Return _Result
End Function

' SRC\skew.c (1105, 1)
' pixFindDifferentialSquareSum()
' pixFindDifferentialSquareSum(PIX *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) At the top and bottom, we skip
''' ~ at least one scanline
''' ~ not more than 10% of the image height
''' ~ not more than 5% of the image width
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="psum">[out] - result</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFindDifferentialSquareSum(
				ByVal pixs as Pix, 
				ByRef psum as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindDifferentialSquareSum( pixs.Pointer, psum)

	Return _Result
End Function

' SRC\skew.c (1178, 1)
' pixFindNormalizedSquareSum()
' pixFindNormalizedSquareSum(PIX *, l_float32 *, l_float32 *, l_float32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Let the image have h scanlines and N fg pixels.
''' If the pixels were uniformly distributed on scanlines,
''' the sum of squares of fg pixels on each scanline would be
''' h  (N / h)^2.  However, if the pixels are not uniformly
''' distributed (e.g., for text), the sum of squares of fg
''' pixels will be larger.  We return in hratio and vratio the
''' ratio of these two values.
''' (2) If there are no fg pixels, hratio and vratio are returned as 0.0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - </param>
'''  <param name="phratio">[out][optional] - ratio of normalized horiz square sum to result if the pixel distribution were uniform</param>
'''  <param name="pvratio">[out][optional] - ratio of normalized vert square sum to result if the pixel distribution were uniform</param>
'''  <param name="pfract">[out][optional] - ratio of fg pixels to total pixels</param>
'''   <returns>0 if OK, 1 on error or if there are no fg pixels</returns>
Public Shared Function pixFindNormalizedSquareSum(
				ByVal pixs as Pix, 
				ByRef phratio as Single(), 
				ByRef pvratio as Single(), 
				ByRef pfract as Single()) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindNormalizedSquareSum( pixs.Pointer, phratio, pvratio, pfract)

	Return _Result
End Function

#End Region
#Region "SRC\spixio.c"
' SRC\spixio.c (88, 1)
' pixReadStreamSpix()
' pixReadStreamSpix(FILE *) as PIX *
'''  <summary>
''' Notes
''' (1) If called from pixReadStream(), the stream is positioned
''' at the beginning of the file.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>pix, or NULL on error.</returns>
Public Shared Function pixReadStreamSpix(
				ByVal fp as FILE) as Pix

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadStreamSpix( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\spixio.c (126, 1)
' readHeaderSpix()
' readHeaderSpix(const char *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If there is a colormap, iscmap is returned as 1; else 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pwidth">[out] - width</param>
'''  <param name="pheight">[out] - height</param>
'''  <param name="pbps">[out] - bits/sample</param>
'''  <param name="pspp">[out] - samples/pixel</param>
'''  <param name="piscmap">[out][optional] - input NULL to ignore</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function readHeaderSpix(
				ByVal filename as String, 
				ByRef pwidth as Integer, 
				ByRef pheight as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer, 
				ByRef piscmap as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.readHeaderSpix( filename, pwidth, pheight, pbps, pspp, piscmap)

	Return _Result
End Function

' SRC\spixio.c (167, 1)
' freadHeaderSpix()
' freadHeaderSpix(FILE *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If there is a colormap, iscmap is returned as 1; else 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pwidth">[out] - width</param>
'''  <param name="pheight">[out] - height</param>
'''  <param name="pbps">[out] - bits/sample</param>
'''  <param name="pspp">[out] - samples/pixel</param>
'''  <param name="piscmap">[out][optional] - input NULL to ignore</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function freadHeaderSpix(
				ByVal fp as FILE, 
				ByRef pwidth as Integer, 
				ByRef pheight as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer, 
				ByRef piscmap as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.freadHeaderSpix( fp.Pointer, pwidth, pheight, pbps, pspp, piscmap)

	Return _Result
End Function

' SRC\spixio.c (211, 1)
' sreadHeaderSpix()
' sreadHeaderSpix(const l_uint32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If there is a colormap, iscmap is returned as 1; else 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - </param>
'''  <param name="pwidth">[out] - width</param>
'''  <param name="pheight">[out] - height</param>
'''  <param name="pbps">[out] - bits/sample</param>
'''  <param name="pspp">[out] - samples/pixel</param>
'''  <param name="piscmap">[out][optional] - input NULL to ignore</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function sreadHeaderSpix(
				ByVal data as Byte(), 
				ByRef pwidth as Integer, 
				ByRef pheight as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer, 
				ByRef piscmap as Integer) as Integer

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")

	Dim dataPTR As IntPtr = Marshal.AllocHGlobal(data.Count) : Marshal.Copy(data, 0, dataPTR, data.Length)

	Dim _Result as Integer = LeptonicaSharp.Natives.sreadHeaderSpix( dataPTR, pwidth, pheight, pbps, pspp, piscmap)

	Return _Result
End Function

' SRC\spixio.c (265, 1)
' pixWriteStreamSpix()
' pixWriteStreamSpix(FILE *, PIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pix">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixWriteStreamSpix(
				ByVal fp as FILE, 
				ByVal pix as Pix) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteStreamSpix( fp.Pointer, pix.Pointer)

	Return _Result
End Function

' SRC\spixio.c (297, 1)
' pixReadMemSpix()
' pixReadMemSpix(const l_uint8 *, size_t) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - const; uncompressed</param>
'''  <param name="size">[in] - bytes of data</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixReadMemSpix(
				ByVal data as Byte(), 
				ByVal size as UInteger) as Pix

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadMemSpix( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\spixio.c (313, 1)
' pixWriteMemSpix()
' pixWriteMemSpix(l_uint8 **, size_t *, PIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of serialized, uncompressed pix</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="pix">[in] - all depths; colormap OK</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWriteMemSpix(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteMemSpix( pdataPTR, psize, pix.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\spixio.c (346, 1)
' pixSerializeToMemory()
' pixSerializeToMemory(PIX *, l_uint32 **, size_t *) as l_ok
'''  <summary>
''' Notes
''' (1) This does a fast serialization of the principal elements
''' of the pix, as follows
''' "spix" (4 bytes) -- ID for file type
''' w   (4 bytes)
''' h   (4 bytes)
''' d   (4 bytes)
''' wpl (4 bytes)
''' ncolors   (4 bytes) -- in colormap; 0 if there is no colormap
''' cdata  (4  ncolors)  -- size of serialized colormap array
''' rdatasize (4 bytes) -- size of serialized raster data
''' = 4  wpl  h
''' rdata  (rdatasize)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - all depths, colormap OK</param>
'''  <param name="pdata">[out] - serialized data in memory</param>
'''  <param name="pnbytes">[out] - number of bytes in data string</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSerializeToMemory(
				ByVal pixs as Pix, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSerializeToMemory( pixs.Pointer, pdataPTR, pnbytes)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\spixio.c (424, 1)
' pixDeserializeFromMemory()
' pixDeserializeFromMemory(const l_uint32 *, size_t) as PIX *
'''  <summary>
''' Notes
''' (1) See pixSerializeToMemory() for the binary format.
''' (2) Note the image size limits.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - serialized data in memory</param>
'''  <param name="nbytes">[in] - number of bytes in data string</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixDeserializeFromMemory(
				ByVal data as Byte(), 
				ByVal nbytes as UInteger) as Pix

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")

	Dim dataPTR As IntPtr = Marshal.AllocHGlobal(data.Count) : Marshal.Copy(data, 0, dataPTR, data.Length)

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixDeserializeFromMemory( dataPTR, nbytes)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\stack.c"
' SRC\stack.c (78, 1)
' lstackCreate()
' lstackCreate(l_int32) as L_STACK *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nalloc">[in] - initial ptr array size; use 0 for default</param>
'''   <returns>lstack, or NULL on error</returns>
Public Shared Function lstackCreate(
				ByVal nalloc as Integer) as L_Stack



	Dim _Result as IntPtr = LeptonicaSharp.Natives.lstackCreate( nalloc)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Stack(_Result)
End Function

' SRC\stack.c (121, 1)
' lstackDestroy()
' lstackDestroy(L_STACK **, l_int32) as void
'''  <summary>
''' Notes
''' (1) If freeflag is TRUE, frees each struct in the array.
''' (2) If freeflag is FALSE but there are elements on the array,
''' gives a warning and destroys the array.  This will
''' cause a memory leak of all the items that were on the lstack.
''' So if the items require their own destroy function, they
''' must be destroyed before the lstack.
''' (3) To destroy the lstack, we destroy the ptr array, then
''' the lstack, and then null the contents of the input ptr.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="plstack">[in,out] - to be nulled</param>
'''  <param name="freeflag">[in] - TRUE to free each remaining struct in the array</param>
Public Shared Sub lstackDestroy(
				ByRef plstack as L_Stack, 
				ByVal freeflag as Integer)


	Dim plstackPTR As IntPtr = IntPtr.Zero : If Not IsNothing(plstack) Then plstackPTR = plstack.Pointer

	LeptonicaSharp.Natives.lstackDestroy( plstackPTR, freeflag)
	if plstackPTR <> IntPtr.Zero then plstack = new L_Stack(plstackPTR)

End Sub

' SRC\stack.c (167, 1)
' lstackAdd()
' lstackAdd(L_STACK *, void *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="lstack">[in] - </param>
'''  <param name="item">[in] - to be added to the lstack</param>
'''   <returns>0 if OK; 1 on error.</returns>
Public Shared Function lstackAdd(
				ByVal lstack as L_Stack, 
				ByVal item as Object) as Integer

	If IsNothing (lstack) then Throw New ArgumentNullException  ("lstack cannot be Nothing")
	If IsNothing (item) then Throw New ArgumentNullException  ("item cannot be Nothing")

Dim itemPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.lstackAdd( lstack.Pointer, itemPTR)

	Return _Result
End Function

' SRC\stack.c (197, 1)
' lstackRemove()
' lstackRemove(L_STACK *) as void *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="lstack">[in] - </param>
'''   <returns>ptr to item popped from the top of the lstack, or NULL if the lstack is empty or on error</returns>
Public Shared Function lstackRemove(
				ByVal lstack as L_Stack) as Object

	If IsNothing (lstack) then Throw New ArgumentNullException  ("lstack cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.lstackRemove( lstack.Pointer)

	Return _Result
End Function

' SRC\stack.c (247, 1)
' lstackGetCount()
' lstackGetCount(L_STACK *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="lstack">[in] - </param>
'''   <returns>count, or 0 on error</returns>
Public Shared Function lstackGetCount(
				ByVal lstack as L_Stack) as Integer

	If IsNothing (lstack) then Throw New ArgumentNullException  ("lstack cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lstackGetCount( lstack.Pointer)

	Return _Result
End Function

' SRC\stack.c (270, 1)
' lstackPrint()
' lstackPrint(FILE *, L_STACK *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="lstack">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function lstackPrint(
				ByVal fp as FILE, 
				ByVal lstack as L_Stack) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (lstack) then Throw New ArgumentNullException  ("lstack cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lstackPrint( fp.Pointer, lstack.Pointer)

	Return _Result
End Function

#End Region
#Region "SRC\stringcode.c"
' SRC\stringcode.c (156, 1)
' strcodeCreate()
' strcodeCreate(l_int32) as L_STRCODE *
'''  <summary>
''' Notes
''' (1) This struct exists to build two files containing code for
''' any number of data objects.  The two files are named
''' autogen.[fileno].c
''' autogen.[fileno].h
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fileno">[in] - integer that labels the two output files</param>
'''   <returns>initialized L_StrCode, or NULL on error</returns>
Public Shared Function strcodeCreate(
				ByVal fileno as Integer) as L_StrCode



	Dim _Result as IntPtr = LeptonicaSharp.Natives.strcodeCreate( fileno)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_StrCode(_Result)
End Function

' SRC\stringcode.c (223, 1)
' strcodeCreateFromFile()
' strcodeCreateFromFile(const char *, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) The %filein has one filename on each line.
''' Comment lines begin with "#".
''' (2) The output is 2 files
''' autogen.[fileno].c
''' autogen.[fileno].h
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - containing filenames of serialized data</param>
'''  <param name="fileno">[in] - integer that labels the two output files</param>
'''  <param name="outdir">[in][optional] - if null, files are made in /tmp/lept/auto</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function strcodeCreateFromFile(
				ByVal filein as String, 
				ByVal fileno as Integer, 
				ByVal outdir as String) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.strcodeCreateFromFile( filein, fileno, outdir)

	Return _Result
End Function

' SRC\stringcode.c (289, 1)
' strcodeGenerate()
' strcodeGenerate(L_STRCODE *, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) The generated function name is
''' l_autodecode_[fileno]()
''' where [fileno] is the index label for the pair of output files.
''' (2) To deserialize this data, the function is called with the
''' argument 'ifunc', which increments each time strcodeGenerate()
''' is called.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="strcode">[in] - for accumulating data</param>
'''  <param name="filein">[in] - input file with serialized data</param>
'''  <param name="type">[in] - of data; use the typedef string</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function strcodeGenerate(
				ByVal strcode as L_StrCode, 
				ByVal filein as String, 
				ByVal type as String) as Integer

	If IsNothing (strcode) then Throw New ArgumentNullException  ("strcode cannot be Nothing")
	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (type) then Throw New ArgumentNullException  ("type cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.strcodeGenerate( strcode.Pointer, filein, type)

	Return _Result
End Function

' SRC\stringcode.c (336, 1)
' strcodeFinalize()
' strcodeFinalize(L_STRCODE **, const char *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pstrcode">[in,out] - destroys after .c and .h files have been generated</param>
'''  <param name="outdir">[in][optional] - if NULL, files are made in /tmp/lept/auto</param>
'''   <returns>void</returns>
Public Shared Function strcodeFinalize(
				ByRef pstrcode as L_StrCode, 
				ByVal outdir as String) as Integer


	Dim pstrcodePTR As IntPtr = IntPtr.Zero : If Not IsNothing(pstrcode) Then pstrcodePTR = pstrcode.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.strcodeFinalize( pstrcodePTR, outdir)
	if pstrcodePTR <> IntPtr.Zero then pstrcode = new L_StrCode(pstrcodePTR)

	Return _Result
End Function

' SRC\stringcode.c (525, 1)
' l_getStructStrFromFile()
' l_getStructStrFromFile(const char *, l_int32, char **) as l_int32
'''  <summary>
''' Notes
''' (1) For example, if %field == L_STR_NAME, and the file is a serialized
''' pixa, this will return "Pixa", the name of the struct.
''' (2) Caller must free the returned string.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="field">[in] - (L_STR_TYPE, L_STR_NAME, L_STR_READER, L_STR_MEMREADER)</param>
'''  <param name="pstr">[out] - struct string for this file</param>
'''   <returns>0 if found, 1 on error.</returns>
Public Shared Function l_getStructStrFromFile(
				ByVal filename as String, 
				ByVal field as Enumerations.L_STR, 
				ByRef pstr as String()) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")

Dim pstrPTR As IntPtr = pstrPTR = Marshal.AllocHGlobal(Marshal.sizeOf(pstr.toArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.l_getStructStrFromFile( filename, field, pstrPTR)

	Return _Result
End Function

#End Region
#Region "SRC\strokes.c"
' SRC\strokes.c (75, 1)
' pixFindStrokeLength()
' pixFindStrokeLength(PIX *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Returns half the number of fg boundary pixels.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="tab8">[in][optional] - table for counting fg pixels; can be NULL</param>
'''  <param name="plength">[out] - estimated length of the strokes</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFindStrokeLength(
				ByVal pixs as Pix, 
				ByVal tab8 as Integer(), 
				ByRef plength as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindStrokeLength( pixs.Pointer, tab8, plength)

	Return _Result
End Function

' SRC\strokes.c (123, 1)
' pixFindStrokeWidth()
' pixFindStrokeWidth(PIX *, l_float32, l_int32 *, l_float32 *, NUMA **) as l_ok
'''  <summary>
''' Notes
''' (1) This uses two methods to estimate the stroke width
''' (a) half the fg boundary length
''' (b) a value derived from the histogram of the fg distance transform
''' (2) Distance is measured in 8-connected
''' (3) %thresh is the minimum fraction N(dist=d)/N(dist=1) of pixels
''' required to determine if the pixels at distance d are above
''' the noise. It is typically about 0.15.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp</param>
'''  <param name="thresh">[in] - fractional count threshold relative to distance 1</param>
'''  <param name="tab8">[in][optional] - table for counting fg pixels; can be NULL</param>
'''  <param name="pwidth">[out] - estimated width of the strokes</param>
'''  <param name="pnahisto">[out][optional] - histo of pixel distances from bg</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixFindStrokeWidth(
				ByVal pixs as Pix, 
				ByVal thresh as Single, 
				ByVal tab8 as Integer(), 
				ByRef pwidth as Single(), 
				ByRef pnahisto as Numa) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")
	If {1}.contains (pixs.d) = false then Throw New ArgumentException ("1 bpp")

Dim pnahistoPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnahisto) Then pnahistoPTR = pnahisto.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixFindStrokeWidth( pixs.Pointer, thresh, tab8, pwidth, pnahistoPTR)
	if pnahistoPTR <> IntPtr.Zero then pnahisto = new Numa(pnahistoPTR)

	Return _Result
End Function

' SRC\strokes.c (208, 1)
' pixaFindStrokeWidth()
' pixaFindStrokeWidth(PIXA *, l_float32, l_int32 *, l_int32) as NUMA *
'''  <summary>
''' Notes
''' (1) See pixFindStrokeWidth() for details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - of 1 bpp images</param>
'''  <param name="thresh">[in] - fractional count threshold relative to distance 1</param>
'''  <param name="tab8">[in][optional] - table for counting fg pixels; can be NULL</param>
'''  <param name="debug">[in] - 1 for debug output; 0 to skip</param>
'''   <returns>na  array of stroke widths for each pix in %pixa; NULL on error</returns>
Public Shared Function pixaFindStrokeWidth(
				ByVal pixa as Pixa, 
				ByVal thresh as Single, 
				ByVal tab8 as Integer(), 
				ByVal debug as Enumerations.DebugOnOff) as Numa

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (thresh) then Throw New ArgumentNullException  ("thresh cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaFindStrokeWidth( pixa.Pointer, thresh, tab8, debug)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\strokes.c (254, 1)
' pixaModifyStrokeWidth()
' pixaModifyStrokeWidth(PIXA *, l_float32) as PIXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - of 1 bpp pix</param>
'''  <param name="targetw">[out] - desired width for strokes in each pix</param>
'''   <returns>pixa  with modified stroke widths, or NULL on error</returns>
Public Shared Function pixaModifyStrokeWidth(
				ByVal pixas as Pixa, 
				ByRef targetw as Single) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaModifyStrokeWidth( pixas.Pointer, targetw)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\strokes.c (298, 1)
' pixModifyStrokeWidth()
' pixModifyStrokeWidth(PIX *, l_float32, l_float32) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - of 1 bpp pix</param>
'''  <param name="width">[in] - measured average stroke width</param>
'''  <param name="targetw">[in] - desired stroke width</param>
'''   <returns>pix  with modified stroke width, or NULL on error</returns>
Public Shared Function pixModifyStrokeWidth(
				ByVal pixs as Pix, 
				ByVal width as Single, 
				ByVal targetw as Single) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (width) then Throw New ArgumentNullException  ("width cannot be Nothing")
	If IsNothing (targetw) then Throw New ArgumentNullException  ("targetw cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixModifyStrokeWidth( pixs.Pointer, width, targetw)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\strokes.c (345, 1)
' pixaSetStrokeWidth()
' pixaSetStrokeWidth(PIXA *, l_int32, l_int32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) If %thinfirst == 1, thin to a skeleton using the specified
''' %connectivity.  Use %thinfirst == 0 if all pix in pixas
''' have already been thinned as far as possible.
''' (2) The image is dilated to the required %width.  This dilation
''' is not connectivity preserving, so this is typically
''' used in a situation where merging of c.c. in the individual
''' pix is not a problem; e.g., where each pix is a single c.c.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - of 1 bpp pix</param>
'''  <param name="width">[in] - set stroke width to this value, in [1 ... 100].</param>
'''  <param name="thinfirst">[in] - 1 to thin all pix to a skeleton first; 0 to skip</param>
'''  <param name="connectivity">[in] - 4 or 8, to be used if %thinfirst == 1</param>
'''   <returns>pixa  with all stroke widths being %width, or NULL on error</returns>
Public Shared Function pixaSetStrokeWidth(
				ByVal pixas as Pixa, 
				ByVal width as Integer, 
				ByVal thinfirst as Integer, 
				ByVal connectivity as Integer) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaSetStrokeWidth( pixas.Pointer, width, thinfirst, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\strokes.c (397, 1)
' pixSetStrokeWidth()
' pixSetStrokeWidth(PIX *, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See notes in pixaSetStrokeWidth().
''' (2) A white border of sufficient width to avoid boundary
''' artifacts in the thickening step is added before thinning.
''' (3) %connectivity == 8 usually gives a slightly smoother result.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1 bpp pix</param>
'''  <param name="width">[in] - set stroke width to this value, in [1 ... 100].</param>
'''  <param name="thinfirst">[in] - 1 to thin all pix to a skeleton first; 0 to skip</param>
'''  <param name="connectivity">[in] - 4 or 8, to be used if %thinfirst == 1</param>
'''   <returns>pixd  with stroke width set to %width, or NULL on error</returns>
Public Shared Function pixSetStrokeWidth(
				ByVal pixs as Pix, 
				ByVal width as Integer, 
				ByVal thinfirst as Integer, 
				ByVal connectivity as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSetStrokeWidth( pixs.Pointer, width, thinfirst, connectivity)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\sudoku.c"
' SRC\sudoku.c (181, 1)
' sudokuReadFile()
' sudokuReadFile(const char *) as l_int32 *
'''  <summary>
''' Notes
''' (1) The file format has
''' any number of comment lines beginning with '#'
''' a set of 9 lines, each having 9 digits (0-9) separated
''' by a space
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - of formatted sudoku file</param>
'''   <returns>array of 81 numbers, or NULL on error</returns>
Public Shared Function sudokuReadFile(
				ByVal filename as String) as Integer()

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer() = LeptonicaSharp.Natives.sudokuReadFile( filename)

	Return _Result
End Function

' SRC\sudoku.c (260, 1)
' sudokuReadString()
' sudokuReadString(const char *) as l_int32 *
'''  <summary>
''' Notes
''' (1) The string is formatted as 81 single digits, each separated
''' by 81 spaces.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="str">[in] - of input data</param>
'''   <returns>array of 81 numbers, or NULL on error</returns>
Public Shared Function sudokuReadString(
				ByVal str as String) as Integer()

	If IsNothing (str) then Throw New ArgumentNullException  ("str cannot be Nothing")


	Dim _Result as Integer() = LeptonicaSharp.Natives.sudokuReadString( str)

	Return _Result
End Function

' SRC\sudoku.c (301, 1)
' sudokuCreate()
' sudokuCreate(l_int32 *) as L_SUDOKU *
'''  <summary>
''' Notes
''' (1) The input array has 0 for the unknown values, and 1-9
''' for the known initial values.  It is generated from
''' a file using sudokuReadInput(), which checks that the file
''' data has 81 numbers in 9 rows.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="array">[in] - of 81 numbers, 9 rows of 9 numbers each</param>
'''   <returns>l_sudoku, or NULL on error</returns>
Public Shared Function sudokuCreate(
				ByVal array as Integer()) as L_Sudoku

	If IsNothing (array) then Throw New ArgumentNullException  ("array cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sudokuCreate( array)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Sudoku(_Result)
End Function

' SRC\sudoku.c (337, 1)
' sudokuDestroy()
' sudokuDestroy(L_SUDOKU **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="psud">[in,out] - to be nulled</param>
Public Shared Sub sudokuDestroy(
				ByRef psud as L_Sudoku)


	Dim psudPTR As IntPtr = IntPtr.Zero : If Not IsNothing(psud) Then psudPTR = psud.Pointer

	LeptonicaSharp.Natives.sudokuDestroy( psudPTR)
	if psudPTR <> IntPtr.Zero then psud = new L_Sudoku(psudPTR)

End Sub

' SRC\sudoku.c (371, 1)
' sudokuSolve()
' sudokuSolve(L_SUDOKU *) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sud">[in] - l_sudoku starting in initial state</param>
'''   <returns>1 on success, 0 on failure to solve note reversal of typical unix returns</returns>
Public Shared Function sudokuSolve(
				ByVal sud as L_Sudoku) as Integer

	If IsNothing (sud) then Throw New ArgumentNullException  ("sud cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sudokuSolve( sud.Pointer)

	Return _Result
End Function

' SRC\sudoku.c (562, 1)
' sudokuTestUniqueness()
' sudokuTestUniqueness(l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This applies the brute force method to all four 90 degree
''' rotations.  If there is more than one solution, it is highly
''' unlikely that all four results will be the same;
''' consequently, if they are the same, the solution is
''' most likely to be unique.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="array">[in] - of 81 numbers, 9 lines of 9 numbers each</param>
'''  <param name="punique">[out] - 1 if unique, 0 if not</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function sudokuTestUniqueness(
				ByVal array as Integer(), 
				ByRef punique as Integer) as Integer

	If IsNothing (array) then Throw New ArgumentNullException  ("array cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sudokuTestUniqueness( array, punique)

	Return _Result
End Function

' SRC\sudoku.c (731, 1)
' sudokuGenerate()
' sudokuGenerate(l_int32 *, l_int32, l_int32, l_int32) as L_SUDOKU *
'''  <summary>
''' Notes
''' (1) This is a brute force generator.  It starts with a completed
''' sudoku solution and, by removing elements (setting them to 0),
''' generates a valid (unique) sudoku initial condition.
''' (2) The process stops when either %minelems, the minimum
''' number of non-zero elements, is reached, or when the
''' number of attempts to remove the next element exceeds %maxtries.
''' (3) No sudoku is known with less than 17 nonzero elements.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="array">[in] - of 81 numbers, 9 rows of 9 numbers each</param>
'''  <param name="seed">[in] - random number</param>
'''  <param name="minelems">[in] - min non-zero elements allowed; LT= 80</param>
'''  <param name="maxtries">[in] - max tries to remove a number and get a valid sudoku</param>
'''   <returns>l_sudoku, or NULL on error</returns>
Public Shared Function sudokuGenerate(
				ByVal array as Integer(), 
				ByVal seed as Integer, 
				ByVal minelems as Integer, 
				ByVal maxtries as Integer) as L_Sudoku

	If IsNothing (array) then Throw New ArgumentNullException  ("array cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.sudokuGenerate( array, seed, minelems, maxtries)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Sudoku(_Result)
End Function

' SRC\sudoku.c (854, 1)
' sudokuOutput()
' sudokuOutput(L_SUDOKU *, l_int32) as l_int32
'''  <summary>
''' Notes
''' (1) Prints either the initial array or the current state
''' of the solution.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sud">[in] - l_sudoku at any stage</param>
'''  <param name="arraytype">[in] - L_SUDOKU_INIT, L_SUDOKU_STATE</param>
'''   <returns>void</returns>
Public Shared Function sudokuOutput(
				ByVal sud as L_Sudoku, 
				ByVal arraytype as Enumerations.L_SUDOKU) as Integer

	If IsNothing (sud) then Throw New ArgumentNullException  ("sud cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.sudokuOutput( sud.Pointer, arraytype)

	Return _Result
End Function

#End Region
#Region "SRC\textops.c"
' SRC\textops.c (115, 1)
' pixAddSingleTextblock()
' pixAddSingleTextblock(PIX *, L_BMF *, const char *, l_uint32, l_int32, l_int32 *) as PIX *
'''  <summary>
''' Notes
''' (1) This function paints a set of lines of text over an image.
''' If %location is L_ADD_ABOVE or L_ADD_BELOW, the pix size
''' is expanded with a border and rendered over the border.
''' (2) %val is the pixel value to be painted through the font mask.
''' It should be chosen to agree with the depth of pixs.
''' If it is out of bounds, an intermediate value is chosen.
''' For RGB, use hex notation 0xRRGGBB00, where RR is the
''' hex representation of the red intensity, etc.
''' (3) If textstr == NULL, use the text field in the pix.
''' (4) If there is a colormap, this does the best it can to use
''' the requested color, or something similar to it.
''' (5) Typical usage is for labelling a pix with some text data.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - input pix; colormap ok</param>
'''  <param name="bmf">[in] - bitmap font data</param>
'''  <param name="textstr">[in][optional] - text string to be added</param>
'''  <param name="val">[in] - color to set the text</param>
'''  <param name="location">[in] - L_ADD_ABOVE, L_ADD_AT_TOP, L_ADD_AT_BOT, L_ADD_BELOW</param>
'''  <param name="poverflow">[out][optional] - 1 if text overflows allocated region and is clipped; 0 otherwise</param>
'''   <returns>pixd new pix with rendered text, or either a copy or NULL on error</returns>
Public Shared Function pixAddSingleTextblock(
				ByVal pixs as Pix, 
				ByVal bmf as L_Bmf, 
				ByVal textstr as String, 
				ByVal val as UInteger, 
				ByVal location as Enumerations.L_ADD, 
				ByRef poverflow as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (bmf) then Throw New ArgumentNullException  ("bmf cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAddSingleTextblock( pixs.Pointer, bmf.Pointer, textstr, val, location, poverflow)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\textops.c (270, 1)
' pixAddTextlines()
' pixAddTextlines(PIX *, L_BMF *, const char *, l_uint32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This function expands an image as required to paint one or
''' more lines of text adjacent to the image.  If %bmf == NULL,
''' this returns a copy.  If above or below, the lines are
''' centered with respect to the image; if left or right, they
''' are left justified.
''' (2) %val is the pixel value to be painted through the font mask.
''' It should be chosen to agree with the depth of pixs.
''' If it is out of bounds, an intermediate value is chosen.
''' For RGB, use hex notation 0xRRGGBB00, where RR is the
''' hex representation of the red intensity, etc.
''' (3) If textstr == NULL, use the text field in the pix.  The
''' text field contains one or most "lines" of text, where newlines
''' are used as line separators.
''' (4) If there is a colormap, this does the best it can to use
''' the requested color, or something similar to it.
''' (5) Typical usage is for labelling a pix with some text data.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - input pix; colormap ok</param>
'''  <param name="bmf">[in] - bitmap font data</param>
'''  <param name="textstr">[in][optional] - text string to be added</param>
'''  <param name="val">[in] - color to set the text</param>
'''  <param name="location">[in] - L_ADD_ABOVE, L_ADD_BELOW, L_ADD_LEFT, L_ADD_RIGHT</param>
'''   <returns>pixd new pix with rendered text, or either a copy or NULL on error</returns>
Public Shared Function pixAddTextlines(
				ByVal pixs as Pix, 
				ByVal bmf as L_Bmf, 
				ByVal textstr as String, 
				ByVal val as UInteger, 
				ByVal location as Enumerations.L_ADD) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (bmf) then Throw New ArgumentNullException  ("bmf cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixAddTextlines( pixs.Pointer, bmf.Pointer, textstr, val, location)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\textops.c (431, 1)
' pixSetTextblock()
' pixSetTextblock(PIX *, L_BMF *, const char *, l_uint32, l_int32, l_int32, l_int32, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This function paints a set of lines of text over an image.
''' (2) %val is the pixel value to be painted through the font mask.
''' It should be chosen to agree with the depth of pixs.
''' If it is out of bounds, an intermediate value is chosen.
''' For RGB, use hex notation 0xRRGGBB00, where RR is the
''' hex representation of the red intensity, etc.
''' The last two hex digits are 00 (byte value 0), assigned to
''' the A component.  Note that, as usual, RGBA proceeds from
''' left to right in the order from MSB to LSB (see pix.h
''' for details).
''' (3) If there is a colormap, this does the best it can to use
''' the requested color, or something similar to it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - input image</param>
'''  <param name="bmf">[in] - bitmap font data</param>
'''  <param name="textstr">[in] - block text string to be set</param>
'''  <param name="val">[in] - color to set the text</param>
'''  <param name="x0">[in] - left edge for each line of text</param>
'''  <param name="y0">[in] - baseline location for the first text line</param>
'''  <param name="wtext">[in] - max width of each line of generated text</param>
'''  <param name="firstindent">[in] - indentation of first line, in x-widths</param>
'''  <param name="poverflow">[out][optional] - 0 if text is contained in input pix; 1 if it is clipped</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSetTextblock(
				ByVal pixs as Pix, 
				ByVal bmf as L_Bmf, 
				ByVal textstr as String, 
				ByVal val as UInteger, 
				ByVal x0 as Integer, 
				ByVal y0 as Integer, 
				ByVal wtext as Integer, 
				ByVal firstindent as Integer, 
				ByRef poverflow as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (bmf) then Throw New ArgumentNullException  ("bmf cannot be Nothing")
	If IsNothing (textstr) then Throw New ArgumentNullException  ("textstr cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetTextblock( pixs.Pointer, bmf.Pointer, textstr, val, x0, y0, wtext, firstindent, poverflow)

	Return _Result
End Function

' SRC\textops.c (544, 1)
' pixSetTextline()
' pixSetTextline(PIX *, L_BMF *, const char *, l_uint32, l_int32, l_int32, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This function paints a line of text over an image.
''' (2) %val is the pixel value to be painted through the font mask.
''' It should be chosen to agree with the depth of pixs.
''' If it is out of bounds, an intermediate value is chosen.
''' For RGB, use hex notation 0xRRGGBB00, where RR is the
''' hex representation of the red intensity, etc.
''' The last two hex digits are 00 (byte value 0), assigned to
''' the A component.  Note that, as usual, RGBA proceeds from
''' left to right in the order from MSB to LSB (see pix.h
''' for details).
''' (3) If there is a colormap, this does the best it can to use
''' the requested color, or something similar to it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - input image</param>
'''  <param name="bmf">[in] - bitmap font data</param>
'''  <param name="textstr">[in] - text string to be set on the line</param>
'''  <param name="val">[in] - color to set the text</param>
'''  <param name="x0">[in] - left edge for first char</param>
'''  <param name="y0">[in] - baseline location for all text on line</param>
'''  <param name="pwidth">[out][optional] - width of generated text</param>
'''  <param name="poverflow">[out][optional] - 0 if text is contained in input pix; 1 if it is clipped</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixSetTextline(
				ByVal pixs as Pix, 
				ByVal bmf as L_Bmf, 
				ByVal textstr as String, 
				ByVal val as UInteger, 
				ByVal x0 as Integer, 
				ByVal y0 as Integer, 
				ByRef pwidth as Integer, 
				ByRef poverflow as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (bmf) then Throw New ArgumentNullException  ("bmf cannot be Nothing")
	If IsNothing (textstr) then Throw New ArgumentNullException  ("textstr cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSetTextline( pixs.Pointer, bmf.Pointer, textstr, val, x0, y0, pwidth, poverflow)

	Return _Result
End Function

' SRC\textops.c (641, 1)
' pixaAddTextNumber()
' pixaAddTextNumber(PIXA *, L_BMF *, NUMA *, l_uint32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) Typical usage is for labelling each pix in a pixa with a number.
''' (2) This function paints numbers external to each pix, in a position
''' given by %location.  In all cases, the pix is expanded on
''' on side and the number is painted over white in the added region.
''' (3) %val is the pixel value to be painted through the font mask.
''' It should be chosen to agree with the depth of pixs.
''' If it is out of bounds, an intermediate value is chosen.
''' For RGB, use hex notation 0xRRGGBB00, where RR is the
''' hex representation of the red intensity, etc.
''' (4) If na == NULL, number each pix sequentially, starting with 1.
''' (5) If there is a colormap, this does the best it can to use
''' the requested color, or something similar to it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - input pixa; colormap ok</param>
'''  <param name="bmf">[in] - bitmap font data</param>
'''  <param name="na">[in][optional] - number array; use 1 ... n if null</param>
'''  <param name="val">[in] - color to set the text</param>
'''  <param name="location">[in] - L_ADD_ABOVE, L_ADD_BELOW, L_ADD_LEFT, L_ADD_RIGHT</param>
'''   <returns>pixad new pixa with rendered numbers, or NULL on error</returns>
Public Shared Function pixaAddTextNumber(
				ByVal pixas as Pixa, 
				ByVal bmf as L_Bmf, 
				ByVal na as Numa, 
				ByVal val as UInteger, 
				ByVal location as Enumerations.L_ADD) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (bmf) then Throw New ArgumentNullException  ("bmf cannot be Nothing")

	Dim naPTR As IntPtr = IntPtr.Zero : If Not IsNothing(na) Then naPTR = na.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaAddTextNumber( pixas.Pointer, bmf.Pointer, naPTR, val, location)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\textops.c (710, 1)
' pixaAddTextlines()
' pixaAddTextlines(PIXA *, L_BMF *, SARRAY *, l_uint32, l_int32) as PIXA *
'''  <summary>
''' Notes
''' (1) This function adds one or more lines of text externally to
''' each pix, in a position given by %location.  In all cases,
''' the pix is expanded as necessary to accommodate the text.
''' (2) %val is the pixel value to be painted through the font mask.
''' It should be chosen to agree with the depth of pixs.
''' If it is out of bounds, an intermediate value is chosen.
''' For RGB, use hex notation 0xRRGGBB00, where RR is the
''' hex representation of the red intensity, etc.
''' (3) If sa == NULL, use the text embedded in each pix.  In all
''' cases, newlines in the text string are used to separate the
''' lines of text that are added to the pix.
''' (4) If sa has a smaller count than pixa, issue a warning
''' and do not use any embedded text.
''' (5) If there is a colormap, this does the best it can to use
''' the requested color, or something similar to it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixas">[in] - input pixa; colormap ok</param>
'''  <param name="bmf">[in] - bitmap font data</param>
'''  <param name="sa">[in][optional] - sarray; use text embedded in each pix if null</param>
'''  <param name="val">[in] - color to set the text</param>
'''  <param name="location">[in] - L_ADD_ABOVE, L_ADD_BELOW, L_ADD_LEFT, L_ADD_RIGHT</param>
'''   <returns>pixad new pixa with rendered text, or NULL on error</returns>
Public Shared Function pixaAddTextlines(
				ByVal pixas as Pixa, 
				ByVal bmf as L_Bmf, 
				ByVal sa as Sarray, 
				ByVal val as UInteger, 
				ByVal location as Enumerations.L_ADD) as Pixa

	If IsNothing (pixas) then Throw New ArgumentNullException  ("pixas cannot be Nothing")
	If IsNothing (bmf) then Throw New ArgumentNullException  ("bmf cannot be Nothing")

	Dim saPTR As IntPtr = IntPtr.Zero : If Not IsNothing(sa) Then saPTR = sa.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaAddTextlines( pixas.Pointer, bmf.Pointer, saPTR, val, location)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\textops.c (780, 1)
' pixaAddPixWithText()
' pixaAddPixWithText(PIXA *, PIX *, l_int32, L_BMF *, const char *, l_uint32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This function generates a new pix with added text, and adds
''' it by insertion into the pixa.
''' (2) If the input pixs is not cmapped and not 32 bpp, it is
''' converted to 32 bpp rgb.  %val is a standard 32 bpp pixel,
''' expressed as 0xrrggbb00.  If there is a colormap, this does
''' the best it can to use the requested color, or something close.
''' (3) if %bmf == NULL, generate an 8 pt font; this takes about 5 msec.
''' (4) If %textstr == NULL, use the text field in the pix.
''' (5) In general, the text string can be written in multiple lines;
''' use newlines as the separators.
''' (6) Typical usage is for debugging, where the pixa of labeled images
''' is used to generate a pdf.  Suggest using 1.0 for scalefactor.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixa">[in] - </param>
'''  <param name="pixs">[in] - any depth, colormap ok</param>
'''  <param name="reduction">[in] - integer subsampling factor</param>
'''  <param name="bmf">[in][optional] - bitmap font data</param>
'''  <param name="textstr">[in][optional] - text string to be added</param>
'''  <param name="val">[in] - color to set the text</param>
'''  <param name="location">[in] - L_ADD_ABOVE, L_ADD_BELOW, L_ADD_LEFT, L_ADD_RIGHT</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function pixaAddPixWithText(
				ByVal pixa as Pixa, 
				ByVal pixs as Pix, 
				ByVal reduction as Integer, 
				ByVal bmf as L_Bmf, 
				ByVal textstr as String, 
				ByVal val as UInteger, 
				ByVal location as Enumerations.L_ADD) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("integer subsampling factor")

	Dim bmfPTR As IntPtr = IntPtr.Zero : If Not IsNothing(bmf) Then bmfPTR = bmf.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaAddPixWithText( pixa.Pointer, pixs.Pointer, reduction, bmfPTR, textstr, val, location)

	Return _Result
End Function

' SRC\textops.c (862, 1)
' bmfGetLineStrings()
' bmfGetLineStrings(L_BMF *, const char *, l_int32, l_int32, l_int32 *) as SARRAY *
'''  <summary>
''' Notes
''' (1) Divides the input text string into an array of text strings,
''' each of which will fit within maxw bits of width.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="bmf">[in] - </param>
'''  <param name="textstr">[in] - </param>
'''  <param name="maxw">[in] - max width of a text line in pixels</param>
'''  <param name="firstindent">[in] - indentation of first line, in x-widths</param>
'''  <param name="ph">[out] - height required to hold text bitmap</param>
'''   <returns>sarray of text strings for each line, or NULL on error</returns>
Public Shared Function bmfGetLineStrings(
				ByVal bmf as L_Bmf, 
				ByVal textstr as String, 
				ByVal maxw as Integer, 
				ByVal firstindent as Integer, 
				ByRef ph as Integer) as Sarray

	If IsNothing (bmf) then Throw New ArgumentNullException  ("bmf cannot be Nothing")
	If IsNothing (textstr) then Throw New ArgumentNullException  ("textstr cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.bmfGetLineStrings( bmf.Pointer, textstr, maxw, firstindent, ph)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

' SRC\textops.c (938, 1)
' bmfGetWordWidths()
' bmfGetWordWidths(L_BMF *, const char *, SARRAY *) as NUMA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="bmf">[in] - </param>
'''  <param name="textstr">[in] - </param>
'''  <param name="sa">[in] - of individual words</param>
'''   <returns>numa of word lengths in pixels for the font represented by the bmf, or NULL on error</returns>
Public Shared Function bmfGetWordWidths(
				ByVal bmf as L_Bmf, 
				ByVal textstr as String, 
				ByVal sa as Sarray) as Numa

	If IsNothing (bmf) then Throw New ArgumentNullException  ("bmf cannot be Nothing")
	If IsNothing (textstr) then Throw New ArgumentNullException  ("textstr cannot be Nothing")
	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.bmfGetWordWidths( bmf.Pointer, textstr, sa.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Numa(_Result)
End Function

' SRC\textops.c (979, 1)
' bmfGetStringWidth()
' bmfGetStringWidth(L_BMF *, const char *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="bmf">[in] - </param>
'''  <param name="textstr">[in] - </param>
'''  <param name="pw">[out] - width of text string, in pixels for the font represented by the bmf</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function bmfGetStringWidth(
				ByVal bmf as L_Bmf, 
				ByVal textstr as String, 
				ByRef pw as Integer) as Integer

	If IsNothing (bmf) then Throw New ArgumentNullException  ("bmf cannot be Nothing")
	If IsNothing (textstr) then Throw New ArgumentNullException  ("textstr cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.bmfGetStringWidth( bmf.Pointer, textstr, pw)

	Return _Result
End Function

' SRC\textops.c (1023, 1)
' splitStringToParagraphs()
' splitStringToParagraphs(char *, l_int32) as SARRAY *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="textstr">[in] - text string</param>
'''  <param name="splitflag">[in] - see enum in bmf.h; valid values in {1,2,3}</param>
'''   <returns>sarray where each string is a paragraph of the input, or NULL on error.</returns>
Public Shared Function splitStringToParagraphs(
				ByVal textstr as String, 
				ByVal splitflag as Integer) as Sarray

	If IsNothing (textstr) then Throw New ArgumentNullException  ("textstr cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.splitStringToParagraphs( textstr, splitflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Sarray(_Result)
End Function

#End Region
#Region "SRC\tiffio.c"
' SRC\tiffio.c (371, 1)
' pixReadTiff()
' pixReadTiff(const char *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a version of pixRead(), specialized for tiff
''' files, that allows specification of the page to be returned
''' (2) No warning messages on failure, because of how multi-page
''' TIFF reading works. You are supposed to keep trying until
''' it stops working.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="n">[in] - page number 0 based</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixReadTiff(
				ByVal filename as String, 
				ByVal n as Integer) as Pix

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadTiff( filename, n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\tiffio.c (408, 1)
' pixReadStreamTiff()
' pixReadStreamTiff(FILE *, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) No warning messages on failure, because of how multi-page
''' TIFF reading works. You are supposed to keep trying until
''' it stops working.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="n">[in] - page number 0 based</param>
'''   <returns>pix, or NULL on error or if there are no more images in the file</returns>
Public Shared Function pixReadStreamTiff(
				ByVal fp as FILE, 
				ByVal n as Integer) as Pix

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadStreamTiff( fp.Pointer, n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\tiffio.c (654, 1)
' pixWriteTiff()
' pixWriteTiff(const char *, PIX *, l_int32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) For multipage tiff, write the first pix with mode "w" and
''' all subsequent pix with mode "a".
''' (2) For multipage tiff, there is considerable overhead in the
''' machinery to append an image and add the directory entry,
''' and the time required for each image increases linearly
''' with the number of images in the file.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - to write to</param>
'''  <param name="pix">[in] - </param>
'''  <param name="comptype">[in] - IFF_TIFF, IFF_TIFF_RLE, IFF_TIFF_PACKBITS, IFF_TIFF_G3, IFF_TIFF_G4, IFF_TIFF_LZW, IFF_TIFF_ZIP</param>
'''  <param name="modestr">[in] - "a" or "w"</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWriteTiff(
				ByVal filename as String, 
				ByVal pix as Pix, 
				ByVal comptype as Enumerations.IFF, 
				ByVal modestr as String) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (modestr) then Throw New ArgumentNullException  ("modestr cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteTiff( filename, pix.Pointer, comptype, modestr)

	Return _Result
End Function

' SRC\tiffio.c (711, 1)
' pixWriteTiffCustom()
' pixWriteTiffCustom(const char *, PIX *, l_int32, const char *, NUMA *, SARRAY *, SARRAY *, NUMA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - to write to</param>
'''  <param name="pix">[in] - </param>
'''  <param name="comptype">[in] - IFF_TIFF, IFF_TIFF_RLE, IFF_TIFF_PACKBITS, IFF_TIFF_G3, IFF_TIFF_G4, IFF_TIFF_LZW, IFF_TIFF_ZIP</param>
'''  <param name="modestr">[in] - "a" or "w"</param>
'''  <param name="natags">[in][optional] - NUMA of custom tiff tags</param>
'''  <param name="savals">[in][optional] - SARRAY of values</param>
'''  <param name="satypes">[in][optional] - SARRAY of types</param>
'''  <param name="nasizes">[in][optional] - NUMA of sizes</param>
'''   <returns>0 if OK, 1 on error Usage 1 This writes a page image to a tiff file, with optional extra tags defined in tiff.h 2 For multipage tiff, write the first pix with mode "w" and all subsequent pix with mode "a". 3 For the custom tiff tags a The three arrays {natags, savals, satypes} must all be either NULL or defined and of equal size. b If they are defined, the tags are an array of integers, the vals are an array of values in string format, and the types are an array of types in string format. c All valid tags are definined in tiff.h. d The types allowed are the set of strings "char" "l_uint8" "l_uint16" "l_uint32" "l_int32" "l_float64" "l_uint16-l_uint16" note the dash; use it between the two l_uint16 vals in the val string Of these, "char" and "l_uint16" are the most commonly used. e The last array, nasizes, is also optional.  It is for tags that take an array of bytes for a value, a number of elements in the array, and a type that is either "char" or "l_uint8" probably either will work. Use NULL if there are no such tags. f VERY IMPORTANT if there are any tags that require the extra size value, stored in nasizes, they must be written first!</returns>
Public Shared Function pixWriteTiffCustom(
				ByVal filename as String, 
				ByVal pix as Pix, 
				ByVal comptype as Enumerations.IFF, 
				ByVal modestr as String, 
				ByVal natags as Numa, 
				ByVal savals as Sarray, 
				ByVal satypes as Sarray, 
				ByVal nasizes as Numa) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (modestr) then Throw New ArgumentNullException  ("modestr cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")

	Dim natagsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(natags) Then natagsPTR = natags.Pointer
	Dim savalsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(savals) Then savalsPTR = savals.Pointer
	Dim satypesPTR As IntPtr = IntPtr.Zero : If Not IsNothing(satypes) Then satypesPTR = satypes.Pointer
	Dim nasizesPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nasizes) Then nasizesPTR = nasizes.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteTiffCustom( filename, pix.Pointer, comptype, modestr, natagsPTR, savalsPTR, satypesPTR, nasizesPTR)

	Return _Result
End Function

' SRC\tiffio.c (770, 1)
' pixWriteStreamTiff()
' pixWriteStreamTiff(FILE *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This writes a single image to a file stream opened for writing.
''' (2) For images with bpp GT 1, this resets the comptype, if
''' necessary, to write uncompressed data.
''' (3) G3 and G4 are only defined for 1 bpp.
''' (4) We only allow PACKBITS for bpp = 1, because for bpp GT 1
''' it typically expands images that are not synthetically generated.
''' (5) G4 compression is typically about twice as good as G3.
''' G4 is excellent for binary compression of text/line-art,
''' but terrible for halftones and dithered patterns.  (In
''' fact, G4 on halftones can give a file that is larger
''' than uncompressed!)  If a binary image has dithered
''' regions, it is usually better to compress with png.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pix">[in] - </param>
'''  <param name="comptype">[in] - IFF_TIFF, IFF_TIFF_RLE, IFF_TIFF_PACKBITS, IFF_TIFF_G3, IFF_TIFF_G4, IFF_TIFF_LZW, IFF_TIFF_ZIP</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWriteStreamTiff(
				ByVal fp as FILE, 
				ByVal pix as Pix, 
				ByVal comptype as Enumerations.IFF) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteStreamTiff( fp.Pointer, pix.Pointer, comptype)

	Return _Result
End Function

' SRC\tiffio.c (790, 1)
' pixWriteStreamTiffWA()
' pixWriteStreamTiffWA(FILE *, PIX *, l_int32, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for append or write</param>
'''  <param name="pix">[in] - </param>
'''  <param name="comptype">[in] - IFF_TIFF, IFF_TIFF_RLE, IFF_TIFF_PACKBITS, IFF_TIFF_G3, IFF_TIFF_G4, IFF_TIFF_LZW, IFF_TIFF_ZIP</param>
'''  <param name="modestr">[in] - "w" or "a"</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWriteStreamTiffWA(
				ByVal fp as FILE, 
				ByVal pix as Pix, 
				ByVal comptype as Enumerations.IFF, 
				ByVal modestr as String) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (modestr) then Throw New ArgumentNullException  ("modestr cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteStreamTiffWA( fp.Pointer, pix.Pointer, comptype, modestr)

	Return _Result
End Function

' SRC\tiffio.c (1177, 1)
' pixReadFromMultipageTiff()
' pixReadFromMultipageTiff(const char *, size_t *) as PIX *
'''  <summary>
''' Notes
''' (1) This allows overhead for traversal of a multipage tiff file
''' to be linear in the number of images.  This will also work
''' with a singlepage tiff file.
''' (2) No TIFF internal data structures are exposed to the caller
''' (thanks to Jeff Breidenbach).
''' (3) offset is the byte offset of a particular image in a multipage
''' tiff file. To get the first image in the file, input the
''' special offset value of 0.
''' (4) The offset is updated to point to the next image, for a
''' subsequent call.
''' (5) On the last image, the offset returned is 0.  Exit the loop
''' when the returned offset is 0.
''' (6) For reading a multipage tiff from a memory buffer, see
''' pixReadMemFromMultipageTiff()
''' (7) Example usage for reading all the images in the tif file
''' size_t offset = 0;
''' do {
''' Pix pix = pixReadFromMultipageTiff(filename, offset);
''' // do something with pix
''' } while (offset != 0);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - filename</param>
'''  <param name="poffset">[in,out] - set offset to 0 for first image</param>
'''   <returns>pix, or NULL on error or if previous call returned the last image</returns>
Public Shared Function pixReadFromMultipageTiff(
				ByVal fname as String, 
				ByRef poffset as Byte()) as Pix

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")

	Dim poffsetPTR As IntPtr = Marshal.AllocHGlobal(poffset.Count) : Marshal.Copy(poffset, 0, poffsetPTR, poffset.Length)

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadFromMultipageTiff( fname, poffsetPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	ReDim poffset(IIf(1 > 0, 1, 1) - 1) : If poffsetPTR <> IntPtr.Zero Then Marshal.Copy(poffsetPTR, poffset, 0, poffset.count)

	Return  new Pix(_Result)
End Function

' SRC\tiffio.c (1226, 1)
' pixaReadMultipageTiff()
' pixaReadMultipageTiff(const char *) as PIXA *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - input tiff file</param>
'''   <returns>pixa of page images, or NULL on error</returns>
Public Shared Function pixaReadMultipageTiff(
				ByVal filename as String) as Pixa

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaReadMultipageTiff( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\tiffio.c (1286, 1)
' pixaWriteMultipageTiff()
' pixaWriteMultipageTiff(const char *, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) The tiff directory overhead is O(n^2).  I have not been
''' able to reduce it to O(n).  The overhead for n = 2000 is
''' about 1 second.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - input tiff file</param>
'''  <param name="pixa">[in] - any depth; colormap will be removed</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaWriteMultipageTiff(
				ByVal fname as String, 
				ByVal pixa as Pixa) as Integer

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaWriteMultipageTiff( fname, pixa.Pointer)

	Return _Result
End Function

' SRC\tiffio.c (1347, 1)
' writeMultipageTiff()
' writeMultipageTiff(const char *, const char *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This writes a set of image files in a directory out
''' as a multipage tiff file.  The images can be in any
''' initial file format.
''' (2) Images with a colormap have the colormap removed before
''' re-encoding as tiff.
''' (3) All images are encoded losslessly.  Those with 1 bpp are
''' encoded 'g4'.  The rest are encoded as 'zip' (flate encoding).
''' Because it is lossless, this is an expensive method for
''' saving most rgb images.
''' (4) The tiff directory overhead is quadratic in the number of
''' images.  To avoid this for very large numbers of images to be
''' written, apply the method used in pixaWriteMultipageTiff().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dirin">[in] - input directory</param>
'''  <param name="substr">[in][optional] - substring filter on filenames; can be NULL</param>
'''  <param name="fileout">[in] - output multipage tiff file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function writeMultipageTiff(
				ByVal dirin as String, 
				ByVal substr as String, 
				ByVal fileout as String) as Integer

	If IsNothing (dirin) then Throw New ArgumentNullException  ("dirin cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.writeMultipageTiff( dirin, substr, fileout)

	Return _Result
End Function

' SRC\tiffio.c (1383, 1)
' writeMultipageTiffSA()
' writeMultipageTiffSA(SARRAY *, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) See writeMultipageTiff()
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="sa">[in] - string array of full path names</param>
'''  <param name="fileout">[in] - output ps file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function writeMultipageTiffSA(
				ByVal sa as Sarray, 
				ByVal fileout as String) as Integer

	If IsNothing (sa) then Throw New ArgumentNullException  ("sa cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.writeMultipageTiffSA( sa.Pointer, fileout)

	Return _Result
End Function

' SRC\tiffio.c (1443, 1)
' fprintTiffInfo()
' fprintTiffInfo(FILE *, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fpout">[in] - stream for output of tag data</param>
'''  <param name="tiffile">[in] - input</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function fprintTiffInfo(
				ByVal fpout as FILE, 
				ByVal tiffile as String) as Integer

	If IsNothing (fpout) then Throw New ArgumentNullException  ("fpout cannot be Nothing")
	If IsNothing (tiffile) then Throw New ArgumentNullException  ("tiffile cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fprintTiffInfo( fpout.Pointer, tiffile)

	Return _Result
End Function

' SRC\tiffio.c (1476, 1)
' tiffGetCount()
' tiffGetCount(FILE *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for read</param>
'''  <param name="pn">[out] - number of images</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function tiffGetCount(
				ByVal fp as FILE, 
				ByRef pn as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.tiffGetCount( fp.Pointer, pn)

	Return _Result
End Function

' SRC\tiffio.c (1524, 1)
' getTiffResolution()
' getTiffResolution(FILE *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If neither resolution field is set, this is not an error;
''' the returned resolution values are 0 (designating 'unknown').
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened for read</param>
'''  <param name="pxres">[out] - resolution in ppi</param>
'''  <param name="pyres">[out] - resolution in ppi</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function getTiffResolution(
				ByVal fp as FILE, 
				ByRef pxres as Integer, 
				ByRef pyres as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.getTiffResolution( fp.Pointer, pxres, pyres)

	Return _Result
End Function

' SRC\tiffio.c (1621, 1)
' readHeaderTiff()
' readHeaderTiff(const char *, l_int32, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If there is a colormap, cmap is returned as 1; else 0.
''' (2) If %n is equal to or greater than the number of images, returns 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="n">[in] - page image number 0-based</param>
'''  <param name="pw">[out][optional] - width</param>
'''  <param name="ph">[out][optional] - height</param>
'''  <param name="pbps">[out][optional] - bits per sample -- 1, 2, 4 or 8</param>
'''  <param name="pspp">[out][optional] - samples per pixel -- 1 or 3</param>
'''  <param name="pres">[out][optional] - resolution in x dir; NULL to ignore</param>
'''  <param name="pcmap">[out][optional] - colormap exists; input NULL to ignore</param>
'''  <param name="pformat">[out][optional] - tiff format; input NULL to ignore</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function readHeaderTiff(
				ByVal filename as String, 
				ByVal n as Integer, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer, 
				ByRef pres as Integer, 
				ByRef pcmap as Integer, 
				ByRef pformat as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.readHeaderTiff( filename, n, pw, ph, pbps, pspp, pres, pcmap, pformat)

	Return _Result
End Function

' SRC\tiffio.c (1677, 1)
' freadHeaderTiff()
' freadHeaderTiff(FILE *, l_int32, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) If there is a colormap, cmap is returned as 1; else 0.
''' (2) If %n is equal to or greater than the number of images, returns 1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="n">[in] - page image number 0-based</param>
'''  <param name="pw">[out][optional] - width</param>
'''  <param name="ph">[out][optional] - height</param>
'''  <param name="pbps">[out][optional] - bits per sample -- 1, 2, 4 or 8</param>
'''  <param name="pspp">[out][optional] - samples per pixel -- 1 or 3</param>
'''  <param name="pres">[out][optional] - resolution in x dir; NULL to ignore</param>
'''  <param name="pcmap">[out][optional] - colormap exists; input NULL to ignore</param>
'''  <param name="pformat">[out][optional] - tiff format; input NULL to ignore</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function freadHeaderTiff(
				ByVal fp as FILE, 
				ByVal n as Integer, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer, 
				ByRef pres as Integer, 
				ByRef pcmap as Integer, 
				ByRef pformat as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.freadHeaderTiff( fp.Pointer, n, pw, ph, pbps, pspp, pres, pcmap, pformat)

	Return _Result
End Function

' SRC\tiffio.c (1748, 1)
' readHeaderMemTiff()
' readHeaderMemTiff(const l_uint8 *, size_t, l_int32, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) Use TIFFClose(); TIFFCleanup() doesn't free internal memstream.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cdata">[in] - const; tiff-encoded</param>
'''  <param name="size">[in] - size of data</param>
'''  <param name="n">[in] - page image number 0-based</param>
'''  <param name="pw">[out][optional] - width</param>
'''  <param name="ph">[out][optional] - height</param>
'''  <param name="pbps">[out][optional] - bits per sample -- 1, 2, 4 or 8</param>
'''  <param name="pspp">[out][optional] - samples per pixel -- 1 or 3</param>
'''  <param name="pres">[out][optional] - resolution in x dir; NULL to ignore</param>
'''  <param name="pcmap">[out][optional] - colormap exists; input NULL to ignore</param>
'''  <param name="pformat">[out][optional] - tiff format; input NULL to ignore</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function readHeaderMemTiff(
				ByVal cdata as Byte(), 
				ByVal size as UInteger, 
				ByVal n as Integer, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pbps as Integer, 
				ByRef pspp as Integer, 
				ByRef pres as Integer, 
				ByRef pcmap as Integer, 
				ByRef pformat as Integer) as Integer

	If IsNothing (cdata) then Throw New ArgumentNullException  ("cdata cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.readHeaderMemTiff( cdata, size, n, pw, ph, pbps, pspp, pres, pcmap, pformat)

	Return _Result
End Function

' SRC\tiffio.c (1883, 1)
' findTiffCompression()
' findTiffCompression(FILE *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The returned compression type is that defined in
''' the enum in imageio.h.  It is not the tiff flag value.
''' (2) The compression type is initialized to IFF_UNKNOWN.
''' If it is not one of the specified types, the returned
''' type is IFF_TIFF, which indicates no compression.
''' (3) When this function is called, the stream must be at BOF.
''' If the opened stream is to be used again to read the
''' file, it must be rewound to BOF after calling this function.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream; must be rewound to BOF</param>
'''  <param name="pcomptype">[out] - compression type</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function findTiffCompression(
				ByVal fp as FILE, 
				ByRef pcomptype as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.findTiffCompression( fp.Pointer, pcomptype)

	Return _Result
End Function

' SRC\tiffio.c (1968, 1)
' extractG4DataFromFile()
' extractG4DataFromFile(const char *, l_uint8 **, size_t *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - </param>
'''  <param name="pdata">[out] - binary data of ccitt g4 encoded stream</param>
'''  <param name="pnbytes">[out] - size of binary data</param>
'''  <param name="pw">[out][optional] - image width</param>
'''  <param name="ph">[out][optional] - image height</param>
'''  <param name="pminisblack">[out][optional] - boolean</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function extractG4DataFromFile(
				ByVal filein as String, 
				ByRef pdata as Byte(), 
				ByRef pnbytes as UInteger, 
				ByRef pw as Integer, 
				ByRef ph as Integer, 
				ByRef pminisblack as Integer) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.extractG4DataFromFile( filein, pdataPTR, pnbytes, pw, ph, pminisblack)
	ReDim pdata(IIf(pnbytes > 0, pnbytes, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\tiffio.c (2445, 1)
' pixReadMemTiff()
' pixReadMemTiff(const l_uint8 *, size_t, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This is a version of pixReadTiff(), where the data is read
''' from a memory buffer and uncompressed.
''' (2) Use TIFFClose(); TIFFCleanup() doesn't free internal memstream.
''' (3) No warning messages on failure, because of how multi-page
''' TIFF reading works. You are supposed to keep trying until
''' it stops working.
''' (4) Tiff directory overhead is linear in the input page number.
''' If reading many images, use pixReadMemFromMultipageTiff().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cdata">[in] - const; tiff-encoded</param>
'''  <param name="size">[in] - size of cdata</param>
'''  <param name="n">[in] - page image number 0-based</param>
'''   <returns>pix, or NULL on error</returns>
Public Shared Function pixReadMemTiff(
				ByVal cdata as Byte(), 
				ByVal size as UInteger, 
				ByVal n as Integer) as Pix

	If IsNothing (cdata) then Throw New ArgumentNullException  ("cdata cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadMemTiff( cdata, size, n)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\tiffio.c (2510, 1)
' pixReadMemFromMultipageTiff()
' pixReadMemFromMultipageTiff(const l_uint8 *, size_t, size_t *) as PIX *
'''  <summary>
''' Notes
''' (1) This is a read-from-memory version of pixReadFromMultipageTiff().
''' See that function for usage.
''' (2) If reading sequentially from the tiff data, this is more
''' efficient than pixReadMemTiff(), which has an overhead
''' proportional to the image index n.
''' (3) Example usage for reading all the images
''' size_t offset = 0;
''' do {
''' Pix pix = pixReadMemFromMultipageTiff(data, size, offset);
''' // do something with pix
''' } while (offset != 0);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cdata">[in] - const; tiff-encoded</param>
'''  <param name="size">[in] - size of cdata</param>
'''  <param name="poffset">[in,out] - set offset to 0 for first image</param>
'''   <returns>pix, or NULL on error or if previous call returned the last image</returns>
Public Shared Function pixReadMemFromMultipageTiff(
				ByVal cdata as Byte(), 
				ByVal size as UInteger, 
				ByRef poffset as Byte()) as Pix

	If IsNothing (cdata) then Throw New ArgumentNullException  ("cdata cannot be Nothing")

	Dim poffsetPTR As IntPtr = Marshal.AllocHGlobal(poffset.Count) : Marshal.Copy(poffset, 0, poffsetPTR, poffset.Length)

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadMemFromMultipageTiff( cdata, size, poffsetPTR)
	If  _Result = IntPtr.Zero then Return Nothing
	ReDim poffset(IIf(size > 0, size, 1) - 1) : If poffsetPTR <> IntPtr.Zero Then Marshal.Copy(poffsetPTR, poffset, 0, poffset.count)

	Return  new Pix(_Result)
End Function

' SRC\tiffio.c (2566, 1)
' pixaReadMemMultipageTiff()
' pixaReadMemMultipageTiff(const l_uint8 *, size_t) as PIXA *
'''  <summary>
''' Notes
''' (1) This is an O(n) read-from-memory version of pixaReadMultipageTiff().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - const; multiple pages; tiff-encoded</param>
'''  <param name="size">[in] - size of cdata</param>
'''   <returns>pixa, or NULL on error</returns>
Public Shared Function pixaReadMemMultipageTiff(
				ByVal data as Byte(), 
				ByVal size as UInteger) as Pixa

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixaReadMemMultipageTiff( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pixa(_Result)
End Function

' SRC\tiffio.c (2606, 1)
' pixaWriteMemMultipageTiff()
' pixaWriteMemMultipageTiff(l_uint8 **, size_t *, PIXA *) as l_ok
'''  <summary>
''' Notes
''' (1) fopenTiffMemstream() does not work in append mode, so we
''' must work-around with a temporary file.
''' (2) Getting a file stream from
''' open_memstream((char )pdata, psize)
''' does not work with the tiff directory.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - const; tiff-encoded</param>
'''  <param name="psize">[out] - size of data</param>
'''  <param name="pixa">[in] - any depth; colormap will be removed</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixaWriteMemMultipageTiff(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal pixa as Pixa) as Integer

	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixaWriteMemMultipageTiff( pdataPTR, psize, pixa.Pointer)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\tiffio.c (2672, 1)
' pixWriteMemTiff()
' pixWriteMemTiff(l_uint8 **, size_t *, PIX *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of tiff compressed image</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="pix">[in] - </param>
'''  <param name="comptype">[in] - IFF_TIFF, IFF_TIFF_RLE, IFF_TIFF_PACKBITS, IFF_TIFF_G3, IFF_TIFF_G4, IFF_TIFF_LZW, IFF_TIFF_ZIP</param>
'''   <returns>0 if OK, 1 on error Usage 1) See pixWriteTiff(.  This version writes to memory instead of to a file.</returns>
Public Shared Function pixWriteMemTiff(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal pix as Pix, 
				ByVal comptype as Enumerations.IFF) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteMemTiff( pdataPTR, psize, pix.Pointer, comptype)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\tiffio.c (2703, 1)
' pixWriteMemTiffCustom()
' pixWriteMemTiffCustom(l_uint8 **, size_t *, PIX *, l_int32, NUMA *, SARRAY *, SARRAY *, NUMA *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of tiff compressed image</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="pix">[in] - </param>
'''  <param name="comptype">[in] - IFF_TIFF, IFF_TIFF_RLE, IFF_TIFF_PACKBITS, IFF_TIFF_G3, IFF_TIFF_G4, IFF_TIFF_LZW, IFF_TIFF_ZIP</param>
'''  <param name="natags">[in][optional] - NUMA of custom tiff tags</param>
'''  <param name="savals">[in][optional] - SARRAY of values</param>
'''  <param name="satypes">[in][optional] - SARRAY of types</param>
'''  <param name="nasizes">[in][optional] - NUMA of sizes</param>
'''   <returns>0 if OK, 1 on error Usage 1) See pixWriteTiffCustom(.  This version writes to memory instead of to a file. 2) Use TIFFClose(); TIFFCleanup( doesn't free internal memstream.</returns>
Public Shared Function pixWriteMemTiffCustom(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal pix as Pix, 
				ByVal comptype as Enumerations.IFF, 
				ByVal natags as Numa, 
				ByVal savals as Sarray, 
				ByVal satypes as Sarray, 
				ByVal nasizes as Numa) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero
	Dim natagsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(natags) Then natagsPTR = natags.Pointer
	Dim savalsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(savals) Then savalsPTR = savals.Pointer
	Dim satypesPTR As IntPtr = IntPtr.Zero : If Not IsNothing(satypes) Then satypesPTR = satypes.Pointer
	Dim nasizesPTR As IntPtr = IntPtr.Zero : If Not IsNothing(nasizes) Then nasizesPTR = nasizes.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteMemTiffCustom( pdataPTR, psize, pix.Pointer, comptype, natagsPTR, savalsPTR, satypesPTR, nasizesPTR)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

#End Region
#Region "SRC\utils1.c"
' SRC\utils1.c (125, 1)
' setMsgSeverity()
' setMsgSeverity(l_int32) as l_int32
'''  <summary>
''' Notes
''' (1) setMsgSeverity() allows the user to specify the desired
''' message severity threshold.  Messages of equal or greater
''' severity will be output.  The previous message severity is
''' returned when the new severity is set.
''' (2) If L_SEVERITY_EXTERNAL is passed, then the severity will be
''' obtained from the LEPT_MSG_SEVERITY environment variable.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="newsev">[in] - </param>
'''   <returns>oldsev</returns>
Public Shared Function setMsgSeverity(
				ByVal newsev as Integer) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.setMsgSeverity( newsev)

	Return _Result
End Function

' SRC\utils1.c (176, 1)
' returnErrorInt()
' returnErrorInt(const char *, const char *, l_int32) as l_int32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="msg">[in] - error message</param>
'''  <param name="procname">[in] - </param>
'''  <param name="ival">[in] - return val</param>
'''   <returns>ival typically 1 for an error return</returns>
Public Shared Function returnErrorInt(
				ByVal msg as String, 
				ByVal procname as String, 
				ByVal ival as Integer) as Integer

	If IsNothing (msg) then Throw New ArgumentNullException  ("msg cannot be Nothing")
	If IsNothing (procname) then Throw New ArgumentNullException  ("procname cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.returnErrorInt( msg, procname, ival)

	Return _Result
End Function

' SRC\utils1.c (194, 1)
' returnErrorFloat()
' returnErrorFloat(const char *, const char *, l_float32) as l_float32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="msg">[in] - error message</param>
'''  <param name="procname">[in] - </param>
'''  <param name="fval">[in] - return val</param>
'''   <returns>fval</returns>
Public Shared Function returnErrorFloat(
				ByVal msg as String, 
				ByVal procname as String, 
				ByVal fval as Single) as Single

	If IsNothing (msg) then Throw New ArgumentNullException  ("msg cannot be Nothing")
	If IsNothing (procname) then Throw New ArgumentNullException  ("procname cannot be Nothing")
	If IsNothing (fval) then Throw New ArgumentNullException  ("fval cannot be Nothing")


	Dim _Result as Single = LeptonicaSharp.Natives.returnErrorFloat( msg, procname, fval)

	Return _Result
End Function

' SRC\utils1.c (212, 1)
' returnErrorPtr()
' returnErrorPtr(const char *, const char *, void *) as void *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="msg">[in] - error message</param>
'''  <param name="procname">[in] - </param>
'''  <param name="pval">[in] - return val</param>
'''   <returns>pval typically null</returns>
Public Shared Function returnErrorPtr(
				ByVal msg as String, 
				ByVal procname as String, 
				ByVal pval as Object) as Object

	If IsNothing (msg) then Throw New ArgumentNullException  ("msg cannot be Nothing")
	If IsNothing (procname) then Throw New ArgumentNullException  ("procname cannot be Nothing")
	If IsNothing (pval) then Throw New ArgumentNullException  ("pval cannot be Nothing")

Dim pvalPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as IntPtr = LeptonicaSharp.Natives.returnErrorPtr( msg, procname, pvalPTR)

	Return _Result
End Function

' SRC\utils1.c (233, 1)
' filesAreIdentical()
' filesAreIdentical(const char *, const char *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname1">[in] - </param>
'''  <param name="fname2">[in] - </param>
'''  <param name="psame">[out] - 1 if identical; 0 if different</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function filesAreIdentical(
				ByVal fname1 as String, 
				ByVal fname2 as String, 
				ByRef psame as Integer) as Integer

	If IsNothing (fname1) then Throw New ArgumentNullException  ("fname1 cannot be Nothing")
	If IsNothing (fname2) then Throw New ArgumentNullException  ("fname2 cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.filesAreIdentical( fname1, fname2, psame)

	Return _Result
End Function

' SRC\utils1.c (303, 1)
' 
' convertOnLittleEnd16(l_uint16) as l_uint16
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function convertOnLittleEnd16(
				ByRef shortin as UShort) as UShort

	If IsNothing (shortin) then Throw New ArgumentNullException  ("shortin cannot be Nothing")


	Dim _Result as UShort = LeptonicaSharp.Natives.convertOnLittleEnd16( shortin)

	Return _Result
End Function

' SRC\utils1.c (309, 1)
' 
' convertOnBigEnd16(l_uint16) as l_uint16
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function convertOnBigEnd16(
				ByRef shortin as UShort) as UShort

	If IsNothing (shortin) then Throw New ArgumentNullException  ("shortin cannot be Nothing")


	Dim _Result as UShort = LeptonicaSharp.Natives.convertOnBigEnd16( shortin)

	Return _Result
End Function

' SRC\utils1.c (338, 1)
' 
' convertOnLittleEnd32(l_uint32) as l_uint32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function convertOnLittleEnd32(
				ByRef wordin as UInteger) as UInteger



	Dim _Result as UInteger = LeptonicaSharp.Natives.convertOnLittleEnd32( wordin)

	Return _Result
End Function

' SRC\utils1.c (345, 1)
' 
' convertOnBigEnd32(l_uint32) as l_uint32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function convertOnBigEnd32(
				ByRef wordin as UInteger) as UInteger



	Dim _Result as UInteger = LeptonicaSharp.Natives.convertOnBigEnd32( wordin)

	Return _Result
End Function

' SRC\utils1.c (377, 1)
' fileCorruptByDeletion()
' fileCorruptByDeletion(const char *, l_float32, l_float32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) %loc and %size are expressed as a fraction of the file size.
''' (2) This makes a copy of the data in %filein, where bytes in the
''' specified region have deleted.
''' (3) If (%loc + %size) GT= 1.0, this deletes from the position
''' represented by %loc to the end of the file.
''' (4) It is useful for testing robustness of I/O wrappers when the
''' data is corrupted, by simulating data corruption by deletion.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - </param>
'''  <param name="loc">[in] - fractional location of start of deletion</param>
'''  <param name="size">[in] - fractional size of deletion</param>
'''  <param name="fileout">[in] - corrupted file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fileCorruptByDeletion(
				ByVal filein as String, 
				ByVal loc as Single, 
				ByVal size as Single, 
				ByVal fileout as String) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (loc) then Throw New ArgumentNullException  ("loc cannot be Nothing")
	If IsNothing (size) then Throw New ArgumentNullException  ("size cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fileCorruptByDeletion( filein, loc, size, fileout)

	Return _Result
End Function

' SRC\utils1.c (441, 1)
' fileCorruptByMutation()
' fileCorruptByMutation(const char *, l_float32, l_float32, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) %loc and %size are expressed as a fraction of the file size.
''' (2) This makes a copy of the data in %filein, where bytes in the
''' specified region have been replaced by random data.
''' (3) If (%loc + %size) GT= 1.0, this modifies data from the position
''' represented by %loc to the end of the file.
''' (4) It is useful for testing robustness of I/O wrappers when the
''' data is corrupted, by simulating data corruption.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filein">[in] - </param>
'''  <param name="loc">[in] - fractional location of start of randomization</param>
'''  <param name="size">[in] - fractional size of randomization</param>
'''  <param name="fileout">[in] - corrupted file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fileCorruptByMutation(
				ByVal filein as String, 
				ByVal loc as Single, 
				ByVal size as Single, 
				ByVal fileout as String) as Integer

	If IsNothing (filein) then Throw New ArgumentNullException  ("filein cannot be Nothing")
	If IsNothing (loc) then Throw New ArgumentNullException  ("loc cannot be Nothing")
	If IsNothing (size) then Throw New ArgumentNullException  ("size cannot be Nothing")
	If IsNothing (fileout) then Throw New ArgumentNullException  ("fileout cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fileCorruptByMutation( filein, loc, size, fileout)

	Return _Result
End Function

' SRC\utils1.c (499, 1)
' genRandomIntegerInRange()
' genRandomIntegerInRange(l_int32, l_int32, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) For example, to choose a rand integer between 0 and 99,
''' use %range = 100.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="range">[in] - size of range; must be GT= 2</param>
'''  <param name="seed">[in] - use 0 to skip; otherwise call srand</param>
'''  <param name="pval">[out] - random integer in range {0 ... range-1}</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function genRandomIntegerInRange(
				ByVal range as Integer, 
				ByVal seed as Integer, 
				ByRef pval as Integer) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.genRandomIntegerInRange( range, seed, pval)

	Return _Result
End Function

' SRC\utils1.c (536, 1)
' lept_roundftoi()
' lept_roundftoi(l_float32) as l_int32
'''  <summary>
''' Notes
''' (1) For fval GT= 0, fval --GT round(fval) == floor(fval + 0.5)
''' For fval LT 0, fval --GT -round(-fval))
''' This is symmetric around 0.
''' e.g., for fval in (-0.5 ... 0.5), fval --GT 0
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fval">[in] - </param>
'''   <returns>value rounded to int</returns>
Public Shared Function lept_roundftoi(
				ByVal fval as Single) as Integer

	If IsNothing (fval) then Throw New ArgumentNullException  ("fval cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lept_roundftoi( fval)

	Return _Result
End Function

' SRC\utils1.c (568, 1)
' l_hashStringToUint64()
' l_hashStringToUint64(const char *, l_uint64 *) as l_ok
'''  <summary>
''' Notes
''' (1) The intent of the hash is to avoid collisions by mapping
''' the string as randomly as possible into 64 bits.
''' (2) To the extent that the hashes are random, the probability of
''' a collision can be approximated by the square of the number
''' of strings divided by 2^64.  For 1 million strings, the
''' collision probability is about 1 in 16 million.
''' (3) I expect non-randomness of the distribution to be most evident
''' for small text strings.  This hash function has been tested
''' for all 5-character text strings composed of 26 letters,
''' of which there are 26^5 = 12356630.  There are no hash
''' collisions for this set.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="str">[in] - </param>
'''  <param name="phash">[out] - hash vale</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_hashStringToUint64(
				ByVal str as String, 
				ByRef phash as ULong) as Integer

	If IsNothing (str) then Throw New ArgumentNullException  ("str cannot be Nothing")

Dim phashPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.l_hashStringToUint64( str, phashPTR)

	Return _Result
End Function

' SRC\utils1.c (614, 1)
' l_hashPtToUint64()
' l_hashPtToUint64(l_int32, l_int32, l_uint64 *) as l_ok
'''  <summary>
''' Notes
''' (1) I found that a simple hash function has no collisions for
''' any of 400 million points with x and y up to 20000.
''' (2) Previously used a much more complicated and slower function
''' mulp = 26544357894361;
''' hash = 104395301;
''' hash += (x  mulp) ^ (hash GTGT 5);
''' hash ^= (hash LTLT 7);
''' hash += (y  mulp) ^ (hash GTGT 7);
''' hash = hash ^ (hash LTLT 11);
''' Such logical gymnastics to get coverage over the 2^64
''' values are not required.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="x">[in] - </param>
'''  <param name="y">[in] - </param>
'''  <param name="phash">[out] - hash value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_hashPtToUint64(
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByRef phash as ULong) as Integer


Dim phashPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.l_hashPtToUint64( x, y, phashPTR)

	Return _Result
End Function

' SRC\utils1.c (654, 1)
' l_hashFloat64ToUint64()
' l_hashFloat64ToUint64(l_int32, l_float64, l_uint64 *) as l_ok
'''  <summary>
''' Notes
''' (1) Simple, fast hash for using dnaHash with 64-bit data
''' (e.g., sets and histograms).
''' (2) The resulting hash is called a "key" in a lookup
''' operation.  The bucket for %val in a dnaHash is simply
''' found by taking the mod of the hash with the number of
''' buckets (which is prime).  What gets stored in the
''' dna in that bucket could depend on use, but for the most
''' flexibility, we store an index into the associated dna.
''' This is all that is required for generating either a hash set
''' or a histogram (an example of a hash map).
''' (3) For example, to generate a histogram, the histogram dna,
''' a histogram of unique values aligned with the histogram dna,
''' and a dnahash hashmap are built.  See l_dnaMakeHistoByHash().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nbuckets">[in] - </param>
'''  <param name="val">[in] - </param>
'''  <param name="phash">[out] - hash value</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function l_hashFloat64ToUint64(
				ByVal nbuckets as Integer, 
				ByVal val as Double, 
				ByRef phash as ULong) as Integer

	If IsNothing (val) then Throw New ArgumentNullException  ("val cannot be Nothing")

Dim phashPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.l_hashFloat64ToUint64( nbuckets, val, phashPTR)

	Return _Result
End Function

' SRC\utils1.c (678, 1)
' findNextLargerPrime()
' findNextLargerPrime(l_int32, l_uint32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="start">[in] - </param>
'''  <param name="pprime">[out] - first prime larger than %start</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function findNextLargerPrime(
				ByVal start as Integer, 
				ByRef pprime as UInteger) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.findNextLargerPrime( start, pprime)

	Return _Result
End Function

' SRC\utils1.c (713, 1)
' lept_isPrime()
' lept_isPrime(l_uint64, l_int32 *, l_uint32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="n">[in] - 64-bit unsigned</param>
'''  <param name="pis_prime">[out] - 1 if prime, 0 otherwise</param>
'''  <param name="pfactor">[out][optional] - smallest divisor, or 0 on error or if prime</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function lept_isPrime(
				ByVal n as ULong, 
				ByRef pis_prime as Integer, 
				ByRef pfactor as UInteger) as Integer

	If IsNothing (n) then Throw New ArgumentNullException  ("n cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lept_isPrime( n, pis_prime, pfactor)

	Return _Result
End Function

' SRC\utils1.c (764, 1)
' convertIntToGrayCode()
' convertIntToGrayCode(l_uint32) as l_uint32
'''  <summary>
''' Notes
''' (1) Gray code values corresponding to integers differ by
''' only one bit transition between successive integers.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="val">[in] - integer value</param>
'''   <returns>corresponding gray code value</returns>
Public Shared Function convertIntToGrayCode(
				ByVal val as UInteger) as UInteger



	Dim _Result as UInteger = LeptonicaSharp.Natives.convertIntToGrayCode( val)

	Return _Result
End Function

' SRC\utils1.c (777, 1)
' convertGrayCodeToInt()
' convertGrayCodeToInt(l_uint32) as l_uint32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="val">[in] - gray code value</param>
'''   <returns>corresponding integer value</returns>
Public Shared Function convertGrayCodeToInt(
				ByVal val as UInteger) as UInteger



	Dim _Result as UInteger = LeptonicaSharp.Natives.convertGrayCodeToInt( val)

	Return _Result
End Function

' SRC\utils1.c (799, 1)
' getLeptonicaVersion() Return string of version number (e.g., 'leptonica-1.74.2') Notes (1) The caller has responsibility to free the memory.
' getLeptonicaVersion() as char *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function getLeptonicaVersion() as String



	Dim _Result as String = LeptonicaSharp.Natives.getLeptonicaVersion( )

	Return _Result
End Function

' SRC\utils1.c (946, 1)
' 
' startTimer() as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
Public Shared Sub startTimer()



	LeptonicaSharp.Natives.startTimer( )

End Sub

' SRC\utils1.c (960, 1)
' 
' stopTimer() as l_float32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function stopTimer() as Single



	Dim _Result as Single = LeptonicaSharp.Natives.stopTimer( )

	Return _Result
End Function

' SRC\utils1.c (977, 1)
' 
' startTimerNested() as L_TIMER
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function startTimerNested() as IntPtr



	Dim _Result as IntPtr = LeptonicaSharp.Natives.startTimerNested( )

	Return _Result
End Function

' SRC\utils1.c (994, 1)
' 
' stopTimerNested(L_TIMER) as l_float32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function stopTimerNested(
				ByRef utime_start as IntPtr) as Single

	If IsNothing (utime_start) then Throw New ArgumentNullException  ("utime_start cannot be Nothing")


	Dim _Result as Single = LeptonicaSharp.Natives.stopTimerNested( utime_start)

	Return _Result
End Function

' SRC\utils1.c (1013, 1)
' 
' l_getCurrentTime(l_int32 *, l_int32 *) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
Public Shared Sub l_getCurrentTime(
				ByRef sec as Object, 
				ByRef usec as Object)

	If IsNothing (sec) then Throw New ArgumentNullException  ("sec cannot be Nothing")
	If IsNothing (usec) then Throw New ArgumentNullException  ("usec cannot be Nothing")


	LeptonicaSharp.Natives.l_getCurrentTime( sec, usec)

End Sub

' SRC\utils1.c (1053, 1)
' startWallTimer()
' startWallTimer() as L_WALLTIMER *
'''  <summary>
''' Notes
''' (1) These measure the wall clock time  elapsed between the two calls
''' L_WALLTIMER timer = startWallTimer();
''' ....
''' fprintf(stderr, "Elapsed time = %f sec\n", stopWallTimer(timer);
''' (2) Note that the timer object is destroyed by stopWallTimer().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns>walltimer-ptr</returns>
Public Shared Function startWallTimer() as L_WallTimer



	Dim _Result as IntPtr = LeptonicaSharp.Natives.startWallTimer( )
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_WallTimer(_Result)
End Function

' SRC\utils1.c (1069, 1)
' stopWallTimer()
' stopWallTimer(L_WALLTIMER **) as l_float32
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptimer">[in,out] - walltimer-ptr</param>
'''   <returns>time wall time elapsed in seconds</returns>
Public Shared Function stopWallTimer(
				ByRef ptimer as L_WallTimer) as Single


	Dim ptimerPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ptimer) Then ptimerPTR = ptimer.Pointer

	Dim _Result as Single = LeptonicaSharp.Natives.stopWallTimer( ptimerPTR)
	if ptimerPTR <> IntPtr.Zero then ptimer = new L_WallTimer(ptimerPTR)

	Return _Result
End Function

' SRC\utils1.c (1104, 1)
' l_getFormattedDate()
' l_getFormattedDate() as char *
'''  <summary>
''' Notes
''' (1) This is used in pdf, in the form specified in section 3.8.2 of
''' http//partners.adobe.com/public/developer/en/pdf/PDFReference.pdf
''' (2) Contributed by Dave Bryan.  Works on all platforms.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns>formatted date string, or NULL on error</returns>
Public Shared Function l_getFormattedDate() as String



	Dim _Result as String = LeptonicaSharp.Natives.l_getFormattedDate( )

	Return _Result
End Function

#End Region
#Region "SRC\utils2.c"
' SRC\utils2.c (205, 1)
' stringNew()
' stringNew(const char *) as char *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="src">[in] - string</param>
'''   <returns>dest copy of src string, or NULL on error</returns>
Public Shared Function stringNew(
				ByVal src as String) as String

	If IsNothing (src) then Throw New ArgumentNullException  ("src cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.stringNew( src)

	Return _Result
End Function

' SRC\utils2.c (245, 1)
' stringCopy()
' stringCopy(char *, const char *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Relatively safe wrapper for strncpy, that checks the input,
''' and does not complain if %src is null or %n LT 1.
''' If %n LT 1, this is a no-op.
''' (2) %dest needs to be at least %n bytes in size.
''' (3) We don't call strncpy() because valgrind complains about
''' use of uninitialized values.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dest">[in] - existing byte buffer</param>
'''  <param name="src">[in] - string [optional] can be null</param>
'''  <param name="n">[in] - max number of characters to copy</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function stringCopy(
				ByVal dest as String, 
				ByVal src as String, 
				ByVal n as Integer) as Integer

	If IsNothing (dest) then Throw New ArgumentNullException  ("dest cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.stringCopy( dest, src, n)

	Return _Result
End Function

' SRC\utils2.c (282, 1)
' stringReplace()
' stringReplace(char **, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) Frees any existing dest string
''' (2) Puts a copy of src string in the dest
''' (3) If either or both strings are null, does something reasonable.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdest">[out] - string copy</param>
'''  <param name="src">[in] - string [optional] can be null</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function stringReplace(
				ByRef pdest as String(), 
				ByVal src as String) as Integer


Dim pdestPTR As IntPtr = pdestPTR = Marshal.AllocHGlobal(Marshal.sizeOf(pdest.toArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.stringReplace( pdestPTR, src)

	Return _Result
End Function

' SRC\utils2.c (318, 1)
' stringLength()
' stringLength(const char *, size_t) as l_int32
'''  <summary>
''' Notes
''' (1) Safe implementation of strlen that only checks size bytes
''' for trailing NUL.
''' (2) Valid returned string lengths are between 0 and size - 1.
''' If size bytes are checked without finding a NUL byte, then
''' an error is indicated by returning size.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="src">[in] - string can be null or NULL-terminated string</param>
'''  <param name="size">[in] - size of src buffer</param>
'''   <returns>length of src in bytes.</returns>
Public Shared Function stringLength(
				ByVal src as String, 
				ByVal size as UInteger) as Integer

	If IsNothing (src) then Throw New ArgumentNullException  ("src cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.stringLength( src, size)

	Return _Result
End Function

' SRC\utils2.c (359, 1)
' stringCat()
' stringCat(char *, size_t, const char *) as l_int32
'''  <summary>
''' Notes
''' (1) Alternative implementation of strncat, that checks the input,
''' is easier to use (since the size of the dest buffer is specified
''' rather than the number of bytes to copy), and does not complain
''' if %src is null.
''' (2) Never writes past end of dest.
''' (3) If it can't append src (an error), it does nothing.
''' (4) N.B. The order of 2nd and 3rd args is reversed from that in
''' strncat, as in the Windows function strcat_s().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dest">[in] - null-terminated byte buffer</param>
'''  <param name="size">[in] - size of dest</param>
'''  <param name="src">[in] - string can be null or NULL-terminated string</param>
'''   <returns>number of bytes added to dest; -1 on error</returns>
Public Shared Function stringCat(
				ByVal dest as String, 
				ByVal size as UInteger, 
				ByVal src as String) as Integer

	If IsNothing (dest) then Throw New ArgumentNullException  ("dest cannot be Nothing")
	If IsNothing (src) then Throw New ArgumentNullException  ("src cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.stringCat( dest, size, src)

	Return _Result
End Function

' SRC\utils2.c (407, 1)
' stringConcatNew()
' stringConcatNew(const char *, ...) as char *
'''  <summary>
''' Notes
''' (1) The last arg in the list of strings must be NULL.
''' (2) Caller must free the returned string.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="first">[in] - first string in list</param>
'''   <returns>result new string concatenating the input strings, or NULL if first == NULL</returns>
Public Shared Function stringConcatNew(
				ByVal first as String) as String

	If IsNothing (first) then Throw New ArgumentNullException  ("first cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.stringConcatNew( first)

	Return _Result
End Function

' SRC\utils2.c (454, 1)
' stringJoin()
' stringJoin(const char *, const char *) as char *
'''  <summary>
''' Notes
''' (1) This is a safe version of strcat; it makes a new string.
''' (2) It is not an error if either or both of the strings
''' are empty, or if either or both of the pointers are null.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="src1">[in] - string [optional] can be null</param>
'''  <param name="src2">[in] - string [optional] can be null</param>
'''   <returns>concatenated string, or NULL on error</returns>
Public Shared Function stringJoin(
				ByVal src1 as String, 
				ByVal src2 as String) as String



	Dim _Result as String = LeptonicaSharp.Natives.stringJoin( src1, src2)

	Return _Result
End Function

' SRC\utils2.c (509, 1)
' stringJoinIP()
' stringJoinIP(char **, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This is a safe in-place version of strcat.  The contents of
''' src1 is replaced by the concatenation of src1 and src2.
''' (2) It is not an error if either or both of the strings
''' are empty (""), or if the pointers to the strings (psrc1, src2)
''' are null.
''' (3) src1 should be initialized to null or an empty string
''' before the first call.  Use one of these
''' char src1 = NULL;
''' char src1 = stringNew("");
''' Then call with
''' stringJoinIP(src1, src2);
''' (4) This can also be implemented as a macro
''' \code
''' #define stringJoinIP(src1, src2) \
''' {tmpstr = stringJoin((src1),(src2)); \
''' LEPT_FREE(src1); \
''' (src1) = tmpstr;}
''' \endcode
''' (5) Another function to consider for joining many strings is
''' stringConcatNew().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="psrc1">[in,out] - string address of src1; cannot be on the stack</param>
'''  <param name="src2">[in] - string [optional] can be null</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function stringJoinIP(
				ByRef psrc1 as String(), 
				ByVal src2 as String) as Integer


Dim psrc1PTR As IntPtr = psrc1PTR = Marshal.AllocHGlobal(Marshal.sizeOf(psrc1.toArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.stringJoinIP( psrc1PTR, src2)

	Return _Result
End Function

' SRC\utils2.c (533, 1)
' stringReverse()
' stringReverse(const char *) as char *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="src">[in] - string</param>
'''   <returns>dest newly-allocated reversed string</returns>
Public Shared Function stringReverse(
				ByVal src as String) as String

	If IsNothing (src) then Throw New ArgumentNullException  ("src cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.stringReverse( src)

	Return _Result
End Function

' SRC\utils2.c (585, 1)
' strtokSafe()
' strtokSafe(char *, const char *, char **) as char *
'''  <summary>
''' Notes
''' (1) This is a thread-safe implementation of strtok.
''' (2) It has the same interface as strtok_r.
''' (3) It differs from strtok_r in usage in two respects
''' (a) the input string is not altered
''' (b) each returned substring is newly allocated and must
''' be freed after use.
''' (4) Let me repeat that.  This is "safe" because the input
''' string is not altered and because each returned string
''' is newly allocated on the heap.
''' (5) It is here because, surprisingly, some C libraries don't
''' include strtok_r.
''' (6) Important usage points
''' ~ Input the string to be parsed on the first invocation.
''' ~ Then input NULL after that; the value returned in saveptr
''' is used in all subsequent calls.
''' (7) This is only slightly slower than strtok_r.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="seps">[in] - a string of character separators</param>
'''  <param name="psaveptr">[out] - ptr to the next char after the last encountered separator</param>
'''   <returns>substr a new string that is copied from the previous saveptr up to but not including the next separator character, or NULL if end of cstr.</returns>
Public Shared Function strtokSafe(
				ByRef _cstr_ as String, 
				ByVal seps as String, 
				ByRef psaveptr as String()) as String

	If IsNothing (_cstr_) then Throw New ArgumentNullException  ("_cstr_ cannot be Nothing")
	If IsNothing (seps) then Throw New ArgumentNullException  ("seps cannot be Nothing")

Dim psaveptrPTR As IntPtr = psaveptrPTR = Marshal.AllocHGlobal(Marshal.sizeOf(psaveptr.toArray))

	Dim _Result as String = LeptonicaSharp.Natives.strtokSafe( _cstr_, seps, psaveptrPTR)

	Return _Result
End Function

' SRC\utils2.c (679, 1)
' stringSplitOnToken()
' stringSplitOnToken(char *, const char *, char **, char **) as l_ok
'''  <summary>
''' Notes
''' (1) The input string is not altered; all split parts are new strings.
''' (2) The split occurs around the first consecutive sequence of
''' tokens encountered.
''' (3) The head goes from the beginning of the string up to
''' but not including the first token found.
''' (4) The tail contains the second part of the string, starting
''' with the first char in that part that is NOT a token.
''' (5) If no separator token is found, 'head' contains a copy
''' of the input string and 'tail' is null.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="seps">[in] - a string of character separators</param>
'''  <param name="phead">[out] - ptr to copy of the input string, up to the first separator token encountered</param>
'''  <param name="ptail">[out] - ptr to copy of the part of the input string starting with the first non-separator character that occurs after the first separator is found</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function stringSplitOnToken(
				ByRef _cstr_ as String, 
				ByVal seps as String, 
				ByRef phead as String(), 
				ByRef ptail as String()) as Integer

	If IsNothing (_cstr_) then Throw New ArgumentNullException  ("_cstr_ cannot be Nothing")
	If IsNothing (seps) then Throw New ArgumentNullException  ("seps cannot be Nothing")

Dim pheadPTR As IntPtr = pheadPTR = Marshal.AllocHGlobal(Marshal.sizeOf(phead.toArray))
Dim ptailPTR As IntPtr = ptailPTR = Marshal.AllocHGlobal(Marshal.sizeOf(ptail.toArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.stringSplitOnToken( _cstr_, seps, pheadPTR, ptailPTR)

	Return _Result
End Function

' SRC\utils2.c (723, 1)
' stringCheckForChars()
' stringCheckForChars(const char *, const char *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) This can be used to sanitize an operation by checking for
''' special characters that don't belong in a string.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="src">[in] - input string; can be of zero length</param>
'''  <param name="chars">[in] - string of chars to be searched for in %src</param>
'''  <param name="pfound">[out] - 1 if any characters are found; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function stringCheckForChars(
				ByVal src as String, 
				ByVal chars as String, 
				ByRef pfound as Integer) as Integer

	If IsNothing (src) then Throw New ArgumentNullException  ("src cannot be Nothing")
	If IsNothing (chars) then Throw New ArgumentNullException  ("chars cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.stringCheckForChars( src, chars, pfound)

	Return _Result
End Function

' SRC\utils2.c (758, 1)
' stringRemoveChars()
' stringRemoveChars(const char *, const char *) as char *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="src">[in] - input string; can be of zero length</param>
'''  <param name="remchars">[in] - string of chars to be removed from src</param>
'''   <returns>dest string with specified chars removed, or NULL on error</returns>
Public Shared Function stringRemoveChars(
				ByVal src as String, 
				ByVal remchars as String) as String

	If IsNothing (src) then Throw New ArgumentNullException  ("src cannot be Nothing")
	If IsNothing (remchars) then Throw New ArgumentNullException  ("remchars cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.stringRemoveChars( src, remchars)

	Return _Result
End Function

' SRC\utils2.c (803, 1)
' stringFindSubstr()
' stringFindSubstr(const char *, const char *, l_int32 *) as l_int32
'''  <summary>
''' Notes
''' (1) This is a wrapper around strstr().
''' (2) Both %src and %sub must be defined, and %sub must have
''' length of at least 1.
''' (3) If the substring is not found and loc is returned, it has
''' the value -1.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="src">[in] - input string; can be of zero length</param>
'''  <param name="ploc">[out][optional] - location of substring in src</param>
'''   <returns>1 if found; 0 if not found or on error</returns>
Public Shared Function stringFindSubstr(
				ByVal src as String, 
				ByRef _sub_ as String, 
				ByRef ploc as Integer) as Integer

	If IsNothing (src) then Throw New ArgumentNullException  ("src cannot be Nothing")
	If IsNothing (_sub_) then Throw New ArgumentNullException  ("_sub_ cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.stringFindSubstr( src, _sub_, ploc)

	Return _Result
End Function

' SRC\utils2.c (855, 1)
' stringReplaceSubstr()
' stringReplaceSubstr(const char *, const char *, const char *, l_int32 *, l_int32 *) as char *
'''  <summary>
''' Notes
''' (1) Replaces the first instance.
''' (2) To only remove sub1, use "" for sub2
''' (3) Returns a new string if sub1 and sub2 are the same.
''' (4) The optional loc is input as the byte offset within the src
''' from which the search starts, and after the search it is the
''' char position in the string of the next character after
''' the substituted string.
''' (5) N.B. If ploc is not null, loc must always be initialized.
''' To search the string from the beginning, set loc = 0.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="src">[in] - input string; can be of zero length</param>
'''  <param name="sub1">[in] - substring to be replaced</param>
'''  <param name="sub2">[in] - substring to put in; can be ""</param>
'''  <param name="pfound">[out][optional] - 1 if sub1 is found; 0 otherwise</param>
'''  <param name="ploc">[out][optional] - location of ptr after replacement</param>
'''   <returns>dest string with substring replaced, or NULL if the substring not found or on error.</returns>
Public Shared Function stringReplaceSubstr(
				ByVal src as String, 
				ByVal sub1 as String, 
				ByVal sub2 as String, 
				ByRef pfound as Integer, 
				ByRef ploc as Integer) as String

	If IsNothing (src) then Throw New ArgumentNullException  ("src cannot be Nothing")
	If IsNothing (sub1) then Throw New ArgumentNullException  ("sub1 cannot be Nothing")
	If IsNothing (sub2) then Throw New ArgumentNullException  ("sub2 cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.stringReplaceSubstr( src, sub1, sub2, pfound, ploc)

	Return _Result
End Function

' SRC\utils2.c (922, 1)
' stringReplaceEachSubstr()
' stringReplaceEachSubstr(const char *, const char *, const char *, l_int32 *) as char *
'''  <summary>
''' Notes
''' (1) Replaces every instance.
''' (2) To only remove each instance of sub1, use "" for sub2
''' (3) Returns NULL if sub1 and sub2 are the same.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="src">[in] - input string; can be of zero length</param>
'''  <param name="sub1">[in] - substring to be replaced</param>
'''  <param name="sub2">[in] - substring to put in; can be ""</param>
'''  <param name="pcount">[out][optional] - the number of times that sub1 is found in src; 0 if not found</param>
'''   <returns>dest string with substring replaced, or NULL if the substring not found or on error.</returns>
Public Shared Function stringReplaceEachSubstr(
				ByVal src as String, 
				ByVal sub1 as String, 
				ByVal sub2 as String, 
				ByRef pcount as Integer) as String

	If IsNothing (src) then Throw New ArgumentNullException  ("src cannot be Nothing")
	If IsNothing (sub1) then Throw New ArgumentNullException  ("sub1 cannot be Nothing")
	If IsNothing (sub2) then Throw New ArgumentNullException  ("sub2 cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.stringReplaceEachSubstr( src, sub1, sub2, pcount)

	Return _Result
End Function

' SRC\utils2.c (977, 1)
' arrayFindEachSequence()
' arrayFindEachSequence(const l_uint8 *, size_t, const l_uint8 *, size_t) as L_DNA *
'''  <summary>
''' Notes
''' (1) The byte arrays %data and %sequence are not C strings,
''' as they can contain null bytes.  Therefore, for each
''' we must give the length of the array.
''' (2) This finds every occurrence in %data of %sequence.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - byte array</param>
'''  <param name="datalen">[in] - length of data, in bytes</param>
'''  <param name="sequence">[in] - subarray of bytes to find in data</param>
'''  <param name="seqlen">[in] - length of sequence, in bytes</param>
'''   <returns>dna of offsets where the sequence is found, or NULL if none are found or on error</returns>
Public Shared Function arrayFindEachSequence(
				ByVal data as Byte(), 
				ByVal datalen as UInteger, 
				ByVal sequence as Byte(), 
				ByVal seqlen as UInteger) as L_Dna

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")
	If IsNothing (sequence) then Throw New ArgumentNullException  ("sequence cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.arrayFindEachSequence( data, datalen, sequence, seqlen)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_Dna(_Result)
End Function

' SRC\utils2.c (1037, 1)
' arrayFindSequence()
' arrayFindSequence(const l_uint8 *, size_t, const l_uint8 *, size_t, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The byte arrays 'data' and 'sequence' are not C strings,
''' as they can contain null bytes.  Therefore, for each
''' we must give the length of the array.
''' (2) This searches for the first occurrence in %data of %sequence,
''' which consists of %seqlen bytes.  The parameter %seqlen
''' must not exceed the actual length of the %sequence byte array.
''' (3) If the sequence is not found, the offset will be 0, so you
''' must check %found.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - byte array</param>
'''  <param name="datalen">[in] - length of data, in bytes</param>
'''  <param name="sequence">[in] - subarray of bytes to find in data</param>
'''  <param name="seqlen">[in] - length of sequence, in bytes</param>
'''  <param name="poffset">[out] - offset from beginning of data where the sequence begins</param>
'''  <param name="pfound">[out] - 1 if sequence is found; 0 otherwise</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function arrayFindSequence(
				ByVal data as Byte(), 
				ByVal datalen as UInteger, 
				ByVal sequence as Byte(), 
				ByVal seqlen as UInteger, 
				ByRef poffset as Integer, 
				ByRef pfound as Integer) as Integer

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")
	If IsNothing (sequence) then Throw New ArgumentNullException  ("sequence cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.arrayFindSequence( data, datalen, sequence, seqlen, poffset, pfound)

	Return _Result
End Function

' SRC\utils2.c (1106, 1)
' reallocNew()
' reallocNew(void **, l_int32, l_int32) as void *
'''  <summary>
''' Notes
''' (1) If newsize LT=0, just frees input data and nulls ptr
''' (2) If input ptr is null, just callocs new memory
''' (3) This differs from realloc in that it always allocates
''' new memory (if newsize GT 0) and initializes it to 0,
''' it requires the amount of old data to be copied,
''' and it takes the address of the input ptr and
''' nulls the handle.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pindata">[in,out][optional] - ; nulls indata</param>
'''  <param name="oldsize">[in] - size of input data to be copied, in bytes</param>
'''  <param name="newsize">[in] - size of data to be reallocated in bytes</param>
'''   <returns>ptr to new data, or NULL on error Action !N.B. 3) and (4! 1 Allocates memory, initialized to 0 2 Copies as much of the input data as possible to the new block, truncating the copy if necessary 3 Frees the input data 4 Zeroes the input data ptr</returns>
Public Shared Function reallocNew(
				ByRef pindata as IntPtr(), 
				ByVal oldsize as Integer, 
				ByVal newsize as Integer) as Object


Dim pindataPTR As IntPtr = IntPtr.Zero: if not isNothing (pindata) then pindataPTR = Marshal.AllocHGlobal(Marshal.SizeOf(pindata.toarray))

	Dim _Result as IntPtr = LeptonicaSharp.Natives.reallocNew( pindataPTR, oldsize, newsize)

	Return _Result
End Function

' SRC\utils2.c (1158, 1)
' l_binaryRead()
' l_binaryRead(const char *, size_t *) as l_uint8 *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pnbytes">[out] - number of bytes read</param>
'''   <returns>data, or NULL on error</returns>
Public Shared Function l_binaryRead(
				ByVal filename as String, 
				ByRef pnbytes as UInteger) as Byte()

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Byte() = LeptonicaSharp.Natives.l_binaryRead( filename, pnbytes)

	Return _Result
End Function

' SRC\utils2.c (1208, 1)
' l_binaryReadStream()
' l_binaryReadStream(FILE *, size_t *) as l_uint8 *
'''  <summary>
''' Notes
''' (1) The returned array is terminated with a null byte so that it can
''' be used to read ascii data from a file into a proper C string.
''' (2) This can be used to capture data that is piped in via stdin,
''' because it does not require seeking within the file.
''' (3) For example, you can read an image from stdin into memory
''' using shell redirection, with one of these shell commands
''' \code
''' cat LTimagefileGT | readprog
''' readprog LT LTimagefileGT
''' \endcode
''' where readprog is
''' \code
''' l_uint8 data = l_binaryReadStream(stdin, nbytes);
''' Pix pix = pixReadMem(data, nbytes);
''' \endcode
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream opened to read; can be stdin</param>
'''  <param name="pnbytes">[out] - number of bytes read</param>
'''   <returns>null-terminated array, or NULL on error reading 0 bytes is not an error</returns>
Public Shared Function l_binaryReadStream(
				ByVal fp as FILE, 
				ByRef pnbytes as UInteger) as Byte()

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Byte() = LeptonicaSharp.Natives.l_binaryReadStream( fp.Pointer, pnbytes)

	Return _Result
End Function

' SRC\utils2.c (1275, 1)
' l_binaryReadSelect()
' l_binaryReadSelect(const char *, size_t, size_t, size_t *) as l_uint8 *
'''  <summary>
''' Notes
''' (1) The returned array is terminated with a null byte so that it can
''' be used to read ascii data from a file into a proper C string.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="start">[in] - first byte to read</param>
'''  <param name="nbytes">[in] - number of bytes to read; use 0 to read to end of file</param>
'''  <param name="pnread">[out] - number of bytes actually read</param>
'''   <returns>data, or NULL on error</returns>
Public Shared Function l_binaryReadSelect(
				ByVal filename as String, 
				ByVal start as UInteger, 
				ByVal nbytes as UInteger, 
				ByRef pnread as UInteger) as Byte()

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Byte() = LeptonicaSharp.Natives.l_binaryReadSelect( filename, start, nbytes, pnread)

	Return _Result
End Function

' SRC\utils2.c (1320, 1)
' l_binaryReadSelectStream()
' l_binaryReadSelectStream(FILE *, size_t, size_t, size_t *) as l_uint8 *
'''  <summary>
''' Notes
''' (1) The returned array is terminated with a null byte so that it can
''' be used to read ascii data from a file into a proper C string.
''' If the file to be read is empty and %start == 0, an array
''' with a single null byte is returned.
''' (2) Side effect the stream pointer is re-positioned to the
''' beginning of the file.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="start">[in] - first byte to read</param>
'''  <param name="nbytes">[in] - number of bytes to read; use 0 to read to end of file</param>
'''  <param name="pnread">[out] - number of bytes actually read</param>
'''   <returns>null-terminated array, or NULL on error reading 0 bytes is not an error</returns>
Public Shared Function l_binaryReadSelectStream(
				ByVal fp as FILE, 
				ByVal start as UInteger, 
				ByVal nbytes as UInteger, 
				ByRef pnread as UInteger) as Byte()

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Byte() = LeptonicaSharp.Natives.l_binaryReadSelectStream( fp.Pointer, start, nbytes, pnread)

	Return _Result
End Function

' SRC\utils2.c (1375, 1)
' l_binaryWrite()
' l_binaryWrite(const char *, const char *, const void *, size_t) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - output</param>
'''  <param name="operation">[in] - "w" for write; "a" for append</param>
'''  <param name="data">[in] - binary data to be written</param>
'''  <param name="nbytes">[in] - size of data array</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function l_binaryWrite(
				ByVal filename as String, 
				ByVal operation as String, 
				ByVal data as Object, 
				ByVal nbytes as UInteger) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (operation) then Throw New ArgumentNullException  ("operation cannot be Nothing")
	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")

Dim dataPTR As IntPtr = Marshal.AllocHGlobal(0)

	Dim _Result as Integer = LeptonicaSharp.Natives.l_binaryWrite( filename, operation, dataPTR, nbytes)

	Return _Result
End Function

' SRC\utils2.c (1417, 1)
' nbytesInFile()
' nbytesInFile(const char *) as size_t
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>nbytes in file; 0 on error</returns>
Public Shared Function nbytesInFile(
				ByVal filename as String) as UInteger

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as UInteger = LeptonicaSharp.Natives.nbytesInFile( filename)

	Return _Result
End Function

' SRC\utils2.c (1441, 1)
' fnbytesInFile()
' fnbytesInFile(FILE *) as size_t
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>nbytes in file; 0 on error</returns>
Public Shared Function fnbytesInFile(
				ByVal fp as FILE) as UInteger

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as UInteger = LeptonicaSharp.Natives.fnbytesInFile( fp.Pointer)

	Return _Result
End Function

' SRC\utils2.c (1479, 1)
' l_binaryCopy()
' l_binaryCopy(l_uint8 *, size_t) as l_uint8 *
'''  <summary>
''' Notes
''' (1) We add 4 bytes to the zeroed output because in some cases
''' (e.g., string handling) it is important to have the data
''' be null terminated.  This guarantees that after the memcpy,
''' the result is automatically null terminated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="datas">[in] - </param>
'''  <param name="size">[in] - of data array</param>
'''   <returns>datad on heap, or NULL on error</returns>
Public Shared Function l_binaryCopy(
				ByVal datas as Byte(), 
				ByVal size as UInteger) as Byte()

	If IsNothing (datas) then Throw New ArgumentNullException  ("datas cannot be Nothing")


	Dim _Result as Byte() = LeptonicaSharp.Natives.l_binaryCopy( datas, size)

	Return _Result
End Function

' SRC\utils2.c (1507, 1)
' fileCopy()
' fileCopy(const char *, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="srcfile">[in] - copy this file</param>
'''  <param name="newfile">[in] - to this file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fileCopy(
				ByVal srcfile as String, 
				ByVal newfile as String) as Integer

	If IsNothing (srcfile) then Throw New ArgumentNullException  ("srcfile cannot be Nothing")
	If IsNothing (newfile) then Throw New ArgumentNullException  ("newfile cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fileCopy( srcfile, newfile)

	Return _Result
End Function

' SRC\utils2.c (1537, 1)
' fileConcatenate()
' fileConcatenate(const char *, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="srcfile">[in] - file to append</param>
'''  <param name="destfile">[in] - file to add to</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fileConcatenate(
				ByVal srcfile as String, 
				ByVal destfile as String) as Integer

	If IsNothing (srcfile) then Throw New ArgumentNullException  ("srcfile cannot be Nothing")
	If IsNothing (destfile) then Throw New ArgumentNullException  ("destfile cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fileConcatenate( srcfile, destfile)

	Return _Result
End Function

' SRC\utils2.c (1565, 1)
' fileAppendString()
' fileAppendString(const char *, const char *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="str">[in] - string to append to file</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function fileAppendString(
				ByVal filename as String, 
				ByVal str as String) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (str) then Throw New ArgumentNullException  ("str cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.fileAppendString( filename, str)

	Return _Result
End Function

' SRC\utils2.c (1603, 1)
' fopenReadStream()
' fopenReadStream(const char *) as FILE *
'''  <summary>
''' Notes
''' (1) This should be used whenever you want to run fopen() to
''' read from a stream.  Never call fopen() directory.
''' (2) This handles the temp directory pathname conversion on windows
''' /tmp  ==GT  [Windows Temp directory]
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>stream, or NULL on error</returns>
Public Shared Function fopenReadStream(
				ByVal filename as String) as FILE

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fopenReadStream( filename)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FILE(_Result)
End Function

' SRC\utils2.c (1646, 1)
' fopenWriteStream()
' fopenWriteStream(const char *, const char *) as FILE *
'''  <summary>
''' Notes
''' (1) This should be used whenever you want to run fopen() to
''' write or append to a stream.  Never call fopen() directory.
''' (2) This handles the temp directory pathname conversion on windows
''' /tmp  ==GT  [Windows Temp directory]
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="modestring">[in] - </param>
'''   <returns>stream, or NULL on error</returns>
Public Shared Function fopenWriteStream(
				ByVal filename as String, 
				ByVal modestring as String) as FILE

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (modestring) then Throw New ArgumentNullException  ("modestring cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fopenWriteStream( filename, modestring)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FILE(_Result)
End Function

' SRC\utils2.c (1680, 1)
' fopenReadFromMemory()
' fopenReadFromMemory(const l_uint8 *, size_t) as FILE *
'''  <summary>
''' Notes
''' (1) Work-around if fmemopen() not available.
''' (2) Windows tmpfile() writes into the root C\ directory, which
''' requires admin privileges.  This also works around that.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="data">[in] - </param>
'''  <param name="size">[in] - </param>
'''   <returns>file stream, or NULL on error</returns>
Public Shared Function fopenReadFromMemory(
				ByVal data as Byte(), 
				ByVal size as UInteger) as FILE

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.fopenReadFromMemory( data, size)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FILE(_Result)
End Function

' SRC\utils2.c (1726, 1)
' fopenWriteWinTempfile()
' fopenWriteWinTempfile() as FILE *
'''  <summary>
''' Notes
''' (1) The Windows version of tmpfile() writes into the root
''' C\ directory, which requires admin privileges.  This
''' function provides an alternative implementation.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns>file stream, or NULL on error</returns>
Public Shared Function fopenWriteWinTempfile() as FILE



	Dim _Result as IntPtr = LeptonicaSharp.Natives.fopenWriteWinTempfile( )
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FILE(_Result)
End Function

' SRC\utils2.c (1784, 1)
' lept_fopen()
' lept_fopen(const char *, const char *) as FILE *
'''  <summary>
''' Notes
''' (1) This must be used by any application that passes
''' a file handle to a leptonica Windows DLL.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="mode">[in] - same as for fopen(); e.g., "rb"</param>
'''   <returns>stream or NULL on error</returns>
Public Shared Function lept_fopen(
				ByVal filename as String, 
				ByVal mode as String) as FILE

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (mode) then Throw New ArgumentNullException  ("mode cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.lept_fopen( filename, mode)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new FILE(_Result)
End Function

' SRC\utils2.c (1814, 1)
' lept_fclose()
' lept_fclose(FILE *) as l_ok
'''  <summary>
''' Notes
''' (1) This should be used by any application that accepts
''' a file handle generated by a leptonica Windows DLL.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function lept_fclose(
				ByVal fp as FILE) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lept_fclose( fp.Pointer)

	Return _Result
End Function

' SRC\utils2.c (1840, 1)
' lept_calloc()
' lept_calloc(size_t, size_t) as void *
'''  <summary>
''' Notes
''' (1) For safety with windows DLLs, this can be used in conjunction
''' with lept_free() to avoid C-runtime boundary problems.
''' Just use these two functions throughout your application.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="nmemb">[in] - number of members</param>
'''  <param name="size">[in] - of each member</param>
'''   <returns>void ptr, or NULL on error</returns>
Public Shared Function lept_calloc(
				ByVal nmemb as UInteger, 
				ByVal size as UInteger) as Object



	Dim _Result as IntPtr = LeptonicaSharp.Natives.lept_calloc( nmemb, size)

	Return _Result
End Function

' SRC\utils2.c (1861, 1)
' lept_free()
' lept_free(void *) as void
'''  <summary>
''' Notes
''' (1) This should be used by any application that accepts
''' heap data allocated by a leptonica Windows DLL.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="ptr">[in] - </param>
Public Shared Sub lept_free(
				ByVal ptr as Object)

	If IsNothing (ptr) then Throw New ArgumentNullException  ("ptr cannot be Nothing")

Dim ptrPTR As IntPtr = Marshal.AllocHGlobal(0)

	LeptonicaSharp.Natives.lept_free( ptrPTR)

End Sub

' SRC\utils2.c (1890, 1)
' lept_mkdir()
' lept_mkdir(const char *) as l_int32
'''  <summary>
''' Notes
''' (1) %subdir is a partial path that can consist of one or more
''' directories.
''' (2) This makes any subdirectories of /tmp that are required.
''' (3) The root temp directory is
''' /tmp (unix)  [default]
''' [Temp]  (windows)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="subdir">[in] - of /tmp or its equivalent on Windows</param>
'''   <returns>0 on success, non-zero on failure</returns>
Public Shared Function lept_mkdir(
				ByVal subdir as String) as Integer

	If IsNothing (subdir) then Throw New ArgumentNullException  ("subdir cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lept_mkdir( subdir)

	Return _Result
End Function

' SRC\utils2.c (1967, 1)
' lept_rmdir()
' lept_rmdir(const char *) as l_int32
'''  <summary>
''' Notes
''' (1) %subdir is a partial path that can consist of one or more
''' directories.
''' (2) This removes all files from the specified subdirectory of
''' the root temp directory
''' /tmp (unix)
''' [Temp]  (windows)
''' and then removes the subdirectory.
''' (3) The combination
''' lept_rmdir(subdir);
''' lept_mkdir(subdir);
''' is guaranteed to give you an empty subdirectory.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="subdir">[in] - of /tmp or its equivalent on Windows</param>
'''   <returns>0 on success, non-zero on failure</returns>
Public Shared Function lept_rmdir(
				ByVal subdir as String) as Integer

	If IsNothing (subdir) then Throw New ArgumentNullException  ("subdir cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lept_rmdir( subdir)

	Return _Result
End Function

' SRC\utils2.c (2041, 1)
' lept_direxists()
' lept_direxists(const char *, l_int32 *) as void
'''  <summary>
''' Notes
''' (1) Always use unix pathname separators.
''' (2) By calling genPathname(), if the pathname begins with "/tmp"
''' this does an automatic directory translation on windows
''' to a path in the windows [Temp] directory
''' "/tmp"  ==GT  [Temp] (windows)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dir">[in] - </param>
'''  <param name="pexists">[out] - 1 if it exists; 0 otherwise</param>
Public Shared Sub lept_direxists(
				ByVal dir as String, 
				ByRef pexists as Integer)

	If IsNothing (dir) then Throw New ArgumentNullException  ("dir cannot be Nothing")


	LeptonicaSharp.Natives.lept_direxists( dir, pexists)

End Sub

' SRC\utils2.c (2099, 1)
' lept_rm_match()
' lept_rm_match(const char *, const char *) as l_int32
'''  <summary>
''' Notes
''' (1) This removes the matched files in /tmp or a subdirectory of /tmp.
''' Use NULL for %subdir if the files are in /tmp.
''' (2) If %substr == NULL, this removes all files in the directory.
''' If %substr == "" (empty), this removes no files.
''' If both %subdir == NULL and %substr == NULL, this removes
''' all files in /tmp.
''' (3) Use unix pathname separators.
''' (4) By calling genPathname(), if the pathname begins with "/tmp"
''' this does an automatic directory translation on windows
''' to a path in the windows [Temp] directory
''' "/tmp"  ==GT  [Temp] (windows)
''' (5) Error conditions
''' returns -1 if the directory is not found
''' returns the number of files (GT 0) that it was unable to remove.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="subdir">[in][optional] - If NULL, the removed files are in /tmp</param>
'''  <param name="substr">[in][optional] - pattern to match in filename</param>
'''   <returns>0 on success, non-zero on failure</returns>
Public Shared Function lept_rm_match(
				ByVal subdir as String, 
				ByVal substr as String) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.lept_rm_match( subdir, substr)

	Return _Result
End Function

' SRC\utils2.c (2149, 1)
' lept_rm()
' lept_rm(const char *, const char *) as l_int32
'''  <summary>
''' Notes
''' (1) By calling genPathname(), this does an automatic directory
''' translation on windows to a path in the windows [Temp] directory
''' "/tmp/..."  ==GT  [Temp]/... (windows)
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="subdir">[in][optional] - of '/tmp'; can be NULL</param>
'''  <param name="tail">[in] - filename without the directory</param>
'''   <returns>0 on success, non-zero on failure</returns>
Public Shared Function lept_rm(
				ByVal subdir as String, 
				ByVal tail as String) as Integer

	If IsNothing (tail) then Throw New ArgumentNullException  ("tail cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lept_rm( subdir, tail)

	Return _Result
End Function

' SRC\utils2.c (2189, 1)
' lept_rmfile()
' lept_rmfile(const char *) as l_int32
'''  <summary>
''' Notes
''' (1) This removes the named file.
''' (2) Use unix pathname separators.
''' (3) There is no name translation.
''' (4) Unlike the other lept_ functions in this section, this can remove
''' any file -- it is not restricted to files that are in /tmp or a
''' subdirectory of it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filepath">[in] - full path to file including the directory</param>
'''   <returns>0 on success, non-zero on failure</returns>
Public Shared Function lept_rmfile(
				ByVal filepath as String) as Integer

	If IsNothing (filepath) then Throw New ArgumentNullException  ("filepath cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.lept_rmfile( filepath)

	Return _Result
End Function

' SRC\utils2.c (2244, 1)
' lept_mv()
' lept_mv(const char *, const char *, const char *, char **) as l_int32
'''  <summary>
''' Notes
''' (1) This moves %srcfile to /tmp or to a subdirectory of /tmp.
''' (2) %srcfile can either be a full path or relative to the
''' current directory.
''' (3) %newdir can either specify an existing subdirectory of /tmp
''' or can be NULL.  In the latter case, the file will be written
''' into /tmp.
''' (4) %newtail can either specify a filename tail or, if NULL,
''' the filename is taken from src-tail, the tail of %srcfile.
''' (5) For debugging, the computed newpath can be returned.  It must
''' be freed by the caller.
''' (6) Reminders
''' (a) specify files using unix pathnames
''' (b) for windows, translates
''' /tmp  ==GT  [Temp]
''' where [Temp] is the windows temp directory
''' (7) Examples
''' newdir = NULL, newtail = NULL ==GT /tmp/src-tail
''' newdir = NULL, newtail = abc  ==GT /tmp/abc
''' newdir = def/ghi, newtail = NULL ==GT /tmp/def/ghi/src-tail
''' newdir = def/ghi, newtail = abc  ==GT /tmp/def/ghi/abc
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="srcfile">[in] - </param>
'''  <param name="newdir">[in][optional] - ; can be NULL</param>
'''  <param name="newtail">[in][optional] - ; can be NULL</param>
'''  <param name="pnewpath">[out][optional] - of actual path; can be NULL</param>
'''   <returns>0 on success, non-zero on failure</returns>
Public Shared Function lept_mv(
				ByVal srcfile as String, 
				ByVal newdir as String, 
				ByVal newtail as String, 
				ByRef pnewpath as String()) as Integer

	If IsNothing (srcfile) then Throw New ArgumentNullException  ("srcfile cannot be Nothing")

Dim pnewpathPTR As IntPtr = pnewpathPTR = Marshal.AllocHGlobal(Marshal.sizeOf(pnewpath.toArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.lept_mv( srcfile, newdir, newtail, pnewpathPTR)

	Return _Result
End Function

' SRC\utils2.c (2343, 1)
' lept_cp()
' lept_cp(const char *, const char *, const char *, char **) as l_int32
'''  <summary>
''' Notes
''' (1) This copies %srcfile to /tmp or to a subdirectory of /tmp.
''' (2) %srcfile can either be a full path or relative to the
''' current directory.
''' (3) %newdir can either specify an existing subdirectory of /tmp,
''' or can be NULL.  In the latter case, the file will be written
''' into /tmp.
''' (4) %newtail can either specify a filename tail or, if NULL,
''' the filename is taken from src-tail, the tail of %srcfile.
''' (5) For debugging, the computed newpath can be returned.  It must
''' be freed by the caller.
''' (6) Reminders
''' (a) specify files using unix pathnames
''' (b) for windows, translates
''' /tmp  ==GT  [Temp]
''' where [Temp] is the windows temp directory
''' (7) Examples
''' newdir = NULL, newtail = NULL ==GT /tmp/src-tail
''' newdir = NULL, newtail = abc  ==GT /tmp/abc
''' newdir = def/ghi, newtail = NULL ==GT /tmp/def/ghi/src-tail
''' newdir = def/ghi, newtail = abc  ==GT /tmp/def/ghi/abc
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="srcfile">[in] - </param>
'''  <param name="newdir">[in][optional] - ; can be NULL</param>
'''  <param name="newtail">[in][optional] - ; can be NULL</param>
'''  <param name="pnewpath">[out][optional] - of actual path; can be NULL</param>
'''   <returns>0 on success, non-zero on failure</returns>
Public Shared Function lept_cp(
				ByVal srcfile as String, 
				ByVal newdir as String, 
				ByVal newtail as String, 
				ByRef pnewpath as String()) as Integer

	If IsNothing (srcfile) then Throw New ArgumentNullException  ("srcfile cannot be Nothing")

Dim pnewpathPTR As IntPtr = pnewpathPTR = Marshal.AllocHGlobal(Marshal.sizeOf(pnewpath.toArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.lept_cp( srcfile, newdir, newtail, pnewpathPTR)

	Return _Result
End Function

' SRC\utils2.c (2420, 1)
' callSystemDebug()
' callSystemDebug(const char *) as void
'''  <summary>
''' Notes
''' (1) The C library 'system' call is only made through this function.
''' It only works in debug/test mode, where the global variable
''' LeptDebugOK == TRUE.  This variable is set to FALSE in the
''' library as distributed, and calling this function will
''' generate an error message.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="cmd">[in] - command to be exec'd</param>
Public Shared Sub callSystemDebug(
				ByVal cmd as String)

	If IsNothing (cmd) then Throw New ArgumentNullException  ("cmd cannot be Nothing")


	LeptonicaSharp.Natives.callSystemDebug( cmd)

End Sub

' SRC\utils2.c (2484, 1)
' splitPathAtDirectory()
' splitPathAtDirectory(const char *, char **, char **) as l_ok
'''  <summary>
''' Notes
''' (1) If you only want the tail, input null for the root directory ptr.
''' (2) If you only want the root directory name, input null for the
''' tail ptr.
''' (3) This function makes decisions based only on the lexical
''' structure of the input.  Examples
''' /usr/tmp/abc  --GT  dir /usr/tmp/ tail abc
''' /usr/tmp/  --GT  dir /usr/tmp/ tail [empty string]
''' /usr/tmp   --GT  dir /usr/  tail tmp
''' abc  --GT  dir [empty string]  tail abc
''' (4) The input can have either forward (unix) or backward (win)
''' slash separators.  The output has unix separators.
''' Note that Win32 pathname functions generally accept both
''' slash forms, but the windows command line interpreter
''' only accepts backward slashes, because forward slashes are
''' used to demarcate switches (vs. dashes in unix).
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pathname">[in] - full path; can be a directory</param>
'''  <param name="pdir">[out][optional] - root directory name of input path, including trailing '/'</param>
'''  <param name="ptail">[out][optional] - path tail, which is either the file name within the root directory or the last sub-directory in the path</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function splitPathAtDirectory(
				ByVal pathname as String, 
				ByRef pdir as String(), 
				ByRef ptail as String()) as Integer

	If IsNothing (pathname) then Throw New ArgumentNullException  ("pathname cannot be Nothing")

Dim pdirPTR As IntPtr = pdirPTR = Marshal.AllocHGlobal(Marshal.sizeOf(pdir.toArray))
Dim ptailPTR As IntPtr = ptailPTR = Marshal.AllocHGlobal(Marshal.sizeOf(ptail.toArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.splitPathAtDirectory( pathname, pdirPTR, ptailPTR)

	Return _Result
End Function

' SRC\utils2.c (2551, 1)
' splitPathAtExtension()
' splitPathAtExtension(const char *, char **, char **) as l_ok
'''  <summary>
''' Notes
''' (1) If you only want the extension, input null for the basename ptr.
''' (2) If you only want the basename without extension, input null
''' for the extension ptr.
''' (3) This function makes decisions based only on the lexical
''' structure of the input.  Examples
''' /usr/tmp/abc.jpg  --GT  basename /usr/tmp/abc ext .jpg
''' /usr/tmp/.jpg  --GT  basename /usr/tmp/ ext .jpg
''' /usr/tmp.jpg/  --GT  basename /usr/tmp.jpg/   ext [empty str]
''' ./.jpg   --GT  basename ./  ext .jpg
''' (4) The input can have either forward (unix) or backward (win)
''' slash separators.  The output has unix separators.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pathname">[in] - full path; can be a directory</param>
'''  <param name="pbasename">[out][optional] - pathname not including the last dot and characters after that</param>
'''  <param name="pextension">[out][optional] - path extension, which is the last dot and the characters after it.  If there is no extension, it returns the empty string</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function splitPathAtExtension(
				ByVal pathname as String, 
				ByRef pbasename as String(), 
				ByRef pextension as String()) as Integer

	If IsNothing (pathname) then Throw New ArgumentNullException  ("pathname cannot be Nothing")

Dim pbasenamePTR As IntPtr = pbasenamePTR = Marshal.AllocHGlobal(Marshal.sizeOf(pbasename.toArray))
Dim pextensionPTR As IntPtr = pextensionPTR = Marshal.AllocHGlobal(Marshal.sizeOf(pextension.toArray))

	Dim _Result as Integer = LeptonicaSharp.Natives.splitPathAtExtension( pathname, pbasenamePTR, pextensionPTR)

	Return _Result
End Function

' SRC\utils2.c (2630, 1)
' pathJoin()
' pathJoin(const char *, const char *) as char *
'''  <summary>
''' Notes
''' (1) Use unix-style pathname separators ('/').
''' (2) %fname can be the entire path, or part of the path containing
''' at least one directory, or a tail without a directory, or NULL.
''' (3) It produces a path that strips multiple slashes to a single
''' slash, joins %dir and %fname by a slash, and has no trailing
''' slashes (except in the cases where %dir == "/" and
''' %fname == NULL, or v.v.).
''' (4) If both %dir and %fname are null, produces an empty string.
''' (5) Neither %dir nor %fname can begin with '..'.
''' (6) The result is not canonicalized or tested for correctness
''' garbage in (e.g., /%), garbage out.
''' (7) Examples
''' //tmp// + //abc/  --GT  /tmp/abc
''' tmp/ + /abc/   --GT  tmp/abc
''' tmp/ + abc/ --GT  tmp/abc
''' /tmp/ + /// --GT  /tmp
''' /tmp/ + NULL   --GT  /tmp
''' // + /abc// --GT  /abc
''' // + NULL   --GT  /
''' NULL + /abc/def/  --GT  /abc/def
''' NULL + abc//   --GT  abc
''' NULL + //   --GT  /
''' NULL + NULL --GT  (empty string)
''' "" + ""  --GT  (empty string)
''' "" + /   --GT  /
''' ".." + /etc/foo   --GT  NULL
''' /tmp + ".." --GT  NULL
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dir">[in][optional] - can be null</param>
'''  <param name="fname">[in][optional] - can be null</param>
'''   <returns>specially concatenated path, or NULL on error</returns>
Public Shared Function pathJoin(
				ByVal dir as String, 
				ByVal fname as String) as String



	Dim _Result as String = LeptonicaSharp.Natives.pathJoin( dir, fname)

	Return _Result
End Function

' SRC\utils2.c (2709, 1)
' appendSubdirs()
' appendSubdirs(const char *, const char *) as char *
'''  <summary>
''' Notes
''' (1) Use unix pathname separators
''' (2) Allocates a new string  [basedir]/[subdirs]
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="basedir">[in] - </param>
'''  <param name="subdirs">[in] - </param>
'''   <returns>concatenated full directory path without trailing slash, or NULL on error</returns>
Public Shared Function appendSubdirs(
				ByVal basedir as String, 
				ByVal subdirs as String) as String

	If IsNothing (basedir) then Throw New ArgumentNullException  ("basedir cannot be Nothing")
	If IsNothing (subdirs) then Throw New ArgumentNullException  ("subdirs cannot be Nothing")


	Dim _Result as String = LeptonicaSharp.Natives.appendSubdirs( basedir, subdirs)

	Return _Result
End Function

' SRC\utils2.c (2761, 1)
' convertSepCharsInPath()
' convertSepCharsInPath(char *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) In-place conversion.
''' (2) Type is the resulting type
''' UNIX_PATH_SEPCHAR  '\\' ==GT '/'
''' WIN_PATH_SEPCHAR   '/' ==GT '\\'
''' (3) Virtually all path operations in leptonica use unix separators.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="path">[in] - </param>
'''  <param name="type">[in] - UNIX_PATH_SEPCHAR, WIN_PATH_SEPCHAR</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function convertSepCharsInPath(
				ByVal path as String, 
				ByVal type as Enumerations.PATH_SEPCHAR) as Integer

	If IsNothing (path) then Throw New ArgumentNullException  ("path cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.convertSepCharsInPath( path, type)

	Return _Result
End Function

' SRC\utils2.c (2824, 1)
' genPathname()
' genPathname(const char *, const char *) as char *
'''  <summary>
''' Notes
''' (1) This function generates actual paths in the following ways
''' from two sub-parts (e.g., a directory and a file name).
''' from a single path full path, placed in %dir, with
''' %fname == NULL.
''' from the name of a file in the local directory placed in
''' %fname, with %dir == NULL.
''' if in a "/tmp" directory and on windows, the windows
''' temp directory is used.
''' (2) On windows, if the root of %dir is '/tmp', this does a name
''' translation
''' "/tmp"  ==GT  [Temp] (windows)
''' where [Temp] is the windows temp directory.
''' (3) On unix, the TMPDIR variable is ignored.  No rewriting
''' of temp directories is permitted.
''' (4) There are four cases for the input
''' (a) %dir is a directory and %fname is defined result is a full path
''' (b) %dir is a directory and %fname is null result is a directory
''' (c) %dir is a full path and %fname is null result is a full path
''' (d) %dir is null or an empty string start in the current dir;
''' result is a full path
''' (5) In all cases, the resulting pathname is not terminated with a slash
''' (6) The caller is responsible for freeing the returned pathname.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="dir">[in][optional] - directory or full path name, with or without trailing '/'</param>
'''  <param name="fname">[in][optional] - file name within a directory</param>
'''   <returns>pathname either a directory or full path, or NULL on error</returns>
Public Shared Function genPathname(
				ByVal dir as String, 
				ByVal fname as String) as String



	Dim _Result as String = LeptonicaSharp.Natives.genPathname( dir, fname)

	Return _Result
End Function

' SRC\utils2.c (2930, 1)
' makeTempDirname()
' makeTempDirname(char *, size_t, const char *) as l_ok
'''  <summary>
''' Notes
''' (1) This generates the directory path for output temp files,
''' written into %result with unix separators.
''' (2) Caller allocates %result, large enough to hold the path,
''' which is
''' /tmp/%subdir (unix)
''' [Temp]/%subdir  (windows)
''' where [Temp] is a path on windows determined by GenTempPath()
''' and %subdir is in general a set of nested subdirectories
''' dir1/dir2/.../dirN
''' which in use would not typically exceed 2 levels.
''' (3) Usage example
''' \code
''' char  result[256];
''' makeTempDirname(result, 256, "lept/golden");
''' \endcode
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="result">[in] - preallocated on stack or heap and passed in</param>
'''  <param name="nbytes">[in] - size of %result array, in bytes</param>
'''  <param name="subdir">[in][optional] - ; can be NULL or an empty string</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function makeTempDirname(
				ByVal result as String, 
				ByVal nbytes as UInteger, 
				ByVal subdir as String) as Integer

	If IsNothing (result) then Throw New ArgumentNullException  ("result cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.makeTempDirname( result, nbytes, subdir)

	Return _Result
End Function

' SRC\utils2.c (2980, 1)
' modifyTrailingSlash()
' modifyTrailingSlash(char *, size_t, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This carries out the requested action if necessary.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="path">[in] - preallocated on stack or heap and passed in</param>
'''  <param name="nbytes">[in] - size of %path array, in bytes</param>
'''  <param name="flag">[in] - L_ADD_TRAIL_SLASH or L_REMOVE_TRAIL_SLASH</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function modifyTrailingSlash(
				ByVal path as String, 
				ByVal nbytes as UInteger, 
				ByVal flag as Enumerations.L_TRAIL_SLASH) as Integer

	If IsNothing (path) then Throw New ArgumentNullException  ("path cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.modifyTrailingSlash( path, nbytes, flag)

	Return _Result
End Function

' SRC\utils2.c (3030, 1)
' l_makeTempFilename()
' l_makeTempFilename() as char *
'''  <summary>
''' Notes
''' (1) On unix, this makes a filename of the form
''' "/tmp/lept.XXXXXX",
''' where each X is a random character.
''' (2) On windows, this makes a filename of the form
''' "/[Temp]/lp.XXXXXX".
''' (3) On all systems, this fails if the file is not writable.
''' (4) Safest usage is to write to a subdirectory in debug code.
''' (5) The returned filename must be freed by the caller, using lept_free.
''' (6) The tail of the filename has a '.', so that cygwin interprets
''' the file as having an extension.  Otherwise, cygwin assumes it
''' is an executable and appends ".exe" to the filename.
''' (7) On unix, whenever possible use tmpfile() instead.  tmpfile()
''' hides the file name, returns a stream opened for write,
''' and deletes the temp file when the stream is closed.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns>fname  heap allocated filename; returns NULL on failure.</returns>
Public Shared Function l_makeTempFilename() as String



	Dim _Result as String = LeptonicaSharp.Natives.l_makeTempFilename( )

	Return _Result
End Function

' SRC\utils2.c (3086, 1)
' extractNumberFromFilename()
' extractNumberFromFilename(const char *, l_int32, l_int32) as l_int32
'''  <summary>
''' Notes
''' (1) The number is to be found in the basename, which is the
''' filename without either the directory or the last extension.
''' (2) When a number is found, it is non-negative.  If no number
''' is found, this returns -1, without an error message.  The
''' caller needs to check.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - </param>
'''  <param name="numpre">[in] - number of characters before the digits to be found</param>
'''  <param name="numpost">[in] - number of characters after the digits to be found</param>
'''   <returns>num number embedded in the filename; -1 on error or if not found</returns>
Public Shared Function extractNumberFromFilename(
				ByVal fname as String, 
				ByVal numpre as Integer, 
				ByVal numpost as Integer) as Integer

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.extractNumberFromFilename( fname, numpre, numpost)

	Return _Result
End Function

#End Region
#Region "SRC\warper.c"
' SRC\warper.c (107, 1)
' pixSimpleCaptcha()
' pixSimpleCaptcha(PIX *, l_int32, l_int32, l_uint32, l_uint32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This uses typical default values for generating captchas.
''' The magnitudes of the harmonic warp are typically to be
''' smaller when more terms are used, even though the phases
''' are random.  See, for example, prog/warptest.c.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; no colormap</param>
'''  <param name="border">[in] - added white pixels on each side</param>
'''  <param name="nterms">[in] - number of x and y harmonic terms</param>
'''  <param name="seed">[in] - of random number generator</param>
'''  <param name="color">[in] - for colorizing; in 0xrrggbb00 format; use 0 for black</param>
'''  <param name="cmapflag">[in] - 1 for colormap output; 0 for rgb</param>
'''   <returns>pixd 8 bpp cmap or 32 bpp rgb, or NULL on error</returns>
Public Shared Function pixSimpleCaptcha(
				ByVal pixs as Pix, 
				ByVal border as Integer, 
				ByVal nterms as Integer, 
				ByVal seed as UInteger, 
				ByVal color as UInteger, 
				ByVal cmapflag as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp; no colormap")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixSimpleCaptcha( pixs.Pointer, border, nterms, seed, color, cmapflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\warper.c (181, 1)
' pixRandomHarmonicWarp()
' pixRandomHarmonicWarp(PIX *, l_float32, l_float32, l_float32, l_float32, l_int32, l_int32, l_uint32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) To generate the warped image p(x',y'), set up the transforms
''' that are in getWarpTransform().  For each (x',y') in the
''' dest, the warp function computes the originating location
''' (x, y) in the src.  The differences (x - x') and (y - y')
''' are given as a sum of products of sinusoidal terms.  Each
''' term is multiplied by a maximum amplitude (in pixels), and the
''' angle is determined by a frequency and phase, and depends
''' on the (x', y') value of the dest.  Random numbers with
''' a variable input seed are used to allow the warping to be
''' unpredictable.  A linear interpolation is used to find
''' the value for the source at (x, y); this value is written
''' into the dest.
''' (2) This can be used to generate 'captcha's, which are somewhat
''' randomly distorted images of text.  A typical set of parameters
''' for a captcha are
''' xmag = 4.0  ymag = 6.0
''' xfreq = 0.10   yfreq = 0.13
''' nx = 3   ny = 3
''' Other examples can be found in prog/warptest.c.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp; no colormap</param>
'''  <param name="xmag">[in] - maximum magnitude of x and y distortion</param>
'''  <param name="ymag">[in] - maximum magnitude of x and y distortion</param>
'''  <param name="xfreq">[in] - maximum magnitude of x and y frequency</param>
'''  <param name="yfreq">[in] - maximum magnitude of x and y frequency</param>
'''  <param name="nx">[in] - number of x and y harmonic terms</param>
'''  <param name="ny">[in] - number of x and y harmonic terms</param>
'''  <param name="seed">[in] - of random number generator</param>
'''  <param name="grayval">[in] - color brought in from the outside; 0 for black, 255 for white</param>
'''   <returns>pixd 8 bpp; no colormap, or NULL on error</returns>
Public Shared Function pixRandomHarmonicWarp(
				ByVal pixs as Pix, 
				ByVal xmag as Single, 
				ByVal ymag as Single, 
				ByVal xfreq as Single, 
				ByVal yfreq as Single, 
				ByVal nx as Integer, 
				ByVal ny as Integer, 
				ByVal seed as UInteger, 
				ByVal grayval as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (xmag) then Throw New ArgumentNullException  ("xmag cannot be Nothing")
	If IsNothing (ymag) then Throw New ArgumentNullException  ("ymag cannot be Nothing")
	If IsNothing (xfreq) then Throw New ArgumentNullException  ("xfreq cannot be Nothing")
	If IsNothing (yfreq) then Throw New ArgumentNullException  ("yfreq cannot be Nothing")
	If {8}.contains (pixs.d) = false then Throw New ArgumentException ("8 bpp; no colormap")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixRandomHarmonicWarp( pixs.Pointer, xmag, ymag, xfreq, yfreq, nx, ny, seed, grayval)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\warper.c (586, 1)
' pixWarpStereoscopic()
' pixWarpStereoscopic(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This function splits out the red channel, mucks around with
''' it, then recombines with the unmolested cyan channel.
''' (2) By using a quadratically increasing shift of the red
''' pixels horizontally and away from the vertical centerline,
''' the image appears to bend quadratically out of the image
''' plane, symmetrically with respect to the vertical center
''' line.  A positive value of %zbend causes the plane to be
''' curved away from the viewer.  We use linearly interpolated
''' stretching to avoid the appearance of kinks in the curve.
''' (3) The parameters %zshiftt and %zshiftb tilt the image plane
''' about a horizontal line through the center, and at the
''' same time move that line either in toward the viewer or away.
''' This is implemented by a combination of horizontal shear
''' about the center line (for the tilt) and horizontal
''' translation (to move the entire plane in or out).
''' A positive value of %zshiftt moves the top of the plane
''' away from the viewer, and a positive value of %zshiftb
''' moves the bottom of the plane away.  We use linear interpolated
''' shear to avoid visible vertical steps in the tilted image.
''' (4) The image can be bent in the plane and about the vertical
''' centerline.  The centerline does not shift, and the
''' parameter %ybend gives the relative shift at left and right
''' edges, with a downward shift for positive values of %ybend.
''' (6) When writing out a steroscopic (red/cyan) image in jpeg,
''' first call pixSetChromaSampling(pix, 0) to get sufficient
''' resolution in the red channel.
''' (7) Typical values are
''' zbend = 20
''' zshiftt = 15
''' zshiftb = -15
''' ybendt = 30
''' ybendb = 0
''' If the disparity z-values are too large, it is difficult for
''' the brain to register the two images.
''' (8) This function has been cleverly reimplemented by Jeff Breidenbach.
''' The original implementation used two 32 bpp rgb images,
''' and merged them at the end.  The result is somewhat faded,
''' and has a parameter "thresh" that controls the amount of
''' color in the result.  (The present implementation avoids these
''' two problems, skipping both the colorization and the alpha
''' blending at the end, and is about 3x faster)
''' The basic operations with 32 bpp are as follows
''' // Immediate conversion to 32 bpp
''' Pix pixt1 = pixConvertTo32(pixs);
''' // Do vertical shear
''' Pix pixr = pixQuadraticVerticalShear(pixt1, L_WARP_TO_RIGHT,
''' ybendt, ybendb,
''' L_BRING_IN_WHITE);
''' // Colorize two versions, toward red and cyan
''' Pix pixc = pixCopy(NULL, pixr);
''' l_int32 thresh = 150;  // if higher, get less original color
''' pixColorGray(pixr, NULL, L_PAINT_DARK, thresh, 255, 0, 0);
''' pixColorGray(pixc, NULL, L_PAINT_DARK, thresh, 0, 255, 255);
''' // Shift the red pixels; e.g., by stretching
''' Pix pixrs = pixStretchHorizontal(pixr, L_WARP_TO_RIGHT,
''' L_QUADRATIC_WARP, zbend,
''' L_INTERPOLATED,
''' L_BRING_IN_WHITE);
''' // Blend the shifted red and unshifted cyan 5050
''' Pix pixg = pixCreate(w, h, 8);
''' pixSetAllArbitrary(pixg, 128);
''' pixd = pixBlendWithGrayMask(pixrs, pixc, pixg, 0, 0);
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - any depth, colormap ok</param>
'''  <param name="zbend">[in] - horizontal separation in pixels of red and cyan at the left and right sides, that gives rise to quadratic curvature out of the image plane</param>
'''  <param name="zshiftt">[in] - uniform pixel translation difference between red and cyan, that pushes the top of the image plane away from the viewer (zshiftt GT 0) or towards the viewer (zshiftt LT 0)</param>
'''  <param name="zshiftb">[in] - uniform pixel translation difference between red and cyan, that pushes the bottom of the image plane away from the viewer (zshiftb GT 0) or towards the viewer (zshiftb LT 0)</param>
'''  <param name="ybendt">[in] - multiplicative parameter for in-plane vertical displacement at the left or right edge at the top y = ybendt  (2x/w - 1)^2</param>
'''  <param name="ybendb">[in] - same as ybendt, except at the left or right edge at the bottom</param>
'''  <param name="redleft">[in] - 1 if the red filter is on the left; 0 otherwise</param>
'''   <returns>pixd 32 bpp, or NULL on error</returns>
Public Shared Function pixWarpStereoscopic(
				ByVal pixs as Pix, 
				ByVal zbend as Integer, 
				ByVal zshiftt as Integer, 
				ByVal zshiftb as Integer, 
				ByVal ybendt as Integer, 
				ByVal ybendb as Integer, 
				ByVal redleft as Integer) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixWarpStereoscopic( pixs.Pointer, zbend, zshiftt, zshiftb, ybendt, ybendb, redleft)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\warper.c (733, 1)
' pixStretchHorizontal()
' pixStretchHorizontal(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) If %hmax GT 0, this is an increase in the coordinate value of
''' pixels in pixd, relative to the same pixel in pixs.
''' (2) If %dir == L_WARP_TO_LEFT, the pixels on the right edge of
''' the image are not moved. So, for example, if %hmax GT 0
''' and %dir == L_WARP_TO_LEFT, the pixels in pixd are
''' contracted toward the right edge of the image, relative
''' to those in pixs.
''' (3) If %type == L_LINEAR_WARP, the pixel positions are moved
''' to the left or right by an amount that varies linearly with
''' the horizontal location.
''' (4) If %operation == L_SAMPLED, the dest pixels are taken from
''' the nearest src pixel.  Otherwise, we use linear interpolation
''' between pairs of sampled pixels.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 8 or 32 bpp</param>
'''  <param name="dir">[in] - L_WARP_TO_LEFT or L_WARP_TO_RIGHT</param>
'''  <param name="type">[in] - L_LINEAR_WARP or L_QUADRATIC_WARP</param>
'''  <param name="hmax">[in] - horizontal displacement at edge</param>
'''  <param name="operation">[in] - L_SAMPLED or L_INTERPOLATED</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE or L_BRING_IN_BLACK</param>
'''   <returns>pixd stretched/compressed, or NULL on error</returns>
Public Shared Function pixStretchHorizontal(
				ByVal pixs as Pix, 
				ByVal dir as Enumerations.L_WARP_TO_T, 
				ByVal type as Enumerations.L_WARP, 
				ByVal hmax as Integer, 
				ByVal operation as Enumerations.L_ED, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixStretchHorizontal( pixs.Pointer, dir, type, hmax, operation, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\warper.c (785, 1)
' pixStretchHorizontalSampled()
' pixStretchHorizontalSampled(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See pixStretchHorizontal() for details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 8 or 32 bpp</param>
'''  <param name="dir">[in] - L_WARP_TO_LEFT or L_WARP_TO_RIGHT</param>
'''  <param name="type">[in] - L_LINEAR_WARP or L_QUADRATIC_WARP</param>
'''  <param name="hmax">[in] - horizontal displacement at edge</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE or L_BRING_IN_BLACK</param>
'''   <returns>pixd stretched/compressed, or NULL on error</returns>
Public Shared Function pixStretchHorizontalSampled(
				ByVal pixs as Pix, 
				ByVal dir as Enumerations.L_WARP_TO_T, 
				ByVal type as Enumerations.L_WARP, 
				ByVal hmax as Integer, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixStretchHorizontalSampled( pixs.Pointer, dir, type, hmax, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\warper.c (883, 1)
' pixStretchHorizontalLI()
' pixStretchHorizontalLI(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See pixStretchHorizontal() for details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 8 or 32 bpp</param>
'''  <param name="dir">[in] - L_WARP_TO_LEFT or L_WARP_TO_RIGHT</param>
'''  <param name="type">[in] - L_LINEAR_WARP or L_QUADRATIC_WARP</param>
'''  <param name="hmax">[in] - horizontal displacement at edge</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE or L_BRING_IN_BLACK</param>
'''   <returns>pixd stretched/compressed, or NULL on error</returns>
Public Shared Function pixStretchHorizontalLI(
				ByVal pixs as Pix, 
				ByVal dir as Enumerations.L_WARP_TO_T, 
				ByVal type as Enumerations.L_WARP, 
				ByVal hmax as Integer, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixStretchHorizontalLI( pixs.Pointer, dir, type, hmax, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\warper.c (1019, 1)
' pixQuadraticVShear()
' pixQuadraticVShear(PIX *, l_int32, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) This gives a quadratic bending, upward or downward, as you
''' move to the left or right.
''' (2) If %dir == L_WARP_TO_LEFT, the right edge is unchanged, and
''' the left edge pixels are moved maximally up or down.
''' (3) Parameters %vmaxt and %vmaxb control the maximum amount of
''' vertical pixel shear at the top and bottom, respectively.
''' If %vmaxt GT 0, the vertical displacement of pixels at the
''' top is downward.  Likewise, if %vmaxb GT 0, the vertical
''' displacement of pixels at the bottom is downward.
''' (4) If %operation == L_SAMPLED, the dest pixels are taken from
''' the nearest src pixel.  Otherwise, we use linear interpolation
''' between pairs of sampled pixels.
''' (5) This is for quadratic shear.  For uniform (linear) shear,
''' use the standard shear operators.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 8 or 32 bpp</param>
'''  <param name="dir">[in] - L_WARP_TO_LEFT or L_WARP_TO_RIGHT</param>
'''  <param name="vmaxt">[in] - max vertical displacement at edge and at top</param>
'''  <param name="vmaxb">[in] - max vertical displacement at edge and at bottom</param>
'''  <param name="operation">[in] - L_SAMPLED or L_INTERPOLATED</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE or L_BRING_IN_BLACK</param>
'''   <returns>pixd stretched, or NULL on error</returns>
Public Shared Function pixQuadraticVShear(
				ByVal pixs as Pix, 
				ByVal dir as Enumerations.L_WARP_TO_T, 
				ByVal vmaxt as Integer, 
				ByVal vmaxb as Integer, 
				ByVal operation as Enumerations.L_ED, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixQuadraticVShear( pixs.Pointer, dir, vmaxt, vmaxb, operation, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\warper.c (1073, 1)
' pixQuadraticVShearSampled()
' pixQuadraticVShearSampled(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See pixQuadraticVShear() for details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 8 or 32 bpp</param>
'''  <param name="dir">[in] - L_WARP_TO_LEFT or L_WARP_TO_RIGHT</param>
'''  <param name="vmaxt">[in] - max vertical displacement at edge and at top</param>
'''  <param name="vmaxb">[in] - max vertical displacement at edge and at bottom</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE or L_BRING_IN_BLACK</param>
'''   <returns>pixd stretched, or NULL on error</returns>
Public Shared Function pixQuadraticVShearSampled(
				ByVal pixs as Pix, 
				ByVal dir as Enumerations.L_WARP_TO_T, 
				ByVal vmaxt as Integer, 
				ByVal vmaxb as Integer, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixQuadraticVShearSampled( pixs.Pointer, dir, vmaxt, vmaxb, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\warper.c (1179, 1)
' pixQuadraticVShearLI()
' pixQuadraticVShearLI(PIX *, l_int32, l_int32, l_int32, l_int32) as PIX *
'''  <summary>
''' Notes
''' (1) See pixQuadraticVShear() for details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 or 32 bpp, or colormapped</param>
'''  <param name="dir">[in] - L_WARP_TO_LEFT or L_WARP_TO_RIGHT</param>
'''  <param name="vmaxt">[in] - max vertical displacement at edge and at top</param>
'''  <param name="vmaxb">[in] - max vertical displacement at edge and at bottom</param>
'''  <param name="incolor">[in] - L_BRING_IN_WHITE or L_BRING_IN_BLACK</param>
'''   <returns>pixd stretched, or NULL on error</returns>
Public Shared Function pixQuadraticVShearLI(
				ByVal pixs as Pix, 
				ByVal dir as Enumerations.L_WARP_TO_T, 
				ByVal vmaxt as Integer, 
				ByVal vmaxb as Integer, 
				ByVal incolor as Enumerations.L_BRING_IN) as Pix

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixQuadraticVShearLI( pixs.Pointer, dir, vmaxt, vmaxb, incolor)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\warper.c (1332, 1)
' pixStereoFromPair()
' pixStereoFromPair(PIX *, PIX *, l_float32, l_float32, l_float32) as PIX *
'''  <summary>
''' Notes
''' (1) pix1 and pix2 are a pair of stereo images, ideally taken
''' concurrently in the same plane, with some lateral translation.
''' (2) The output red channel is determined from %pix1.
''' The output green and blue channels are taken from the green
''' and blue channels, respectively, of %pix2.
''' (3) The weights determine how much of each component in %pix1
''' goes into the output red channel.  The sum of weights
''' must be 1.0.  If it's not, we scale the weights to
''' satisfy this criterion.
''' (4) The most general pixel mapping allowed here is
''' rval = rwt  r1 + gwt  g1 + bwt  b1  (from pix1)
''' gval = g2   (from pix2)
''' bval = b2   (from pix2)
''' (5) The simplest method is to use rwt = 1.0, gwt = 0.0, bwt = 0.0,
''' but this causes unpleasant visual artifacts with red in the image.
''' Use of green and blue from %pix1 in the red channel,
''' instead of red, tends to fix that problem.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix1">[in] - 32 bpp rgb</param>
'''  <param name="pix2">[in] - 32 bpp rgb</param>
'''  <param name="rwt">[in] - weighting factors used for each component in                                pix1 to determine the output red channel</param>
'''  <param name="gwt">[in] - weighting factors used for each component in                                pix1 to determine the output red channel</param>
'''  <param name="bwt">[in] - weighting factors used for each component in                                pix1 to determine the output red channel</param>
'''   <returns>pixd stereo enhanced, or NULL on error</returns>
Public Shared Function pixStereoFromPair(
				ByVal pix1 as Pix, 
				ByVal pix2 as Pix, 
				ByVal rwt as Single, 
				ByVal gwt as Single, 
				ByVal bwt as Single) as Pix

	If IsNothing (pix1) then Throw New ArgumentNullException  ("pix1 cannot be Nothing")
	If IsNothing (pix2) then Throw New ArgumentNullException  ("pix2 cannot be Nothing")
	If IsNothing (rwt) then Throw New ArgumentNullException  ("rwt cannot be Nothing")
	If IsNothing (gwt) then Throw New ArgumentNullException  ("gwt cannot be Nothing")
	If IsNothing (bwt) then Throw New ArgumentNullException  ("bwt cannot be Nothing")
	If {32}.contains (pix1.d) = false then Throw New ArgumentException ("32 bpp rgb")
	If {32}.contains (pix2.d) = false then Throw New ArgumentException ("32 bpp rgb")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixStereoFromPair( pix1.Pointer, pix2.Pointer, rwt, gwt, bwt)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\watershed.c"
' SRC\watershed.c (203, 1)
' wshedCreate()
' wshedCreate(PIX *, PIX *, l_int32, l_int32) as L_WSHED *
'''  <summary>
''' Notes
''' (1) It is not necessary for the fg pixels in the seed image
''' be at minima, or that they be isolated.  We extract a
''' single pixel from each connected component, and a seed
''' anywhere in a watershed will eventually label the watershed
''' when the filling level reaches it.
''' (2) Set mindepth to some value to ignore noise in pixs that
''' can create small local minima.  Any watershed shallower
''' than mindepth, even if it has a seed, will not be saved;
''' It will either be incorporated in another watershed or
''' eliminated.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 8 bpp source</param>
'''  <param name="pixm">[in] - 1 bpp 'marker' seed</param>
'''  <param name="mindepth">[in] - minimum depth; anything less is not saved</param>
'''  <param name="debugflag">[in] - 1 for debug output</param>
'''   <returns>WShed, or NULL on error</returns>
Public Shared Function wshedCreate(
				ByVal pixs as Pix, 
				ByVal pixm as Pix, 
				ByVal mindepth as Integer, 
				ByVal debugflag as Integer) as L_WShed

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixm) then Throw New ArgumentNullException  ("pixm cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.wshedCreate( pixs.Pointer, pixm.Pointer, mindepth, debugflag)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new L_WShed(_Result)
End Function

' SRC\watershed.c (250, 1)
' wshedDestroy()
' wshedDestroy(L_WSHED **) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pwshed">[in,out] - will be set to null before returning</param>
Public Shared Sub wshedDestroy(
				ByRef pwshed as L_WShed)


	Dim pwshedPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pwshed) Then pwshedPTR = pwshed.Pointer

	LeptonicaSharp.Natives.wshedDestroy( pwshedPTR)
	if pwshedPTR <> IntPtr.Zero then pwshed = new L_WShed(pwshedPTR)

End Sub

' SRC\watershed.c (305, 1)
' wshedApply()
' wshedApply(L_WSHED *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="wshed">[in] - generated from wshedCreate()</param>
'''   <returns>0 if OK, 1 on error Iportant note 1 This is buggy.  It seems to locate watersheds that are duplicates.  The watershed extraction after complete fill grabs some regions belonging to existing watersheds. See prog/watershedtest.c for testing.</returns>
Public Shared Function wshedApply(
				ByVal wshed as L_WShed) as Integer

	If IsNothing (wshed) then Throw New ArgumentNullException  ("wshed cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.wshedApply( wshed.Pointer)

	Return _Result
End Function

' SRC\watershed.c (1034, 1)
' wshedBasins()
' wshedBasins(L_WSHED *, PIXA **, NUMA **) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="wshed">[in] - </param>
'''  <param name="ppixa">[out][optional] - mask of watershed basins</param>
'''  <param name="pnalevels">[out][optional] - watershed levels</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function wshedBasins(
				ByVal wshed as L_WShed, 
				ByRef ppixa as Pixa, 
				ByRef pnalevels as Numa) as Integer

	If IsNothing (wshed) then Throw New ArgumentNullException  ("wshed cannot be Nothing")

Dim ppixaPTR As IntPtr = IntPtr.Zero : If Not IsNothing(ppixa) Then ppixaPTR = ppixa.Pointer
Dim pnalevelsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pnalevels) Then pnalevelsPTR = pnalevels.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.wshedBasins( wshed.Pointer, ppixaPTR, pnalevelsPTR)
	if ppixaPTR <> IntPtr.Zero then ppixa = new Pixa(ppixaPTR)
	if pnalevelsPTR <> IntPtr.Zero then pnalevels = new Numa(pnalevelsPTR)

	Return _Result
End Function

' SRC\watershed.c (1058, 1)
' wshedRenderFill()
' wshedRenderFill(L_WSHED *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="wshed">[in] - </param>
'''   <returns>pixd initial image with all basins filled, or NULL on error</returns>
Public Shared Function wshedRenderFill(
				ByVal wshed as L_WShed) as Pix

	If IsNothing (wshed) then Throw New ArgumentNullException  ("wshed cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.wshedRenderFill( wshed.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\watershed.c (1094, 1)
' wshedRenderColors()
' wshedRenderColors(L_WSHED *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="wshed">[in] - </param>
'''   <returns>pixd initial image with all basins filled, or NULL on error</returns>
Public Shared Function wshedRenderColors(
				ByVal wshed as L_WShed) as Pix

	If IsNothing (wshed) then Throw New ArgumentNullException  ("wshed cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.wshedRenderColors( wshed.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

#End Region
#Region "SRC\webpiostub.c"
' SRC\webpiostub.c (45, 7)
' 
' pixReadStreamWebP(FILE *) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixReadStreamWebP(
				ByRef fp as FILE) as Pix

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")

Dim fpPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fp) Then fpPTR = fp.Pointer

	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadStreamWebP( fp.Pointer)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\webpiostub.c (52, 7)
' 
' pixReadMemWebP(const l_uint8 *, size_t) as PIX *
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixReadMemWebP(
				ByRef filedata as Byte(), 
				ByRef filesize as UInteger) as Pix

	If IsNothing (filedata) then Throw New ArgumentNullException  ("filedata cannot be Nothing")


	Dim _Result as IntPtr = LeptonicaSharp.Natives.pixReadMemWebP( filedata, filesize)
	If  _Result = IntPtr.Zero then Return Nothing

	Return  new Pix(_Result)
End Function

' SRC\webpiostub.c (59, 6)
' 
' readHeaderWebP(const char *, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function readHeaderWebP(
				ByRef filename as String, 
				ByRef pw as Object, 
				ByRef ph as Object, 
				ByRef pspp as Object) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (pw) then Throw New ArgumentNullException  ("pw cannot be Nothing")
	If IsNothing (ph) then Throw New ArgumentNullException  ("ph cannot be Nothing")
	If IsNothing (pspp) then Throw New ArgumentNullException  ("pspp cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.readHeaderWebP( filename, pw, ph, pspp)

	Return _Result
End Function

' SRC\webpiostub.c (67, 6)
' 
' readHeaderMemWebP(const l_uint8 *, size_t, l_int32 *, l_int32 *, l_int32 *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function readHeaderMemWebP(
				ByRef data as Byte(), 
				ByRef size as UInteger, 
				ByRef pw as Object, 
				ByRef ph as Object, 
				ByRef pspp as Object) as Integer

	If IsNothing (data) then Throw New ArgumentNullException  ("data cannot be Nothing")
	If IsNothing (pw) then Throw New ArgumentNullException  ("pw cannot be Nothing")
	If IsNothing (ph) then Throw New ArgumentNullException  ("ph cannot be Nothing")
	If IsNothing (pspp) then Throw New ArgumentNullException  ("pspp cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.readHeaderMemWebP( data, size, pw, ph, pspp)

	Return _Result
End Function

' SRC\webpiostub.c (75, 6)
' 
' pixWriteWebP(const char *, PIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixWriteWebP(
				ByRef filename as String, 
				ByRef pixs as Pix, 
				ByRef quality as Integer, 
				ByRef lossless as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")

Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteWebP( filename, pixs.Pointer, quality, lossless)

	Return _Result
End Function

' SRC\webpiostub.c (83, 6)
' 
' pixWriteStreamWebP(FILE *, PIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixWriteStreamWebP(
				ByRef fp as FILE, 
				ByRef pixs as Pix, 
				ByRef quality as Integer, 
				ByRef lossless as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim fpPTR As IntPtr = IntPtr.Zero : If Not IsNothing(fp) Then fpPTR = fp.Pointer
Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteStreamWebP( fp.Pointer, pixs.Pointer, quality, lossless)

	Return _Result
End Function

' SRC\webpiostub.c (91, 6)
' 
' pixWriteMemWebP(l_uint8 **, size_t *, PIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''   <returns></returns>
Public Shared Function pixWriteMemWebP(
				ByRef pencdata as Object, 
				ByRef pencsize as Object, 
				ByRef pixs as Pix, 
				ByRef quality as Integer, 
				ByRef lossless as Integer) as Integer

	If IsNothing (pencdata) then Throw New ArgumentNullException  ("pencdata cannot be Nothing")
	If IsNothing (pencsize) then Throw New ArgumentNullException  ("pencsize cannot be Nothing")
	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteMemWebP( pencdata, pencsize, pixs.Pointer, quality, lossless)

	Return _Result
End Function

#End Region
#Region "SRC\writefile.c"
' SRC\writefile.c (182, 1)
' l_jpegSetQuality()
' l_jpegSetQuality(l_int32) as l_int32
'''  <summary>
''' Notes
''' (1) This variable is used in pixWriteStream() and pixWriteMem(),
''' to control the jpeg quality.  The default is 75.
''' (2) It returns the previous quality, so for example
''' l_int32  prev = l_jpegSetQuality(85);  //sets to 85
''' pixWriteStream(...);
''' l_jpegSetQuality(prev);   // resets to previous value
''' (3) On error, logs a message and does not change the variable.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="new_quality">[in] - 1 - 100; 75 is default; 0 defaults to 75</param>
'''   <returns>prev           previous quality</returns>
Public Shared Function l_jpegSetQuality(
				ByVal new_quality as Integer) as Integer



	Dim _Result as Integer = LeptonicaSharp.Natives.l_jpegSetQuality( new_quality)

	Return _Result
End Function

' SRC\writefile.c (217, 1)
' setLeptDebugOK()
' setLeptDebugOK(l_int32) as void
'''  <summary>
''' Notes
''' (1) This sets or clears the global variable LeptDebugOK, to
''' control writing files in a temp directory with names that
''' are compiled in.
''' (2) The default in the library distribution is 0.  Call with
''' %allow = 1 for development and debugging.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="allow">[in] - TRUE (1) or FALSE (0)</param>
Public Shared Sub setLeptDebugOK(
				ByVal allow as Integer)



	LeptonicaSharp.Natives.setLeptDebugOK( allow)

End Sub

' SRC\writefile.c (242, 1)
' pixaWriteFiles()
' pixaWriteFiles(const char *, PIXA *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Use %format = IFF_DEFAULT to decide the output format
''' individually for each pix.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="rootname">[in] - </param>
'''  <param name="pixa">[in] - </param>
'''  <param name="format">[in] - defined in imageio.h; see notes for default</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixaWriteFiles(
				ByVal rootname as String, 
				ByVal pixa as Pixa, 
				ByVal format as Integer) as Integer

	If IsNothing (rootname) then Throw New ArgumentNullException  ("rootname cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixaWriteFiles( rootname, pixa.Pointer, format)

	Return _Result
End Function

' SRC\writefile.c (295, 1)
' pixWriteDebug()
' pixWriteDebug(const char *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Debug version, intended for use in the library when writing
''' to files in a temp directory with names that are compiled in.
''' This is used instead of pixWrite() for all such library calls.
''' (2) The global variable LeptDebugOK defaults to 0, and can be set
''' or cleared by the function setLeptDebugOK().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - </param>
'''  <param name="pix">[in] - </param>
'''  <param name="format">[in] - defined in imageio.h</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixWriteDebug(
				ByVal fname as String, 
				ByVal pix as Pix, 
				ByVal format as Integer) as Integer

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteDebug( fname, pix.Pointer, format)

	Return _Result
End Function

' SRC\writefile.c (332, 1)
' pixWrite()
' pixWrite(const char *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Open for write using binary mode (with the "b" flag)
''' to avoid having Windows automatically translate the NL
''' into CRLF, which corrupts image files.  On non-windows
''' systems this flag should be ignored, per ISO C90.
''' Thanks to Dave Bryan for pointing this out.
''' (2) If the default image format IFF_DEFAULT is requested
''' use the input format if known; otherwise, use a lossless format.
''' (3) The default jpeg quality is 75.  For some other value,
''' Use l_jpegSetQuality().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - </param>
'''  <param name="pix">[in] - </param>
'''  <param name="format">[in] - defined in imageio.h</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixWrite(
				ByVal fname as String, 
				ByVal pix as Pix, 
				ByVal format as Integer) as Integer

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWrite( fname, pix.Pointer, format)

	Return _Result
End Function

' SRC\writefile.c (365, 1)
' pixWriteAutoFormat()
' pixWriteAutoFormat(const char *, PIX *) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pix">[in] - </param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixWriteAutoFormat(
				ByVal filename as String, 
				ByVal pix as Pix) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteAutoFormat( filename, pix.Pointer)

	Return _Result
End Function

' SRC\writefile.c (392, 1)
' pixWriteStream()
' pixWriteStream(FILE *, PIX *, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fp">[in] - file stream</param>
'''  <param name="pix">[in] - </param>
'''  <param name="format">[in] - </param>
'''   <returns>0 if OK; 1 on error.</returns>
Public Shared Function pixWriteStream(
				ByVal fp as FILE, 
				ByVal pix as Pix, 
				ByVal format as Integer) as Integer

	If IsNothing (fp) then Throw New ArgumentNullException  ("fp cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteStream( fp.Pointer, pix.Pointer, format)

	Return _Result
End Function

' SRC\writefile.c (484, 1)
' pixWriteImpliedFormat()
' pixWriteImpliedFormat(const char *, PIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This determines the output format from the filename extension.
''' (2) The last two args are ignored except for requests for jpeg files.
''' (3) The jpeg default quality is 75.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''  <param name="pix">[in] - </param>
'''  <param name="quality">[in] - iff JPEG; 1 - 100, 0 for default</param>
'''  <param name="progressive">[in] - iff JPEG; 0 for baseline seq., 1 for progressive</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixWriteImpliedFormat(
				ByVal filename as String, 
				ByVal pix as Pix, 
				ByVal quality as Integer, 
				ByVal progressive as Integer) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteImpliedFormat( filename, pix.Pointer, quality, progressive)

	Return _Result
End Function

' SRC\writefile.c (549, 1)
' pixChooseOutputFormat()
' pixChooseOutputFormat(PIX *) as l_int32
'''  <summary>
''' Notes
''' (1) This should only be called if the requested format is IFF_DEFAULT.
''' (2) If the pix wasn't read from a file, its input format value
''' will be IFF_UNKNOWN, and in that case it is written out
''' in a compressed but lossless format.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''   <returns>output format, or 0 on error</returns>
Public Shared Function pixChooseOutputFormat(
				ByVal pix as Pix) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixChooseOutputFormat( pix.Pointer)

	Return _Result
End Function

' SRC\writefile.c (584, 1)
' getImpliedFileFormat()
' getImpliedFileFormat(const char *) as l_int32
'''  <summary>
''' Notes
''' (1) This determines the output file format from the extension
''' of the input filename.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="filename">[in] - </param>
'''   <returns>output format, or IFF_UNKNOWN on error or invalid extension.</returns>
Public Shared Function getImpliedFileFormat(
				ByVal filename as String) as Integer

	If IsNothing (filename) then Throw New ArgumentNullException  ("filename cannot be Nothing")
	If My.Computer.Filesystem.Fileexists (filename) = false then Throw New ArgumentException ("File is missing")


	Dim _Result as Integer = LeptonicaSharp.Natives.getImpliedFileFormat( filename)

	Return _Result
End Function

' SRC\writefile.c (625, 1)
' pixGetAutoFormat()
' pixGetAutoFormat(PIX *, l_int32 *) as l_ok
'''  <summary>
''' Notes
''' (1) The output formats are restricted to tiff, jpeg and png
''' because these are the most commonly used image formats and
''' the ones that are typically installed with leptonica.
''' (2) This decides what compression to use based on the pix.
''' It chooses tiff-g4 if 1 bpp without a colormap, jpeg with
''' quality 75 if grayscale, rgb or rgba (where it loses
''' the alpha layer), and lossless png for all other situations.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pix">[in] - </param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixGetAutoFormat(
				ByVal pix as Pix, 
				ByRef pformat as Object) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")
	If IsNothing (pformat) then Throw New ArgumentNullException  ("pformat cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixGetAutoFormat( pix.Pointer, pformat)

	Return _Result
End Function

' SRC\writefile.c (666, 1)
' getFormatExtension()
' getFormatExtension(l_int32) as const char *
'''  <summary>
''' Notes
''' (1) This string is NOT owned by the caller; it is just a pointer
''' to a global string.  Do not free it.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="format">[in] - integer</param>
'''   <returns>extension string, or NULL if format is out of range</returns>
Public Shared Function getFormatExtension(
				ByVal format as Integer) as String



	Dim _Result as String = LeptonicaSharp.Natives.getFormatExtension( format)

	Return _Result
End Function

' SRC\writefile.c (701, 1)
' pixWriteMem()
' pixWriteMem(l_uint8 **, size_t *, PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) On windows, this will only write tiff and PostScript to memory.
''' For other formats, it requires open_memstream(3).
''' (2) PostScript output is uncompressed, in hex ascii.
''' Most printers support level 2 compression (tiff_g4 for 1 bpp,
''' jpeg for 8 and 32 bpp).
''' (3) The default jpeg quality is 75.  For some other value,
''' Use l_jpegSetQuality().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pdata">[out] - data of tiff compressed image</param>
'''  <param name="psize">[out] - size of returned data</param>
'''  <param name="pix">[in] - </param>
'''  <param name="format">[in] - defined in imageio.h</param>
'''   <returns>0 if OK, 1 on error</returns>
Public Shared Function pixWriteMem(
				ByRef pdata as Byte(), 
				ByRef psize as UInteger, 
				ByVal pix as Pix, 
				ByVal format as Integer) as Integer

	If IsNothing (pix) then Throw New ArgumentNullException  ("pix cannot be Nothing")

	Dim pdataPTR As IntPtr = IntPtr.Zero

	Dim _Result as Integer = LeptonicaSharp.Natives.pixWriteMem( pdataPTR, psize, pix.Pointer, format)
	ReDim pdata(IIf(psize > 0, psize, 1) - 1) : If pdataPTR <> IntPtr.Zero Then Marshal.Copy(pdataPTR, pdata, 0, pdata.count)

	Return _Result
End Function

' SRC\writefile.c (801, 1)
' l_fileDisplay()
' l_fileDisplay(const char *, l_int32, l_int32, l_float32) as l_ok
'''  <summary>
''' Notes
''' (1) This is a convenient wrapper for displaying image files.
''' (2) It does nothing unless LeptDebugOK == TRUE.
''' (2) Set %scale = 0 to disable display.
''' (3) This downscales 1 bpp to gray.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="fname">[in] - </param>
'''  <param name="x">[in] - location of display frame on the screen</param>
'''  <param name="y">[in] - location of display frame on the screen</param>
'''  <param name="scale">[in] - scale factor (use 0 to skip display)</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function l_fileDisplay(
				ByVal fname as String, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal scale as Single) as Integer

	If IsNothing (fname) then Throw New ArgumentNullException  ("fname cannot be Nothing")
	If IsNothing (scale) then Throw New ArgumentNullException  ("scale cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.l_fileDisplay( fname, x, y, scale)

	Return _Result
End Function

' SRC\writefile.c (877, 1)
' pixDisplay()
' pixDisplay(PIX *, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) This is debugging code that displays an image on the screen.
''' It uses a static internal variable to number the output files
''' written by a single process.  Behavior with a shared library
''' may be unpredictable.
''' (2) It does nothing unless LeptDebugOK == TRUE.
''' (3) It uses these programs to display the image
''' On Unix xzgv, xli or xv
''' On Windows i_view
''' The display program must be on your $PATH variable.  It is
''' chosen by setting the global var_DISPLAY_PROG, using
''' l_chooseDisplayProg().  Default on Unix is xzgv.
''' (4) Images with dimensions larger than MAX_DISPLAY_WIDTH or
''' MAX_DISPLAY_HEIGHT are downscaled to fit those constraints.
''' This is particularly important for displaying 1 bpp images
''' with xv, because xv automatically downscales large images
''' by subsampling, which looks poor.  For 1 bpp, we use
''' scale-to-gray to get decent-looking anti-aliased images.
''' In all cases, we write a temporary file to /tmp/lept/disp,
''' that is read by the display program.
''' (5) The temporary file is written as png if, after initial
''' processing for special cases, any of these obtain
''' pix dimensions are smaller than some thresholds
''' pix depth is less than 8 bpp
''' pix is colormapped
''' (6) For spp == 4, we call pixDisplayLayersRGBA() to show 3
''' versions of the image the image with a fully opaque
''' alpha, the alpha, and the image as it would appear with
''' a white background.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="x">[in] - location of display frame on the screen</param>
'''  <param name="y">[in] - location of display frame on the screen</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixDisplay(
				ByRef pixs as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixDisplay( pixs.Pointer, x, y)

	Return _Result
End Function

' SRC\writefile.c (901, 1)
' pixDisplayWithTitle()
' pixDisplayWithTitle(PIX *, l_int32, l_int32, const char *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) See notes for pixDisplay().
''' (2) This displays the image if dispflag == 1; otherwise it punts.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="x">[in] - location of display frame</param>
'''  <param name="y">[in] - location of display frame</param>
'''  <param name="title">[in][optional] - on frame; can be NULL;</param>
'''  <param name="dispflag">[in] - 1 to write, else disabled</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixDisplayWithTitle(
				ByRef pixs as Pix, 
				ByVal x as Integer, 
				ByVal y as Integer, 
				ByVal title as String, 
				ByVal dispflag as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")

Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixDisplayWithTitle( pixs.Pointer, x, y, title, dispflag)

	Return _Result
End Function

' SRC\writefile.c (1077, 1)
' pixSaveTiled()
' pixSaveTiled(PIX *, PIXA *, l_float32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 32 bpp</param>
'''  <param name="pixa">[in] - the pix are accumulated here</param>
'''  <param name="scalefactor">[in] - 0.0 to disable; otherwise this is a scale factor</param>
'''  <param name="newrow">[in] - 0 if placed on the same row as previous; 1 otherwise</param>
'''  <param name="space">[in] - horizontal and vertical spacing, in pixels</param>
'''  <param name="dp">[in] - depth of pixa; 8 or 32 bpp; only used on first call</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function pixSaveTiled(
				ByVal pixs as Pix, 
				ByVal pixa as Pixa, 
				ByVal scalefactor as Single, 
				ByVal newrow as Integer, 
				ByVal space as Integer, 
				ByVal dp as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSaveTiled( pixs.Pointer, pixa.Pointer, scalefactor, newrow, space, dp)

	Return _Result
End Function

' SRC\writefile.c (1128, 1)
' pixSaveTiledOutline()
' pixSaveTiledOutline(PIX *, PIXA *, l_float32, l_int32, l_int32, l_int32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Before calling this function for the first time, use
''' pixaCreate() to make the %pixa that will accumulate the pix.
''' This is passed in each time pixSaveTiled() is called.
''' (2) %scalefactor scales the input image.  After scaling and
''' possible depth conversion, the image is saved in the input
''' pixa, along with a box that specifies the location to
''' place it when tiled later.  Disable saving the pix by
''' setting %scalefactor == 0.0.
''' (3) %newrow and %space specify the location of the new pix
''' with respect to the last one(s) that were entered.
''' (4) %dp specifies the depth at which all pix are saved.  It can
''' be only 8 or 32 bpp.  Any colormap is removed.  This is only
''' used at the first invocation.
''' (5) This function uses two variables from call to call.
''' If they were static, the function would not be .so or thread
''' safe, and furthermore, there would be interference with two or
''' more pixa accumulating images at a time.  Consequently,
''' we use the first pix in the pixa to store and obtain both
''' the depth and the current position of the bottom (one pixel
''' below the lowest image raster line when laid out using
''' the boxa).  The bottom variable is stored in the input format
''' field, which is the only field available for storing an int.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 32 bpp</param>
'''  <param name="pixa">[in] - the pix are accumulated here</param>
'''  <param name="scalefactor">[in] - 0.0 to disable; otherwise this is a scale factor</param>
'''  <param name="newrow">[in] - 0 if placed on the same row as previous; 1 otherwise</param>
'''  <param name="space">[in] - horizontal and vertical spacing, in pixels</param>
'''  <param name="linewidth">[in] - width of added outline for image; 0 for no outline</param>
'''  <param name="dp">[in] - depth of pixa; 8 or 32 bpp; only used on first call</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function pixSaveTiledOutline(
				ByVal pixs as Pix, 
				ByVal pixa as Pixa, 
				ByVal scalefactor as Single, 
				ByVal newrow as Integer, 
				ByVal space as Integer, 
				ByVal linewidth as Integer, 
				ByVal dp as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")
	If IsNothing (scalefactor) then Throw New ArgumentNullException  ("scalefactor cannot be Nothing")


	Dim _Result as Integer = LeptonicaSharp.Natives.pixSaveTiledOutline( pixs.Pointer, pixa.Pointer, scalefactor, newrow, space, linewidth, dp)

	Return _Result
End Function

' SRC\writefile.c (1258, 1)
' pixSaveTiledWithText()
' pixSaveTiledWithText(PIX *, PIXA *, l_int32, l_int32, l_int32, l_int32, L_BMF *, const char *, l_uint32, l_int32) as l_ok
'''  <summary>
''' Notes
''' (1) Before calling this function for the first time, use
''' pixaCreate() to make the %pixa that will accumulate the pix.
''' This is passed in each time pixSaveTiled() is called.
''' (2) %outwidth is the scaled width.  After scaling, the image is
''' saved in the input pixa, along with a box that specifies
''' the location to place it when tiled later.  Disable saving
''' the pix by setting %outwidth == 0.
''' (3) %newrow and %space specify the location of the new pix
''' with respect to the last one(s) that were entered.
''' (4) All pix are saved as 32 bpp RGB.
''' (5) If both %bmf and %textstr are defined, this generates a pix
''' with the additional text; otherwise, no text is written.
''' (6) The text is written before scaling, so it is properly
''' antialiased in the scaled pix.  However, if the pix on
''' different calls have different widths, the size of the
''' text will vary.
''' (7) See pixSaveTiledOutline() for other implementation details.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="pixs">[in] - 1, 2, 4, 8, 32 bpp</param>
'''  <param name="pixa">[in] - the pix are accumulated here; as 32 bpp</param>
'''  <param name="outwidth">[in] - in pixels; use 0 to disable entirely</param>
'''  <param name="newrow">[in] - 1 to start a new row; 0 to go on same row as previous</param>
'''  <param name="space">[in] - horizontal and vertical spacing, in pixels</param>
'''  <param name="linewidth">[in] - width of added outline for image; 0 for no outline</param>
'''  <param name="bmf">[in][optional] - font struct</param>
'''  <param name="textstr">[in][optional] - text string to be added</param>
'''  <param name="val">[in] - color to set the text</param>
'''  <param name="location">[in] - L_ADD_ABOVE, L_ADD_AT_TOP, L_ADD_AT_BOT, L_ADD_BELOW</param>
'''   <returns>0 if OK, 1 on error.</returns>
Public Shared Function pixSaveTiledWithText(
				ByVal pixs as Pix, 
				ByVal pixa as Pixa, 
				ByVal outwidth as Integer, 
				ByVal newrow as Integer, 
				ByVal space as Integer, 
				ByVal linewidth as Integer, 
				ByVal bmf as L_Bmf, 
				ByVal textstr as String, 
				ByVal val as UInteger, 
				ByVal location as Enumerations.L_ADD) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If IsNothing (pixa) then Throw New ArgumentNullException  ("pixa cannot be Nothing")

	Dim bmfPTR As IntPtr = IntPtr.Zero : If Not IsNothing(bmf) Then bmfPTR = bmf.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixSaveTiledWithText( pixs.Pointer, pixa.Pointer, outwidth, newrow, space, linewidth, bmfPTR, textstr, val, location)

	Return _Result
End Function

' SRC\writefile.c (1300, 1)
' 
' l_chooseDisplayProg(l_int32) as void
'''  <summary>
''' 
'''  </summary>
'''  <remarks>
'''  </remarks>
Public Shared Sub l_chooseDisplayProg(
				ByRef selection as Integer)



	LeptonicaSharp.Natives.l_chooseDisplayProg( selection)

End Sub

' SRC\writefile.c (1347, 1)
' pixDisplayWrite()
' pixDisplayWrite(PIX *, l_int32) as l_ok
'''  <summary>
''' Notes
''' (0) Deprecated.
''' (1) This is a simple interface for writing a set of files.
''' (2) This uses jpeg output for pix that are 32 bpp or 8 bpp
''' without a colormap; otherwise, it uses png.
''' (3) To erase any previously written files in the output directory
''' pixDisplayWrite(NULL, -1);
''' (4) If reduction GT 1 and depth == 1, this does a scale-to-gray
''' reduction.
''' (5) This function uses a static internal variable to number
''' output files written by a single process.  Behavior
''' with a shared library may be unpredictable.
''' (6) For 16 bpp, this displays the full dynamic range with log scale.
''' Alternative image transforms to generate 8 bpp pix are
''' pix8 = pixMaxDynamicRange(pixt, L_LINEAR_SCALE);
''' pix8 = pixConvert16To8(pixt, 0);  // low order byte
''' pix8 = pixConvert16To8(pixt, 1);  // high order byte
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="reduction">[in] - -1 to reset/erase; 0 to disable; otherwise this is a reduction factor</param>
'''   <returns>0 if OK; 1 on error</returns>
Public Shared Function pixDisplayWrite(
				ByRef pixs as Pix, 
				ByVal reduction as Integer) as Integer

	If IsNothing (pixs) then Throw New ArgumentNullException  ("pixs cannot be Nothing")
	If reduction > 2 and reduction < 16 then Throw New ArgumentException ("-1 to reset/erase; 0 to disable; otherwise this is a  factor")

Dim pixsPTR As IntPtr = IntPtr.Zero : If Not IsNothing(pixs) Then pixsPTR = pixs.Pointer

	Dim _Result as Integer = LeptonicaSharp.Natives.pixDisplayWrite( pixs.Pointer, reduction)

	Return _Result
End Function

#End Region
#Region "SRC\zlibmem.c"
' SRC\zlibmem.c (92, 1)
' zlibCompress()
' zlibCompress(l_uint8 *, size_t, size_t *) as l_uint8 *
'''  <summary>
''' Notes
''' (1) We repeatedly read in and fill up an input buffer,
''' compress the data, and read it back out.  zlib
''' uses two byte buffers internally in the z_stream
''' data structure.  We use the bbuffers to feed data
''' into the fixed bufferin, and feed it out of bufferout,
''' in the same way that a pair of streams would normally
''' be used if the data were being read from one file
''' and written to another.  This is done iteratively,
''' compressing L_BUF_SIZE bytes of input data at a time.
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="datain">[in] - byte buffer with input data</param>
'''  <param name="nin">[in] - number of bytes of input data</param>
'''  <param name="pnout">[out] - number of bytes of output data</param>
'''   <returns>dataout compressed data, or NULL on error</returns>
Public Shared Function zlibCompress(
				ByVal datain as Byte(), 
				ByVal nin as UInteger, 
				ByRef pnout as UInteger) as Byte()

	If IsNothing (datain) then Throw New ArgumentNullException  ("datain cannot be Nothing")


	Dim _Result as Byte() = LeptonicaSharp.Natives.zlibCompress( datain, nin, pnout)

	Return _Result
End Function

' SRC\zlibmem.c (198, 1)
' zlibUncompress()
' zlibUncompress(l_uint8 *, size_t, size_t *) as l_uint8 *
'''  <summary>
''' Notes
''' (1) See zlibCompress().
'''  </summary>
'''  <remarks>
'''  </remarks>
'''  <param name="datain">[in] - byte buffer with compressed input data</param>
'''  <param name="nin">[in] - number of bytes of input data</param>
'''  <param name="pnout">[out] - number of bytes of output data</param>
'''   <returns>dataout uncompressed data, or NULL on error</returns>
Public Shared Function zlibUncompress(
				ByVal datain as Byte(), 
				ByVal nin as UInteger, 
				ByRef pnout as UInteger) as Byte()

	If IsNothing (datain) then Throw New ArgumentNullException  ("datain cannot be Nothing")


	Dim _Result as Byte() = LeptonicaSharp.Natives.zlibUncompress( datain, nin, pnout)

	Return _Result
End Function

#End Region

End Class
